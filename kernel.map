
kernel.elf:     format de fichier elf64-x86-64
architecture: i386:x86-64, fanions 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adresse de départ 0xffffffff80102362

Contenu de la section .stivalehdr :
 ffffffff80100000 00501180 ffffffff 00000000 00000000  .P..............
 ffffffff80100010 00000000 00000000                    ........        
Contenu de la section .text :
 ffffffff80101000 f30f1efa 554889e5 4883ec18 48897de8  ....UH..H...H.}.
 ffffffff80101010 48c745f8 00800b00 488b45f8 66c70068  H.E.....H.E.f..h
 ffffffff80101020 02488b45 f84883c0 0266c700 6502488b  .H.E.H...f..e.H.
 ffffffff80101030 45f84883 c00466c7 00650248 8b45f848  E.H...f..e.H.E.H
 ffffffff80101040 83c00666 c7006502 488b45f8 4883c008  ...f..e.H.E.H...
 ffffffff80101050 66c7006f 02f490c9 c3662e0f 1f840000  f..o.....f......
 ffffffff80101060 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101070 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101080 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101090 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801010a0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801010b0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801010c0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801010d0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801010e0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801010f0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101100 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101110 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101120 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101130 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101140 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101150 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101160 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101170 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101180 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101190 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801011a0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801011b0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801011c0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801011d0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801011e0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801011f0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101200 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101210 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101220 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101230 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101240 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101250 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101260 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101270 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101280 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101290 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801012a0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801012b0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801012c0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801012d0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801012e0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801012f0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101300 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101310 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101320 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101330 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101340 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101350 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101360 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101370 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101380 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101390 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801013a0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801013b0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801013c0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801013d0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801013e0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801013f0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101400 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101410 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101420 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101430 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101440 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101450 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101460 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101470 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101480 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101490 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801014a0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801014b0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801014c0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801014d0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801014e0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801014f0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101500 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101510 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101520 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101530 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101540 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101550 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101560 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101570 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101580 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101590 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801015a0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801015b0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801015c0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801015d0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801015e0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801015f0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101600 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101610 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101620 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101630 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101640 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101650 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101660 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101670 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101680 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101690 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801016a0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801016b0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801016c0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801016d0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801016e0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801016f0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101700 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101710 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101720 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101730 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101740 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101750 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101760 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101770 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101780 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101790 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801017a0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801017b0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801017c0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801017d0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801017e0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801017f0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101800 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101810 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101820 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101830 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101840 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101850 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101860 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101870 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101880 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101890 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801018a0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801018b0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801018c0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801018d0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801018e0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801018f0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101900 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101910 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101920 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101930 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101940 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101950 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101960 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101970 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101980 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101990 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801019a0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801019b0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801019c0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801019d0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801019e0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801019f0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101a00 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101a10 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101a20 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101a30 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101a40 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101a50 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101a60 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101a70 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101a80 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101a90 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101aa0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ab0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ac0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101ad0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ae0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101af0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101b00 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101b10 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101b20 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101b30 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101b40 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101b50 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101b60 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101b70 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101b80 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101b90 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ba0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101bb0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101bc0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101bd0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101be0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101bf0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101c00 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101c10 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101c20 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101c30 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101c40 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101c50 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101c60 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101c70 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101c80 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101c90 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ca0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101cb0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101cc0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101cd0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ce0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101cf0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101d00 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101d10 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101d20 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101d30 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101d40 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101d50 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101d60 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101d70 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101d80 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101d90 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101da0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101db0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101dc0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101dd0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101de0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101df0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101e00 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101e10 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101e20 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101e30 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101e40 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101e50 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101e60 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101e70 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101e80 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101e90 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ea0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101eb0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ec0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ed0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101ee0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ef0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101f00 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101f10 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101f20 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101f30 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101f40 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101f50 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101f60 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101f70 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101f80 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101f90 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101fa0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101fb0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101fc0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101fd0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101fe0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101ff0 2e0f1f84 00000000 000f1f80 00000000  ................
 ffffffff80102000 f30f1efa 554889e5 4883ec28 48897de8  ....UH..H..(H.}.
 ffffffff80102010 89f089d6 89ca6689 45e489f0 8845e089  ......f.E....E..
 ffffffff80102020 d08845dc 0fb745e4 4883e0f8 4889c248  ..E...E.H...H..H
 ffffffff80102030 8b45e848 01d04889 45f8488b 45f80fb6  .E.H..H.E.H.E...
 ffffffff80102040 55e08850 050fb645 dcc1e004 83c80f89  U..P...E........
 ffffffff80102050 c2488b45 f8885006 488b45f8 66c700ff  .H.E..P.H.E.f...
 ffffffff80102060 ff90c9c3 f30f1efa 554889e5 4883ec38  ........UH..H..8
 ffffffff80102070 48897de8 89f089d6 89ca4c89 45d04c89  H.}.......L.E.L.
 ffffffff80102080 4dc86689 45e489f0 8845e089 d08845dc  M.f.E....E....E.
 ffffffff80102090 0fb745e4 4883e0f8 4889c248 8b45e848  ..E.H...H..H.E.H
 ffffffff801020a0 01d04889 45f8488b 45f80fb6 55e08850  ..H.E.H.E...U..P
 ffffffff801020b0 050fb645 dcc1e004 89c2488b 45c848c1  ...E......H.E.H.
 ffffffff801020c0 e81083e0 0f09c248 8b45f888 5006488b  .......H.E..P.H.
 ffffffff801020d0 45c889c2 488b45f8 66891048 8b45d089  E...H.E.f..H.E..
 ffffffff801020e0 c2488b45 f8668950 02488b45 d048c1e8  .H.E.f.P.H.E.H..
 ffffffff801020f0 1089c248 8b45f888 5004488b 45d048c1  ...H.E..P.H.E.H.
 ffffffff80102100 e81889c2 488b45f8 88500748 8b45d048  ....H.E..P.H.E.H
 ffffffff80102110 c1e82089 c2488b45 f8895008 488b45f8  .. ..H.E..P.H.E.
 ffffffff80102120 c7400c00 00000090 c9c3f30f 1efa5548  .@............UH
 ffffffff80102130 89e54883 ec1048b8 20721080 ffffffff  ..H...H. r......
 ffffffff80102140 488945f8 488b45f8 4883c06f 488945f0  H.E.H.E.H..oH.E.
 ffffffff80102150 be008000 0048bf20 701080ff ffffff48  .....H. p......H
 ffffffff80102160 b8554810 80ffffff ffffd0b9 02000000  .UH.............
 ffffffff80102170 ba980000 00be0800 000048bf 20701080  ..........H. p..
 ffffffff80102180 ffffffff 48b80020 1080ffff ffffffd0  ....H.. ........
 ffffffff80102190 b9000000 00ba9200 0000be10 00000048  ...............H
 ffffffff801021a0 bf207010 80ffffff ff48b800 201080ff  . p......H.. ...
 ffffffff801021b0 ffffffff d0b90000 0000baf2 000000be  ................
 ffffffff801021c0 18000000 48bf2070 1080ffff ffff48b8  ....H. p......H.
 ffffffff801021d0 00201080 ffffffff ffd0b902 000000ba  . ..............
 ffffffff801021e0 f8000000 be200000 0048bf20 701080ff  ..... ...H. p...
 ffffffff801021f0 ffffff48 b8002010 80ffffff ffffd048  ...H.. ........H
 ffffffff80102200 8b55f048 8b45f849 89d14989 c0b90000  .U.H.E.I..I.....
 ffffffff80102210 0000ba89 000000be 28000000 48bf2070  ........(...H. p
 ffffffff80102220 1080ffff ffff48b8 64201080 ffffffff  ......H.d ......
 ffffffff80102230 ffd048ba 20701080 ffffffff 48b80070  ..H. p......H..p
 ffffffff80102240 1080ffff ffff4889 500248b8 00701080  ......H.P.H..p..
 ffffffff80102250 ffffffff 66c700ff 0dba1000 0000be08  ....f...........
 ffffffff80102260 00000048 bf007010 80ffffff ff48b830  ...H..p......H.0
 ffffffff80102270 481080ff ffffffff d090c9c3 f30f1efa  H...............
 ffffffff80102280 554889e5 4883ec10 48897df8 be700000  UH..H...H.}..p..
 ffffffff80102290 0048bf20 721080ff ffffff48 b8554810  .H. r......H.UH.
 ffffffff801022a0 80ffffff ffffd048 b8207210 80ffffff  .......H. r.....
 ffffffff801022b0 ff66c740 666f0048 b8008010 80ffffff  .f.@fo.H........
 ffffffff801022c0 ff488d90 e03f0000 48b82072 1080ffff  .H...?..H. r....
 ffffffff801022d0 ffff4889 500448b8 00c01080 ffffffff  ..H.P.H.........
 ffffffff801022e0 488d90e0 3f000048 b8207210 80ffffff  H...?..H. r.....
 ffffffff801022f0 ff488950 0c48b800 001180ff ffffff48  .H.P.H.........H
 ffffffff80102300 8d90e03f 000048b8 20721080 ffffffff  ...?..H. r......
 ffffffff80102310 48895014 66b82800 0f00d890 c9c3f30f  H.P.f.(.........
 ffffffff80102320 1efa5548 89e54883 ec084889 7df848ba  ..UH..H...H.}.H.
 ffffffff80102330 20721080 ffffffff 488b45f8 48894204   r......H.E.H.B.
 ffffffff80102340 90c9c3f3 0f1efa55 4889e548 83ec1048  .......UH..H...H
 ffffffff80102350 897df848 b82a2110 80ffffff ffffd090  .}.H.*!.........
 ffffffff80102360 c9c3f30f 1efa5548 89e54883 ec104889  ......UH..H...H.
 ffffffff80102370 7df84883 e4f0bff8 03000048 b8254410  }.H........H.%D.
 ffffffff80102380 80ffffff ffffd048 bf005010 80ffffff  .......H..P.....
 ffffffff80102390 ff48b85b 431080ff ffffffff d048bf0c  .H.[C........H..
 ffffffff801023a0 501080ff ffffff48 b85b4310 80ffffff  P......H.[C.....
 ffffffff801023b0 ffffd048 b8004011 80ffffff ff480500  ...H..@......H..
 ffffffff801023c0 10000048 89c748b8 43231080 ffffffff  ...H..H.C#......
 ffffffff801023d0 ffd048bf 15501080 ffffffff 48b85b43  ..H..P......H.[C
 ffffffff801023e0 1080ffff ffffffd0 48bf2450 1080ffff  ........H.$P....
 ffffffff801023f0 ffff48b8 5b431080 ffffffff ffd048b8  ..H.[C........H.
 ffffffff80102400 22391080 ffffffff ffd048bf 2d501080  "9........H.-P..
 ffffffff80102410 ffffffff 48b85b43 1080ffff ffffffd0  ....H.[C........
 ffffffff80102420 48bf3c50 1080ffff ffff48b8 5b431080  H.<P......H.[C..
 ffffffff80102430 ffffffff ffd048b8 00401180 ffffffff  ......H..@......
 ffffffff80102440 48050010 00004889 c748b87c 221080ff  H.....H..H.|"...
 ffffffff80102450 ffffffff d048bf45 501080ff ffffff48  .....H.EP......H
 ffffffff80102460 b85b4310 80ffffff ffffd048 bf535010  .[C........H.SP.
 ffffffff80102470 80ffffff ff48b85b 431080ff ffffffff  .....H.[C.......
 ffffffff80102480 d0488b45 f84889c7 48b81235 1080ffff  .H.E.H..H..5....
 ffffffff80102490 ffffffd0 488b45f8 4889c748 b8001010  ....H.E.H..H....
 ffffffff801024a0 80ffffff ffffd090 c9c3f30f 1efa5548  ..............UH
 ffffffff801024b0 89e54883 ec284889 7de88975 e4488955  ..H..(H.}..u.H.U
 ffffffff801024c0 d8c745fc 00000000 8b45fc48 3945d87e  ..E......E.H9E.~
 ffffffff801024d0 158b55fc 488b45e8 4801d08b 55e48810  ..U.H.E.H...U...
 ffffffff801024e0 8345fc01 ebe2488b 45e8c9c3 f30f1efa  .E....H.E.......
 ffffffff801024f0 554889e5 4883ec38 48897dd8 488975d0  UH..H..8H.}.H.u.
 ffffffff80102500 488955c8 488b45d8 488945e8 488b45d0  H.U.H.E.H.E.H.E.
 ffffffff80102510 488945e0 488b45c8 4883f803 762a488b  H.E.H.E.H...v*H.
 ffffffff80102520 45e0488d 50044889 55e08b10 488b45e8  E.H.P.H.U...H.E.
 ffffffff80102530 488d4804 48894de8 8910488b 45c84883  H.H.H.M...H.E.H.
 ffffffff80102540 e8044889 45c8ebcc 488b45e8 488945f8  ..H.E...H.E.H.E.
 ffffffff80102550 488b45e0 488945f0 48837dc8 007e2448  H.E.H.E.H.}..~$H
 ffffffff80102560 8b45f048 8d500148 8955f00f b610488b  .E.H.P.H.U....H.
 ffffffff80102570 45f8488d 48014889 4df88810 48836dc8  E.H.H.H.M...H.m.
 ffffffff80102580 01ebd548 8b45d8c9 c3f30f1e fa554889  ...H.E.......UH.
 ffffffff80102590 e54883ec 20897dec 8b45ec83 c0288945  .H.. .}..E...(.E
 ffffffff801025a0 fc8345fc 2848b800 601080ff ffffff8b  ..E.(H..`.......
 ffffffff801025b0 088b45fc ba000000 00f7f189 d085c075  ..E............u
 ffffffff801025c0 1b48b800 601080ff ffffff8b 308b45fc  .H..`.......0.E.
 ffffffff801025d0 ba000000 00f7f689 45fceb1c 48b80060  ........E...H..`
 ffffffff801025e0 1080ffff ffff8b08 8b45fcba 00000000  .........E......
 ffffffff801025f0 f7f183c0 018945fc 48b80460 1080ffff  ......E.H..`....
 ffffffff80102600 ffff8b00 3945fc73 0f48b804 601080ff  ....9E.s.H..`...
 ffffffff80102610 ffffff8b 008945fc 8b45fc89 c748b8ae  ......E..E...H..
 ffffffff80102620 481080ff ffffffff d0488945 f048837d  H........H.E.H.}
 ffffffff80102630 f0007525 48b82050 1180ffff ffff488b  ..u%H. P......H.
 ffffffff80102640 00488d50 0148b820 501180ff ffffff48  .H.P.H. P......H
 ffffffff80102650 8910b800 000000eb 7b488b45 f048c700  ........{H.E.H..
 ffffffff80102660 00000000 488b45f0 48c74008 00000000  ....H.E.H.@.....
 ffffffff80102670 488b45f0 8b55fc89 501048b8 00601080  H.E..U..P.H..`..
 ffffffff80102680 ffffffff 8b000faf 45fc89c2 488b45f0  ........E...H.E.
 ffffffff80102690 89501448 8b45f0c7 40182800 0000488b  .P.H.E..@.(...H.
 ffffffff801026a0 45f048c7 40200000 0000488b 45f08b40  E.H.@ ....H.E..@
 ffffffff801026b0 1489c248 b8105011 80ffffff ff488b00  ...H..P......H..
 ffffffff801026c0 4801c248 b8105011 80ffffff ff488910  H..H..P......H..
 ffffffff801026d0 488b45f0 c9c3f30f 1efa5548 89e54883  H.E.......UH..H.
 ffffffff801026e0 ec704889 7d98c745 fc000000 0048c745  .pH.}..E.....H.E
 ffffffff801026f0 f0000000 0048c745 e8000000 00488b45  .....H.E.....H.E
 ffffffff80102700 98488945 b0488345 b02048b8 96481080  .H.E.H.E. H..H..
 ffffffff80102710 ffffffff ffd04883 7db00075 4048b820  ......H.}..u@H. 
 ffffffff80102720 501180ff ffffff48 8b00488d 500148b8  P......H..H.P.H.
 ffffffff80102730 20501180 ffffffff 48891048 b8a24810   P......H..H..H.
 ffffffff80102740 80ffffff ffffd0bf 01000000 48b8d626  ............H..&
 ffffffff80102750 1080ffff ffffffd0 e9bf0700 0048b800  .............H..
 ffffffff80102760 501180ff ffffff48 8b004885 c0754748  P......H..H..uGH
 ffffffff80102770 8b45b089 c748b889 251080ff ffffffff  .E...H..%.......
 ffffffff80102780 d048ba00 501180ff ffffff48 890248b8  .H..P......H..H.
 ffffffff80102790 00501180 ffffffff 488b0048 85c07516  .P......H..H..u.
 ffffffff801027a0 48b8a248 1080ffff ffffffd0 b8000000  H..H............
 ffffffff801027b0 00e96607 000048b8 00501180 ffffffff  ..f...H..P......
 ffffffff801027c0 488b0048 8945e0c7 45fc0000 000048b8  H..H.E..E.....H.
 ffffffff801027d0 08501180 ffffffff 488b0048 85c07450  .P......H..H..tP
 ffffffff801027e0 48b80850 1180ffff ffff488b 008b5014  H..P......H...P.
 ffffffff801027f0 48b80850 1180ffff ffff488b 008b4018  H..P......H...@.
 ffffffff80102800 29c289d0 89c04889 45f0488b 45b04883  ).....H.E.H.E.H.
 ffffffff80102810 c0284839 45f07618 48b80850 1180ffff  .(H9E.v.H..P....
 ffffffff80102820 ffff488b 00488945 e0c745fc 01000000  ..H..H.E..E.....
 ffffffff80102830 48837de0 000f84d0 06000048 8b45e08b  H.}........H.E..
 ffffffff80102840 5014488b 45e08b40 1829c289 d089c048  P.H.E..@.).....H
 ffffffff80102850 8945a848 8b45f048 3b45a873 1948ba08  .E.H.E.H;E.s.H..
 ffffffff80102860 501180ff ffffff48 8b45e048 8902488b  P......H.E.H..H.
 ffffffff80102870 45a84889 45f0488b 45b04883 c0284839  E.H.E.H.E.H..(H9
 ffffffff80102880 45a80f83 87000000 488b45e0 488b4008  E.......H.E.H.@.
 ffffffff80102890 4885c074 11488b45 e0488b40 08488945  H..t.H.E.H.@.H.E
 ffffffff801028a0 e0e95c06 0000837d fc01751d 48b80050  ..\....}..u.H..P
 ffffffff801028b0 1180ffff ffff488b 00488945 e0c745fc  ......H..H.E..E.
 ffffffff801028c0 00000000 e9390600 00488b45 b089c748  .....9...H.E...H
 ffffffff801028d0 b8892510 80ffffff ffffd048 8b55e048  ..%........H.U.H
 ffffffff801028e0 89420848 8b45e048 8b400848 85c00f84  .B.H.E.H.@.H....
 ffffffff801028f0 13060000 488b45e0 488b4008 488b55e0  ....H.E.H.@.H.U.
 ffffffff80102900 48891048 8b45e048 8b400848 8945e048  H..H.E.H.@.H.E.H
 ffffffff80102910 8b45e048 8b402048 85c00f85 17010000  .E.H.@ H........
 ffffffff80102920 488b45e0 4883c028 4889c248 8b45e048  H.E.H..(H..H.E.H
 ffffffff80102930 89502048 8b45e048 8b4020c7 4018dec0  .P H.E.H.@ .@...
 ffffffff80102940 01c0488b 45e0488b 402048c7 00000000  ..H.E.H.@ H.....
 ffffffff80102950 00488b45 e0488b40 2048c740 08000000  .H.E.H.@ H.@....
 ffffffff80102960 00488b45 e0488b40 20488b55 e0488950  .H.E.H.@ H.U.H.P
 ffffffff80102970 10488b45 e0488b40 20488b55 b089501c  .H.E.H.@ H.U..P.
 ffffffff80102980 488b45e0 488b4020 488b5598 89502048  H.E.H.@ H.U..P H
 ffffffff80102990 8b45e08b 4018488b 55b001d0 8d502848  .E..@.H.U....P(H
 ffffffff801029a0 8b45e089 501848b8 18501180 ffffffff  .E..P.H..P......
 ffffffff801029b0 488b1048 8b45b048 01c248b8 18501180  H..H.E.H..H..P..
 ffffffff801029c0 ffffffff 48891048 8b45e048 8b402048  ....H..H.E.H.@ H
 ffffffff801029d0 83c02848 8945e848 8b45e848 83c01048  ..(H.E.H.E.H...H
 ffffffff801029e0 8945e848 8b45e883 e00f4889 45d04883  .E.H.E....H.E.H.
 ffffffff801029f0 7dd00074 1cb81000 0000482b 45d04889  }..t......H+E.H.
 ffffffff80102a00 45d0488b 55e8488b 45d04801 d0488945  E.H.U.H.E.H..H.E
 ffffffff80102a10 e8488b45 d08d5010 488b45e8 4883e810  .H.E..P.H.E.H...
 ffffffff80102a20 881048b8 a2481080 ffffffff ffd0488b  ..H..H........H.
 ffffffff80102a30 45e8e9e5 04000048 8b45e048 8b402048  E......H.E.H.@ H
 ffffffff80102a40 8945a848 8b45e048 2945a848 836da828  .E.H.E.H)E.H.m.(
 ffffffff80102a50 488b45b0 4883c028 483945a8 0f823101  H.E.H..(H9E...1.
 ffffffff80102a60 0000488b 45e0488d 5028488b 45e0488b  ..H.E.H.P(H.E.H.
 ffffffff80102a70 40204889 10488b45 e0488b40 20488b00  @ H..H.E.H.@ H..
 ffffffff80102a80 488b55e0 488b5220 48895008 488b45e0  H.U.H.R H.P.H.E.
 ffffffff80102a90 488b4020 488b1048 8b45e048 89502048  H.@ H..H.E.H.P H
 ffffffff80102aa0 8b45e048 8b4020c7 4018dec0 01c0488b  .E.H.@ .@.....H.
 ffffffff80102ab0 45e0488b 402048c7 00000000 00488b45  E.H.@ H......H.E
 ffffffff80102ac0 e0488b40 20488b55 e0488950 10488b45  .H.@ H.U.H.P.H.E
 ffffffff80102ad0 e0488b40 20488b55 b089501c 488b45e0  .H.@ H.U..P.H.E.
 ffffffff80102ae0 488b4020 488b5598 89502048 8b45e08b  H.@ H.U..P H.E..
 ffffffff80102af0 4018488b 55b001d0 8d502848 8b45e089  @.H.U....P(H.E..
 ffffffff80102b00 501848b8 18501180 ffffffff 488b1048  P.H..P......H..H
 ffffffff80102b10 8b45b048 01c248b8 18501180 ffffffff  .E.H..H..P......
 ffffffff80102b20 48891048 8b45e048 8b402048 83c02848  H..H.E.H.@ H..(H
 ffffffff80102b30 8945e848 8b45e848 83c01048 8945e848  .E.H.E.H...H.E.H
 ffffffff80102b40 8b45e883 e00f4889 45c84883 7dc80074  .E....H.E.H.}..t
 ffffffff80102b50 1cb81000 0000482b 45c84889 45c8488b  ......H+E.H.E.H.
 ffffffff80102b60 55e8488b 45c84801 d0488945 e8488b45  U.H.E.H..H.E.H.E
 ffffffff80102b70 c88d5010 488b45e8 4883e810 881048b8  ..P.H.E.H.....H.
 ffffffff80102b80 a2481080 ffffffff ffd0488b 45e8e989  .H........H.E...
 ffffffff80102b90 03000048 8b45e048 8b402048 8945d848  ...H.E.H.@ H.E.H
 ffffffff80102ba0 837dd800 0f84e902 0000488b 45d8488b  .}........H.E.H.
 ffffffff80102bb0 40084885 c00f855b 01000048 8b45e08b  @.H....[...H.E..
 ffffffff80102bc0 401489c2 488b45e0 4801d048 8945a848  @...H.E.H..H.E.H
 ffffffff80102bd0 8b45d848 2945a848 836da828 488b45d8  .E.H)E.H.m.(H.E.
 ffffffff80102be0 8b401c89 c0482945 a8488b45 b04883c0  .@...H)E.H.E.H..
 ffffffff80102bf0 28483945 a80f821b 01000048 8b45d88b  (H9E.......H.E..
 ffffffff80102c00 401c89c2 488b45d8 4801d048 83c02848  @...H.E.H..H..(H
 ffffffff80102c10 89c2488b 45d84889 5008488b 45d8488b  ..H.E.H.P.H.E.H.
 ffffffff80102c20 4008488b 55d84889 10488b45 d8488b40  @.H.U.H..H.E.H.@
 ffffffff80102c30 08488945 d8488b45 d848c740 08000000  .H.E.H.E.H.@....
 ffffffff80102c40 00488b45 d8c74018 dec001c0 488b45d8  .H.E..@.....H.E.
 ffffffff80102c50 488b55e0 48895010 488b45b0 89c2488b  H.U.H.P.H.E...H.
 ffffffff80102c60 45d88950 1c488b45 9889c248 8b45d889  E..P.H.E...H.E..
 ffffffff80102c70 5020488b 45e08b40 18488b55 b001d08d  P H.E..@.H.U....
 ffffffff80102c80 5028488b 45e08950 1848b818 501180ff  P(H.E..P.H..P...
 ffffffff80102c90 ffffff48 8b10488b 45b04801 c248b818  ...H..H.E.H..H..
 ffffffff80102ca0 501180ff ffffff48 8910488b 45d84883  P......H..H.E.H.
 ffffffff80102cb0 c0284889 45e8488b 45e84883 c0104889  .(H.E.H.E.H...H.
 ffffffff80102cc0 45e8488b 45e883e0 0f488945 c048837d  E.H.E....H.E.H.}
 ffffffff80102cd0 c000741c b8100000 00482b45 c0488945  ..t......H+E.H.E
 ffffffff80102ce0 c0488b55 e8488b45 c04801d0 488945e8  .H.U.H.E.H..H.E.
 ffffffff80102cf0 488b45c0 8d501048 8b45e848 83e81088  H.E..P.H.E.H....
 ffffffff80102d00 1048b8a2 481080ff ffffffff d0488b45  .H..H........H.E
 ffffffff80102d10 e8e90602 0000488b 45d8488b 40084885  ......H.E.H.@.H.
 ffffffff80102d20 c00f845b 01000048 8b45d848 8b400848  ...[...H.E.H.@.H
 ffffffff80102d30 8945a848 8b45d848 2945a848 836da828  .E.H.E.H)E.H.m.(
 ffffffff80102d40 488b45d8 8b401c89 c0482945 a8488b45  H.E..@...H)E.H.E
 ffffffff80102d50 b04883c0 28483945 a80f8223 01000048  .H..(H9E...#...H
 ffffffff80102d60 8b45d88b 401c89c2 488b45d8 4801d048  .E..@...H.E.H..H
 ffffffff80102d70 83c02848 8945a048 8b45a0c7 4018dec0  ..(H.E.H.E..@...
 ffffffff80102d80 01c0488b 45d8488b 5008488b 45a04889  ..H.E.H.P.H.E.H.
 ffffffff80102d90 5008488b 45a0488b 55d84889 10488b45  P.H.E.H.U.H..H.E
 ffffffff80102da0 b089c248 8b45a089 501c488b 459889c2  ...H.E..P.H.E...
 ffffffff80102db0 488b45a0 89502048 8b45a048 8b55e048  H.E..P H.E.H.U.H
 ffffffff80102dc0 89501048 8b45d848 8b400848 8b55a048  .P.H.E.H.@.H.U.H
 ffffffff80102dd0 8910488b 45d8488b 55a04889 5008488b  ..H.E.H.U.H.P.H.
 ffffffff80102de0 45e08b40 18488b55 b001d08d 5028488b  E..@.H.U....P(H.
 ffffffff80102df0 45e08950 1848b818 501180ff ffffff48  E..P.H..P......H
 ffffffff80102e00 8b10488b 45b04801 c248b818 501180ff  ..H.E.H..H..P...
 ffffffff80102e10 ffffff48 8910488b 45a04883 c0284889  ...H..H.E.H..(H.
 ffffffff80102e20 45e8488b 45e84883 c0104889 45e8488b  E.H.E.H...H.E.H.
 ffffffff80102e30 45e883e0 0f488945 b848837d b800741c  E....H.E.H.}..t.
 ffffffff80102e40 b8100000 00482b45 b8488945 b8488b55  .....H+E.H.E.H.U
 ffffffff80102e50 e8488b45 b84801d0 488945e8 488b45b8  .H.E.H..H.E.H.E.
 ffffffff80102e60 8d501048 8b45e848 83e81088 1048b8a2  .P.H.E.H.....H..
 ffffffff80102e70 481080ff ffffffff d0488b45 e8e99a00  H........H.E....
 ffffffff80102e80 0000488b 45d8488b 40084889 45d8e90c  ..H.E.H.@.H.E...
 ffffffff80102e90 fdffff48 8b45e048 8b400848 85c07556  ...H.E.H.@.H..uV
 ffffffff80102ea0 837dfc01 751a48b8 00501180 ffffffff  .}..u.H..P......
 ffffffff80102eb0 488b0048 8945e0c7 45fc0000 0000eb42  H..H.E..E......B
 ffffffff80102ec0 488b45b0 89c748b8 89251080 ffffffff  H.E...H..%......
 ffffffff80102ed0 ffd0488b 55e04889 4208488b 45e0488b  ..H.U.H.B.H.E.H.
 ffffffff80102ee0 40084885 c0742348 8b45e048 8b400848  @.H..t#H.E.H.@.H
 ffffffff80102ef0 8b55e048 8910488b 45e0488b 40084889  .U.H..H.E.H.@.H.
 ffffffff80102f00 45e0e929 f9ffff90 eb019048 b8a24810  E..).......H..H.
 ffffffff80102f10 80ffffff ffffd0b8 00000000 c9c3f30f  ................
 ffffffff80102f20 1efa5548 89e54883 ec304889 7dd84883  ..UH..H..0H.}.H.
 ffffffff80102f30 7dd80075 2348b820 501180ff ffffff48  }..u#H. P......H
 ffffffff80102f40 8b00488d 500148b8 20501180 ffffffff  ..H.P.H. P......
 ffffffff80102f50 488910e9 2b030000 488b45d8 4883e810  H...+...H.E.H...
 ffffffff80102f60 0fb60048 0fbec048 8945f848 837df81f  ...H...H.E.H.}..
 ffffffff80102f70 770c488b 45d8482b 45f84889 45d848b8  w.H.E.H+E.H.E.H.
 ffffffff80102f80 96481080 ffffffff ffd0488b 45d84883  .H........H.E.H.
 ffffffff80102f90 e8284889 45f0488b 45f08b40 183ddec0  .(H.E.H.E..@.=..
 ffffffff80102fa0 01c00f84 d4000000 48b82850 1180ffff  ........H.(P....
 ffffffff80102fb0 ffff488b 00488d50 0148b828 501180ff  ..H..H.P.H.(P...
 ffffffff80102fc0 ffffff48 8910488b 45f08b40 1825ffff  ...H..H.E..@.%..
 ffffffff80102fd0 ff003dde c0010074 22488b45 f08b4018  ..=....t"H.E..@.
 ffffffff80102fe0 0fb7c03d dec00000 7411488b 45f08b40  ...=....t.H.E..@
 ffffffff80102ff0 180fb6c0 3dde0000 00753448 b8305011  ....=....u4H.0P.
 ffffffff80103000 80ffffff ff488b00 488d5001 48b83050  .....H..H.P.H.0P
 ffffffff80103010 1180ffff ffff4889 1048bf60 501080ff  ......H..H.`P...
 ffffffff80103020 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff80103030 8b45f08b 40183dad deadde75 1848bf98  .E..@.=....u.H..
 ffffffff80103040 501080ff ffffff48 b85b4310 80ffffff  P......H.[C.....
 ffffffff80103050 ffffd0eb 1648bfc4 501080ff ffffff48  .....H..P......H
 ffffffff80103060 b85b4310 80ffffff ffffd048 b8a24810  .[C........H..H.
 ffffffff80103070 80ffffff ffffd0e9 07020000 488b45f0  ............H.E.
 ffffffff80103080 488b4010 488945e8 48b81850 1180ffff  H.@.H.E.H..P....
 ffffffff80103090 ffff488b 10488b45 f08b401c 89c04829  ..H..H.E..@...H)
 ffffffff801030a0 c248b818 501180ff ffffff48 8910488b  .H..P......H..H.
 ffffffff801030b0 45e88b50 18488b45 f08b401c 29c289d0  E..P.H.E..@.)...
 ffffffff801030c0 8d50d848 8b45e889 5018488b 45f0c740  .P.H.E..P.H.E..@
 ffffffff801030d0 18addead de488b45 f0488b40 084885c0  .....H.E.H.@.H..
 ffffffff801030e0 7412488b 45f0488b 4008488b 55f0488b  t.H.E.H.@.H.U.H.
 ffffffff801030f0 12488910 488b45f0 488b0048 85c07413  .H..H.E.H..H..t.
 ffffffff80103100 488b45f0 488b0048 8b55f048 8b520848  H.E.H..H.U.H.R.H
 ffffffff80103110 89500848 8b45f048 8b004885 c0751048  .P.H.E.H..H..u.H
 ffffffff80103120 8b45f048 8b500848 8b45e848 89502048  .E.H.P.H.E.H.P H
 ffffffff80103130 8b45e848 8b402048 85c00f85 d0000000  .E.H.@ H........
 ffffffff80103140 48b80050 1180ffff ffff488b 00483945  H..P......H..H9E
 ffffffff80103150 e8751548 8b45e848 8b400848 ba005011  .u.H.E.H.@.H..P.
 ffffffff80103160 80ffffff ff488902 48b80850 1180ffff  .....H..H..P....
 ffffffff80103170 ffff488b 00483945 e8751148 b8085011  ..H..H9E.u.H..P.
 ffffffff80103180 80ffffff ff48c700 00000000 488b45e8  .....H......H.E.
 ffffffff80103190 488b0048 85c07413 488b45e8 488b0048  H..H..t.H.E.H..H
 ffffffff801031a0 8b55e848 8b520848 89500848 8b45e848  .U.H.R.H.P.H.E.H
 ffffffff801031b0 8b400848 85c07412 488b45e8 488b4008  .@.H..t.H.E.H.@.
 ffffffff801031c0 488b55e8 488b1248 891048b8 10501180  H.U.H..H..H..P..
 ffffffff801031d0 ffffffff 488b1048 8b45e88b 401489c0  ....H..H.E..@...
 ffffffff801031e0 4829c248 b8105011 80ffffff ff488910  H).H..P......H..
 ffffffff801031f0 488b45e8 8b401089 c2488b45 e889d648  H.E..@...H.E...H
 ffffffff80103200 89c748b8 c4481080 ffffffff ffd0eb67  ..H..H.........g
 ffffffff80103210 48b80850 1180ffff ffff488b 004885c0  H..P......H..H..
 ffffffff80103220 745548b8 08501180 ffffffff 488b008b  tUH..P......H...
 ffffffff80103230 501448b8 08501180 ffffffff 488b008b  P.H..P......H...
 ffffffff80103240 401829c2 89d08945 e4488b45 e88b5014  @.)....E.H.E..P.
 ffffffff80103250 488b45e8 8b401829 c289d089 45e08b45  H.E..@.)....E..E
 ffffffff80103260 e03b45e4 7e1148ba 08501180 ffffffff  .;E.~.H..P......
 ffffffff80103270 488b45e8 48890248 b8a24810 80ffffff  H.E.H..H..H.....
 ffffffff80103280 ffffd0c9 c3f30f1e fa554889 e54883ec  .........UH..H..
 ffffffff80103290 2048897d e8488975 e0488b45 e889c248   H.}.H.u.H.E...H
 ffffffff801032a0 8b45e00f afc28945 fc8b45fc 48984889  .E.....E..E.H.H.
 ffffffff801032b0 c748b8d6 261080ff ffffffff d0488945  .H..&........H.E
 ffffffff801032c0 f08b45fc 4863d048 8b45f0be 00000000  ..E.Hc.H.E......
 ffffffff801032d0 4889c748 b8aa2410 80ffffff ffffd048  H..H..$........H
 ffffffff801032e0 8b45f0c9 c3f30f1e fa554889 e54883ec  .E.......UH..H..
 ffffffff801032f0 3048897d d8488975 d048837d d000751d  0H.}.H.u.H.}..u.
 ffffffff80103300 488b45d8 4889c748 b81e2f10 80ffffff  H.E.H..H../.....
 ffffffff80103310 ffffd0b8 00000000 e9870100 0048837d  .............H.}
 ffffffff80103320 d8007518 488b45d0 4889c748 b8d62610  ..u.H.E.H..H..&.
 ffffffff80103330 80ffffff ffffd0e9 68010000 488b45d8  ........h...H.E.
 ffffffff80103340 488945f8 488b45f8 4883e810 0fb60048  H.E.H.E.H......H
 ffffffff80103350 0fbec048 8945f048 837df01f 770c488b  ...H.E.H.}..w.H.
 ffffffff80103360 45f8482b 45f04889 45f848b8 96481080  E.H+E.H.E.H..H..
 ffffffff80103370 ffffffff ffd0488b 45f84883 e8284889  ......H.E.H..(H.
 ffffffff80103380 45e8488b 45e88b40 183ddec0 01c00f84  E.H.E..@.=......
 ffffffff80103390 87000000 48b82850 1180ffff ffff488b  ....H.(P......H.
 ffffffff801033a0 00488d50 0148b828 501180ff ffffff48  .H.P.H.(P......H
 ffffffff801033b0 8910488b 45e88b40 1825ffff ff003dde  ..H.E..@.%....=.
 ffffffff801033c0 c0010074 22488b45 e88b4018 0fb7c03d  ...t"H.E..@....=
 ffffffff801033d0 dec00000 7411488b 45e88b40 180fb6c0  ....t.H.E..@....
 ffffffff801033e0 3dde0000 00751e48 b8305011 80ffffff  =....u.H.0P.....
 ffffffff801033f0 ff488b00 488d5001 48b83050 1180ffff  .H..H.P.H.0P....
 ffffffff80103400 ffff4889 1048b8a2 481080ff ffffffff  ..H..H..H.......
 ffffffff80103410 d0b80000 0000e989 00000048 8b45e88b  ...........H.E..
 ffffffff80103420 40208945 e48b45e4 483945d0 7f1f488b  @ .E..E.H9E...H.
 ffffffff80103430 45d089c2 488b45e8 89502048 b8a24810  E...H.E..P H..H.
 ffffffff80103440 80ffffff ffffd048 8b45d8eb 5748b8a2  .......H.E..WH..
 ffffffff80103450 481080ff ffffffff d0488b45 d04889c7  H........H.E.H..
 ffffffff80103460 48b8d626 1080ffff ffffffd0 488945f8  H..&........H.E.
 ffffffff80103470 8b55e448 8b4dd848 8b45f848 89ce4889  .U.H.M.H.E.H..H.
 ffffffff80103480 c748b8ec 241080ff ffffffff d0488b45  .H..$........H.E
 ffffffff80103490 d84889c7 48b81e2f 1080ffff ffffffd0  .H..H../........
 ffffffff801034a0 488b45f8 c9c3f30f 1efa5548 89e54883  H.E.......UH..H.
 ffffffff801034b0 ec084889 7df848c7 45f80000 000048b8  ..H.}.H.E.....H.
 ffffffff801034c0 00601180 ffffffff 48ba80b0 1180ffff  .`......H.......
 ffffffff801034d0 ffff4889 1090c9c3 f30f1efa 554889e5  ..H.........UH..
 ffffffff801034e0 4883ec08 48897df8 488b45f8 48050000  H...H.}.H.E.H...
 ffffffff801034f0 0080c9c3 f30f1efa 554889e5 4883ec08  ........UH..H...
 ffffffff80103500 48897df8 ba000000 80488b45 f84801d0  H.}......H.E.H..
 ffffffff80103510 c9c3f30f 1efa5548 89e54883 ec604889  ......UH..H..`H.
 ffffffff80103520 7da8488b 45a8488b 40084889 45f0488d  }.H.E.H.@.H.E.H.
 ffffffff80103530 45b0be40 00000048 89c748b8 55481080  E..@...H..H.UH..
 ffffffff80103540 ffffffff ffd0c745 fc000000 008b45fc  .......E......E.
 ffffffff80103550 4863d048 8b45a848 8b401048 39c20f83  Hc.H.E.H.@.H9...
 ffffffff80103560 55020000 8b45fc48 63d04889 d04801c0  U....E.Hc.H..H..
 ffffffff80103570 4801d048 c1e00348 89c2488b 45f04801  H..H...H..H.E.H.
 ffffffff80103580 d08b4010 83f8010f 85220200 0048bfde  ..@......"...H..
 ffffffff80103590 501080ff ffffff48 b85b4310 80ffffff  P......H.[C.....
 ffffffff801035a0 ffffd08b 45fc4863 d04889d0 4801c048  ....E.Hc.H..H..H
 ffffffff801035b0 01d048c1 e0034889 c2488b45 f04801d0  ..H...H..H.E.H..
 ffffffff801035c0 488b1048 8d45b0be 78000000 4889c748  H..H.E..x...H..H
 ffffffff801035d0 b8de4810 80ffffff ffffd048 bfef5010  ..H........H..P.
 ffffffff801035e0 80ffffff ff48b85b 431080ff ffffffff  .....H.[C.......
 ffffffff801035f0 d0488d45 b04889c7 48b85b43 1080ffff  .H.E.H..H.[C....
 ffffffff80103600 ffffffd0 488d45b0 be400000 004889c7  ....H.E..@...H..
 ffffffff80103610 48b85548 1080ffff ffffffd0 8b45fc48  H.UH.........E.H
 ffffffff80103620 63d04889 d04801c0 4801d048 c1e00348  c.H..H..H..H...H
 ffffffff80103630 89c2488b 45f04801 d0488b48 088b45fc  ..H.E.H..H.H..E.
 ffffffff80103640 4863d048 89d04801 c04801d0 48c1e003  Hc.H..H..H..H...
 ffffffff80103650 4889c248 8b45f048 01d0488b 00488d14  H..H.E.H..H..H..
 ffffffff80103660 01488d45 b0be7800 00004889 c748b8de  .H.E..x...H..H..
 ffffffff80103670 481080ff ffffffff d048bf00 511080ff  H........H..Q...
 ffffffff80103680 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff80103690 8d45b048 89c748b8 5b431080 ffffffff  .E.H..H.[C......
 ffffffff801036a0 ffd0488d 45b0be40 00000048 89c748b8  ..H.E..@...H..H.
 ffffffff801036b0 55481080 ffffffff ffd08b45 fc4863d0  UH.........E.Hc.
 ffffffff801036c0 4889d048 01c04801 d048c1e0 034889c2  H..H..H..H...H..
 ffffffff801036d0 488b45f0 4801d048 8b500848 8d45b0be  H.E.H..H.P.H.E..
 ffffffff801036e0 78000000 4889c748 b8de4810 80ffffff  x...H..H..H.....
 ffffffff801036f0 ffffd048 bf0f5110 80ffffff ff48b85b  ...H..Q......H.[
 ffffffff80103700 431080ff ffffffff d0488d45 b04889c7  C........H.E.H..
 ffffffff80103710 48b85b43 1080ffff ffffffd0 488d45b0  H.[C........H.E.
 ffffffff80103720 be400000 004889c7 48b85548 1080ffff  .@...H..H.UH....
 ffffffff80103730 ffffffd0 8b45fc48 63d04889 d04801c0  .....E.Hc.H..H..
 ffffffff80103740 4801d048 c1e00348 89c2488b 45f04801  H..H...H..H.E.H.
 ffffffff80103750 d08b5010 488d45b0 be780000 004889c7  ..P.H.E..x...H..
 ffffffff80103760 48b8c949 1080ffff ffffffd0 48bf2151  H..I........H.!Q
 ffffffff80103770 1080ffff ffff48b8 5b431080 ffffffff  ......H.[C......
 ffffffff80103780 ffd0488d 45b04889 c748b85b 431080ff  ..H.E.H..H.[C...
 ffffffff80103790 ffffffff d0488d45 b0be4000 00004889  .....H.E..@...H.
 ffffffff801037a0 c748b855 481080ff ffffffff d0eb0190  .H.UH...........
 ffffffff801037b0 8345fc01 e994fdff ff90c9c3 f30f1efa  .E..............
 ffffffff801037c0 554889e5 4883ec38 48897dd8 488975d0  UH..H..8H.}.H.u.
 ffffffff801037d0 488955c8 488b45d8 48c1e827 25ff0100  H.U.H.E.H..'%...
 ffffffff801037e0 00488945 f8488b45 d848c1e8 1e25ff01  .H.E.H.E.H...%..
 ffffffff801037f0 00004889 45f0488b 45d848c1 e81525ff  ..H.E.H.E.H...%.
 ffffffff80103800 01000048 8945e848 8b45d848 c1e80c25  ...H.E.H.E.H...%
 ffffffff80103810 ff010000 488945e0 90c9c3f3 0f1efa55  ....H.E........U
 ffffffff80103820 4889e5be 11000000 bf200000 0048b8a5  H........ ...H..
 ffffffff80103830 4a1080ff ffffffff d0eb00eb 00be1100  J...............
 ffffffff80103840 0000bfa0 00000048 b8a54a10 80ffffff  .......H..J.....
 ffffffff80103850 ffffd0eb 00eb00be 20000000 bf210000  ........ ....!..
 ffffffff80103860 0048b8a5 4a1080ff ffffffff d0eb00eb  .H..J...........
 ffffffff80103870 00be2800 0000bfa1 00000048 b8a54a10  ..(........H..J.
 ffffffff80103880 80ffffff ffffd0eb 00eb00be 04000000  ................
 ffffffff80103890 bf210000 0048b8a5 4a1080ff ffffffff  .!...H..J.......
 ffffffff801038a0 d0eb00eb 00be0200 0000bfa1 00000048  ...............H
 ffffffff801038b0 b8a54a10 80ffffff ffffd0eb 00eb00be  ..J.............
 ffffffff801038c0 01000000 bf210000 0048b8a5 4a1080ff  .....!...H..J...
 ffffffff801038d0 ffffffff d0eb00eb 00be0100 0000bfa1  ................
 ffffffff801038e0 00000048 b8a54a10 80ffffff ffffd0eb  ...H..J.........
 ffffffff801038f0 00eb00be 00000000 bf210000 0048b8a5  .........!...H..
 ffffffff80103900 4a1080ff ffffffff d0be0000 0000bfa1  J...............
 ffffffff80103910 00000048 b8a54a10 80ffffff ffffd090  ...H..J.........
 ffffffff80103920 5dc3f30f 1efa5548 89e54883 ec1048bf  ].....UH..H...H.
 ffffffff80103930 31511080 ffffffff 48b85b43 1080ffff  1Q......H.[C....
 ffffffff80103940 ffffffd0 48bf3d51 1080ffff ffff48b8  ....H.=Q......H.
 ffffffff80103950 5b431080 ffffffff ffd0c745 fc000000  [C.........E....
 ffffffff80103960 00837dfc 4f0f8f1b 01000048 ba406110  ..}.O......H.@a.
 ffffffff80103970 80ffffff ff8b45fc 4898488b 04c289c7  ......E.H.H.....
 ffffffff80103980 48ba4061 1080ffff ffff8b45 fc489848  H.@a.......E.H.H
 ffffffff80103990 8b04c248 c1e81089 c648ba40 611080ff  ...H.....H.@a...
 ffffffff801039a0 ffffff8b 45fc4898 488b04c2 48c1e820  ....E.H.H...H.. 
 ffffffff801039b0 89c148ba 80a01180 ffffffff 8b45fc48  ..H..........E.H
 ffffffff801039c0 9848c1e0 044801d0 66893848 ba80a011  .H...H..f.8H....
 ffffffff801039d0 80ffffff ff8b45fc 489848c1 e0044801  ......E.H.H...H.
 ffffffff801039e0 d04883c0 0266c700 080048ba 80a01180  .H...f....H.....
 ffffffff801039f0 ffffffff 8b45fc48 9848c1e0 044801d0  .....E.H.H...H..
 ffffffff80103a00 4883c004 c6000048 ba80a011 80ffffff  H......H........
 ffffffff80103a10 ff8b45fc 489848c1 e0044801 d04883c0  ..E.H.H...H..H..
 ffffffff80103a20 05c6008e 48ba80a0 1180ffff ffff8b45  ....H..........E
 ffffffff80103a30 fc489848 c1e00448 01d04883 c0066689  .H.H...H..H...f.
 ffffffff80103a40 3048ba80 a01180ff ffffff8b 45fc4898  0H..........E.H.
 ffffffff80103a50 48c1e004 4801d048 83c00889 0848ba80  H...H..H.....H..
 ffffffff80103a60 a01180ff ffffff8b 45fc4898 48c1e004  ........E.H.H...
 ffffffff80103a70 4801d048 83c00cc7 00000000 008345fc  H..H..........E.
 ffffffff80103a80 01e9dbfe ffff48bf 4f511080 ffffffff  ......H.OQ......
 ffffffff80103a90 48b85b43 1080ffff ffffffd0 48b82060  H.[C........H. `
 ffffffff80103aa0 1080ffff ffff0f01 1848bf65 511080ff  .........H.eQ...
 ffffffff80103ab0 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff80103ac0 b81b3810 80ffffff ffffd048 bf715110  ..8........H.qQ.
 ffffffff80103ad0 80ffffff ff48b85b 431080ff ffffffff  .....H.[C.......
 ffffffff80103ae0 d048bf82 511080ff ffffff48 b85b4310  .H..Q......H.[C.
 ffffffff80103af0 80ffffff ffffd048 bf935110 80ffffff  .......H..Q.....
 ffffffff80103b00 ff48b85b 431080ff ffffffff d090c9c3  .H.[C...........
 ffffffff80103b10 f30f1efa 554889e5 4883ec10 48897df8  ....UH..H...H.}.
 ffffffff80103b20 488975f0 be400000 0048bf00 a01180ff  H.u..@...H......
 ffffffff80103b30 ffffff48 b8554810 80ffffff ffffd048  ...H.UH........H
 ffffffff80103b40 8b45f848 89c2be78 00000048 bf00a011  .E.H...x...H....
 ffffffff80103b50 80ffffff ff48b8de 481080ff ffffffff  .....H..H.......
 ffffffff80103b60 d048bfea 521080ff ffffff48 b8cb4310  .H..R......H..C.
 ffffffff80103b70 80ffffff ffffd048 8b45f048 89c748b8  .......H.E.H..H.
 ffffffff80103b80 cb431080 ffffffff ffd048bf ee521080  .C........H..R..
 ffffffff80103b90 ffffffff 48b8cb43 1080ffff ffffffd0  ....H..C........
 ffffffff80103ba0 48bff252 1080ffff ffff48b8 cb431080  H..R......H..C..
 ffffffff80103bb0 ffffffff ffd048bf 00a01180 ffffffff  ......H.........
 ffffffff80103bc0 48b8cb43 1080ffff ffffffd0 90c9c3f3  H..C............
 ffffffff80103bd0 0f1efa55 4889e548 83ec2048 897de848  ...UH..H.. H.}.H
 ffffffff80103be0 bff55210 80ffffff ff48b85b 431080ff  ..R......H.[C...
 ffffffff80103bf0 ffffffff d048bf0b 531080ff ffffff48  .....H..S......H
 ffffffff80103c00 b85b4310 80ffffff ffffd048 8b45e848  .[C........H.E.H
 ffffffff80103c10 8b808800 000048be 22531080 ffffffff  ......H."S......
 ffffffff80103c20 4889c748 b8103b10 80ffffff ffffd048  H..H..;........H
 ffffffff80103c30 8b45e848 8b80a000 000048be 25531080  .E.H......H.%S..
 ffffffff80103c40 ffffffff 4889c748 b8103b10 80ffffff  ....H..H..;.....
 ffffffff80103c50 ffffd048 bf285310 80ffffff ff48b85b  ...H.(S......H.[
 ffffffff80103c60 431080ff ffffffff d048bf2a 531080ff  C........H.*S...
 ffffffff80103c70 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff80103c80 8b45e848 8b403848 be3a5310 80ffffff  .E.H.@8H.:S.....
 ffffffff80103c90 ff4889c7 48b8103b 1080ffff ffffffd0  .H..H..;........
 ffffffff80103ca0 488b45e8 488b4030 48be3d53 1080ffff  H.E.H.@0H.=S....
 ffffffff80103cb0 ffff4889 c748b810 3b1080ff ffffffff  ..H..H..;.......
 ffffffff80103cc0 d0488b45 e8488b40 2848be40 531080ff  .H.E.H.@(H.@S...
 ffffffff80103cd0 ffffff48 89c748b8 103b1080 ffffffff  ...H..H..;......
 ffffffff80103ce0 ffd048bf 28531080 ffffffff 48b85b43  ..H.(S......H.[C
 ffffffff80103cf0 1080ffff ffffffd0 488b45e8 488b4020  ........H.E.H.@ 
 ffffffff80103d00 48be4453 1080ffff ffff4889 c748b810  H.DS......H..H..
 ffffffff80103d10 3b1080ff ffffffff d0488b45 e8488b40  ;........H.E.H.@
 ffffffff80103d20 1848be48 531080ff ffffff48 89c748b8  .H.HS......H..H.
 ffffffff80103d30 103b1080 ffffffff ffd0488b 45e8488b  .;........H.E.H.
 ffffffff80103d40 401048be 4c531080 ffffffff 4889c748  @.H.LS......H..H
 ffffffff80103d50 b8103b10 80ffffff ffffd048 bf285310  ..;........H.(S.
 ffffffff80103d60 80ffffff ff48b85b 431080ff ffffffff  .....H.[C.......
 ffffffff80103d70 d0488b45 e8488b40 0848be50 531080ff  .H.E.H.@.H.PS...
 ffffffff80103d80 ffffff48 89c748b8 103b1080 ffffffff  ...H..H..;......
 ffffffff80103d90 ffd0488b 45e8488b 0048be54 531080ff  ..H.E.H..H.TS...
 ffffffff80103da0 ffffff48 89c748b8 103b1080 ffffffff  ...H..H..;......
 ffffffff80103db0 ffd048bf 28531080 ffffffff 48b85b43  ..H.(S......H.[C
 ffffffff80103dc0 1080ffff ffffffd0 48bf5853 1080ffff  ........H.XS....
 ffffffff80103dd0 ffff48b8 5b431080 ffffffff ffd0488b  ..H.[C........H.
 ffffffff80103de0 45e8488b 80980000 0048be6d 531080ff  E.H......H.mS...
 ffffffff80103df0 ffffff48 89c748b8 103b1080 ffffffff  ...H..H..;......
 ffffffff80103e00 ffd0488b 45e8488b 404048be 71531080  ..H.E.H.@@H.qS..
 ffffffff80103e10 ffffffff 4889c748 b8103b10 80ffffff  ....H..H..;.....
 ffffffff80103e20 ffffd048 8b45e848 8b404848 be755310  ...H.E.H.@HH.uS.
 ffffffff80103e30 80ffffff ff4889c7 48b8103b 1080ffff  .....H..H..;....
 ffffffff80103e40 ffffffd0 48bf2853 1080ffff ffff48b8  ....H.(S......H.
 ffffffff80103e50 5b431080 ffffffff ffd0488b 45e8488b  [C........H.E.H.
 ffffffff80103e60 405048be 79531080 ffffffff 4889c748  @PH.yS......H..H
 ffffffff80103e70 b8103b10 80ffffff ffffd048 8b45e848  ..;........H.E.H
 ffffffff80103e80 8b405848 be7d5310 80ffffff ff4889c7  .@XH.}S......H..
 ffffffff80103e90 48b8103b 1080ffff ffffffd0 488b45e8  H..;........H.E.
 ffffffff80103ea0 488b4060 48be8153 1080ffff ffff4889  H.@`H..S......H.
 ffffffff80103eb0 c748b810 3b1080ff ffffffff d048bf28  .H..;........H.(
 ffffffff80103ec0 531080ff ffffff48 b85b4310 80ffffff  S......H.[C.....
 ffffffff80103ed0 ffffd048 8b45e848 8b406848 be855310  ...H.E.H.@hH..S.
 ffffffff80103ee0 80ffffff ff4889c7 48b8103b 1080ffff  .....H..H..;....
 ffffffff80103ef0 ffffffd0 488b45e8 488b4070 48be8953  ....H.E.H.@pH..S
 ffffffff80103f00 1080ffff ffff4889 c748b810 3b1080ff  ......H..H..;...
 ffffffff80103f10 ffffffff d048bf28 531080ff ffffff48  .....H.(S......H
 ffffffff80103f20 b85b4310 80ffffff ffffd048 bf8d5310  .[C........H..S.
 ffffffff80103f30 80ffffff ff48b85b 431080ff ffffffff  .....H.[C.......
 ffffffff80103f40 d0488b45 e88b4078 89c048be a0531080  .H.E..@x..H..S..
 ffffffff80103f50 ffffffff 4889c748 b8103b10 80ffffff  ....H..H..;.....
 ffffffff80103f60 ffffd048 8b45e88b 407c89c0 48beab53  ...H.E..@|..H..S
 ffffffff80103f70 1080ffff ffff4889 c748b810 3b1080ff  ......H..H..;...
 ffffffff80103f80 ffffffff d048bf28 531080ff ffffff48  .....H.(S......H
 ffffffff80103f90 b85b4310 80ffffff ffffd048 8b45e848  .[C........H.E.H
 ffffffff80103fa0 8b808000 000048be b2531080 ffffffff  ......H..S......
 ffffffff80103fb0 4889c748 b8103b10 80ffffff ffffd048  H..H..;........H
 ffffffff80103fc0 8b45e848 8b809000 000048be b6531080  .E.H......H..S..
 ffffffff80103fd0 ffffffff 4889c748 b8103b10 80ffffff  ....H..H..;.....
 ffffffff80103fe0 ffffd048 bf285310 80ffffff ff48b85b  ...H.(S......H.[
 ffffffff80103ff0 431080ff ffffffff d048bfbd 531080ff  C........H..S...
 ffffffff80104000 ffffff48 b85b4310 80ffffff ffffd00f  ...H.[C.........
 ffffffff80104010 22d04889 45f8488b 45f848be ce531080  ".H.E.H.E.H..S..
 ffffffff80104020 ffffffff 4889c748 b8103b10 80ffffff  ....H..H..;.....
 ffffffff80104030 ffffd090 c9c3f30f 1efa5548 89e54883  ..........UH..H.
 ffffffff80104040 ec10897d fc837dfc 277e16be 20000000  ...}..}.'~.. ...
 ffffffff80104050 bfa00000 0048b8a5 4a1080ff ffffffff  .....H..J.......
 ffffffff80104060 d0be2000 0000bf20 00000048 b8a54a10  .. .... ...H..J.
 ffffffff80104070 80ffffff ffffd090 c9c3f30f 1efa5548  ..............UH
 ffffffff80104080 89e54883 ec08897d fc837dfc 1f7e07b8  ..H....}..}..~..
 ffffffff80104090 00000000 eb2a837d fc017418 837dfc0f  .....*.}..t..}..
 ffffffff801040a0 7412837d fc147e06 837dfc1d 7e06837d  t..}..~..}..~..}
 ffffffff801040b0 fc1f7507 b8000000 00eb05b8 01000000  ..u.............
 ffffffff801040c0 c9c3f30f 1efa5548 89e54883 ec104889  ......UH..H...H.
 ffffffff801040d0 7df848bf d2531080 ffffffff 48b85b43  }.H..S......H.[C
 ffffffff801040e0 1080ffff ffffffd0 488b45f8 8b407c89  ........H.E..@|.
 ffffffff801040f0 c748b87a 401080ff ffffffff d084c00f  .H.z@...........
 ffffffff80104100 84c00000 0048bfe7 531080ff ffffff48  .....H..S......H
 ffffffff80104110 b85b4310 80ffffff ffffd048 8b45f88b  .[C........H.E..
 ffffffff80104120 507c48b8 40601080 ffffffff 89d2488b  P|H.@`........H.
 ffffffff80104130 04d04889 c748b85b 431080ff ffffffff  ..H..H.[C.......
 ffffffff80104140 d0488b45 f84889c7 48b8cf3b 1080ffff  .H.E.H..H..;....
 ffffffff80104150 ffffffd0 be400000 0048bf40 a01180ff  .....@...H.@....
 ffffffff80104160 ffffff48 b8554810 80ffffff ffffd048  ...H.UH........H
 ffffffff80104170 8b45f848 8b808000 00004889 c2be7800  .E.H......H...x.
 ffffffff80104180 000048bf 40a01180 ffffffff 48b8de48  ..H.@.......H..H
 ffffffff80104190 1080ffff ffffffd0 48bff353 1080ffff  ........H..S....
 ffffffff801041a0 ffff48b8 5b431080 ffffffff ffd048bf  ..H.[C........H.
 ffffffff801041b0 40a01180 ffffffff 48b85b43 1080ffff  @.......H.[C....
 ffffffff801041c0 ffffffd0 f4488b45 f88b407c 89c748b8  .....H.E..@|..H.
 ffffffff801041d0 36401080 ffffffff ffd0be40 00000048  6@.........@...H
 ffffffff801041e0 bf40a011 80ffffff ff48b855 481080ff  .@.......H.UH...
 ffffffff801041f0 ffffffff d0488b45 f88b407c 89c2be64  .....H.E..@|...d
 ffffffff80104200 00000048 bf40a011 80ffffff ff48b8ca  ...H.@.......H..
 ffffffff80104210 4a1080ff ffffffff d048bff9 531080ff  J........H..S...
 ffffffff80104220 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff80104230 bf40a011 80ffffff ff48b85b 431080ff  .@.......H.[C...
 ffffffff80104240 ffffffff d0be4000 000048bf 40a01180  ......@...H.@...
 ffffffff80104250 ffffffff 48b85548 1080ffff ffffffd0  ....H.UH........
 ffffffff80104260 488b45f8 488b8080 00000048 89c2be78  H.E.H......H...x
 ffffffff80104270 00000048 bf40a011 80ffffff ff48b8de  ...H.@.......H..
 ffffffff80104280 481080ff ffffffff d048bff3 531080ff  H........H..S...
 ffffffff80104290 ffffff48 b85b4310 80ffffff ffffd048  ...H.[C........H
 ffffffff801042a0 bf40a011 80ffffff ff48b85b 431080ff  .@.......H.[C...
 ffffffff801042b0 ffffffff d090c9c3 f30f1efa 554889e5  ............UH..
 ffffffff801042c0 4883ec10 897dfc89 f08845f8 8b45fc89  H....}....E..E..
 ffffffff801042d0 c748b80b 4c1080ff ffffffff d00fb645  .H..L..........E
 ffffffff801042e0 f80fb6d0 8b45fc0f b7c089d6 89c748b8  .....E........H.
 ffffffff801042f0 a54a1080 ffffffff ffd090c9 c3f30f1e  .J..............
 ffffffff80104300 fa554889 e54883ec 20897dec 488975e0  .UH..H.. .}.H.u.
 ffffffff80104310 8955e848 8b45e048 8945f0c7 45fc0000  .U.H.E.H.E..E...
 ffffffff80104320 00008b45 fc3b45e8 7d2c8b45 fc4863d0  ...E.;E.},.E.Hc.
 ffffffff80104330 488b45f0 4801d00f b6000fbe d08b45ec  H.E.H.........E.
 ffffffff80104340 89d689c7 48b8b842 1080ffff ffffffd0  ....H..B........
 ffffffff80104350 8345fc01 ebcc8b45 e8c9c3f3 0f1efa55  .E.....E.......U
 ffffffff80104360 4889e548 83ec2048 897de8c7 45fc0000  H..H.. H.}..E...
 ffffffff80104370 00008b45 fc4863d0 488b45e8 4801d00f  ...E.Hc.H.E.H...
 ffffffff80104380 b60084c0 742c8b45 fc4863d0 488b45e8  ....t,.E.Hc.H.E.
 ffffffff80104390 4801d00f b6000fbe c089c6bf f8030000  H...............
 ffffffff801043a0 48b8b842 1080ffff ffffffd0 8345fc01  H..B.........E..
 ffffffff801043b0 ebc0be0a 000000bf f8030000 48b8b842  ............H..B
 ffffffff801043c0 1080ffff ffffffd0 90c9c3f3 0f1efa55  ...............U
 ffffffff801043d0 4889e548 83ec2048 897de8c7 45fc0000  H..H.. H.}..E...
 ffffffff801043e0 00008b45 fc4863d0 488b45e8 4801d00f  ...E.Hc.H.E.H...
 ffffffff801043f0 b60084c0 742c8b45 fc4863d0 488b45e8  ....t,.E.Hc.H.E.
 ffffffff80104400 4801d00f b6000fbe c089c6bf f8030000  H...............
 ffffffff80104410 48b8b842 1080ffff ffffffd0 8345fc01  H..B.........E..
 ffffffff80104420 ebc090c9 c3f30f1e fa554889 e54883ec  .........UH..H..
 ffffffff80104430 10897dfc 8b45fc83 c0020fb7 c0be0000  ..}..E..........
 ffffffff80104440 000089c7 48b8a54a 1080ffff ffffffd0  ....H..J........
 ffffffff80104450 8b45fc83 c0030fb7 c0be8000 000089c7  .E..............
 ffffffff80104460 48b8a54a 1080ffff ffffffd0 8b45fc0f  H..J.........E..
 ffffffff80104470 b7c0be03 00000089 c748b8a5 4a1080ff  .........H..J...
 ffffffff80104480 ffffffff d08b45fc 83c0010f b7c0be00  ......E.........
 ffffffff80104490 00000089 c748b8a5 4a1080ff ffffffff  .....H..J.......
 ffffffff801044a0 d08b45fc 83c0030f b7c0be03 00000089  ..E.............
 ffffffff801044b0 c748b8a5 4a1080ff ffffffff d08b45fc  .H..J.........E.
 ffffffff801044c0 83c0020f b7c0bec7 00000089 c748b8a5  .............H..
 ffffffff801044d0 4a1080ff ffffffff d08b45fc 83c0040f  J.........E.....
 ffffffff801044e0 b7c0be0b 00000089 c748b8a5 4a1080ff  .........H..J...
 ffffffff801044f0 ffffffff d090c9c3 0f1f8400 00000000  ................
 ffffffff80104500 488b4424 040f0118 c3fafc50 53515256  H.D$.......PSQRV
 ffffffff80104510 57554150 41514152 41534154 41554156  WUAPAQARASATAUAV
 ffffffff80104520 41574889 e7e898fb ffff415f 415e415d  AWH.......A_A^A]
 ffffffff80104530 415c415b 415a4159 41585d5f 5e5a595b  A\A[AZAYAX]_^ZY[
 ffffffff80104540 584883c4 08fb48cf 6a00c744 24040000  XH....H.j..D$...
 ffffffff80104550 0000ebb5 6a00c744 24040100 0000eba9  ....j..D$.......
 ffffffff80104560 6a00c744 24040200 0000eb9d 6a00c744  j..D$.......j..D
 ffffffff80104570 24040300 0000eb91 6a00c744 24040400  $.......j..D$...
 ffffffff80104580 0000eb85 6a00c744 24040500 0000e976  ....j..D$......v
 ffffffff80104590 ffffff6a 00c74424 04060000 00e967ff  ...j..D$......g.
 ffffffff801045a0 ffff6a00 c7442404 07000000 e958ffff  ..j..D$......X..
 ffffffff801045b0 ffc74424 04080000 00e94bff ffff6a00  ..D$......K...j.
 ffffffff801045c0 c7442404 09000000 e93cffff ffc74424  .D$......<....D$
 ffffffff801045d0 040a0000 00e92fff ffffc744 24040b00  ....../....D$...
 ffffffff801045e0 0000e922 ffffffc7 4424040c 000000e9  ..."....D$......
 ffffffff801045f0 15ffffff c7442404 0d000000 e908ffff  .....D$.........
 ffffffff80104600 ffc74424 040e0000 00e9fbfe ffff6a00  ..D$..........j.
 ffffffff80104610 c7442404 0f000000 e9ecfeff ff6a00c7  .D$..........j..
 ffffffff80104620 44240410 000000e9 ddfeffff 6a00c744  D$..........j..D
 ffffffff80104630 24041100 0000e9ce feffff6a 00c74424  $..........j..D$
 ffffffff80104640 04120000 00e9bffe ffff6a00 c7442404  ..........j..D$.
 ffffffff80104650 13000000 e9b0feff ff6a00c7 44240414  .........j..D$..
 ffffffff80104660 000000e9 a1feffff 6a00c744 24041500  ........j..D$...
 ffffffff80104670 0000e992 feffff6a 00c74424 04160000  .......j..D$....
 ffffffff80104680 00e983fe ffff6a00 c7442404 17000000  ......j..D$.....
 ffffffff80104690 e974feff ff6a00c7 44240418 000000e9  .t...j..D$......
 ffffffff801046a0 65feffff 6a00c744 24041900 0000e956  e...j..D$......V
 ffffffff801046b0 feffff6a 00c74424 041a0000 00e947fe  ...j..D$......G.
 ffffffff801046c0 ffff6a00 c7442404 1b000000 e938feff  ..j..D$......8..
 ffffffff801046d0 ff6a00c7 4424041c 000000e9 29feffff  .j..D$......)...
 ffffffff801046e0 6a00c744 24041d00 0000e91a feffffc7  j..D$...........
 ffffffff801046f0 4424041e 000000e9 0dfeffff 6a00c744  D$..........j..D
 ffffffff80104700 24041f00 0000e9fe fdffff6a 00c74424  $..........j..D$
 ffffffff80104710 04200000 00e9effd ffff6a00 c7442404  . ........j..D$.
 ffffffff80104720 21000000 e9e0fdff ff6a00c7 44240422  !........j..D$."
 ffffffff80104730 000000e9 d1fdffff 6a00c744 24042300  ........j..D$.#.
 ffffffff80104740 0000e9c2 fdffff6a 00c74424 04240000  .......j..D$.$..
 ffffffff80104750 00e9b3fd ffff6a00 c7442404 25000000  ......j..D$.%...
 ffffffff80104760 e9a4fdff ff6a00c7 44240426 000000e9  .....j..D$.&....
 ffffffff80104770 95fdffff 6a00c744 24042700 0000e986  ....j..D$.'.....
 ffffffff80104780 fdffff6a 00c74424 04280000 00e977fd  ...j..D$.(....w.
 ffffffff80104790 ffff6a00 c7442404 29000000 e968fdff  ..j..D$.)....h..
 ffffffff801047a0 ff6a00c7 4424042a 000000e9 59fdffff  .j..D$.*....Y...
 ffffffff801047b0 6a00c744 24042b00 0000e94a fdffff6a  j..D$.+....J...j
 ffffffff801047c0 00c74424 042c0000 00e93bfd ffff6a00  ..D$.,....;...j.
 ffffffff801047d0 c7442404 2d000000 e92cfdff ff6a00c7  .D$.-....,...j..
 ffffffff801047e0 4424042e 000000e9 1dfdffff 6a00c744  D$..........j..D
 ffffffff801047f0 24042f00 0000e90e fdffff6a 00c74424  $./........j..D$
 ffffffff80104800 04320000 00e9fffc ffff6a00 c7442404  .2........j..D$.
 ffffffff80104810 7f000000 e9f0fcff ff0f1f80 00000000  ................
 ffffffff80104820 554889e5 4889f80f 00d85dc3 0f1f4000  UH..H.....]...@.
 ffffffff80104830 554889e5 0f011766 b810008e d08ed88e  UH.....f........
 ffffffff80104840 c08ee08e e848b853 481080ff ffffff56  .....H.SH......V
 ffffffff80104850 5048cb5d c3f30f1e fa554889 e54883ec  PH.].....UH..H..
 ffffffff80104860 2048897d e8488975 e048c745 f8000000   H.}.H.u.H.E....
 ffffffff80104870 00488b45 f8483b45 e0731548 8b55e848  .H.E.H;E.s.H.U.H
 ffffffff80104880 8b45f848 01d0c600 00488345 f801ebe1  .E.H.....H.E....
 ffffffff80104890 488b45e8 c9c3f30f 1efa5548 89e5fa90  H.E.......UH....
 ffffffff801048a0 5dc3f30f 1efa5548 89e5fb90 5dc3f30f  ].....UH....]...
 ffffffff801048b0 1efa5548 89e54883 ec08897d fcb80000  ..UH..H....}....
 ffffffff801048c0 0000c9c3 f30f1efa 554889e5 4883ec10  ........UH..H...
 ffffffff801048d0 48897df8 8975f4b8 00000000 c9c3f30f  H.}..u..........
 ffffffff801048e0 1efa5548 89e54883 ec584889 7db88975  ..UH..H..XH.}..u
 ffffffff801048f0 b4488955 a8488b45 b8488945 f8488b45  .H.U.H.E.H.E.H.E
 ffffffff80104900 a8488945 e048c745 d80a0000 00837db4  .H.E.H.E......}.
 ffffffff80104910 78750848 c745d810 00000048 8b45e0ba  xu.H.E.....H.E..
 ffffffff80104920 00000000 48f775d8 488955d0 48837dd0  ....H.u.H.U.H.}.
 ffffffff80104930 09770b48 8b45d083 c03089c1 eb09488b  .w.H.E...0....H.
 ffffffff80104940 45d083c0 5789c148 8b45f848 8d500148  E...W..H.E.H.P.H
 ffffffff80104950 8955f888 08488b45 e0ba0000 000048f7  .U...H.E......H.
 ffffffff80104960 75d84889 45e04883 7de0000f 95c084c0  u.H.E.H.}.......
 ffffffff80104970 7402eba7 488b45f8 c6000048 8b45b848  t...H.E....H.E.H
 ffffffff80104980 8945f048 8b45f848 83e80148 8945e848  .E.H.E.H...H.E.H
 ffffffff80104990 8b45f048 3b45e873 2d488b45 f00fb600  .E.H;E.s-H.E....
 ffffffff801049a0 8845cf48 8b45e80f b610488b 45f08810  .E.H.E....H.E...
 ffffffff801049b0 488b45e8 0fb655cf 88104883 45f00148  H.E...U...H.E..H
 ffffffff801049c0 836de801 ebc990c9 c3f30f1e fa554889  .m...........UH.
 ffffffff801049d0 e54883ec 4048897d c88975c4 8955c048  .H..@H.}..u..U.H
 ffffffff801049e0 8b45c848 8945f88b 45c08945 e4c745e0  .E.H.E..E..E..E.
 ffffffff801049f0 0a000000 837dc478 7507c745 e0100000  .....}.xu..E....
 ffffffff80104a00 008b45e4 ba000000 00f775e0 8955dc83  ..E.......u..U..
 ffffffff80104a10 7ddc0977 0a8b45dc 83c03089 c1eb088b  }..w..E...0.....
 ffffffff80104a20 45dc83c0 5789c148 8b45f848 8d500148  E...W..H.E.H.P.H
 ffffffff80104a30 8955f888 088b45e4 ba000000 00f775e0  .U....E.......u.
 ffffffff80104a40 8945e483 7de4000f 95c084c0 7402ebb1  .E..}.......t...
 ffffffff80104a50 488b45f8 c6000048 8b45c848 8945f048  H.E....H.E.H.E.H
 ffffffff80104a60 8b45f848 83e80148 8945e848 8b45f048  .E.H...H.E.H.E.H
 ffffffff80104a70 3b45e873 2d488b45 f00fb600 8845db48  ;E.s-H.E.....E.H
 ffffffff80104a80 8b45e80f b610488b 45f08810 488b45e8  .E....H.E...H.E.
 ffffffff80104a90 0fb655db 88104883 45f00148 836de801  ..U...H.E..H.m..
 ffffffff80104aa0 ebc990c9 c3f30f1e fa554889 e54883ec  .........UH..H..
 ffffffff80104ab0 0889f889 f2668945 fc89d088 45f80fb6  .....f.E....E...
 ffffffff80104ac0 45f80fb7 55fcee90 c9c3f30f 1efa5548  E...U.........UH
 ffffffff80104ad0 89e54883 ec404889 7dc88975 c48955c0  ..H..@H.}..u..U.
 ffffffff80104ae0 488b45c8 488945f8 8b45c048 98488945  H.E.H.E..E.H.H.E
 ffffffff80104af0 e0c745dc 0a000000 837dc464 7527837d  ..E......}.du'.}
 ffffffff80104b00 c0007921 488b45f8 488d5001 488955f8  ..y!H.E.H.P.H.U.
 ffffffff80104b10 c6002d48 8345c801 8b45c0f7 d8489848  ..-H.E...E...H.H
 ffffffff80104b20 8945e0eb 0d837dc4 787507c7 45dc1000  .E....}.xu..E...
 ffffffff80104b30 00008b45 dc4863c8 488b45e0 ba000000  ...E.Hc.H.E.....
 ffffffff80104b40 0048f7f1 4889d089 45d8837d d8097f0a  .H..H...E..}....
 ffffffff80104b50 8b45d883 c03089c1 eb088b45 d883c057  .E...0.....E...W
 ffffffff80104b60 89c1488b 45f8488d 50014889 55f88808  ..H.E.H.P.H.U...
 ffffffff80104b70 8b45dc48 63f0488b 45e0ba00 00000048  .E.Hc.H.E......H
 ffffffff80104b80 f7f64889 45e04883 7de0000f 95c084c0  ..H.E.H.}.......
 ffffffff80104b90 7402eb9e 488b45f8 c6000048 8b45c848  t...H.E....H.E.H
 ffffffff80104ba0 8945f048 8b45f848 83e80148 8945e848  .E.H.E.H...H.E.H
 ffffffff80104bb0 8b45f048 3b45e873 2d488b45 f00fb600  .E.H;E.s-H.E....
 ffffffff80104bc0 8845d748 8b45e80f b610488b 45f08810  .E.H.E....H.E...
 ffffffff80104bd0 488b45e8 0fb655d7 88104883 45f00148  H.E...U...H.E..H
 ffffffff80104be0 836de801 ebc990c9 c3f30f1e fa554889  .m...........UH.
 ffffffff80104bf0 e54883ec 1889f866 8945ec0f b745ec89  .H.....f.E...E..
 ffffffff80104c00 c2ec8845 ff0fb645 ffc9c3f3 0f1efa55  ...E...E.......U
 ffffffff80104c10 4889e548 83ec1089 7dfc8b45 fc83c005  H..H....}..E....
 ffffffff80104c20 0fb7c089 c748b8e9 4b1080ff ffffffff  .....H..K.......
 ffffffff80104c30 d00fb6c0 83e02085 c00f94c0 84c07402  ...... .......t.
 ffffffff80104c40 ebd890c9 c3                          .....           
Contenu de la section .rodata :
 ffffffff80105000 68656c6c 6f20776f 726c6400 696e6974  hello world.init
 ffffffff80105010 20676474 00696e69 74206764 74203a20   gdt.init gdt : 
 ffffffff80105020 e29c8500 696e6974 20696474 00696e69  ....init idt.ini
 ffffffff80105030 74206964 74203a20 e29c8500 696e6974  t idt : ....init
 ffffffff80105040 20747373 00696e69 74207473 73203a20   tss.init tss : 
 ffffffff80105050 4f4b0069 6e697420 70616769 6e670000  OK.init paging..
 ffffffff80105060 6c696261 6c6c6f63 3a204552 524f523a  liballoc: ERROR:
 ffffffff80105070 20506f73 7369626c 6520312d 33206279   Possible 1-3 by
 ffffffff80105080 7465206f 76657272 756e2066 6f72206d  te overrun for m
 ffffffff80105090 61676963 20000000 6c696261 6c6c6f63  agic ...liballoc
 ffffffff801050a0 3a204552 524f523a 206d756c 7469706c  : ERROR: multipl
 ffffffff801050b0 65202866 72656529 28292061 7474656d  e (free)() attem
 ffffffff801050c0 70742000 6c696261 6c6c6f63 3a204552  pt .liballoc: ER
 ffffffff801050d0 524f523a 62616420 66726565 2000203d  ROR:bad free . =
 ffffffff801050e0 3d3d3d3d 3d3d3d3d 3d3d3d3d 3d200020  ============= . 
 ffffffff801050f0 6d656d6f 72792073 74617274 203a2000  memory start : .
 ffffffff80105100 206d656d 6f727920 656e6420 3a200020   memory end : . 
 ffffffff80105110 6d656d6f 7279206c 656e6768 74203a20  memory lenght : 
 ffffffff80105120 00206d65 6d6f7279 20747970 65203a20  . memory type : 
 ffffffff80105130 006c6f61 64696e67 20696474 006c6f61  .loading idt.loa
 ffffffff80105140 64696e67 20696474 20746162 6c65006c  ding idt table.l
 ffffffff80105150 6f616469 6e672069 64742069 64745f66  oading idt idt_f
 ffffffff80105160 6c757368 006c6f61 64696e67 20706963  lush.loading pic
 ffffffff80105170 006c6f61 64696e67 20706963 203a204f  .loading pic : O
 ffffffff80105180 4b006c6f 6164696e 67206964 74203a20  K.loading idt : 
 ffffffff80105190 4f4b0074 75726e69 6e67206f 6e20696e  OK.turning on in
 ffffffff801051a0 74657272 75707420 3a204f4b 20004469  terrupt : OK .Di
 ffffffff801051b0 76697369 6f6e2042 79205a65 726f0044  vision By Zero.D
 ffffffff801051c0 65627567 004e6f6e 204d6173 6b61626c  ebug.Non Maskabl
 ffffffff801051d0 6520496e 74657272 75707400 42726561  e Interrupt.Brea
 ffffffff801051e0 6b706f69 6e740049 6e746f20 44657465  kpoint.Into Dete
 ffffffff801051f0 63746564 204f7665 72666c6f 77004f75  cted Overflow.Ou
 ffffffff80105200 74206f66 20426f75 6e647300 496e7661  t of Bounds.Inva
 ffffffff80105210 6c696420 4f70636f 6465004e 6f20436f  lid Opcode.No Co
 ffffffff80105220 70726f63 6573736f 7200446f 75626c65  processor.Double
 ffffffff80105230 20466175 6c740043 6f70726f 63657373   Fault.Coprocess
 ffffffff80105240 6f722053 65676d65 6e74204f 76657272  or Segment Overr
 ffffffff80105250 756e0042 61642054 53530053 65676d65  un.Bad TSS.Segme
 ffffffff80105260 6e74204e 6f742050 72657365 6e740053  nt Not Present.S
 ffffffff80105270 7461636b 20466175 6c740047 656e6572  tack Fault.Gener
 ffffffff80105280 616c2050 726f7465 6374696f 6e204661  al Protection Fa
 ffffffff80105290 756c7400 50616765 20466175 6c740055  ult.Page Fault.U
 ffffffff801052a0 6e6b6e6f 776e2049 6e746572 72757074  nknown Interrupt
 ffffffff801052b0 00436f70 726f6365 73736f72 20466175  .Coprocessor Fau
 ffffffff801052c0 6c740041 6c69676e 6d656e74 20436865  lt.Alignment Che
 ffffffff801052d0 636b004d 61636869 6e652043 6865636b  ck.Machine Check
 ffffffff801052e0 00526573 65727665 6400207c 2000203d  .Reserved. | . =
 ffffffff801052f0 20003078 00203d3d 3d3d3d20 63707520   .0x. ===== cpu 
 ffffffff80105300 64756d70 203d3d3d 3d3d0020 3d3d3d3d  dump =====. ====
 ffffffff80105310 3d206373 20616e64 20737320 3d3d3d3d  = cs and ss ====
 ffffffff80105320 3d006373 00737300 2000203d 3d3d3d3d  =.cs.ss. . =====
 ffffffff80105330 20727820 3d3d3d3d 3d007238 00723900   rx =====.r8.r9.
 ffffffff80105340 72313000 72313100 72313200 72313300  r10.r11.r12.r13.
 ffffffff80105350 72313400 72313500 203d3d3d 3d3d2075  r14.r15. ===== u
 ffffffff80105360 74696c69 7479203d 3d3d3d3d 00727370  tility =====.rsp
 ffffffff80105370 00726270 00726469 00727369 00726478  .rbp.rdi.rsi.rdx
 ffffffff80105380 00726378 00726278 00726178 00203d3d  .rcx.rbx.rax. ==
 ffffffff80105390 3d3d3d20 6f746865 72203d3d 3d3d3d00  === other =====.
 ffffffff801053a0 6572726f 725f636f 64650069 6e745f6e  error_code.int_n
 ffffffff801053b0 6f007269 70007266 6c616773 00203d3d  o.rip.rflags. ==
 ffffffff801053c0 3d3d3d20 43525820 3d3d3d3d 3d004352  === CRX =====.CR
 ffffffff801053d0 32007265 63656976 6520616e 20696e74  2.receive an int
 ffffffff801053e0 65727275 70740065 72726f72 20666174  errupt.error fat
 ffffffff801053f0 616c0072 6970203a 00696420 3a00      al.rip :.id :.  
Contenu de la section .eh_frame :
 ffffffff80105400 14000000 00000000 017a5200 01781001  .........zR..x..
 ffffffff80105410 1b0c0708 90010000 1c000000 1c000000  ................
 ffffffff80105420 e0bbffff 59000000 00450e10 8602430d  ....Y....E....C.
 ffffffff80105430 060250c6 0c070800 1c000000 3c000000  ..P.........<...
 ffffffff80105440 15f4ffff 41000000 00450e10 8602430d  ....A....E....C.
 ffffffff80105450 0678c60c 07080000 1c000000 5c000000  .x..........\...
 ffffffff80105460 a0cbffff 64000000 00450e10 8602430d  ....d....E....C.
 ffffffff80105470 06025bc6 0c070800 1c000000 7c000000  ..[.........|...
 ffffffff80105480 e4cbffff c6000000 00450e10 8602430d  .........E....C.
 ffffffff80105490 0602bdc6 0c070800 1c000000 9c000000  ................
 ffffffff801054a0 8accffff 52010000 00450e10 8602430d  ....R....E....C.
 ffffffff801054b0 06034901 c60c0708 1c000000 bc000000  ..I.............
 ffffffff801054c0 bccdffff a2000000 00450e10 8602430d  .........E....C.
 ffffffff801054d0 060299c6 0c070800 1c000000 dc000000  ................
 ffffffff801054e0 3eceffff 25000000 00450e10 8602430d  >...%....E....C.
 ffffffff801054f0 065cc60c 07080000 1c000000 fc000000  .\..............
 ffffffff80105500 43ceffff 1f000000 00450e10 8602430d  C........E....C.
 ffffffff80105510 0656c60c 07080000 1c000000 1c010000  .V..............
 ffffffff80105520 42ceffff 48010000 00450e10 8602430d  B...H....E....C.
 ffffffff80105530 06033f01 c60c0708 1c000000 3c010000  ..?.........<...
 ffffffff80105540 56f3ffff 0c000000 00450e10 8602430d  V........E....C.
 ffffffff80105550 0643c60c 07080000 1c000000 5c010000  .C..........\...
 ffffffff80105560 42f3ffff 0c000000 00450e10 8602430d  B........E....C.
 ffffffff80105570 0643c60c 07080000 1c000000 7c010000  .C..........|...
 ffffffff80105580 2ef3ffff 16000000 00450e10 8602430d  .........E....C.
 ffffffff80105590 064dc60c 07080000 1c000000 9c010000  .M..............
 ffffffff801055a0 24f3ffff 1a000000 00450e10 8602430d  $........E....C.
 ffffffff801055b0 0651c60c 07080000 1c000000 bc010000  .Q..............
 ffffffff801055c0 eaceffff 42000000 00450e10 8602430d  ....B....E....C.
 ffffffff801055d0 0679c60c 07080000 1c000000 dc010000  .y..............
 ffffffff801055e0 0ccfffff 9d000000 00450e10 8602430d  .........E....C.
 ffffffff801055f0 060294c6 0c070800 1c000000 fc010000  ................
 ffffffff80105600 89cfffff 4d010000 00450e10 8602430d  ....M....E....C.
 ffffffff80105610 06034401 c60c0708 1c000000 1c020000  ..D.............
 ffffffff80105620 b6d0ffff 48080000 00450e10 8602430d  ....H....E....C.
 ffffffff80105630 06033f08 c60c0708 1c000000 3c020000  ..?.........<...
 ffffffff80105640 ded8ffff 67030000 00450e10 8602430d  ....g....E....C.
 ffffffff80105650 06035e03 c60c0708 1c000000 5c020000  ..^.........\...
 ffffffff80105660 25dcffff 60000000 00450e10 8602430d  %...`....E....C.
 ffffffff80105670 060257c6 0c070800 1c000000 7c020000  ..W.........|...
 ffffffff80105680 65dcffff c1010000 00450e10 8602430d  e........E....C.
 ffffffff80105690 0603b801 c60c0708 1c000000 9c020000  ................
 ffffffff801056a0 06deffff 32000000 00450e10 8602430d  ....2....E....C.
 ffffffff801056b0 0669c60c 07080000 1c000000 bc020000  .i..............
 ffffffff801056c0 18deffff 1c000000 00450e10 8602430d  .........E....C.
 ffffffff801056d0 0653c60c 07080000 1c000000 dc020000  .S..............
 ffffffff801056e0 14deffff 1e000000 00450e10 8602430d  .........E....C.
 ffffffff801056f0 0655c60c 07080000 1c000000 fc020000  .U..............
 ffffffff80105700 12deffff aa020000 00450e10 8602430d  .........E....C.
 ffffffff80105710 0603a102 c60c0708 1c000000 1c030000  ................
 ffffffff80105720 9ce0ffff 5f000000 00450e10 8602430d  ...._....E....C.
 ffffffff80105730 060256c6 0c070800 1c000000 3c030000  ..V.........<...
 ffffffff80105740 9ef1ffff eb000000 00450e10 8602430d  .........E....C.
 ffffffff80105750 0602e2c6 0c070800 1c000000 5c030000  ............\...
 ffffffff80105760 69f2ffff dc000000 00450e10 8602430d  i........E....C.
 ffffffff80105770 0602d3c6 0c070800 1c000000 7c030000  ............|...
 ffffffff80105780 25f3ffff 25000000 00450e10 8602430d  %...%....E....C.
 ffffffff80105790 065cc60c 07080000 1c000000 9c030000  .\..............
 ffffffff801057a0 2af3ffff 1f010000 00450e10 8602430d  *........E....C.
 ffffffff801057b0 06031601 c60c0708 1c000000 bc030000  ................
 ffffffff801057c0 5be0ffff 07010000 00450e10 8602430d  [........E....C.
 ffffffff801057d0 0602fec6 0c070800 1c000000 dc030000  ................
 ffffffff801057e0 42e1ffff ee010000 00450e10 8602430d  B........E....C.
 ffffffff801057f0 0603e501 c60c0708 1c000000 fc030000  ................
 ffffffff80105800 10e3ffff bf000000 00450e10 8602430d  .........E....C.
 ffffffff80105810 0602b6c6 0c070800 1c000000 1c040000  ................
 ffffffff80105820 afe3ffff 67040000 00450e10 8602430d  ....g....E....C.
 ffffffff80105830 06035e04 c60c0708 1c000000 3c040000  ..^.........<...
 ffffffff80105840 f6e7ffff 44000000 00450e10 8602430d  ....D....E....C.
 ffffffff80105850 067bc60c 07080000 1c000000 5c040000  .{..........\...
 ffffffff80105860 1ae8ffff 48000000 00450e10 8602430d  ....H....E....C.
 ffffffff80105870 067fc60c 07080000 1c000000 7c040000  ............|...
 ffffffff80105880 42e8ffff f6010000 00450e10 8602430d  B........E....C.
 ffffffff80105890 0603ed01 c60c0708 1c000000 9c040000  ................
 ffffffff801058a0 49f3ffff 22000000 00450e10 8602430d  I..."....E....C.
 ffffffff801058b0 0659c60c 07080000 1c000000 bc040000  .Y..............
 ffffffff801058c0 4bf3ffff 3a000000 00450e10 8602430d  K...:....E....C.
 ffffffff801058d0 0671c60c 07080000 1c000000 dc040000  .q..............
 ffffffff801058e0 d8e9ffff 45000000 00450e10 8602430d  ....E....E....C.
 ffffffff801058f0 067cc60c 07080000 1c000000 fc040000  .|..............
 ffffffff80105900 fde9ffff 5e000000 00450e10 8602430d  ....^....E....C.
 ffffffff80105910 060255c6 0c070800 1c000000 1c050000  ..U.............
 ffffffff80105920 3beaffff 70000000 00450e10 8602430d  ;...p....E....C.
 ffffffff80105930 060267c6 0c070800 1c000000 3c050000  ..g.........<...
 ffffffff80105940 8beaffff 5a000000 00450e10 8602430d  ....Z....E....C.
 ffffffff80105950 060251c6 0c070800 1c000000 5c050000  ..Q.........\...
 ffffffff80105960 c5eaffff d3000000 00450e10 8602430d  .........E....C.
 ffffffff80105970 0602cac6 0c070800                    ........        
Contenu de la section .data :
 ffffffff80106000 00100000 10000000 00000000 00000000  ................
 ffffffff80106010 00000000 00000000 00000000 00000000  ................
 ffffffff80106020 001080a0 1180ffff ffff0000 00000000  ................
 ffffffff80106030 00000000 00000000 00000000 00000000  ................
 ffffffff80106040 ae511080 ffffffff bf511080 ffffffff  .Q.......Q......
 ffffffff80106050 c5511080 ffffffff dc511080 ffffffff  .Q.......Q......
 ffffffff80106060 e7511080 ffffffff fe511080 ffffffff  .Q.......Q......
 ffffffff80106070 0c521080 ffffffff 1b521080 ffffffff  .R.......R......
 ffffffff80106080 2a521080 ffffffff 37521080 ffffffff  *R......7R......
 ffffffff80106090 53521080 ffffffff 5b521080 ffffffff  SR......[R......
 ffffffff801060a0 6f521080 ffffffff 7b521080 ffffffff  oR......{R......
 ffffffff801060b0 94521080 ffffffff 9f521080 ffffffff  .R.......R......
 ffffffff801060c0 b1521080 ffffffff c3521080 ffffffff  .R.......R......
 ffffffff801060d0 d3521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff801060e0 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff801060f0 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff80106100 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff80106110 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff80106120 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff80106130 e1521080 ffffffff e1521080 ffffffff  .R.......R......
 ffffffff80106140 48451080 ffffffff 54451080 ffffffff  HE......TE......
 ffffffff80106150 60451080 ffffffff 6c451080 ffffffff  `E......lE......
 ffffffff80106160 78451080 ffffffff 84451080 ffffffff  xE.......E......
 ffffffff80106170 93451080 ffffffff a2451080 ffffffff  .E.......E......
 ffffffff80106180 b1451080 ffffffff be451080 ffffffff  .E.......E......
 ffffffff80106190 cd451080 ffffffff da451080 ffffffff  .E.......E......
 ffffffff801061a0 e7451080 ffffffff f4451080 ffffffff  .E.......E......
 ffffffff801061b0 01461080 ffffffff 0e461080 ffffffff  .F.......F......
 ffffffff801061c0 1d461080 ffffffff 2c461080 ffffffff  .F......,F......
 ffffffff801061d0 3b461080 ffffffff 4a461080 ffffffff  ;F......JF......
 ffffffff801061e0 59461080 ffffffff 68461080 ffffffff  YF......hF......
 ffffffff801061f0 77461080 ffffffff 86461080 ffffffff  wF.......F......
 ffffffff80106200 95461080 ffffffff a4461080 ffffffff  .F.......F......
 ffffffff80106210 b3461080 ffffffff c2461080 ffffffff  .F.......F......
 ffffffff80106220 d1461080 ffffffff e0461080 ffffffff  .F.......F......
 ffffffff80106230 ef461080 ffffffff fc461080 ffffffff  .F.......F......
 ffffffff80106240 0b471080 ffffffff 1a471080 ffffffff  .G.......G......
 ffffffff80106250 29471080 ffffffff 38471080 ffffffff  )G......8G......
 ffffffff80106260 47471080 ffffffff 56471080 ffffffff  GG......VG......
 ffffffff80106270 65471080 ffffffff 74471080 ffffffff  eG......tG......
 ffffffff80106280 83471080 ffffffff 92471080 ffffffff  .G.......G......
 ffffffff80106290 a1471080 ffffffff b0471080 ffffffff  .G.......G......
 ffffffff801062a0 bf471080 ffffffff ce471080 ffffffff  .G.......G......
 ffffffff801062b0 dd471080 ffffffff ec471080 ffffffff  .G.......G......
 ffffffff801062c0 0a481080 ffffffff fb471080 ffffffff  .H.......G......
Contenu de la section .debug_info :
 0000 8a010000 04000000 00000801 06010000  ................
 0010 04150000 00b20000 00001010 80ffffff  ................
 0020 ff590000 00000000 00000000 00020106  .Y..............
 0030 52000000 020205fc 00000003 0405696e  R.............in
 0040 74000208 05280300 00020108 50000000  t....(......P...
 0050 04210200 00023119 61000000 05500000  .!....1.a....P..
 0060 00020207 5e000000 02040743 06000004  ....^......C....
 0070 37000000 0237197b 00000002 08073e06  7....7.{......>.
 0080 00000201 06590000 00063c02 00005003  .....Y....<...P.
 0090 15084001 0000075e 02000003 160e6f00  ..@....^......o.
 00a0 00000007 90000000 03170e6f 00000008  ...........o....
 00b0 074b0200 0003180e 6f000000 1007e000  .K......o.......
 00c0 00000319 0e6f0000 00180771 00000003  .....o.....q....
 00d0 1a0e5000 00002007 a0000000 031b0e50  ..P... ........P
 00e0 00000022 07240000 00031c0e 50000000  ...".$......P...
 00f0 24074000 0000031d 0e500000 00260710  $.@......P...&..
 0100 00000003 1e0e6f00 00002807 83000000  ......o...(.....
 0110 031f0e6f 00000030 07d80000 0003200e  ...o...0...... .
 0120 6f000000 38072a02 00000321 0e6f0000  o...8.*....!.o..
 0130 004007a7 0a000003 220e6f00 00004800  .@......".o...H.
 0140 08920400 00011c06 30020000 00101080  ........0.......
 0150 ffffffff 59000000 00000000 019c8101  ....Y...........
 0160 00000900 00000001 1c248101 00000291  .........$......
 0170 580af100 0000011e 18870100 00029168  X..............h
 0180 000b0889 0000000b 085c0000 0000de05  .........\......
 0190 00000400 a9000000 08010601 00000404  ................
 01a0 040000b2 00000000 00000000 00000000  ................
 01b0 000000ad 00000002 01065200 00000202  ..........R.....
 01c0 05fc0000 00030405 696e7400 02080528  ........int....(
 01d0 03000004 ce020000 032e1851 00000002  ...........Q....
 01e0 01085000 00000421 02000003 31196400  ..P....!....1.d.
 01f0 00000202 075e0000 00049703 00000334  .....^.........4
 0200 19770000 00020407 43060000 04370000  .w......C....7..
 0210 00033719 8a000000 0208073e 06000002  ..7........>....
 0220 01065900 0000050a 04130128 040000c0  ..Y........(....
 0230 00000006 6c656e00 04140c58 00000000  ....len....X....
 0240 07ed0800 0004150c 7e000000 02000429  ........~......)
 0250 04000004 161f9800 00000508 04190131  ...............1
 0260 03000028 01000007 57030000 041a0c58  ...(....W......X
 0270 00000000 07150400 00041b0c 58000000  ............X...
 0280 02077d02 0000041c 0c450000 000407a7  ..}......E......
 0290 0a000004 1d0c4500 00000507 86020000  ......E.........
 02a0 041e0c45 00000006 07d30300 00041f0c  ...E............
 02b0 45000000 07000433 03000004 201fcc00  E......3.... ...
 02c0 00000510 042301ab 03000080 01000008  .....#..........
 02d0 08042603 65010000 07a00300 0004270e  ..&.e.........'.
 02e0 6b000000 00078e03 00000428 0e6b0000  k..........(.k..
 02f0 00040006 6c6f7700 04241428 01000000  ....low..$.(....
 0300 07d80300 00042905 41010000 080004ad  ......).A.......
 0310 03000004 2a1f3401 00000970 10043201  ....*.4....p..2.
 0320 71030000 5f020000 0abf0300 0004330c  q..._.........3.
 0330 6b000000 10000742 04000004 340c7e00  k......B....4.~.
 0340 00000407 84030000 04350c7e 0000000c  .........5.~....
 0350 07890300 0004360c 7e000000 14074d03  ......6.~.....M.
 0360 00000437 0c7e0000 001c0747 04000004  ...7.~.....G....
 0370 380c7e00 00002407 dd030000 04390c7e  8.~...$......9.~
 0380 0000002c 07e20300 00043a0c 7e000000  ...,......:.~...
 0390 3407e703 0000043b 0c7e0000 003c07ec  4......;.~...<..
 03a0 03000004 3c0c7e00 00004407 6c040000  ....<.~...D.l...
 03b0 043d0c7e 0000004c 07f10300 00043e0c  .=.~...L......>.
 03c0 7e000000 5407c903 0000043f 0c7e0000  ~...T......?.~..
 03d0 005c0730 04000004 400c5800 00006407  .\.0....@.X...d.
 03e0 04030000 04410c58 00000066 000b7203  .....A.X...f..r.
 03f0 00000442 1f8c0100 00100208 05230300  ...B.........#..
 0400 00021004 78030000 0c6b0200 000dad02  ....x....k......
 0410 0000020e 08c00000 00090300 701080ff  ............p...
 0420 ffffff0e 28010000 a5020000 0f8a0000  ....(...........
 0430 003f000d 61030000 02121395 02000009  .?..a...........
 0440 03207010 80ffffff ff107473 73000213  . p.......tss...
 0450 095f0200 00090320 721080ff ffffff0e  ._..... r.......
 0460 45000000 e2020000 118a0000 00ff3f00  E.............?.
 0470 12820400 00024e09 d1020000 00100903  ......N.........
 0480 00801080 ffffffff 12d60200 00024f09  ..............O.
 0490 d1020000 00100903 00c01080 ffffffff  ................
 04a0 12e10200 00025009 d1020000 00100903  ......P.........
 04b0 00001180 ffffffff 13c40200 00026707  ..............g.
 04c0 f6020000 43231080 ffffffff 1f000000  ....C#..........
 04d0 00000000 019c6703 00001469 0002671f  ......g....i..g.
 04e0 8a000000 02916815 5f231080 ffffffff  ......h._#......
 04f0 d6030000 00133a04 00000261 06b20200  ......:....a....
 0500 001e2310 80ffffff ff250000 00000000  ..#......%......
 0510 00019c99 03000016 42040000 02611c7e  ........B....a.~
 0520 00000002 91680013 79040000 0251064c  .....h..y....Q.L
 0530 0400007c 221080ff ffffffa2 00000000  ...|"...........
 0540 00000001 9cd60300 00146900 0251187e  ..........i..Q.~
 0550 00000002 916815a7 221080ff ffffff73  .....h.."......s
 0560 05000000 131e0400 00022a06 f6030000  ..........*.....
 0570 2a211080 ffffffff 52010000 00000000  *!......R.......
 0580 019c7204 00001744 03000002 310c7e00  ..r....D....1.~.
 0590 00000291 6817ec02 00000232 0c7e0000  ....h......2.~..
 05a0 00029160 156b2110 80ffffff ff730500  ...`.k!......s..
 05b0 00159021 1080ffff ffff0705 000015b5  ...!............
 05c0 211080ff ffffff07 05000015 da211080  !............!..
 05d0 ffffffff 07050000 15ff2110 80ffffff  ..........!.....
 05e0 ff070500 00153222 1080ffff ffff7204  ......2"......r.
 05f0 00001579 221080ff ffffffd5 05000000  ...y"...........
 0600 180f0300 00021c0d 64201080 ffffffff  ........d ......
 0610 c6000000 00000000 019cfb04 00001661  ...............a
 0620 03000002 1c33fb04 00000291 58147365  .....3......X.se
 0630 6c00021c 4d580000 00029154 16a70a00  l...MX.....T....
 0640 00021c5a 45000000 02915016 66020000  ...ZE.....P.f...
 0650 021c6945 00000002 914c160a 03000002  ..iE.....L......
 0660 1c787e00 00000291 4016f002 0000021c  .x~.....@.......
 0670 877e0000 000391b8 7f179d09 0000021e  .~..............
 0680 16010500 00029168 00190828 01000019  .......h...(....
 0690 08800100 001a5904 00000214 0d001000  ......Y.........
 06a0 201080ff ffffff64 00000000 00000001   ......d........
 06b0 9c730500 00166103 00000214 32fb0400  .s....a.....2...
 06c0 00029158 1473656c 0002144c 58000000  ...X.sel...LX...
 06d0 02915416 a70a0000 02145945 00000002  ..T.......YE....
 06e0 91501666 02000002 14684500 00000291  .P.f.....hE.....
 06f0 4c179d09 00000216 15fb0400 00029168  L..............h
 0700 001b7104 00000104 0f9f0200 00d30500  ..q.............
 0710 00554810 80ffffff ff410000 00000000  .UH......A......
 0720 00019cd3 05000014 73000104 1ed30500  ........s.......
 0730 00029158 146e0001 042a7e00 00000291  ...X.n...*~.....
 0740 501c6948 1080ffff ffff2700 00000000  P.iH......'.....
 0750 00001d69 00010513 7e000000 02916800  ...i....~.....h.
 0760 001e081f 92020000 92020000 02291100  .............)..
 0770 4a030000 0400a402 00000801 06010000  J...............
 0780 04c10400 00b20000 00622310 80ffffff  .........b#.....
 0790 ff480100 00000000 00310200 00020106  .H.......1......
 07a0 52000000 020205fc 00000003 0405696e  R.............in
 07b0 74000208 05280300 00020108 50000000  t....(......P...
 07c0 04210200 00023119 5c000000 0202075e  .!....1.\......^
 07d0 00000002 04074306 00000437 00000002  ......C....7....
 07e0 37197600 00000208 073e0600 0004a804  7.v......>......
 07f0 00000256 1a760000 0005b90b 00000704  ...V.v..........
 0800 63000000 040406b8 00000006 56050000  c...........V...
 0810 f803065b 050000f8 02066005 0000e803  ...[......`.....
 0820 06650500 00e80200 07b20400 00180302  .e..............
 0830 08140100 00088604 00000304 0e6a0000  .............j..
 0840 000008a7 0a000003 070e5000 00000808  ..........P.....
 0850 a0000000 03080e50 0000000a 08240000  .......P.....$..
 0860 0003090e 50000000 0c084000 0000030a  ....P.....@.....
 0870 0e500000 000e084a 05000003 0b0b6a00  .P.....J......j.
 0880 00001000 02010659 00000007 3c020000  .......Y....<...
 0890 50031508 d2010000 085e0200 0003160e  P........^......
 08a0 6a000000 00089000 00000317 0e6a0000  j............j..
 08b0 0008084b 02000003 180e6a00 00001008  ...K......j.....
 08c0 e0000000 03190e6a 00000018 08710000  .......j.....q..
 08d0 00031a0e 50000000 2008a000 0000031b  ....P... .......
 08e0 0e500000 00220824 00000003 1c0e5000  .P...".$......P.
 08f0 00002408 40000000 031d0e50 00000026  ..$.@......P...&
 0900 08100000 00031e0e 6a000000 28088300  ........j...(...
 0910 0000031f 0e6a0000 003008d8 00000003  .....j...0......
 0920 200e6a00 00003808 2a020000 03210e6a   .j...8.*....!.j
 0930 00000040 08a70a00 0003220e 6a000000  ...@......".j...
 0940 48000914 010000e3 0100000a 76000000  H...........v...
 0950 ff0f000b 86040000 01070dd2 01000009  ................
 0960 03004011 80ffffff ff0cba04 0000010a  ..@.............
 0970 17b80000 00090300 001080ff ffffff0d  ................
 0980 8c040000 01131162 231080ff ffffff48  .......b#......H
 0990 01000000 00000001 9cf30200 000e0000  ................
 09a0 00000113 2ef30200 00029168 0f872310  ...........h..#.
 09b0 80ffffff fff90200 000f9d23 1080ffff  ...........#....
 09c0 ffff0503 00000fb3 231080ff ffffff05  ........#.......
 09d0 0300000f d2231080 ffffffff 11030000  .....#..........
 09e0 0fe82310 80ffffff ff050300 000ffe23  ..#............#
 09f0 1080ffff ffff0503 00000f0a 241080ff  ............$...
 0a00 ffffff1d 0300000f 20241080 ffffffff  ........ $......
 0a10 05030000 0f362410 80ffffff ff050300  .....6$.........
 0a20 000f5524 1080ffff ffff2903 00000f6b  ..U$......)....k
 0a30 241080ff ffffff05 0300000f 81241080  $............$..
 0a40 ffffffff 05030000 0f942410 80ffffff  ..........$.....
 0a50 ff350300 000fa724 1080ffff ffff4103  .5.....$......A.
 0a60 00000010 081b0100 0011d304 00009904  ................
 0a70 0000040f 06110305 00006a05 0000040d  ..........j.....
 0a80 0611f602 0000c402 0000052e 06117805  ..............x.
 0a90 00001805 00000613 06114c04 00007904  ..........L...y.
 0aa0 00000543 06112105 0000ef04 00000746  ...C..!........F
 0ab0 06113002 00009204 00000802 06009008  ..0.............
 0ac0 00000400 a5030000 08010601 000004c2  ................
 0ad0 060000b2 00000030 00000000 00000000  .......0........
 0ae0 0000003d 03000002 01065200 00000202  ...=......R.....
 0af0 05fc0000 00030405 696e7400 02080528  ........int....(
 0b00 03000002 01085000 00000202 075e0000  ......P......^..
 0b10 00020407 43060000 0208073e 06000004  ....C......>....
 0b20 a8040000 03561a5a 00000004 9b050000  .....V.Z........
 0b30 010e0e3e 00000005 2a060000 28023e08  ...>....*...(.>.
 0b40 d5000000 06210700 00024019 d5000000  .....!....@.....
 0b50 00063807 00000241 19d50000 00080626  ..8....A.......&
 0b60 07000002 420f5300 00001006 98060000  ....B.S.........
 0b70 02430f53 00000014 06850500 0002440f  .C.S..........D.
 0b80 53000000 18064507 00000245 19370100  S.....E....E.7..
 0b90 00200007 08790000 0005a905 00002802  . ...y........(.
 0ba0 4d083701 00000621 07000002 4f193701  M.7....!....O.7.
 0bb0 00000006 38070000 02501937 01000008  ....8....P.7....
 0bc0 06160600 00025119 d5000000 10061607  ......Q.........
 0bd0 00000252 0f530000 00180698 06000002  ...R.S..........
 0be0 530f5300 00001c06 b9060000 02540f53  S.S..........T.S
 0bf0 00000020 000708db 00000008 f4050000  ... ............
 0c00 02581fd5 00000009 03005011 80ffffff  .X........P.....
 0c10 ff089d06 00000259 1fd50000 00090308  .......Y........
 0c20 501180ff ffffff08 80060000 025b1553  P............[.S
 0c30 00000009 03006010 80ffffff ff082c07  ......`.......,.
 0c40 0000025c 15530000 00090304 601080ff  ...\.S......`...
 0c50 ffffff08 60060000 025d1bab 01000009  ....`....]......
 0c60 03105011 80ffffff ff020807 39060000  ..P.........9...
 0c70 080e0600 00025e1b ab010000 09031850  ......^........P
 0c80 1180ffff ffff08e1 06000002 6112de01  ............a...
 0c90 00000903 20501180 ffffffff 02080523  .... P.........#
 0ca0 03000008 6c060000 026212de 01000009  ....l....b......
 0cb0 03285011 80ffffff ff08db05 00000263  .(P............c
 0cc0 12de0100 00090330 501180ff ffffff09  .......0P.......
 0cd0 8b060000 02e60209 1e030000 e5321080  .............2..
 0ce0 ffffffff c1010000 00000000 019c1e03  ................
 0cf0 00000a70 0002e602 1f1e0300 00029148  ...p...........H
 0d00 0b980600 0002e602 296d0000 00029140  ........)m.....@
 0d10 0c707472 0002e802 081e0300 00029168  .ptr...........h
 0d20 0c6d696e 0002e902 19370100 00029158  .min.....7.....X
 0d30 0d930600 0002ea02 0f530000 00029154  .........S.....T
 0d40 0e443310 80ffffff ff260000 00000000  .D3......&......
 0d50 00a80200 000d8b05 000002f8 02026100  ..............a.
 0d60 00000291 60000f13 331080ff ffffff9c  ....`...3.......
 0d70 0300000f 37331080 ffffffff a3040000  ....73..........
 0d80 0f763310 80ffffff ff690800 000f1134  .v3......i.....4
 0d90 1080ffff ffff4b08 00000f47 341080ff  ......K....G4...
 0da0 ffffff4b 0800000f 59341080 ffffffff  ...K....Y4......
 0db0 4b080000 0f6c3410 80ffffff ffa30400  K....l4.........
 0dc0 000f8d34 1080ffff ffffe206 00000fa0  ...4............
 0dd0 341080ff ffffff9c 03000000 10080979  4..............y
 0de0 06000002 d602071e 03000085 321080ff  ............2...
 0df0 ffffff60 00000000 00000001 9c9c0300  ...`............
 0e00 000b1c07 000002d6 021d6d00 00000291  ..........m.....
 0e10 580b9806 000002d6 022a6d00 00000291  X........*m.....
 0e20 500d9306 000002d8 020c3700 00000291  P.........7.....
 0e30 6c0c7000 02d9020e 1e030000 0291600f  l.p...........`.
 0e40 bd321080 ffffffff a3040000 0fdf3210  .2............2.
 0e50 80ffffff ff850700 00001125 06000002  ...........%....
 0e60 5202061e 2f1080ff ffffff67 03000000  R.../......g....
 0e70 00000001 9ca30400 000a7074 72000252  ..........ptr..R
 0e80 02191e03 00000291 480c6d69 6e000254  ........H.min..T
 0e90 02193701 00000291 600c6d61 6a000255  ..7.....`.maj..U
 0ea0 0219d500 00000291 580e582f 1080ffff  ........X.X/....
 0eb0 ffff2600 00000000 00001104 00000d8b  ..&.............
 0ec0 05000002 62020261 00000002 9168000e  ....b..a.....h..
 0ed0 22321080 ffffffff 55000000 00000000  "2......U.......
 0ee0 47040000 0dff0600 0002c102 08370000  G............7..
 0ef0 00029154 0d3d0700 0002c202 08370000  ...T.=.......7..
 0f00 00029150 000f8a2f 1080ffff ffff6908  ...P.../......i.
 0f10 00000f2f 301080ff ffffff87 0800000f  .../0...........
 0f20 53301080 ffffffff 87080000 0f6b3010  S0...........k0.
 0f30 80ffffff ff870800 000f7730 1080ffff  ..........w0....
 0f40 ffff4b08 00000f0e 321080ff ffffffdc  ..K.....2.......
 0f50 0700000f 83321080 ffffffff 4b080000  .....2......K...
 0f60 0012a205 000002f1 071e0300 00d62610  ..............&.
 0f70 80ffffff ff480800 00000000 00019c86  .....H..........
 0f80 06000013 b9060000 02f11d6d 00000003  ...........m....
 0f90 91887f08 90050000 02f30637 00000002  ...........7....
 0fa0 916c08ff 06000002 f415ab01 00000291  .l..............
 0fb0 60147000 02f5081e 03000002 9158088b  `.p..........X..
 0fc0 05000002 f60c6100 00000391 987f146d  ......a........m
 0fd0 616a0002 f719d500 00000291 50146d69  aj..........P.mi
 0fe0 6e0002f8 19370100 00029148 08c30500  n....7.....H....
 0ff0 0002f919 37010000 0391907f 08980600  ....7...........
 1000 0002fa10 5a000000 0391a07f 0ed72910  ....Z.........).
 1010 80ffffff ff4b0000 00000000 00740500  .....K.......t..
 1020 000d8b05 0000028e 01046100 00000291  ..........a.....
 1030 40000e33 2b1080ff ffffff4b 00000000  @..3+......K....
 1040 0000009b 0500000d 8b050000 02b20104  ................
 1050 61000000 0391b87f 000eb62c 1080ffff  a..........,....
 1060 ffff4b00 00000000 0000c205 00000d8b  ..K.............
 1070 05000002 e1010761 00000003 91b07f00  .......a........
 1080 0e222e10 80ffffff ff4b0000 00000000  .".......K......
 1090 00e90500 000d8b05 0000020a 02076100  ..............a.
 10a0 00000391 a87f000f 16271080 ffffffff  .........'......
 10b0 69080000 0f472710 80ffffff ff4b0800  i....G'......K..
 10c0 000f5827 1080ffff ffffa304 00000f81  ..X'............
 10d0 271080ff ffffff86 0600000f ac271080  '............'..
 10e0 ffffffff 4b080000 0fdb2810 80ffffff  ....K.....(.....
 10f0 ff860600 000f2e2a 1080ffff ffff4b08  .......*......K.
 1100 00000f8a 2b1080ff ffffff4b 0800000f  ....+......K....
 1110 0d2d1080 ffffffff 4b080000 0f792e10  .-......K....y..
 1120 80ffffff ff4b0800 000fd22e 1080ffff  .....K..........
 1130 ffff8606 00000f17 2f1080ff ffffff4b  ......../......K
 1140 08000000 15a70600 0002b91f d5000000  ................
 1150 89251080 ffffffff 4d010000 00000000  .%......M.......
 1160 019ce206 00001398 06000002 b93f5300  .............?S.
 1170 00000291 5c147374 0002bb0f 53000000  ....\.st....S...
 1180 02916c14 6d616a00 02bc19d5 00000002  ..l.maj.........
 1190 91600f29 261080ff ffffff1b 08000000  .`.)&...........
 11a0 15fe0500 0002730e 1e030000 ec241080  ......s......$..
 11b0 ffffffff 9d000000 00000000 019c6b07  ..............k.
 11c0 00001673 31000273 241e0300 00029148  ...s1..s$......H
 11d0 16733200 0273346b 07000002 9140166e  .s2..s4k.....@.n
 11e0 0002733f 6d000000 0391b87f 08b80500  ..s?m...........
 11f0 00027509 72070000 02916808 dc060000  ..u.r.....h.....
 1200 02760972 07000002 916008ee 05000002  .v.r.....`......
 1210 77117f07 00000291 5808be05 00000278  w.......X......x
 1220 117f0700 00029150 00070871 07000017  .......P...q....
 1230 07087807 00000201 06590000 00070853  ..x......Y.....S
 1240 00000015 50060000 026b0e1e 030000aa  ....P....k......
 1250 241080ff ffffff42 00000000 00000001  $......B........
 1260 9cdc0700 00167300 026b241e 03000002  ......s..k$.....
 1270 91581663 00026b2b 37000000 02915416  .X.c..k+7.....T.
 1280 6e00026b 356d0000 00029148 14690002  n..k5m.....H.i..
 1290 6d0f5300 00000291 6c00121c 06000001  m.S.....l.......
 12a0 460c3700 0000c448 1080ffff ffff1a00  F.7....H........
 12b0 00000000 0000019c 1b080000 13ed0800  ................
 12c0 00014620 1e030000 02916816 64000146  ..F ......h.d..F
 12d0 29370000 00029164 0012f006 0000013a  )7.....d.......:
 12e0 0e1e0300 00ae4810 80ffffff ff160000  ......H.........
 12f0 00000000 00019c4b 08000016 6400013a  .......K....d..:
 1300 21370000 0002916c 0018cb05 0000012e  !7.....l........
 1310 0c370000 00a24810 80ffffff ff0c0000  .7....H.........
 1320 00000000 00019c18 08070000 01240c37  .............$.7
 1330 00000096 481080ff ffffff0c 00000000  ....H...........
 1340 00000001 9c190305 00006a05 0000040d  ..........j.....
 1350 0600340a 00000400 4c050000 08010601  ..4.....L.......
 1360 000004f0 070000b2 00000090 00000000  ................
 1370 00000000 000000fe 09000002 01065200  ..............R.
 1380 00000202 05fc0000 00030405 696e7400  ............int.
 1390 02080528 03000004 ce020000 042e1851  ...(...........Q
 13a0 00000002 01085000 00000421 02000004  ......P....!....
 13b0 31196400 00000202 075e0000 00049703  1.d......^......
 13c0 00000434 19770000 00020407 43060000  ...4.w......C...
 13d0 04370000 00043719 8a000000 0208073e  .7....7........>
 13e0 06000005 e4070000 08050807 91010000  ................
 13f0 0608050a 0c780100 00075109 0000050b  .....x....Q.....
 1400 127e0000 0008013f 00078909 0000050c  .~.....?........
 1410 127e0000 0008013e 0007a808 0000050d  .~.....>........
 1420 127e0000 0008013d 00073509 0000050e  .~.....=..5.....
 1430 127e0000 0008013c 00076e08 0000050f  .~.....<..n.....
 1440 127e0000 0008013b 00072c09 00000510  .~.....;..,.....
 1450 127e0000 0008013a 00077e08 00000511  .~.....:..~.....
 1460 127e0000 00080139 00077404 00000512  .~.....9..t.....
 1470 127e0000 00080138 0007ad07 00000513  .~.....8........
 1480 127e0000 00080137 00079f08 00000514  .~.....7........
 1490 127e0000 00080334 00071a09 00000515  .~.....4........
 14a0 127e0000 0008280c 00072f08 00000516  .~....(.../.....
 14b0 127e0000 00080b01 00071409 00000517  .~..............
 14c0 127e0000 00080100 000008be 08000005  .~..............
 14d0 090e7e00 000008f2 08000005 18069e00  ..~.............
 14e0 00000005 ad080000 08051c07 91020000  ................
 14f0 0608051f 0c780200 00075109 00000520  .....x....Q.... 
 1500 127e0000 0008013f 00078909 00000521  .~.....?.......!
 1510 127e0000 0008013e 0007a808 00000522  .~.....>......."
 1520 127e0000 0008013d 00073509 00000523  .~.....=..5....#
 1530 127e0000 0008013c 00076e08 00000524  .~.....<..n....$
 1540 127e0000 0008013b 00072c09 00000525  .~.....;..,....%
 1550 127e0000 0008013a 00077e08 00000526  .~.....:..~....&
 1560 127e0000 00080139 00077404 00000527  .~.....9..t....'
 1570 127e0000 00080138 00070209 00000528  .~.....8.......(
 1580 127e0000 00080137 00079f08 00000529  .~.....7.......)
 1590 127e0000 00080334 00071a09 0000052a  .~.....4.......*
 15a0 127e0000 0008280c 00072f08 0000052b  .~....(.../....+
 15b0 127e0000 00080b01 00071409 0000052c  .~.............,
 15c0 127e0000 00080100 000008be 08000005  .~..............
 15d0 1e0e7e00 000008f2 08000005 2d069e01  ..~.........-...
 15e0 00000005 d9080000 08053007 b1030000  ..........0.....
 15f0 06080533 0c980300 00075109 00000534  ...3......Q....4
 1600 127e0000 0008013f 00078909 00000535  .~.....?.......5
 1610 127e0000 0008013e 0007a808 00000536  .~.....>.......6
 1620 127e0000 0008013d 00073509 00000537  .~.....=..5....7
 1630 127e0000 0008013c 00076e08 00000538  .~.....<..n....8
 1640 127e0000 0008013b 00072c09 00000539  .~.....;..,....9
 1650 127e0000 0008013a 00077e08 0000053a  .~.....:..~....:
 1660 127e0000 00080139 00096f6e 6500053b  .~.....9..one..;
 1670 127e0000 00080138 0007d607 0000053c  .~.....8.......<
 1680 127e0000 00080137 00074908 0000053d  .~.....7..I....=
 1690 127e0000 00080334 00097061 7400053e  .~.....4..pat..>
 16a0 127e0000 00080133 00077404 0000053f  .~.....3..t....?
 16b0 127e0000 0008082b 00071a09 00000540  .~.....+.......@
 16c0 127e0000 00081f0c 00072f08 00000541  .~......../....A
 16d0 127e0000 00080b01 00071409 00000542  .~.............B
 16e0 127e0000 00080100 000008be 08000005  .~..............
 16f0 320e7e00 000008f2 08000005 43069e02  2.~.........C...
 1700 00000002 01065900 00000a3c 02000050  ......Y....<...P
 1710 0615086f 0400000b 5e020000 06160e7e  ...o....^......~
 1720 00000000 0b900000 0006170e 7e000000  ............~...
 1730 080b4b02 00000618 0e7e0000 00100be0  ..K......~......
 1740 00000006 190e7e00 0000180b 71000000  ......~.....q...
 1750 061a0e58 00000020 0ba00000 00061b0e  ...X... ........
 1760 58000000 220b2400 0000061c 0e580000  X...".$......X..
 1770 00240b40 00000006 1d0e5800 0000260b  .$.@......X...&.
 1780 10000000 061e0e7e 00000028 0b830000  .......~...(....
 1790 00061f0e 7e000000 300bd800 00000620  ....~...0...... 
 17a0 0e7e0000 00380b2a 02000006 210e7e00  .~...8.*....!.~.
 17b0 0000400b a70a0000 06220e7e 00000048  ..@......".~...H
 17c0 000a5909 00001806 2d08b104 00000b0a  ..Y.....-.......
 17d0 03000006 2e0e7e00 0000000b 42080000  ......~.....B...
 17e0 062f0e7e 00000008 0bb90800 0006300e  ./.~..........0.
 17f0 6b000000 100b9209 00000631 0e6b0000  k..........1.k..
 1800 0014000c 93070000 0208157e 0000000d  ...........~....
 1810 79070000 02090bd3 04000009 03006011  y.............`.
 1820 80ffffff ff0e086b 0000000f 91000000  .......k........
 1830 ea040000 108a0000 00ff0100 11090800  ................
 1840 00020e0d d9040000 00100903 00701180  .............p..
 1850 ffffffff 0f910100 00130500 00108a00  ................
 1860 0000ff01 0011b408 0000020f 0e020500  ................
 1870 00001009 03008011 80ffffff ff0f9102  ................
 1880 00003c05 0000108a 000000ff 01001270  ..<............p
 1890 64650002 100e2b05 00000010 09030090  de....+.........
 18a0 1180ffff ffff131a 08000003 560d4b07  ............V.K.
 18b0 0000c949 1080ffff ffffdc00 00000000  ...I............
 18c0 0000019c 38060000 14540077 00000015  ....8....T.w....
 18d0 62756600 03561a38 06000003 91b87f16  buf..V.8........
 18e0 0a030000 03562337 00000003 91b47f15  .....V#7........
 18f0 64000356 2b770000 000391b0 7f177000  d..V+w........p.
 1900 03580838 06000002 91681770 31000359  .X.8.....h.p1..Y
 1910 08380600 00029160 17703200 03590e38  .8.....`.p2..Y.8
 1920 06000002 91581775 6400035a 04770000  .....X.ud..Z.w..
 1930 00029154 185e0700 00035b04 77000000  ...T.^....[.w...
 1940 02915019 014a1080 ffffffff 34000000  ..P..J......4...
 1950 00000000 16060000 18890700 00036a05  ..............j.
 1960 77000000 02914c00 1a754a10 80ffffff  w.....L..uJ.....
 1970 ff2b0000 00000000 0017746d 70000377  .+........tmp..w
 1980 08b10300 0002914b 00000e08 b1030000  .......K........
 1990 13bc0700 0003560d 66070000 de481080  ......V.f....H..
 19a0 ffffffff eb000000 00000000 019c2307  ..............#.
 19b0 00001454 008a0000 00156275 66000356  ...T......buf..V
 19c0 1a380600 000391a8 7f160a03 00000356  .8.............V
 19d0 23370000 000391a4 7f156400 03562b8a  #7........d..V+.
 19e0 00000003 91987f17 70000358 08380600  ........p..X.8..
 19f0 00029168 17703100 03590838 06000002  ...h.p1..Y.8....
 1a00 91601770 32000359 0e380600 00029158  .`.p2..Y.8.....X
 1a10 17756400 035a048a 00000002 9150185e  .ud..Z.......P.^
 1a20 07000003 5b048a00 00000291 48191b49  ....[.......H..I
 1a30 1080ffff ffff3a00 00000000 00000007  ......:.........
 1a40 00001889 07000003 6a058a00 00000291  ........j.......
 1a50 40001a99 491080ff ffffff2b 00000000  @...I......+....
 1a60 00000017 746d7000 037708b1 03000003  ....tmp..w......
 1a70 91bf7f00 00133908 00000250 069e0700  ......9....P....
 1a80 00bc3710 80ffffff ff5f0000 00000000  ..7......_......
 1a90 00019cb0 07000016 f9080000 0250187e  .............P.~
 1aa0 00000002 914816b3 07000002 502b7e00  .....H......P+~.
 1ab0 00000291 4016a70a 00000250 3e7e0000  ....@......P>~..
 1ac0 000391b8 7f184309 00000252 0b7e0000  ......C....R.~..
 1ad0 00029168 18660900 0002530b 7e000000  ...h.f....S.~...
 1ae0 02916018 0f080000 02540b7e 00000002  ..`......T.~....
 1af0 91581873 09000002 550b7e00 00000291  .X.s....U.~.....
 1b00 500013ef 04000002 1f062105 00001235  P.........!....5
 1b10 1080ffff ffffaa02 00000000 0000019c  ................
 1b20 0f090000 16630800 00021f2a 0f090000  .....c.....*....
 1b30 0391987f 18800700 00022013 15090000  .......... .....
 1b40 02916018 f5000000 02210a1b 09000003  ..`......!......
 1b50 91a07f19 46351080 ffffffff 73020000  ....F5......s...
 1b60 00000000 01090000 17690002 230e3700  .........i..#.7.
 1b70 00000291 6c1ba335 1080ffff ffff2b0a  ....l..5......+.
 1b80 00001bdb 351080ff ffffff3e 0600001b  ....5......>....
 1b90 f1351080 ffffffff 2b0a0000 1b043610  .5......+.....6.
 1ba0 80ffffff ff2b0a00 001b1c36 1080ffff  .....+.....6....
 1bb0 ffffc909 00001b79 361080ff ffffff3e  .......y6......>
 1bc0 0600001b 8f361080 ffffffff 2b0a0000  .....6......+...
 1bd0 1ba23610 80ffffff ff2b0a00 001bba36  ..6......+.....6
 1be0 1080ffff ffffc909 00001bf3 361080ff  ............6...
 1bf0 ffffff3e 0600001b 09371080 ffffffff  ...>.....7......
 1c00 2b0a0000 1b1c3710 80ffffff ff2b0a00  +.....7......+..
 1c10 001b3437 1080ffff ffffc909 00001b6c  ..47...........l
 1c20 371080ff ffffff54 0500001b 82371080  7......T.....7..
 1c30 ffffffff 2b0a0000 1b953710 80ffffff  ....+.....7.....
 1c40 ff2b0a00 001bad37 1080ffff ffffc909  .+.....7........
 1c50 0000001b 46351080 ffffffff c9090000  ....F5..........
 1c60 000e08b8 0300000e 086f0400 000fb103  .........o......
 1c70 00002b09 00001c8a 0000003f 001d7e09  ..+........?..~.
 1c80 00000213 0b530800 007e0000 00f43410  .....S...~....4.
 1c90 80ffffff ff1e0000 00000000 00019c61  ...............a
 1ca0 09000016 ed080000 02131f7e 00000002  ...........~....
 1cb0 9168001d e4080000 02110ac6 0800007e  .h.............~
 1cc0 000000d8 341080ff ffffff1c 00000000  ....4...........
 1cd0 00000001 9c970900 0016ed08 00000211  ................
 1ce0 217e0000 00029168 00132109 0000020a  !~.....h..!.....
 1cf0 068f0800 00a63410 80ffffff ff320000  ......4......2..
 1d00 00000000 00019cc9 09000016 dd070000  ................
 1d10 020a1a7e 00000002 9168001d 71040000  ...~.....h..q...
 1d20 01040f9f 02000029 0a000055 481080ff  .......)...UH...
 1d30 ffffff41 00000000 00000001 9c290a00  ...A.........)..
 1d40 00157300 01041e29 0a000002 9158156e  ..s....).....X.n
 1d50 0001042a 7e000000 0291501a 69481080  ...*~.....P.iH..
 1d60 ffffffff 27000000 00000000 17690001  ....'........i..
 1d70 05137e00 00000291 6800001e 081f0305  ..~.....h.......
 1d80 00006a05 0000070d 06007e0b 00000400  ..j.......~.....
 1d90 3a070000 08010601 000004b3 090000b2  :...............
 1da0 000000e0 00000000 00000000 000000cb  ................
 1db0 0c000002 01065200 00000202 05fc0000  ......R.........
 1dc0 00030405 696e7400 02080528 03000004  ....int....(....
 1dd0 ce020000 052e1851 00000002 01085000  .......Q......P.
 1de0 00000421 02000005 31196400 00000202  ...!....1.d.....
 1df0 075e0000 00049703 00000534 19770000  .^.........4.w..
 1e00 00020407 43060000 04370000 00053719  ....C....7....7.
 1e10 8a000000 0208073e 06000004 a8040000  .......>........
 1e20 05561a8a 00000005 10060310 100a0000  .V..............
 1e30 05010000 06510b00 0006040e 58000000  .....Q......X...
 1e40 00076373 0006050e 58000000 02076973  ..cs....X.....is
 1e50 74000606 0d450000 000406a8 09000006  t....E..........
 1e60 070d4500 00000506 440b0000 06080e58  ..E.....D......X
 1e70 00000006 06d70900 0006090e 6b000000  ............k...
 1e80 08067404 0000060a 0e6b0000 000c0004  ..t......k......
 1e90 120a0000 060b1b9d 00000005 0a060c10  ................
 1ea0 290b0000 39010000 06980600 00060d0e  )...9...........
 1eb0 58000000 00061308 0000060e 0e7e0000  X............~..
 1ec0 00020004 2a0b0000 060f1b11 01000008  ....*...........
 1ed0 6f0a0000 a8070608 6d020000 07723135  o.......m....r15
 1ee0 0007070b 7e000000 00077231 34000708  ....~.....r14...
 1ef0 0b7e0000 00080772 31330007 090b7e00  .~.....r13....~.
 1f00 00001007 72313200 070a0b7e 00000018  ....r12....~....
 1f10 07723131 00070b0b 7e000000 20077231  .r11....~... .r1
 1f20 3000070c 0b7e0000 00280772 3900070d  0....~...(.r9...
 1f30 0b7e0000 00300772 3800070e 0b7e0000  .~...0.r8....~..
 1f40 00380772 62700007 0f0b7e00 00004007  .8.rbp....~...@.
 1f50 72646900 07100b7e 00000048 07727369  rdi....~...H.rsi
 1f60 0007110b 7e000000 50077264 78000712  ....~...P.rdx...
 1f70 0b7e0000 00580772 63780007 130b7e00  .~...X.rcx....~.
 1f80 00006007 72627800 07140b7e 00000068  ..`.rbx....~...h
 1f90 07726178 0007150b 7e000000 7006eb09  .rax....~...p...
 1fa0 0000071a 0b6b0000 00780617 0b000007  .....k...x......
 1fb0 1b0b6b00 00007c07 72697000 071d0b7e  ..k...|.rip....~
 1fc0 00000080 07637300 071e0b7e 00000088  .....cs....~....
 1fd0 06a60a00 00071f0b 7e000000 90077273  ........~.....rs
 1fe0 70000720 0b7e0000 00980773 73000721  p.. .~.....ss..!
 1ff0 0b7e0000 00a00009 91000000 7d020000  .~..........}...
 2000 0a8a0000 007f000b dc0a0000 0417126d  ...............m
 2010 02000009 05010000 99020000 0a8a0000  ................
 2020 00ff000c 69647400 04181489 02000009  ....idt.........
 2030 0380a011 80ffffff ff0d9909 00000419  ................
 2040 0f390100 00090320 601080ff ffffff09  .9..... `.......
 2050 d5020000 d5020000 0a8a0000 001f000e  ................
 2060 08e20200 00020106 59000000 0fdb0200  ........Y.......
 2070 0010040b 00000455 0dc50200 00090340  .......U.......@
 2080 601080ff ffffff09 db020000 0d030000  `...............
 2090 0a8a0000 003f0010 0a0a0000 047b06fd  .....?.......{..
 20a0 02000009 0300a011 80ffffff ff10ca09  ................
 20b0 000004b9 0afd0200 00090340 a01180ff  ...........@....
 20c0 ffffff11 bc070000 03560d66 070000de  .........V.f....
 20d0 481080ff ffffffeb 00000000 00000001  H...............
 20e0 9c1e0400 00125400 8a000000 13627566  ......T......buf
 20f0 0003561a 1e040000 0391a87f 140a0300  ..V.............
 2100 00035623 37000000 0391a47f 13640003  ..V#7........d..
 2110 562b8a00 00000391 987f0c70 00035808  V+.........p..X.
 2120 1e040000 0291680c 70310003 59081e04  ......h.p1..Y...
 2130 00000291 600c7032 0003590e 1e040000  ....`.p2..Y.....
 2140 0291580c 75640003 5a048a00 00000291  ..X.ud..Z.......
 2150 500d5e07 0000035b 048a0000 00029148  P.^....[.......H
 2160 151b4910 80ffffff ff3a0000 00000000  ..I......:......
 2170 00fb0300 000d8907 0000036a 058a0000  ...........j....
 2180 00029140 00169949 1080ffff ffff2b00  ...@...I......+.
 2190 00000000 00000c74 6d700003 7708db02  .......tmp..w...
 21a0 00000391 bf7f0000 0e08db02 000017ba  ................
 21b0 0a000004 c711c240 1080ffff fffff601  .......@........
 21c0 00000000 0000019c 3c050000 14510a00  ........<....Q..
 21d0 0004c73a 3c050000 02916818 e8401080  ...:<.....h..@..
 21e0 ffffffff 690b0000 18fd4010 80ffffff  ....i.....@.....
 21f0 ff420500 00181b41 1080ffff ffff690b  .B.....A......i.
 2200 00001841 411080ff ffffff69 0b000018  ...AA......i....
 2210 54411080 ffffffff cb050000 186f4110  TA...........oA.
 2220 80ffffff ffc60a00 00189841 1080ffff  ...........A....
 2230 ffff3903 000018ae 411080ff ffffff69  ..9.....A......i
 2240 0b000018 c4411080 ffffffff 690b0000  .....A......i...
 2250 18da4110 80ffffff ff7f0500 0018f541  ..A............A
 2260 1080ffff ffffc60a 00001819 421080ff  ............B...
 2270 ffffffe9 09000018 2f421080 ffffffff  ......../B......
 2280 690b0000 18454210 80ffffff ff690b00  i....EB......i..
 2290 00186042 1080ffff ffffc60a 00001889  ..`B............
 22a0 421080ff ffffff39 03000018 9f421080  B......9.....B..
 22b0 ffffffff 690b0000 18b54210 80ffffff  ....i.....B.....
 22c0 ff690b00 00000e08 45010000 191e0a00  .i......E.......
 22d0 0004ba06 830a0000 78050000 7a401080  ........x...z@..
 22e0 ffffffff 48000000 00000000 019c7805  ....H.........x.
 22f0 00001423 0b000004 ba133700 00000291  ...#......7.....
 2300 6c000201 02050a00 0011cf09 000004b0  l...............
 2310 06ef0a00 00364010 80ffffff ff440000  .....6@......D..
 2320 00000000 00019ccb 05000014 230b0000  ............#...
 2330 04b01237 00000002 916c1861 401080ff  ...7.....l.a@...
 2340 ffffff28 0b000018 77401080 ffffffff  ...(....w@......
 2350 280b0000 0011ad0a 00000485 065c0a00  (............\..
 2360 00cf3b10 80ffffff ff670400 00000000  ..;......g......
 2370 00019cfa 07000014 3a0a0000 0485283c  ........:.....(<
 2380 05000002 91580c43 52580004 ac0e7e00  .....X.CRX....~.
 2390 00000291 6818f53b 1080ffff ffff690b  ....h..;......i.
 23a0 0000180b 3c1080ff ffffff69 0b000018  ....<......i....
 23b0 2f3c1080 ffffffff fa070000 18533c10  /<...........S<.
 23c0 80ffffff fffa0700 0018693c 1080ffff  ..........i<....
 23d0 ffff690b 0000187f 3c1080ff ffffff69  ..i.....<......i
 23e0 0b000018 a03c1080 ffffffff fa070000  .....<..........
 23f0 18c13c10 80ffffff fffa0700 0018e23c  ..<............<
 2400 1080ffff fffffa07 000018f8 3c1080ff  ............<...
 2410 ffffff69 0b000018 193d1080 ffffffff  ...i.....=......
 2420 fa070000 183a3d10 80ffffff fffa0700  .....:=.........
 2430 00185b3d 1080ffff fffffa07 00001871  ..[=...........q
 2440 3d1080ff ffffff69 0b000018 923d1080  =......i.....=..
 2450 ffffffff fa070000 18b23d10 80ffffff  ..........=.....
 2460 fffa0700 0018c83d 1080ffff ffff690b  .......=......i.
 2470 000018de 3d1080ff ffffff69 0b000018  ....=......i....
 2480 023e1080 ffffffff fa070000 18233e10  .>...........#>.
 2490 80ffffff fffa0700 0018443e 1080ffff  ..........D>....
 24a0 fffffa07 0000185a 3e1080ff ffffff69  .......Z>......i
 24b0 0b000018 7b3e1080 ffffffff fa070000  ....{>..........
 24c0 189c3e10 80ffffff fffa0700 0018bd3e  ..>............>
 24d0 1080ffff fffffa07 000018d3 3e1080ff  ............>...
 24e0 ffffff69 0b000018 f43e1080 ffffffff  ...i.....>......
 24f0 fa070000 18153f10 80ffffff fffa0700  ......?.........
 2500 00182b3f 1080ffff ffff690b 00001841  ..+?......i....A
 2510 3f1080ff ffffff69 0b000018 633f1080  ?......i....c?..
 2520 ffffffff fa070000 18853f10 80ffffff  ..........?.....
 2530 fffa0700 00189b3f 1080ffff ffff690b  .......?......i.
 2540 000018bf 3f1080ff fffffffa 07000018  ....?...........
 2550 e33f1080 ffffffff fa070000 18f93f10  .?............?.
 2560 80ffffff ff690b00 00180f40 1080ffff  .....i.....@....
 2570 ffff690b 00001833 401080ff fffffffa  ..i....3@.......
 2580 07000000 11310b00 00047c06 2d0a0000  .....1....|.-...
 2590 103b1080 ffffffff bf000000 00000000  .;..............
 25a0 019c9608 00001372 65670004 7c157e00  .......reg..|.~.
 25b0 00000291 68144c0a 0000047c 26d50200  ....h.L....|&...
 25c0 00029160 183f3b10 80ffffff ffc60a00  ...`.?;.........
 25d0 0018613b 1080ffff ffff3903 00001877  ..a;......9....w
 25e0 3b1080ff ffffff75 0b000018 8a3b1080  ;......u.....;..
 25f0 ffffffff 750b0000 18a03b10 80ffffff  ....u.....;.....
 2600 ff750b00 0018b63b 1080ffff ffff750b  .u.....;......u.
 2610 000018cc 3b1080ff ffffff75 0b000000  ....;......u....
 2620 11180500 00044306 78050000 22391080  ......C.x..."9..
 2630 ffffffff ee010000 00000000 019c4409  ..............D.
 2640 0000155a 391080ff ffffff2c 01000000  ...Z9......,....
 2650 000000db 0800000c 69000446 0e370000  ........i..F.7..
 2660 0002916c 00184439 1080ffff ffff690b  ...l..D9......i.
 2670 0000185a 391080ff ffffff69 0b000018  ...Z9......i....
 2680 9c3a1080 ffffffff 690b0000 18bf3a10  .:......i.....:.
 2690 80ffffff ff690b00 0018cb3a 1080ffff  .....i.....:....
 26a0 ffff4409 000018e1 3a1080ff ffffff69  ..D.....:......i
 26b0 0b000018 f73a1080 ffffffff 690b0000  .....:......i...
 26c0 180d3b10 80ffffff ff690b00 000011fb  ..;......i......
 26d0 0a000004 33063f0a 00001b38 1080ffff  ....3.?....8....
 26e0 ffff0701 00000000 0000019c e9090000  ................
 26f0 18393810 80ffffff ff280b00 00185338  .98......(....S8
 2700 1080ffff ffff280b 0000186d 381080ff  ......(....m8...
 2710 ffffff28 0b000018 87381080 ffffffff  ...(.....8......
 2720 280b0000 18a13810 80ffffff ff280b00  (.....8......(..
 2730 0018bb38 1080ffff ffff280b 000018d5  ...8......(.....
 2740 381080ff ffffff28 0b000018 ef381080  8......(.....8..
 2750 ffffffff 280b0000 18093910 80ffffff  ....(.....9.....
 2760 ff280b00 00181f39 1080ffff ffff280b  .(.....9......(.
 2770 00000011 270a0000 03030d37 0b0000ca  ....'......7....
 2780 4a1080ff ffffff1f 01000000 00000001  J...............
 2790 9cc60a00 00136275 66000303 191e0400  ......buf.......
 27a0 000391b8 7f140a03 00000303 22370000  ............"7..
 27b0 000391b4 7f136400 03032c37 00000003  ......d...,7....
 27c0 91b07f0c 70000305 081e0400 00029168  ....p..........h
 27d0 0c703100 0306081e 04000002 91600c70  .p1..........`.p
 27e0 32000306 0e1e0400 00029158 0c756400  2..........X.ud.
 27f0 0307108a 00000002 91500d5e 07000003  .........P.^....
 2800 08063700 00000291 4c15324b 1080ffff  ..7.....L.2K....
 2810 ffff3e00 00000000 0000a40a 00000d89  ..>.............
 2820 07000003 17073700 00000291 480016b9  ......7.....H...
 2830 4b1080ff ffffff2b 00000000 0000000c  K......+........
 2840 746d7000 032408db 02000002 91470000  tmp..$.......G..
 2850 19710400 0002040f 9f020000 260b0000  .q..........&...
 2860 55481080 ffffffff 41000000 00000000  UH......A.......
 2870 019c260b 00001373 0002041e 260b0000  ..&....s....&...
 2880 02915813 6e000204 2a7e0000 00029150  ..X.n...*~.....P
 2890 16694810 80ffffff ff270000 00000000  .iH......'......
 28a0 000c6900 0205137e 00000002 91680000  ..i....~.....h..
 28b0 1a0811f6 09000001 080dfb09 0000a54a  ...............J
 28c0 1080ffff ffff2500 00000000 0000019c  ......%.........
 28d0 690b0000 141e0b00 0001081b 58000000  i...........X...
 28e0 02916c14 e5090000 01082945 00000002  ..l.......)E....
 28f0 9168001b 03050000 6a050000 080d061b  .h......j.......
 2900 900a0000 cd0a0000 08120600 99030000  ................
 2910 0400d908 00000801 06010000 04dc0b00  ................
 2920 00b20000 00400100 00000000 00000000  .....@..........
 2930 00f41000 00020106 52000000 020205fc  ........R.......
 2940 00000003 0405696e 74000208 05280300  ......int....(..
 2950 0004ce02 0000032e 18510000 00020108  .........Q......
 2960 50000000 04210200 00033119 64000000  P....!....1.d...
 2970 0202075e 00000002 04074306 00000208  ...^......C.....
 2980 073e0600 0005b90b 00000704 6b000000  .>..........k...
 2990 040406a8 00000006 56050000 f803065b  ........V......[
 29a0 050000f8 02066005 0000e803 06650500  ......`......e..
 29b0 00e80200 07990400 00022f06 d3040000  ........../.....
 29c0 25441080 ffffffff d3000000 00000000  %D..............
 29d0 019c3501 0000081e 0b000002 2f1e7900  ..5........./.y.
 29e0 00000291 6c095044 1080ffff ffff5f03  ....l.PD......_.
 29f0 0000096c 441080ff ffffff5f 03000009  ...lD......_....
 2a00 85441080 ffffffff 5f030000 09a14410  .D......_.....D.
 2a10 80ffffff ff5f0300 0009bd44 1080ffff  ....._.....D....
 2a20 ffff5f03 000009d9 441080ff ffffff5f  .._.....D......_
 2a30 03000009 f5441080 ffffffff 5f030000  .....D......_...
 2a40 0007cd0a 00000225 06900a00 00cb4310  .......%......C.
 2a50 80ffffff ff5a0000 00000000 00019c81  .....Z..........
 2a60 01000008 f5000000 02252281 01000002  .........%".....
 2a70 91580a69 00022709 37000000 02916c09  .X.i..'.7.....l.
 2a80 1c441080 ffffffff 82020000 000b088e  .D..............
 2a90 01000002 01065900 00000c87 01000007  ......Y.........
 2aa0 6a050000 021a0603 0500005b 431080ff  j..........[C...
 2ab0 ffffff70 00000000 00000001 9cec0100  ...p............
 2ac0 0008f500 0000021a 21810100 00029158  ........!......X
 2ad0 0a690002 1c093700 00000291 6c09ac43  .i....7.....l..C
 2ae0 1080ffff ffff8202 000009c8 431080ff  ............C...
 2af0 ffffff82 02000000 0d6d0b00 00020f05  .........m......
 2b00 c20b0000 37000000 fd421080 ffffffff  ....7....B......
 2b10 5e000000 00000000 019c7b02 0000081e  ^.........{.....
 2b20 0b000002 0f187900 00000291 5c08f500  ......y.....\...
 2b30 0000020f 2a7b0200 00029150 08980600  ....*{.....P....
 2b40 00020f36 37000000 0291580e 7f0b0000  ...67.....X.....
 2b50 02111281 01000002 91600f1b 431080ff  .........`..C...
 2b60 ffffff3b 00000000 0000000a 69000212  ...;........i...
 2b70 0e370000 0002916c 09504310 80ffffff  .7.....l.PC.....
 2b80 ff820200 0000000b 08810200 00100787  ................
 2b90 0b000002 0906900b 0000b842 1080ffff  ...........B....
 2ba0 ffff4500 00000000 0000019c db020000  ..E.............
 2bb0 081e0b00 00020918 79000000 02916c11  ........y.....l.
 2bc0 63000209 23870100 00029168 09dd4210  c...#......h..B.
 2bd0 80ffffff ffdb0200 0009fa42 1080ffff  ...........B....
 2be0 ffff5f03 00000007 5e0b0000 02030da6  .._.....^.......
 2bf0 0b00000b 4c1080ff ffffff3a 00000000  ....L......:....
 2c00 00000001 9c1a0300 00081e0b 00000203  ................
 2c10 25790000 0002916c 09314c10 80ffffff  %y.....l.1L.....
 2c20 ff1a0300 00001269 6e620001 1410770b  .......inb....w.
 2c30 00004500 0000e94b 1080ffff ffff2200  ..E....K......".
 2c40 00000000 0000019c 5f030000 081e0b00  ........_.......
 2c50 0001141d 58000000 02915c0a 72657400  ....X.....\.ret.
 2c60 01160a45 00000002 916f0013 f6090000  ...E.....o......
 2c70 01080dfb 090000a5 4a1080ff ffffff25  ........J......%
 2c80 00000000 00000001 9c081e0b 00000108  ................
 2c90 1b580000 0002916c 08e50900 00010829  .X.....l.......)
 2ca0 45000000 02916800 005b0000 0003000f  E.....h..[......
 2cb0 0a000008 01004510 80ffffff ff194810  ......E.......H.
 2cc0 80ffffff ffa11200 00737263 2f617263  .........src/arc
 2cd0 682f696e 74657272 7570745f 68616e64  h/interrupt_hand
 2ce0 6c652e61 736d004e 41534d20 322e3134  le.asm.NASM 2.14
 2cf0 2e303200 01800200 451080ff ffffff00  .02.....E.......
 2d00 00000000 00000000 52000000 03002a0a  ........R.....*.
 2d10 00000801 20481080 ffffffff 2c481080  .... H......,H..
 2d20 ffffffff 3a130000 7372632f 61726368  ....:...src/arch
 2d30 2f757469 6c697479 2e61736d 004e4153  /utility.asm.NAS
 2d40 4d20322e 31342e30 32000180 02204810  M 2.14.02.... H.
 2d50 80ffffff ff000000 00000000 00005200  ..............R.
 2d60 00000300 450a0000 08013048 1080ffff  ....E.....0H....
 2d70 ffff5548 1080ffff ffff8513 00007372  ..UH..........sr
 2d80 632f6172 63682f67 64745f61 736d2e61  c/arch/gdt_asm.a
 2d90 736d004e 41534d20 322e3134 2e303200  sm.NASM 2.14.02.
 2da0 01800230 481080ff ffffff00 00000000  ...0H...........
 2db0 00000000                             ....            
Contenu de la section .debug_abbrev :
 0000 01110125 0e130b03 0e1b0e11 01120710  ...%............
 0010 17000002 24000b0b 3e0b030e 00000324  ....$...>......$
 0020 000b0b3e 0b030800 00041600 030e3a0b  ...>..........:.
 0030 3b0b390b 49130000 05350049 13000006  ;.9.I....5.I....
 0040 1301030e 0b0b3a0b 3b0b390b 01130000  ......:.;.9.....
 0050 070d0003 0e3a0b3b 0b390b49 13380b00  .....:.;.9.I.8..
 0060 00082e01 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0070 11011207 40189742 19011300 00090500  ....@..B........
 0080 030e3a0b 3b0b390b 49130218 00000a34  ..:.;.9.I......4
 0090 00030e3a 0b3b0b39 0b491302 1800000b  ...:.;.9.I......
 00a0 0f000b0b 49130000 00011101 250e130b  ....I.......%...
 00b0 030e1b0e 55171101 10170000 0224000b  ....U........$..
 00c0 0b3e0b03 0e000003 24000b0b 3e0b0308  .>......$...>...
 00d0 00000416 00030e3a 0b3b0b39 0b491300  .......:.;.9.I..
 00e0 00051301 0b0b3a0b 3b0b390b 6e0e0113  ......:.;.9.n...
 00f0 0000060d 0003083a 0b3b0b39 0b491338  .......:.;.9.I.8
 0100 0b000007 0d00030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0110 380b0000 0813010b 0b3a0b3b 0b390b01  8........:.;.9..
 0120 13000009 13010b0b 88010b3a 0b3b0b39  ...........:.;.9
 0130 0b6e0e01 1300000a 0d00030e 3a0b3b0b  .n..........:.;.
 0140 390b4913 88010b38 0b00000b 1600030e  9.I....8........
 0150 3a0b3b0b 390b4913 88010b00 000c3b00  :.;.9.I.......;.
 0160 030e0000 0d340003 0e3a0b3b 0b390b49  .....4...:.;.9.I
 0170 133f1902 1800000e 01014913 01130000  .?........I.....
 0180 0f210049 132f0b00 00103400 03083a0b  .!.I./....4...:.
 0190 3b0b390b 49133f19 02180000 11210049  ;.9.I.?......!.I
 01a0 132f0500 00123400 030e3a0b 3b0b390b  ./....4...:.;.9.
 01b0 49133f19 88010502 18000013 2e013f19  I.?...........?.
 01c0 030e3a0b 3b0b390b 6e0e1101 12074018  ..:.;.9.n.....@.
 01d0 97421901 13000014 05000308 3a0b3b0b  .B..........:.;.
 01e0 390b4913 02180000 15898201 00110131  9.I............1
 01f0 13000016 0500030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0200 02180000 17340003 0e3a0b3b 0b390b49  .....4...:.;.9.I
 0210 13021800 00182e01 030e3a0b 3b0b390b  ..........:.;.9.
 0220 11011207 40189742 19011300 00190f00  ....@..B........
 0230 0b0b4913 00001a2e 01030e3a 0b3b0b39  ..I........:.;.9
 0240 0b880105 11011207 40189742 19011300  ........@..B....
 0250 001b2e01 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0260 49131101 12074018 97421901 1300001c  I.....@..B......
 0270 0b011101 12070000 1d340003 083a0b3b  .........4...:.;
 0280 0b390b49 13021800 001e0f00 0b0b0000  .9.I............
 0290 1f2e003f 193c196e 0e030e3a 0b3b0b39  ...?.<.n...:.;.9
 02a0 0b000000 01110125 0e130b03 0e1b0e11  .......%........
 02b0 01120710 17000002 24000b0b 3e0b030e  ........$...>...
 02c0 00000324 000b0b3e 0b030800 00041600  ...$...>........
 02d0 030e3a0b 3b0b390b 49130000 05040103  ..:.;.9.I.......
 02e0 0e3e0b0b 0b49133a 0b3b0b39 0b011300  .>...I.:.;.9....
 02f0 00062800 030e1c05 00000713 01030e0b  ..(.............
 0300 0b3a0b3b 0b390b01 13000008 0d00030e  .:.;.9..........
 0310 3a0b3b0b 390b4913 380b0000 09010149  :.;.9.I.8......I
 0320 13011300 000a2100 49132f05 00000b34  ......!.I./....4
 0330 00030e3a 0b3b0b39 0b491302 1800000c  ...:.;.9.I......
 0340 3400030e 3a0b3b0b 390b4913 3f190218  4...:.;.9.I.?...
 0350 00000d2e 013f1903 0e3a0b3b 0b390b11  .....?...:.;.9..
 0360 01120740 18974219 01130000 0e050003  ...@..B.........
 0370 0e3a0b3b 0b390b49 13021800 000f8982  .:.;.9.I........
 0380 01001101 31130000 100f000b 0b491300  ....1........I..
 0390 00112e00 3f193c19 6e0e030e 3a0b3b0b  ....?.<.n...:.;.
 03a0 390b0000 00011101 250e130b 030e1b0e  9.......%.......
 03b0 55171101 10170000 0224000b 0b3e0b03  U........$...>..
 03c0 0e000003 24000b0b 3e0b0308 00000416  ....$...>.......
 03d0 00030e3a 0b3b0b39 0b491300 00051301  ...:.;.9.I......
 03e0 030e0b0b 3a0b3b0b 390b0113 0000060d  ....:.;.9.......
 03f0 00030e3a 0b3b0b39 0b491338 0b000007  ...:.;.9.I.8....
 0400 0f000b0b 49130000 08340003 0e3a0b3b  ....I....4...:.;
 0410 0b390b49 13021800 00092e01 3f19030e  .9.I........?...
 0420 3a0b3b05 390b4913 11011207 40189742  :.;.9.I.....@..B
 0430 19011300 000a0500 03083a0b 3b05390b  ..........:.;.9.
 0440 49130218 00000b05 00030e3a 0b3b0539  I..........:.;.9
 0450 0b491302 1800000c 34000308 3a0b3b05  .I......4...:.;.
 0460 390b4913 02180000 0d340003 0e3a0b3b  9.I......4...:.;
 0470 05390b49 13021800 000e0b01 11011207  .9.I............
 0480 01130000 0f898201 00110131 13000010  ...........1....
 0490 0f000b0b 0000112e 013f1903 0e3a0b3b  .........?...:.;
 04a0 05390b11 01120740 18974219 01130000  .9.....@..B.....
 04b0 122e013f 19030e3a 0b3b0b39 0b491311  ...?...:.;.9.I..
 04c0 01120740 18974219 01130000 13050003  ...@..B.........
 04d0 0e3a0b3b 0b390b49 13021800 00143400  .:.;.9.I......4.
 04e0 03083a0b 3b0b390b 49130218 0000152e  ..:.;.9.I.......
 04f0 01030e3a 0b3b0b39 0b491311 01120740  ...:.;.9.I.....@
 0500 18974219 01130000 16050003 083a0b3b  ..B..........:.;
 0510 0b390b49 13021800 00172600 0000182e  .9.I......&.....
 0520 003f1903 0e3a0b3b 0b390b49 13110112  .?...:.;.9.I....
 0530 07401897 42190000 192e003f 193c196e  .@..B......?.<.n
 0540 0e030e3a 0b3b0b39 0b000000 01110125  ...:.;.9.......%
 0550 0e130b03 0e1b0e55 17110110 17000002  .......U........
 0560 24000b0b 3e0b030e 00000324 000b0b3e  $...>......$...>
 0570 0b030800 00041600 030e3a0b 3b0b390b  ..........:.;.9.
 0580 49130000 05170103 0e0b0b3a 0b3b0b39  I..........:.;.9
 0590 0b011300 00061301 0b0b3a0b 3b0b390b  ..........:.;.9.
 05a0 01130000 070d0003 0e3a0b3b 0b390b49  .........:.;.9.I
 05b0 130b0b0d 0b0c0b38 0b000008 0d00030e  .......8........
 05c0 3a0b3b0b 390b4913 0000090d 0003083a  :.;.9.I........:
 05d0 0b3b0b39 0b49130b 0b0d0b0c 0b380b00  .;.9.I.......8..
 05e0 000a1301 030e0b0b 3a0b3b0b 390b0113  ........:.;.9...
 05f0 00000b0d 00030e3a 0b3b0b39 0b491338  .......:.;.9.I.8
 0600 0b00000c 3400030e 3a0b3b0b 390b4913  ....4...:.;.9.I.
 0610 3f193c19 00000d34 00030e3a 0b3b0b39  ?.<....4...:.;.9
 0620 0b49133f 19021800 000e0f00 0b0b4913  .I.?..........I.
 0630 00000f01 01491301 13000010 21004913  .....I......!.I.
 0640 2f050000 11340003 0e3a0b3b 0b390b49  /....4...:.;.9.I
 0650 133f1988 01050218 00001234 0003083a  .?.........4...:
 0660 0b3b0b39 0b49133f 19880105 02180000  .;.9.I.?........
 0670 132e013f 19030e3a 0b3b0b39 0b6e0e11  ...?...:.;.9.n..
 0680 01120740 18974219 01130000 142f0003  ...@..B....../..
 0690 08491300 00150500 03083a0b 3b0b390b  .I........:.;.9.
 06a0 49130218 00001605 00030e3a 0b3b0b39  I..........:.;.9
 06b0 0b491302 18000017 34000308 3a0b3b0b  .I......4...:.;.
 06c0 390b4913 02180000 18340003 0e3a0b3b  9.I......4...:.;
 06d0 0b390b49 13021800 00190b01 11011207  .9.I............
 06e0 01130000 1a0b0111 01120700 001b8982  ................
 06f0 01001101 31130000 1c210049 132f0b00  ....1....!.I./..
 0700 001d2e01 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0710 49131101 12074018 97421901 1300001e  I.....@..B......
 0720 0f000b0b 00001f2e 003f193c 196e0e03  .........?.<.n..
 0730 0e3a0b3b 0b390b00 00000111 01250e13  .:.;.9.......%..
 0740 0b030e1b 0e551711 01101700 00022400  .....U........$.
 0750 0b0b3e0b 030e0000 0324000b 0b3e0b03  ..>......$...>..
 0760 08000004 1600030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0770 00000513 010b0b3a 0b3b0b39 0b6e0e01  .......:.;.9.n..
 0780 13000006 0d00030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0790 380b0000 070d0003 083a0b3b 0b390b49  8........:.;.9.I
 07a0 13380b00 00081301 030e0b0b 3a0b3b0b  .8..........:.;.
 07b0 390b0113 00000901 01491301 1300000a  9........I......
 07c0 21004913 2f0b0000 0b340003 0e3a0b3b  !.I./....4...:.;
 07d0 0b390b49 133f193c 1900000c 34000308  .9.I.?.<....4...
 07e0 3a0b3b0b 390b4913 02180000 0d340003  :.;.9.I......4..
 07f0 0e3a0b3b 0b390b49 13021800 000e0f00  .:.;.9.I........
 0800 0b0b4913 00000f26 00491300 00103400  ..I....&.I....4.
 0810 030e3a0b 3b0b390b 49133f19 02180000  ..:.;.9.I.?.....
 0820 112e013f 19030e3a 0b3b0b39 0b6e0e11  ...?...:.;.9.n..
 0830 01120740 18974219 01130000 122f0003  ...@..B....../..
 0840 08491300 00130500 03083a0b 3b0b390b  .I........:.;.9.
 0850 49130218 00001405 00030e3a 0b3b0b39  I..........:.;.9
 0860 0b491302 18000015 0b011101 12070113  .I..............
 0870 0000160b 01110112 07000017 2e013f19  ..............?.
 0880 030e3a0b 3b0b390b 11011207 40189742  ..:.;.9.....@..B
 0890 19011300 00188982 01001101 31130000  ............1...
 08a0 192e013f 19030e3a 0b3b0b39 0b6e0e49  ...?...:.;.9.n.I
 08b0 13110112 07401897 42190113 00001a0f  .....@..B.......
 08c0 000b0b00 001b2e00 3f193c19 6e0e030e  ........?.<.n...
 08d0 3a0b3b0b 390b0000 00011101 250e130b  :.;.9.......%...
 08e0 030e1b0e 55171101 10170000 0224000b  ....U........$..
 08f0 0b3e0b03 0e000003 24000b0b 3e0b0308  .>......$...>...
 0900 00000416 00030e3a 0b3b0b39 0b491300  .......:.;.9.I..
 0910 00050401 030e3e0b 0b0b4913 3a0b3b0b  ......>...I.:.;.
 0920 390b0113 00000628 00030e1c 05000007  9......(........
 0930 2e013f19 030e3a0b 3b0b390b 6e0e1101  ..?...:.;.9.n...
 0940 12074018 97421901 13000008 0500030e  ..@..B..........
 0950 3a0b3b0b 390b4913 02180000 09898201  :.;.9.I.........
 0960 00110131 1300000a 34000308 3a0b3b0b  ...1....4...:.;.
 0970 390b4913 02180000 0b0f000b 0b491300  9.I..........I..
 0980 000c2600 49130000 0d2e013f 19030e3a  ..&.I......?...:
 0990 0b3b0b39 0b6e0e49 13110112 07401897  .;.9.n.I.....@..
 09a0 42190113 00000e34 00030e3a 0b3b0b39  B......4...:.;.9
 09b0 0b491302 1800000f 0b011101 12070000  .I..............
 09c0 10260000 00110500 03083a0b 3b0b390b  .&........:.;.9.
 09d0 49130218 0000122e 013f1903 083a0b3b  I........?...:.;
 09e0 0b390b6e 0e491311 01120740 18974219  .9.n.I.....@..B.
 09f0 01130000 132e013f 19030e3a 0b3b0b39  .......?...:.;.9
 0a00 0b6e0e11 01120740 18974219 00000001  .n.....@..B.....
 0a10 11011101 12011006 03082508 13050000  ..........%.....
 0a20 022e0011 01400600 00000111 01110112  .....@..........
 0a30 01100603 08250813 05000002 2e001101  .....%..........
 0a40 40060000 00011101 11011201 10060308  @...............
 0a50 25081305 0000022e 00110140 06000000  %..........@....
Contenu de la section .debug_aranges :
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00101080 ffffffff 59000000 00000000  ........Y.......
 0020 00000000 00000000 00000000 00000000  ................
 0030 3c000000 02008e01 00000800 00000000  <...............
 0040 00201080 ffffffff 62030000 00000000  . ......b.......
 0050 55481080 ffffffff 41000000 00000000  UH......A.......
 0060 00000000 00000000 00000000 00000000  ................
 0070 2c000000 02007007 00000800 00000000  ,.....p.........
 0080 62231080 ffffffff 48010000 00000000  b#......H.......
 0090 00000000 00000000 00000000 00000000  ................
 00a0 6c000000 0200be0a 00000800 00000000  l...............
 00b0 aa241080 ffffffff fc0f0000 00000000  .$..............
 00c0 96481080 ffffffff 0c000000 00000000  .H..............
 00d0 a2481080 ffffffff 0c000000 00000000  .H..............
 00e0 ae481080 ffffffff 16000000 00000000  .H..............
 00f0 c4481080 ffffffff 1a000000 00000000  .H..............
 0100 00000000 00000000 00000000 00000000  ................
 0110 5c000000 02005213 00000800 00000000  \.....R.........
 0120 a6341080 ffffffff 75030000 00000000  .4......u.......
 0130 55481080 ffffffff 41000000 00000000  UH......A.......
 0140 de481080 ffffffff eb000000 00000000  .H..............
 0150 c9491080 ffffffff dc000000 00000000  .I..............
 0160 00000000 00000000 00000000 00000000  ................
 0170 6c000000 02008a1d 00000800 00000000  l...............
 0180 1b381080 ffffffff 9d0a0000 00000000  .8..............
 0190 a54a1080 ffffffff 25000000 00000000  .J......%.......
 01a0 55481080 ffffffff 41000000 00000000  UH......A.......
 01b0 ca4a1080 ffffffff 1f010000 00000000  .J..............
 01c0 de481080 ffffffff eb000000 00000000  .H..............
 01d0 00000000 00000000 00000000 00000000  ................
 01e0 5c000000 02000c29 00000800 00000000  \......)........
 01f0 b8421080 ffffffff 40020000 00000000  .B......@.......
 0200 a54a1080 ffffffff 25000000 00000000  .J......%.......
 0210 e94b1080 ffffffff 22000000 00000000  .K......".......
 0220 0b4c1080 ffffffff 3a000000 00000000  .L......:.......
 0230 00000000 00000000 00000000 00000000  ................
 0240 2c000000 0300a92c 00000800 00000000  ,......,........
 0250 00451080 ffffffff 19030000 00000000  .E..............
 0260 00000000 00000000 00000000 00000000  ................
 0270 2c000000 0300082d 00000800 00000000  ,......-........
 0280 20481080 ffffffff 0c000000 00000000   H..............
 0290 00000000 00000000 00000000 00000000  ................
 02a0 2c000000 03005e2d 00000800 00000000  ,.....^-........
 02b0 30481080 ffffffff 25000000 00000000  0H......%.......
 02c0 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_line :
 0000 a9000000 03006a00 00000101 fb0e0d00  ......j.........
 0010 01010101 00000001 00000173 7263002f  ...........src./
 0020 7573722f 6c69622f 6763632f 7838365f  usr/lib/gcc/x86_
 0030 36342d6c 696e7578 2d676e75 2f392f69  64-linux-gnu/9/i
 0040 6e636c75 64650000 6b65726e 656c2e63  nclude..kernel.c
 0050 70700001 00007374 64696e74 2d676363  pp....stdint-gcc
 0060 2e680002 00007374 6976616c 652e6800  .h....stivale.h.
 0070 01000000 05350009 02001010 80ffffff  .....5..........
 0080 ff031b01 0518f405 13830511 91051382  ................
 0090 05115905 13820511 59051382 05115905  ..Y.....Y.....Y.
 00a0 13820519 59050121 02030001 01800100  ....Y..!........
 00b0 00030078 00000001 01fb0e0d 00010101  ...x............
 00c0 01000000 01000001 73726300 7372632f  ........src.src/
 00d0 61726368 002f7573 722f6c69 622f6763  arch./usr/lib/gc
 00e0 632f7838 365f3634 2d6c696e 75782d67  c/x86_64-linux-g
 00f0 6e752f39 2f696e63 6c756465 00006b65  nu/9/include..ke
 0100 726e656c 2e680001 00006764 742e6370  rnel.h....gdt.cp
 0110 70000200 00737464 696e742d 6763632e  p....stdint-gcc.
 0120 68000300 00676474 2e680002 00000005  h....gdt.h......
 0130 2d000902 55481080 ffffffff 15051308  -...UH..........
 0140 3d051c00 02040382 05350002 04029e05  =........5......
 0150 37000204 02ac0505 00020402 3c050c75  7...........<..u
 0160 05014b02 02000101 04020501 00090200  ..K.............
 0170 201080ff ffffff03 14010551 02241305   ..........Q.$..
 0180 15acad05 1ead0523 4a05293c 051b5805  .......#J.)<..X.
 0190 19750501 913f0569 022c1305 16ac0519  .u...?.i.,......
 01a0 ad0527ad 05379005 3e82052d 3c051f2e  ..'..7..>..-<...
 01b0 051d7505 1cc90525 d7051c82 05269105  ..u....%.....&..
 01c0 1d820528 91051f82 051d9105 01ad4005  ...(..........@.
 01d0 0cc0d705 0abd0515 08a10225 13022513  ...........%..%.
 01e0 02251305 16022513 050d0233 1a050c08  .%....%....3....
 01f0 75050fe5 050108e8 44050af6 0512089f  u.......D.......
 0200 052cf305 0e081205 2cd7050e 0812052c  .,......,......,
 0210 d7050e08 120544da 0501753f 050cf605  ......D...u?....
 0220 01082105 213c050e f30501bb 02030001  ..!.!<..........
 0230 01080100 000300b8 00000001 01fb0e0d  ................
 0240 00010101 01000000 01000001 7372632f  ............src/
 0250 61726368 002f7573 722f6c69 622f6763  arch./usr/lib/gc
 0260 632f7838 365f3634 2d6c696e 75782d67  c/x86_64-linux-g
 0270 6e752f39 2f696e63 6c756465 00737263  nu/9/include.src
 0280 00737263 2f617263 682f6d65 6d000061  .src/arch/mem..a
 0290 7263682e 63707000 01000073 7464696e  rch.cpp....stdin
 02a0 742d6763 632e6800 02000073 74697661  t-gcc.h....stiva
 02b0 6c652e68 00030000 636f6d2e 68000300  le.h....com.h...
 02c0 00676474 2e680001 0000696e 74657272  .gdt.h....interr
 02d0 7570742e 68000100 00766972 7475616c  upt.h....virtual
 02e0 2e680004 00006b65 726e656c 2e680003  .h....kernel.h..
 02f0 00000005 3e000902 62231080 ffffffff  ....>...b#......
 0300 03120105 21f40513 4b051208 14085905  ....!...K.....Y.
 0310 0e085905 1208d708 59050d08 5a0512bb  ..Y.....Y...Z...
 0320 085a050d 08590512 08d70859 05180859  .Z...Y.....Y...Y
 0330 050b082f 0501082f 02030001 01bd0600  .../.../........
 0340 00030083 00000001 01fb0e0d 00010101  ................
 0350 01000000 01000001 7372632f 61726368  ........src/arch
 0360 2f6d656d 002f7573 722f6c69 622f6763  /mem./usr/lib/gc
 0370 632f7838 365f3634 2d6c696e 75782d67  c/x86_64-linux-g
 0380 6e752f39 2f696e63 6c756465 00737263  nu/9/include.src
 0390 00006c69 62616c6c 6f632e68 00010000  ..liballoc.h....
 03a0 6c696261 6c6c6f63 2e637070 00010000  liballoc.cpp....
 03b0 73746469 6e742d67 63632e68 00020000  stdint-gcc.h....
 03c0 636f6d2e 68000300 0000051b 00090296  com.h...........
 03d0 481080ff ffffff03 23010518 83050121  H.......#......!
 03e0 02030001 01051d00 0902a248 1080ffff  ...........H....
 03f0 ffff032d 01051884 05012102 03000101  ...-......!.....
 0400 05230009 02ae4810 80ffffff ff033901  .#....H.......9.
 0410 050ce505 01590202 00010105 2b000902  .....Y......+...
 0420 c4481080 ffffffff 03c50001 050c082f  .H............./
 0430 05015902 02000101 04020501 000902aa  ..Y.............
 0440 241080ff ffffff03 eb000105 0a086805  $.............h.
 0450 0f000204 03740511 00020403 3c050e00  .....t......<...
 0460 02040267 050f0002 04023c05 11000204  ...g......<.....
 0470 02740502 00020402 57050969 05014b30  .t......W..i..K0
 0480 05110877 83050b84 050d4a05 17680512  ...w......J..h..
 0490 ba050d2e 0510ba05 062f0503 b7050934  ........./.....4
 04a0 83050d84 05177605 12ba050d 3c0510ba  ......v.....<...
 04b0 05062f05 0355050a 3405014b 03302e05  ../..U..4..K.0..
 04c0 07e90506 91050c4d 05030874 050d4b05  .......M...t..K.
 04d0 08ba050d e6050808 58050b6b 0503ba05  ........X..k....
 04e0 1e000204 0158052f e6050308 4c051376  .....X./....L..v
 04f0 050b08cd 050e77ad 050fbb05 139f050e  ......w.........
 0500 0820050f 75ad0517 bc050f90 050e030a  . ..u...........
 0510 08ba0501 4b350506 f3051575 05088305  ....K5.....u....
 0520 10870508 87050f5d 0502bc05 127608ce  .......].....v..
 0530 0518bb05 1a081205 115c0502 c8052003  .........\.... .
 0540 0b58050d 08200512 c90503c8 05145a05  .X... ........Z.
 0550 0cbf0506 03139e05 0d081305 11770502  .............w..
 0560 c805195a 052bf205 1ef2050c 4a051968  ...Z.+......J..h
 0570 05038205 0868050f 0813050e 780510ae  .....h......x...
 0580 051c7405 15740509 4a050369 050ea105  ..t..t..J..i....
 0590 0d081305 15890503 82050ea6 05048205  ................
 05a0 09000204 015a0505 00020401 bb05045b  .....Z.........[
 05b0 05090002 04016805 10000204 01081305  ......h.........
 05c0 05000204 01750521 5c050e08 20830504  .....u.!\... ...
 05d0 82050991 05148205 0875050d 030aba05  .........u......
 05e0 03820539 92050f82 0509af05 18820509  ...9............
 05f0 75051782 05097505 17820509 83051882  u.....u.........
 0600 05098305 17820509 75051a82 05107505  ........u.....u.
 0610 0c086905 2108f505 28820506 4a05044c  ..i.!...(...J..L
 0620 00020401 0608c800 02040308 ac051300  ................
 0630 02040306 0818050b 00020403 bb051c98  ................
 0640 0508824b 8305165a 05038205 3fa10509  ...K...Z....?...
 0650 82051582 05093d05 10820522 3c051b82  ......=...."<...
 0660 05164b05 1d82050f 3c050984 05178205  ..K.....<.......
 0670 09750516 82050975 05178205 09830516  .u.....u........
 0680 82050975 051a8205 1275050c 08680521  ...u.....u...h.!
 0690 08f40528 8205064a 05044b00 02040106  ...(...J..K.....
 06a0 08c80002 040308ac 05130002 04030608  ................
 06b0 18050b00 020403bb 05070309 90050fbd  ................
 06c0 af050582 05259305 1e90050b 4a758305  .....%......Ju..
 06d0 1359050b 9005194d 05068205 64a1055d  .Y.....M....d..]
 06e0 900511ac 050cad05 1782050b 750511bb  ............u...
 06f0 0512bbad 0511bb05 15c90512 c9050f08  ................
 0700 68052208 f4050982 05074b00 02040106  h.".......K.....
 0710 08c80002 040308ac 05160002 04030608  ................
 0720 18050e00 020403bb 050f9705 0582051f  ................
 0730 93050c82 050b4b83 05135905 0b900519  ......K...Y.....
 0740 4d050682 0562a105 5b90050f ac05164c  M....b..[......L
 0750 051cad05 158283ad 0519c905 16c9050c  ................
 0760 bb051782 05117505 12bb050f 08680526  ......u......h.&
 0770 08f40509 8205074b 00020401 0608c800  .......K........
 0780 02040308 ac051600 02040306 081a050e  ................
 0790 00020403 bb050994 050303ae 7fba050d  ................
 07a0 03db0058 05038205 045f0509 00020401  ...X....._......
 07b0 68051000 02040108 13050500 02040175  h..............u
 07c0 05213205 0e082083 05048205 09590514  .!2... ......Y..
 07d0 8205077a 05020391 7eba051d 03275803  ...z....~....'X.
 07e0 c1013c05 11030c20 0509030b ba050159  ..<.... .......Y
 07f0 030b2e05 02f60512 76050308 ce05025b  ........v......[
 0800 00020401 06089005 0f06bc05 30bd0506  ............0...
 0810 82050c4d 05027405 10ae050b 08cc0511  ...M..t.........
 0820 74050357 050b7605 1174053d 3b050b76  t..W..v..t.=;..v
 0830 05117405 393b0517 78051a08 c9050d03  ..t.9;..x.......
 0840 0a085805 0374051a 76030a08 74051203  ..X..t..v...t...
 0850 0a085805 03bb0507 030b5805 0bbc0513  ..X.......X.....
 0860 c8050b90 050ef405 1774050e 74050fd7  .........t..t...
 0870 050dae05 03820521 00020401 58053300  .......!....X.3.
 0880 02040182 052c0002 04017405 0d3d0503  .....,....t..=..
 0890 74052100 02040158 05330002 04017405  t.!....X.3....t.
 08a0 2c000204 0182050d 4c050374 052e0002  ,.......L..t....
 08b0 04015805 27000204 0182050c 89050282  ..X.'...........
 08c0 05129205 03c8052c 00020401 66052500  .......,....f.%.
 08d0 02040182 0512c905 03c80525 00020401  ...........%....
 08e0 66050d08 13050374 05210002 04015805  f......t.!....X.
 08f0 33000204 0174052c 00020401 82050d4b  3....t.,.......K
 0900 05038205 21000204 01580533 00020401  ....!....X.3....
 0910 82052c00 02040174 050f3d05 17c8050f  ..,....t..=.....
 0920 90051cf4 05107405 12088605 03c8051e  ......t.........
 0930 5a0531f2 0524f205 084a0517 3d052374  Z.1..$...J..=.#t
 0940 051c7405 084a0504 3e052800 02040182  ..t..J..>.(.....
 0950 0511030b 08120501 bb350512 0840051a  .........5...@..
 0960 f4051708 76050f08 ca05014b 33050208  ....v......K3...
 0970 42050f76 050a082f 0502a205 28000204  B..v.../....(...
 0980 0174052f 00020401 082e0506 5b050283  .t./........[...
 0990 00020401 06089005 0f06bc05 31bc0507  ............1...
 09a0 82050d4d 05037405 11ae050c 08cc0512  ...M..t.........
 09b0 74050457 050c7605 1274053e 3b050c76  t..W..v..t.>;..v
 09c0 05127405 3a3b0518 78051303 1e08c805  ..t.:;..x.......
 09d0 0bbb050d a30508a0 05033c05 12680513  ..........<..h..
 09e0 c9050bbb 05116905 16bd0511 0867050e  ......i......g..
 09f0 08bb0509 08300501 4b020200 0101c902  .....0..K.......
 0a00 00000300 a7000000 0101fb0e 0d000101  ................
 0a10 01010000 00010000 01737263 00737263  .........src.src
 0a20 2f617263 682f6d65 6d002f75 73722f6c  /arch/mem./usr/l
 0a30 69622f67 63632f78 38365f36 342d6c69  ib/gcc/x86_64-li
 0a40 6e75782d 676e752f 392f696e 636c7564  nux-gnu/9/includ
 0a50 6500006b 65726e65 6c2e6800 01000076  e..kernel.h....v
 0a60 69727475 616c2e63 70700002 00007574  irtual.cpp....ut
 0a70 696c6974 792e6800 01000073 7464696e  ility.h....stdin
 0a80 742d6763 632e6800 03000076 69727475  t-gcc.h....virtu
 0a90 616c2e68 00020000 73746976 616c652e  al.h....stivale.
 0aa0 68000100 00636f6d 2e680001 00000005  h....com.h......
 0ab0 2d000902 55481080 ffffffff 15051308  -...UH..........
 0ac0 3d051c00 02040382 05350002 04029e05  =........5......
 0ad0 37000204 02ac0505 00020402 3c050c75  7...........<..u
 0ae0 05014b02 02000101 04020521 000902a6  ..K........!....
 0af0 341080ff ffffff03 0901050c f3050a83  4...............
 0b00 05010867 05264005 13f30501 9f05242e  ...g.&@.......$.
 0b10 0513f305 01bb0535 030a2e05 39f30513  .......5....9...
 0b20 82050c4c 050e0875 05150002 04017405  ...L...u......t.
 0b30 25000204 01660517 00020401 82051692  %....f..........
 0b40 05176605 19086605 093c0516 95053008  ..f...f..<....0.
 0b50 59053166 05190866 0516089f 08590510  Y.1f...f.....Y..
 0b60 082f0531 08750532 66053408 6605464a  ./.1.u.2f.4.f.FJ
 0b70 05476605 49086605 1a3c0516 08ad0859  .Gf.I.f..<.....Y
 0b80 0510082f 05300875 05316605 19086605  .../.0.u.1f...f.
 0b90 1608ad08 59051008 2f053008 75053166  ....Y.../.0.u.1f
 0ba0 05190866 0516089f 08590510 082f050d  ...f.....Y.../..
 0bb0 036d0890 05050002 04021c05 01032990  .m............).
 0bc0 05454005 1b087605 0b82051b 91050b82  .E@...v.........
 0bd0 051a9105 0b820518 91050b82 05019602  ................
 0be0 03000101 0403050d 000902de 481080ff  ............H...
 0bf0 ffffff03 d5000105 08086805 04848305  ..........h.....
 0c00 07030982 05036705 05870503 08140527  ......g........'
 0c10 00020401 74050300 02040174 053f0002  ....t......t.?..
 0c20 04024a05 03000204 02740002 0404062e  ..J......t......
 0c30 05020002 040406d2 0608ba06 36778305  ............6w..
 0c40 0cbb0508 a005039f c99f5905 02037a58  ..........Y...zX
 0c50 05013602 03000101 0403050d 000902c9  ..6.............
 0c60 491080ff ffffff03 d5000105 08085a05  I.............Z.
 0c70 04846705 07030974 05036705 05790503  ..g....t..g..y..
 0c80 d8052700 02040166 05030002 04016605  ..'....f......f.
 0c90 3f000204 024a0503 00020402 66000204  ?....J......f...
 0ca0 04062e05 02000204 0406d206 08820636  ...............6
 0cb0 7783050c bb0508a0 05039fc9 9f590502  w............Y..
 0cc0 037a5805 01360203 00010125 04000003  .zX..6.....%....
 0cd0 00af0000 000101fb 0e0d0001 01010100  ................
 0ce0 00000100 00017372 632f6172 63680073  ......src/arch.s
 0cf0 7263002f 7573722f 6c69622f 6763632f  rc./usr/lib/gcc/
 0d00 7838365f 36342d6c 696e7578 2d676e75  x86_64-linux-gnu
 0d10 2f392f69 6e636c75 64650000 61726368  /9/include..arch
 0d20 2e680001 00006b65 726e656c 2e680002  .h....kernel.h..
 0d30 00007574 696c6974 792e6800 02000069  ..utility.h....i
 0d40 6e746572 72757074 2e637070 00010000  nterrupt.cpp....
 0d50 73746469 6e742d67 63632e68 00030000  stdint-gcc.h....
 0d60 696e7465 72727570 742e6800 01000036  interrupt.h....6
 0d70 34626974 2e680001 0000636f 6d2e6800  4bit.h....com.h.
 0d80 02000000 05010009 02a54a10 80ffffff  ..........J.....
 0d90 ff1a0534 08830501 91020300 01010402  ...4............
 0da0 052d0009 02554810 80ffffff ff150513  .-...UH.........
 0db0 083d051c 00020403 82053500 0204029e  .=........5.....
 0dc0 05370002 0402ac05 05000204 023c050c  .7...........<..
 0dd0 7505014b 02020001 01040305 01000902  u..K............
 0de0 ca4a1080 ffffffff 15050808 59051084  .J..........Y...
 0df0 05069105 02770512 00020401 66050568  .....w......f..h
 0e00 0508ba05 063d0508 59050658 05078405  .....=..Y..X....
 0e10 0b670518 79051666 0507e405 083e0527  .g..y..f.....>.'
 0e20 00020401 66050800 02040166 053f0002  ....f......f.?..
 0e30 04024a05 08000204 02660505 00020404  ..J......f......
 0e40 2e050800 020404ba 05110002 04042f05  ............../.
 0e50 0e000204 04660511 00020404 f20502b5  .....f..........
 0e60 05053677 83050cbb 0508a005 099f0507  ..6w............
 0e70 74670505 9f590502 037a5805 01360203  tg...Y...zX..6..
 0e80 00010104 04051000 09021b38 1080ffff  ...........8....
 0e90 ffff0332 01050983 052e0858 05064b05  ...2.......X..K.
 0ea0 2b085805 064c0520 08580506 4b052008  +.X..L. .X..K. .
 0eb0 5805064c 05190858 05064b05 19085805  X..L...X..K...X.
 0ec0 064c0519 08580506 4b051908 5805064c  .L...X..K...X..L
 0ed0 08590501 08590510 3d0512bb 0859050e  .Y...Y..=....Y..
 0ee0 08590517 00020403 74051200 020402a0  .Y......t.......
 0ef0 05100002 0402082e 05120002 04022e05  ................
 0f00 10000204 02086605 12000204 022e0510  ......f.........
 0f10 00020402 08660505 00020402 02cd0110  .....f..........
 0f20 05129505 38085905 12c9050d 08590512  ....8.Y......Y..
 0f30 bb085905 0e085a05 01085905 2b03293c  ..Y...Z...Y.+.)<
 0f40 050d083d 0519089f 05170222 13085908  ...=......."..Y.
 0f50 2f085908 59050108 59052d3d 0512f308  /.Y.Y...Y.-=....
 0f60 59050a08 59022413 05120224 13085905  Y...Y.$....$..Y.
 0f70 0a085908 f308f305 1208f305 0a085908  ..Y...........Y.
 0f80 f308f305 1208f305 0a085908 f3051208  ..........Y.....
 0f90 e5085905 0a085902 241308f3 051208f3  ..Y...Y.$.......
 0fa0 050a0859 08f308f3 051208f3 050a0859  ...Y...........Y
 0fb0 08f30512 08f30859 05110859 050a7405  .......Y...Y..t.
 0fc0 11089f05 0a740512 089f050a 08590224  .....t.......Y.$
 0fd0 13051202 24130859 052f085b 050a7505  ....$..Y./.[..u.
 0fe0 0108bb3e 0502e505 07680506 085b0501  ...>.....h...[..
 0ff0 08590519 3e0505e5 05106805 05770514  .Y..>.....h..w..
 1000 00020401 66052300 02040266 05330002  ....f.#....f.3..
 1010 04036605 43000204 05660510 68050c76  ..f.C....f..h..v
 1020 05015a05 452f0512 f3051e08 59051174  ..Z.E/......Y..t
 1030 0505d605 16850536 08590516 74051508  .......6.Y..t...
 1040 d7051008 2f051908 9f051602 29130859  ..../.......)..Y
 1050 051c0859 05192305 0c74d705 22089f05  ...Y..#..t.."...
 1060 0a740512 08bc0859 050c085b 0515089f  .t.....Y...[....
 1070 05120229 14085905 01085902 03000101  ...)..Y...Y.....
 1080 0403050d 000902de 481080ff ffffff03  ........H.......
 1090 d5000105 08086805 04848305 07030982  ......h.........
 10a0 05036705 05870503 08140527 00020401  ..g........'....
 10b0 74050300 02040174 053f0002 04024a05  t......t.?....J.
 10c0 03000204 02740002 0404062e 05020002  .....t..........
 10d0 040406d2 0608ba06 36778305 0cbb0508  ........6w......
 10e0 a005039f c99f5905 02037a58 05013602  ......Y...zX..6.
 10f0 03000101 a9010000 03007600 00000101  ..........v.....
 1100 fb0e0d00 01010101 00000001 00000173  ...............s
 1110 72632f61 72636800 73726300 2f757372  rc/arch.src./usr
 1120 2f6c6962 2f676363 2f783836 5f36342d  /lib/gcc/x86_64-
 1130 6c696e75 782d676e 752f392f 696e636c  linux-gnu/9/incl
 1140 75646500 00617263 682e6800 01000063  ude..arch.h....c
 1150 6f6d2e63 70700002 00007374 64696e74  om.cpp....stdint
 1160 2d676363 2e680003 0000636f 6d2e6800  -gcc.h....com.h.
 1170 02000000 05010009 02a54a10 80ffffff  ..........J.....
 1180 ff1a0534 08830501 91020300 01010501  ...4............
 1190 000902e9 4b1080ff ffffff03 14010504  ....K...........
 11a0 08250509 9f05014b 02020001 01040205  .%.....K........
 11b0 01000902 0b4c1080 ffffffff 150516e5  .....L..........
 11c0 05106605 1b081205 23660505 90050131  ..f.....#f.....1
 11d0 02030001 01040205 01000902 b8421080  .............B..
 11e0 ffffffff 03090105 13083d05 10081305  ..........=.....
 11f0 094a0501 08833f05 12085905 0e830517  .J....?...Y.....
 1200 00020403 74052200 02040284 05230002  ....t."......#..
 1210 04026605 11000204 029e0505 00020402  ..f.............
 1220 0856050c 6c05013d 300509f3 05137505  .V..l..=0.....u.
 1230 14660516 9e05284c 05296605 119e050a  .f....(L.)f.....
 1240 08590505 47050d34 05010859 3e0509f3  .Y..G..4...Y>...
 1250 05137505 14660516 9e05284c 05296605  ..u..f....(L.)f.
 1260 119e050a 08590505 47050134 3e050fe5  .....Y..G..4>...
 1270 05096605 0f085905 09660859 050f0883  ..f...Y..f.Y....
 1280 05096605 0f085905 0966050b 08590505  ..f...Y..f...Y..
 1290 66050b08 59050566 05010859 02030001  f...Y..f...Y....
 12a0 01950000 00030034 00000001 01fb0e0d  .......4........
 12b0 00010101 01000000 01000001 00737263  .............src
 12c0 2f617263 682f696e 74657272 7570745f  /arch/interrupt_
 12d0 68616e64 6c652e61 736d0000 00000000  handle.asm......
 12e0 09020045 1080ffff ffff1759 3d03c500  ...E.......Y=...
 12f0 02010121 21030302 17013e5a 03020217  ...!!.....>Z....
 1300 014b2131 bbbbbbbb bbe5e5e5 c9e5c9c9  .K!1............
 1310 c9c9c9e5 e5e5e5e5 e5e5e5e5 e5e5e5e5  ................
 1320 e5e5c9e6 e5e5e5e5 e5e5e5e5 e5e5e5e5  ................
 1330 e5e5e5e6 e5020f00 01014700 00000300  ..........G.....
 1340 2b000000 0101fb0e 0d000101 01010000  +...............
 1350 00010000 01007372 632f6172 63682f75  ......src/arch/u
 1360 74696c69 74792e61 736d0000 00000000  tility.asm......
 1370 09022048 1080ffff ffff1421 3d3d3d21  .. H.......!===!
 1380 02010001 01500000 0003002b 00000001  .....P.....+....
 1390 01fb0e0d 00010101 01000000 01000001  ................
 13a0 00737263 2f617263 682f6764 745f6173  .src/arch/gdt_as
 13b0 6d2e6173 6d000000 00000009 02304810  m.asm........0H.
 13c0 80ffffff ff16213d 3d4b2f2f 2f2f2f9f  ......!==K/////.
 13d0 21213021 02010001 01                 !!0!.....       
Contenu de la section .debug_str :
 0000 626f6f74 6c6f6164 65725f64 61746100  bootloader_data.
 0010 72736470 00737263 2f6b6572 6e656c2e  rsdp.src/kernel.
 0020 63707000 6672616d 65627566 6665725f  cpp.framebuffer_
 0030 68656967 68740075 696e7436 345f7400  height.uint64_t.
 0040 6672616d 65627566 6665725f 62707000  framebuffer_bpp.
 0050 756e7369 676e6564 20636861 72007368  unsigned char.sh
 0060 6f727420 756e7369 676e6564 20696e74  ort unsigned int
 0070 00667261 6d656275 66666572 5f706974  .framebuffer_pit
 0080 6368006d 6f64756c 655f636f 756e7400  ch.module_count.
 0090 6d656d6f 72795f6d 61705f61 64647200  memory_map_addr.
 00a0 6672616d 65627566 6665725f 77696474  framebuffer_widt
 00b0 68002f68 6f6d652f 6379702f 6f746865  h./home/cyp/othe
 00c0 725f6f73 2f716c6f 61646572 322d6261  r_os/qloader2-ba
 00d0 7265626f 6e657300 6d6f6475 6c657300  rebones.modules.
 00e0 6672616d 65627566 6665725f 61646472  framebuffer_addr
 00f0 00766761 5f627566 66657200 73686f72  .vga_buffer.shor
 0100 7420696e 7400474e 5520432b 2b313720  t int.GNU C++17 
 0110 392e332e 30202d6d 61736d3d 696e7465  9.3.0 -masm=inte
 0120 6c202d6d 6e6f2d73 7365202d 6d363420  l -mno-sse -m64 
 0130 2d6d6e6f 2d737365 32202d6d 6e6f2d6d  -mno-sse2 -mno-m
 0140 6d78202d 6d6e6f2d 38303338 37202d6d  mx -mno-80387 -m
 0150 6e6f2d72 65642d7a 6f6e6520 2d6d636d  no-red-zone -mcm
 0160 6f64656c 3d6c6172 6765202d 6d74756e  odel=large -mtun
 0170 653d6765 6e657269 63202d6d 61726368  e=generic -march
 0180 3d783836 2d363420 2d67202d 7374643d  =x86-64 -g -std=
 0190 632b2b31 37202d66 6e6f2d70 6963202d  c++17 -fno-pic -
 01a0 66667265 65737461 6e64696e 67202d66  ffreestanding -f
 01b0 6e6f2d73 7461636b 2d70726f 74656374  no-stack-protect
 01c0 6f72202d 666e6f2d 6f6d6974 2d667261  or -fno-omit-fra
 01d0 6d652d70 6f696e74 6572202d 66617379  me-pointer -fasy
 01e0 6e636872 6f6e6f75 732d756e 77696e64  nchronous-unwind
 01f0 2d746162 6c657320 2d667374 61636b2d  -tables -fstack-
 0200 636c6173 682d7072 6f746563 74696f6e  clash-protection
 0210 202d6663 662d7072 6f746563 74696f6e   -fcf-protection
 0220 0075696e 7431365f 74006570 6f636800  .uint16_t.epoch.
 0230 5f5a365f 73746172 74503134 73746976  _Z6_startP14stiv
 0240 616c655f 73747275 6374006d 656d6f72  ale_struct.memor
 0250 795f6d61 705f656e 74726965 7300636d  y_map_entries.cm
 0260 646c696e 65006772 616e0064 65636c74  dline.gran.declt
 0270 79706528 6e756c6c 70747229 00626173  ype(nullptr).bas
 0280 655f6d69 64006772 616e756c 61726974  e_mid.granularit
 0290 79006764 74725f69 6e737461 6c6c005f  y.gdtr_install._
 02a0 5a376d65 6d7a6572 6f50766d 00676474  Z7memzeroPvm.gdt
 02b0 72005f5a 31327473 735f7365 745f7273  r._Z12tss_set_rs
 02c0 70306d00 73657475 705f6764 74007569  p0m.setup_gdt.ui
 02d0 6e74385f 74006964 745f7374 61636b32  nt8_t.idt_stack2
 02e0 00696474 5f737461 636b3300 7473735f  .idt_stack3.tss_
 02f0 6c696d69 74005f5a 39736574 75705f67  limit._Z9setup_g
 0300 64746d00 696f6d61 705f6261 73650067  dtm.iomap_base.g
 0310 64745f73 65745f78 64657363 72697074  dt_set_xdescript
 0320 6f72006c 6f6e6720 6c6f6e67 20696e74  or.long long int
 0330 00313667 64745f64 65736372 6970746f  .16gdt_descripto
 0340 725f7400 7473735f 62617365 00726573  r_t.tss_base.res
 0350 65727665 6431006c 696d6974 5f6c6f77  erved1.limit_low
 0360 00676474 5f646573 63726970 746f7273  .gdt_descriptors
 0370 00357473 735f7400 6c6f6e67 20646f75  .5tss_t.long dou
 0380 626c6500 72737031 00727370 32007265  ble.rsp1.rsp2.re
 0390 73657276 65640075 696e7433 325f7400  served.uint32_t.
 03a0 62617365 5f786869 67680031 37676474  base_xhigh.17gdt
 03b0 5f786465 73637269 70746f72 5f740072  _xdescriptor_t.r
 03c0 65736572 76656430 00726573 65727665  eserved0.reserve
 03d0 64320062 6173655f 68696768 00697374  d2.base_high.ist
 03e0 32006973 74330069 73743400 69737435  2.ist3.ist4.ist5
 03f0 00697374 37005f5a 39726764 745f696e  .ist7._Z9rgdt_in
 0400 69747600 7372632f 61726368 2f676474  itv.src/arch/gdt
 0410 2e637070 00626173 655f6c6f 77007267  .cpp.base_low.rg
 0420 64745f69 6e697400 36676474 725f7400  dt_init.6gdtr_t.
 0430 72657365 72766564 33007473 735f7365  reserved3.tss_se
 0440 745f7273 70300069 73743100 5f5a3874  t_rsp0.ist1._Z8t
 0450 73735f69 6e69746d 00676474 5f736574  ss_initm.gdt_set
 0460 5f646573 63726970 746f7200 69737436  _descriptor.ist6
 0470 006d656d 7a65726f 00747373 5f696e69  .memzero.tss_ini
 0480 74006964 745f7374 61636b00 6b65726e  t.idt_stack.kern
 0490 656c5f73 74617274 00636f6d 5f696e69  el_start.com_ini
 04a0 7469616c 697a6500 75696e74 7074725f  tialize.uintptr_
 04b0 74007374 6976616c 655f6865 61646572  t.stivale_header
 04c0 00737263 2f617263 682f6172 63682e63  .src/arch/arch.c
 04d0 7070005f 5a313463 6f6d5f69 6e697469  pp._Z14com_initi
 04e0 616c697a 6538434f 4d5f504f 52540069  alize8COM_PORT.i
 04f0 6e69745f 76697274 75616c5f 6d656d6f  nit_virtual_memo
 0500 7279005f 5a313363 6f6d5f77 72697465  ry._Z13com_write
 0510 5f737472 504b6300 696e6974 5f696474  _strPKc.init_idt
 0520 005f5a31 39696e69 745f7669 72747561  ._Z19init_virtua
 0530 6c5f6d65 6d6f7279 50313473 74697661  l_memoryP14stiva
 0540 6c655f73 74727563 7400656e 7472795f  le_struct.entry_
 0550 706f696e 7400434f 4d310043 4f4d3200  point.COM1.COM2.
 0560 434f4d33 00434f4d 3400636f 6d5f7772  COM3.COM4.com_wr
 0570 6974655f 73747200 5f5a3869 6e69745f  ite_str._Z8init_
 0580 69647476 00757361 67650064 69666600  idtv.usage.diff.
 0590 73746172 74656442 65740073 697a655f  startedBet.size_
 05a0 74006d61 6c6c6f63 006c6962 616c6c6f  t.malloc.liballo
 05b0 635f6d69 6e6f7200 63646573 74006c73  c_minor.cdest.ls
 05c0 7263006e 65775f6d 696e006c 6962616c  rc.new_min.libal
 05d0 6c6f635f 756e6c6f 636b006c 5f706f73  loc_unlock.l_pos
 05e0 7369626c 654f7665 7272756e 73006c64  sibleOverruns.ld
 05f0 65737400 6c5f6d65 6d526f6f 74006c69  est.l_memRoot.li
 0600 62616c6c 6f635f6d 656d6370 79006c5f  balloc_memcpy.l_
 0610 696e7573 6500626c 6f636b00 6c696261  inuse.block.liba
 0620 6c6c6f63 5f667265 65006c69 62616c6c  lloc_free.liball
 0630 6f635f6d 616a6f72 006c6f6e 67206c6f  oc_major.long lo
 0640 6e672075 6e736967 6e656420 696e7400  ng unsigned int.
 0650 6c696261 6c6c6f63 5f6d656d 73657400  liballoc_memset.
 0660 6c5f616c 6c6f6361 74656400 6c5f6572  l_allocated.l_er
 0670 726f7243 6f756e74 0063616c 6c6f6300  rorCount.calloc.
 0680 6c5f7061 67655369 7a650072 65616c6c  l_pageSize.reall
 0690 6f630072 65616c5f 73697a65 006c5f62  oc.real_size.l_b
 06a0 65737442 65740061 6c6c6f63 6174655f  estBet.allocate_
 06b0 6e65775f 70616765 00726571 5f73697a  new_page.req_siz
 06c0 65007372 632f6172 63682f6d 656d2f6c  e.src/arch/mem/l
 06d0 6962616c 6c6f632e 63707000 63737263  iballoc.cpp.csrc
 06e0 006c5f77 61726e69 6e67436f 756e7400  .l_warningCount.
 06f0 6c696261 6c6c6f63 5f616c6c 6f630062  liballoc_alloc.b
 0700 65737453 697a6500 6c696261 6c6c6f63  estSize.liballoc
 0710 5f6c6f63 6b006d61 67696300 6e6f626a  _lock.magic.nobj
 0720 00707265 76007061 67657300 6c5f7061  .prev.pages.l_pa
 0730 6765436f 756e7400 6e657874 006d616a  geCount.next.maj
 0740 53697a65 00666972 7374005f 5a366b69  Size.first._Z6ki
 0750 746f6154 496a4576 50636954 5f006469  toaTIjEvPciT_.di
 0760 7669736f 72005f5a 366b6974 6f615449  visor._Z6kitoaTI
 0770 6d457650 6369545f 00667261 6d657300  mEvPciT_.frames.
 0780 6d656d65 6e747279 0072656d 61696e64  mementry.remaind
 0790 6572006b 65726e65 6c5f656e 64005f5a  er.kernel_end._Z
 07a0 38766972 745f6d61 706d6d6d 007a6572  8virt_mapmmm.zer
 07b0 6f320070 61646472 65737300 6b69746f  o2.paddress.kito
 07c0 61543c6c 6f6e6720 756e7369 676e6564  aT<long unsigned
 07d0 20696e74 3e00676c 6f62616c 006c656e   int>.global.len
 07e0 67687400 70616769 6e675f70 6d6c3400  ght.paging_pml4.
 07f0 7372632f 61726368 2f6d656d 2f766972  src/arch/mem/vir
 0800 7475616c 2e637070 00706d6c 3465005f  tual.cpp.pml4e._
 0810 70645f6f 66667365 74006b69 746f6154  pd_offset.kitoaT
 0820 3c756e73 69676e65 6420696e 743e006e  <unsigned int>.n
 0830 6f745f75 73656432 00766972 745f6d61  ot_used2.virt_ma
 0840 70006c65 6e677468 00617661 696c6162  p.length.availab
 0850 6c65005f 5a313067 65745f72 5f616464  le._Z10get_r_add
 0860 726d0073 74695f73 74727563 74006469  rm.sti_struct.di
 0870 7361626c 655f6361 6368696e 67006967  sable_caching.ig
 0880 6e6f7265 5f6d655f 706c6561 7365005f  nore_me_please._
 0890 5a313069 6e69745f 6672616d 656d006e  Z10init_framem.n
 08a0 6f745f75 73656400 75736572 00706167  ot_used.user.pag
 08b0 696e675f 70647065 00747970 65006173  ing_pdpe.type.as
 08c0 5f75696e 74005f5a 31336765 745f6b65  _uint._Z13get_ke
 08d0 726e5f61 6464726d 00706167 696e675f  rn_addrm.paging_
 08e0 70646500 6765745f 6b65726e 5f616464  pde.get_kern_add
 08f0 72006669 656c6473 00766164 64726573  r.fields.vaddres
 0900 73006967 6e6f7265 5f6d655f 706c6561  s.ignore_me_plea
 0910 73653200 6672616d 655f6164 72657373  se2.frame_adress
 0920 00696e69 745f6672 616d6500 61636365  .init_frame.acce
 0930 73736564 00777269 74655f74 68726f75  ssed.write_throu
 0940 6768005f 706d6c34 655f6f66 66736574  gh._pml4e_offset
 0950 00707265 73656e74 00653832 305f656e  .present.e820_en
 0960 7472795f 74005f70 6470745f 6f666673  try_t._pdpt_offs
 0970 6574005f 70745f6f 66667365 74006765  et._pt_offset.ge
 0980 745f725f 61646472 00777269 7461626c  t_r_addr.writabl
 0990 6500756e 75736564 00696474 5f646573  e.unused.idt_des
 09a0 63726970 746f7200 61747472 69627574  criptor.attribut
 09b0 65730073 72632f61 7263682f 696e7465  es.src/arch/inte
 09c0 72727570 742e6370 70006275 66660070  rrupt.cpp.buff.p
 09d0 69635f61 636b006f 66667365 745f6869  ic_ack.offset_hi
 09e0 67683332 0076616c 75650065 72726f72  gh32.value.error
 09f0 5f636f64 65006f75 7462005f 5a346f75  _code.outb._Z4ou
 0a00 74627468 00626f6f 6c006275 66663200  tbth.bool.buff2.
 0a10 31316964 745f656e 7472795f 74006973  11idt_entry_t.is
 0a20 5f657272 6f72006b 69746f61 005f5a35  _error.kitoa._Z5
 0a30 64756d70 316d504b 63007374 636b005f  dump1mPKc.stck._
 0a40 5a387069 635f696e 69747600 6e616d65  Z8pic_initv.name
 0a50 00737461 636b6672 616d6500 5f5a3132  .stackframe._Z12
 0a60 64756d70 72656769 73746572 50313949  dumpregisterP19I
 0a70 6e746572 72757074 53746163 6b467261  nterruptStackFra
 0a80 6d65005f 5a386973 5f657272 6f726900  me._Z8is_errori.
 0a90 5f5a3134 636f6d5f 77726974 655f7374  _Z14com_write_st
 0aa0 726c504b 63007266 6c616773 0064756d  rlPKc.rflags.dum
 0ab0 70726567 69737465 7200696e 74657272  pregister.interr
 0ac0 75707473 5f68616e 646c6572 00636f6d  upts_handler.com
 0ad0 5f777269 74655f73 74726c00 5f5f696e  _write_strl.__in
 0ae0 74657272 7570745f 76656374 6f72005f  terrupt_vector._
 0af0 5a377069 635f6163 6b690070 69635f69  Z7pic_acki.pic_i
 0b00 6e697400 65786365 7074696f 6e5f6d65  nit.exception_me
 0b10 73736167 65730069 6e745f6e 6f00706f  ssages.int_no.po
 0b20 72740069 6e746e6f 00366964 74725f74  rt.intno.6idtr_t
 0b30 0064756d 7031005f 5a356b69 746f6150  .dump1._Z5kitoaP
 0b40 63696900 6f666673 65745f6d 69643136  cii.offset_mid16
 0b50 006f6666 7365745f 6c6f7731 3600636f  .offset_low16.co
 0b60 6d5f7761 69745f77 72697465 00636f6d  m_wait_write.com
 0b70 5f777269 7465005f 5a33696e 62740062  _write._Z3inbt.b
 0b80 75666164 64720063 6f6d5f70 75746300  ufaddr.com_putc.
 0b90 5f5a3863 6f6d5f70 75746338 434f4d5f  _Z8com_putc8COM_
 0ba0 504f5254 63005f5a 3134636f 6d5f7761  PORTc._Z14com_wa
 0bb0 69745f77 72697465 38434f4d 5f504f52  it_write8COM_POR
 0bc0 54005f5a 39636f6d 5f777269 74653843  T._Z9com_write8C
 0bd0 4f4d5f50 4f525450 4b766900 7372632f  OM_PORTPKvi.src/
 0be0 636f6d2e 63707000                    com.cpp.        
Contenu de la section .comment :
 0000 4743433a 20285562 756e7475 20392e33  GCC: (Ubuntu 9.3
 0010 2e302d31 30756275 6e747532 2920392e  .0-10ubuntu2) 9.
 0020 332e3000                             3.0.            
Contenu de la section .debug_ranges :
 0000 00201080 ffffffff 62231080 ffffffff  . ......b#......
 0010 55481080 ffffffff 96481080 ffffffff  UH.......H......
 0020 00000000 00000000 00000000 00000000  ................
 0030 aa241080 ffffffff a6341080 ffffffff  .$.......4......
 0040 96481080 ffffffff a2481080 ffffffff  .H.......H......
 0050 a2481080 ffffffff ae481080 ffffffff  .H.......H......
 0060 ae481080 ffffffff c4481080 ffffffff  .H.......H......
 0070 c4481080 ffffffff de481080 ffffffff  .H.......H......
 0080 00000000 00000000 00000000 00000000  ................
 0090 a6341080 ffffffff 1b381080 ffffffff  .4.......8......
 00a0 55481080 ffffffff 96481080 ffffffff  UH.......H......
 00b0 de481080 ffffffff c9491080 ffffffff  .H.......I......
 00c0 c9491080 ffffffff a54a1080 ffffffff  .I.......J......
 00d0 00000000 00000000 00000000 00000000  ................
 00e0 1b381080 ffffffff b8421080 ffffffff  .8.......B......
 00f0 a54a1080 ffffffff ca4a1080 ffffffff  .J.......J......
 0100 55481080 ffffffff 96481080 ffffffff  UH.......H......
 0110 ca4a1080 ffffffff e94b1080 ffffffff  .J.......K......
 0120 de481080 ffffffff c9491080 ffffffff  .H.......I......
 0130 00000000 00000000 00000000 00000000  ................
 0140 b8421080 ffffffff f8441080 ffffffff  .B.......D......
 0150 a54a1080 ffffffff ca4a1080 ffffffff  .J.......J......
 0160 e94b1080 ffffffff 0b4c1080 ffffffff  .K.......L......
 0170 0b4c1080 ffffffff 454c1080 ffffffff  .L......EL......
 0180 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_pubnames :
 0000 0e000000 03000000 00000000 00000000  ................
 0010 00000e00 00000300 00000000 00000000  ................
 0020 00000000 0e000000 03000000 00000000  ................
 0030 00000000 0000                        ......          
Contenu de la section .debug_frame :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000                             ....            
Contenu de la section .debug_loc :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000 00000000 00000000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................

Déassemblage de la section .text :

ffffffff80101000 <_Z6_startP14stivale_struct>:
/**
 * Stack for bootstrapping the kernel
 */


void _start(struct stivale_struct *bootloader_data) {
ffffffff80101000:	f3 0f 1e fa          	endbr64 
ffffffff80101004:	55                   	push   %rbp
ffffffff80101005:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101008:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8010100c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    
    volatile uint16_t *vga_buffer = (uint16_t*)VGA_ADDRESS;
ffffffff80101010:	48 c7 45 f8 00 80 0b 	movq   $0xb8000,-0x8(%rbp)
ffffffff80101017:	00 
    vga_buffer[0] = VGA_COLOR('h', VGA_GREEN);
ffffffff80101018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010101c:	66 c7 00 68 02       	movw   $0x268,(%rax)
    vga_buffer[1] = VGA_COLOR('e', VGA_GREEN);
ffffffff80101021:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101025:	48 83 c0 02          	add    $0x2,%rax
ffffffff80101029:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[2] = VGA_COLOR('e', VGA_GREEN);
ffffffff8010102e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101032:	48 83 c0 04          	add    $0x4,%rax
ffffffff80101036:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[3] = VGA_COLOR('e', VGA_GREEN);
ffffffff8010103b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010103f:	48 83 c0 06          	add    $0x6,%rax
ffffffff80101043:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[4] = VGA_COLOR('o', VGA_GREEN);
ffffffff80101048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010104c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80101050:	66 c7 00 6f 02       	movw   $0x26f,(%rax)
    asm volatile ("hlt");
ffffffff80101055:	f4                   	hlt    
}
ffffffff80101056:	90                   	nop
ffffffff80101057:	c9                   	leaveq 
ffffffff80101058:	c3                   	retq   
ffffffff80101059:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101060:	00 00 00 
ffffffff80101063:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010106a:	00 00 00 
ffffffff8010106d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101074:	00 00 00 
ffffffff80101077:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010107e:	00 00 00 
ffffffff80101081:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101088:	00 00 00 
ffffffff8010108b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101092:	00 00 00 
ffffffff80101095:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010109c:	00 00 00 
ffffffff8010109f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010a6:	00 00 00 
ffffffff801010a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010b0:	00 00 00 
ffffffff801010b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ba:	00 00 00 
ffffffff801010bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010c4:	00 00 00 
ffffffff801010c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ce:	00 00 00 
ffffffff801010d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010d8:	00 00 00 
ffffffff801010db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010e2:	00 00 00 
ffffffff801010e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ec:	00 00 00 
ffffffff801010ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010f6:	00 00 00 
ffffffff801010f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101100:	00 00 00 
ffffffff80101103:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010110a:	00 00 00 
ffffffff8010110d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101114:	00 00 00 
ffffffff80101117:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010111e:	00 00 00 
ffffffff80101121:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101128:	00 00 00 
ffffffff8010112b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101132:	00 00 00 
ffffffff80101135:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010113c:	00 00 00 
ffffffff8010113f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101146:	00 00 00 
ffffffff80101149:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101150:	00 00 00 
ffffffff80101153:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010115a:	00 00 00 
ffffffff8010115d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101164:	00 00 00 
ffffffff80101167:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010116e:	00 00 00 
ffffffff80101171:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101178:	00 00 00 
ffffffff8010117b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101182:	00 00 00 
ffffffff80101185:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010118c:	00 00 00 
ffffffff8010118f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101196:	00 00 00 
ffffffff80101199:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011a0:	00 00 00 
ffffffff801011a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011aa:	00 00 00 
ffffffff801011ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011b4:	00 00 00 
ffffffff801011b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011be:	00 00 00 
ffffffff801011c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011c8:	00 00 00 
ffffffff801011cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011d2:	00 00 00 
ffffffff801011d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011dc:	00 00 00 
ffffffff801011df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011e6:	00 00 00 
ffffffff801011e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011f0:	00 00 00 
ffffffff801011f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011fa:	00 00 00 
ffffffff801011fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101204:	00 00 00 
ffffffff80101207:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010120e:	00 00 00 
ffffffff80101211:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101218:	00 00 00 
ffffffff8010121b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101222:	00 00 00 
ffffffff80101225:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010122c:	00 00 00 
ffffffff8010122f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101236:	00 00 00 
ffffffff80101239:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101240:	00 00 00 
ffffffff80101243:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010124a:	00 00 00 
ffffffff8010124d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101254:	00 00 00 
ffffffff80101257:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010125e:	00 00 00 
ffffffff80101261:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101268:	00 00 00 
ffffffff8010126b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101272:	00 00 00 
ffffffff80101275:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010127c:	00 00 00 
ffffffff8010127f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101286:	00 00 00 
ffffffff80101289:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101290:	00 00 00 
ffffffff80101293:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010129a:	00 00 00 
ffffffff8010129d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012a4:	00 00 00 
ffffffff801012a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012ae:	00 00 00 
ffffffff801012b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012b8:	00 00 00 
ffffffff801012bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012c2:	00 00 00 
ffffffff801012c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012cc:	00 00 00 
ffffffff801012cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012d6:	00 00 00 
ffffffff801012d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012e0:	00 00 00 
ffffffff801012e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012ea:	00 00 00 
ffffffff801012ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012f4:	00 00 00 
ffffffff801012f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012fe:	00 00 00 
ffffffff80101301:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101308:	00 00 00 
ffffffff8010130b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101312:	00 00 00 
ffffffff80101315:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010131c:	00 00 00 
ffffffff8010131f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101326:	00 00 00 
ffffffff80101329:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101330:	00 00 00 
ffffffff80101333:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010133a:	00 00 00 
ffffffff8010133d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101344:	00 00 00 
ffffffff80101347:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010134e:	00 00 00 
ffffffff80101351:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101358:	00 00 00 
ffffffff8010135b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101362:	00 00 00 
ffffffff80101365:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010136c:	00 00 00 
ffffffff8010136f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101376:	00 00 00 
ffffffff80101379:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101380:	00 00 00 
ffffffff80101383:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010138a:	00 00 00 
ffffffff8010138d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101394:	00 00 00 
ffffffff80101397:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010139e:	00 00 00 
ffffffff801013a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013a8:	00 00 00 
ffffffff801013ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013b2:	00 00 00 
ffffffff801013b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013bc:	00 00 00 
ffffffff801013bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013c6:	00 00 00 
ffffffff801013c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013d0:	00 00 00 
ffffffff801013d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013da:	00 00 00 
ffffffff801013dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013e4:	00 00 00 
ffffffff801013e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013ee:	00 00 00 
ffffffff801013f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013f8:	00 00 00 
ffffffff801013fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101402:	00 00 00 
ffffffff80101405:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010140c:	00 00 00 
ffffffff8010140f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101416:	00 00 00 
ffffffff80101419:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101420:	00 00 00 
ffffffff80101423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010142a:	00 00 00 
ffffffff8010142d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101434:	00 00 00 
ffffffff80101437:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010143e:	00 00 00 
ffffffff80101441:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101448:	00 00 00 
ffffffff8010144b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101452:	00 00 00 
ffffffff80101455:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010145c:	00 00 00 
ffffffff8010145f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101466:	00 00 00 
ffffffff80101469:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101470:	00 00 00 
ffffffff80101473:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010147a:	00 00 00 
ffffffff8010147d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101484:	00 00 00 
ffffffff80101487:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010148e:	00 00 00 
ffffffff80101491:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101498:	00 00 00 
ffffffff8010149b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014a2:	00 00 00 
ffffffff801014a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014ac:	00 00 00 
ffffffff801014af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014b6:	00 00 00 
ffffffff801014b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014c0:	00 00 00 
ffffffff801014c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014ca:	00 00 00 
ffffffff801014cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014d4:	00 00 00 
ffffffff801014d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014de:	00 00 00 
ffffffff801014e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014e8:	00 00 00 
ffffffff801014eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014f2:	00 00 00 
ffffffff801014f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014fc:	00 00 00 
ffffffff801014ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101506:	00 00 00 
ffffffff80101509:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101510:	00 00 00 
ffffffff80101513:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010151a:	00 00 00 
ffffffff8010151d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101524:	00 00 00 
ffffffff80101527:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010152e:	00 00 00 
ffffffff80101531:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101538:	00 00 00 
ffffffff8010153b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101542:	00 00 00 
ffffffff80101545:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010154c:	00 00 00 
ffffffff8010154f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101556:	00 00 00 
ffffffff80101559:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101560:	00 00 00 
ffffffff80101563:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010156a:	00 00 00 
ffffffff8010156d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101574:	00 00 00 
ffffffff80101577:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010157e:	00 00 00 
ffffffff80101581:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101588:	00 00 00 
ffffffff8010158b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101592:	00 00 00 
ffffffff80101595:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010159c:	00 00 00 
ffffffff8010159f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015a6:	00 00 00 
ffffffff801015a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015b0:	00 00 00 
ffffffff801015b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ba:	00 00 00 
ffffffff801015bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015c4:	00 00 00 
ffffffff801015c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ce:	00 00 00 
ffffffff801015d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015d8:	00 00 00 
ffffffff801015db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015e2:	00 00 00 
ffffffff801015e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ec:	00 00 00 
ffffffff801015ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015f6:	00 00 00 
ffffffff801015f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101600:	00 00 00 
ffffffff80101603:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010160a:	00 00 00 
ffffffff8010160d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101614:	00 00 00 
ffffffff80101617:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010161e:	00 00 00 
ffffffff80101621:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101628:	00 00 00 
ffffffff8010162b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101632:	00 00 00 
ffffffff80101635:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010163c:	00 00 00 
ffffffff8010163f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101646:	00 00 00 
ffffffff80101649:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101650:	00 00 00 
ffffffff80101653:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010165a:	00 00 00 
ffffffff8010165d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101664:	00 00 00 
ffffffff80101667:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010166e:	00 00 00 
ffffffff80101671:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101678:	00 00 00 
ffffffff8010167b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101682:	00 00 00 
ffffffff80101685:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010168c:	00 00 00 
ffffffff8010168f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101696:	00 00 00 
ffffffff80101699:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016a0:	00 00 00 
ffffffff801016a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016aa:	00 00 00 
ffffffff801016ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016b4:	00 00 00 
ffffffff801016b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016be:	00 00 00 
ffffffff801016c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016c8:	00 00 00 
ffffffff801016cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016d2:	00 00 00 
ffffffff801016d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016dc:	00 00 00 
ffffffff801016df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016e6:	00 00 00 
ffffffff801016e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016f0:	00 00 00 
ffffffff801016f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016fa:	00 00 00 
ffffffff801016fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101704:	00 00 00 
ffffffff80101707:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010170e:	00 00 00 
ffffffff80101711:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101718:	00 00 00 
ffffffff8010171b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101722:	00 00 00 
ffffffff80101725:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010172c:	00 00 00 
ffffffff8010172f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101736:	00 00 00 
ffffffff80101739:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101740:	00 00 00 
ffffffff80101743:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010174a:	00 00 00 
ffffffff8010174d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101754:	00 00 00 
ffffffff80101757:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010175e:	00 00 00 
ffffffff80101761:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101768:	00 00 00 
ffffffff8010176b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101772:	00 00 00 
ffffffff80101775:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010177c:	00 00 00 
ffffffff8010177f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101786:	00 00 00 
ffffffff80101789:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101790:	00 00 00 
ffffffff80101793:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010179a:	00 00 00 
ffffffff8010179d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017a4:	00 00 00 
ffffffff801017a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017ae:	00 00 00 
ffffffff801017b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017b8:	00 00 00 
ffffffff801017bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017c2:	00 00 00 
ffffffff801017c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017cc:	00 00 00 
ffffffff801017cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017d6:	00 00 00 
ffffffff801017d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017e0:	00 00 00 
ffffffff801017e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017ea:	00 00 00 
ffffffff801017ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017f4:	00 00 00 
ffffffff801017f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017fe:	00 00 00 
ffffffff80101801:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101808:	00 00 00 
ffffffff8010180b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101812:	00 00 00 
ffffffff80101815:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010181c:	00 00 00 
ffffffff8010181f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101826:	00 00 00 
ffffffff80101829:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101830:	00 00 00 
ffffffff80101833:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010183a:	00 00 00 
ffffffff8010183d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101844:	00 00 00 
ffffffff80101847:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010184e:	00 00 00 
ffffffff80101851:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101858:	00 00 00 
ffffffff8010185b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101862:	00 00 00 
ffffffff80101865:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010186c:	00 00 00 
ffffffff8010186f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101876:	00 00 00 
ffffffff80101879:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101880:	00 00 00 
ffffffff80101883:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010188a:	00 00 00 
ffffffff8010188d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101894:	00 00 00 
ffffffff80101897:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010189e:	00 00 00 
ffffffff801018a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018a8:	00 00 00 
ffffffff801018ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018b2:	00 00 00 
ffffffff801018b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018bc:	00 00 00 
ffffffff801018bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018c6:	00 00 00 
ffffffff801018c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018d0:	00 00 00 
ffffffff801018d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018da:	00 00 00 
ffffffff801018dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018e4:	00 00 00 
ffffffff801018e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018ee:	00 00 00 
ffffffff801018f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018f8:	00 00 00 
ffffffff801018fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101902:	00 00 00 
ffffffff80101905:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010190c:	00 00 00 
ffffffff8010190f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101916:	00 00 00 
ffffffff80101919:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101920:	00 00 00 
ffffffff80101923:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010192a:	00 00 00 
ffffffff8010192d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101934:	00 00 00 
ffffffff80101937:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010193e:	00 00 00 
ffffffff80101941:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101948:	00 00 00 
ffffffff8010194b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101952:	00 00 00 
ffffffff80101955:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010195c:	00 00 00 
ffffffff8010195f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101966:	00 00 00 
ffffffff80101969:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101970:	00 00 00 
ffffffff80101973:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010197a:	00 00 00 
ffffffff8010197d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101984:	00 00 00 
ffffffff80101987:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010198e:	00 00 00 
ffffffff80101991:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101998:	00 00 00 
ffffffff8010199b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019a2:	00 00 00 
ffffffff801019a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019ac:	00 00 00 
ffffffff801019af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019b6:	00 00 00 
ffffffff801019b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019c0:	00 00 00 
ffffffff801019c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019ca:	00 00 00 
ffffffff801019cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019d4:	00 00 00 
ffffffff801019d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019de:	00 00 00 
ffffffff801019e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019e8:	00 00 00 
ffffffff801019eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019f2:	00 00 00 
ffffffff801019f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019fc:	00 00 00 
ffffffff801019ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a06:	00 00 00 
ffffffff80101a09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a10:	00 00 00 
ffffffff80101a13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a1a:	00 00 00 
ffffffff80101a1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a24:	00 00 00 
ffffffff80101a27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a2e:	00 00 00 
ffffffff80101a31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a38:	00 00 00 
ffffffff80101a3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a42:	00 00 00 
ffffffff80101a45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a4c:	00 00 00 
ffffffff80101a4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a56:	00 00 00 
ffffffff80101a59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a60:	00 00 00 
ffffffff80101a63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a6a:	00 00 00 
ffffffff80101a6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a74:	00 00 00 
ffffffff80101a77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a7e:	00 00 00 
ffffffff80101a81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a88:	00 00 00 
ffffffff80101a8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a92:	00 00 00 
ffffffff80101a95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a9c:	00 00 00 
ffffffff80101a9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aa6:	00 00 00 
ffffffff80101aa9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ab0:	00 00 00 
ffffffff80101ab3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aba:	00 00 00 
ffffffff80101abd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ac4:	00 00 00 
ffffffff80101ac7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ace:	00 00 00 
ffffffff80101ad1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ad8:	00 00 00 
ffffffff80101adb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ae2:	00 00 00 
ffffffff80101ae5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aec:	00 00 00 
ffffffff80101aef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101af6:	00 00 00 
ffffffff80101af9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b00:	00 00 00 
ffffffff80101b03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b0a:	00 00 00 
ffffffff80101b0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b14:	00 00 00 
ffffffff80101b17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b1e:	00 00 00 
ffffffff80101b21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b28:	00 00 00 
ffffffff80101b2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b32:	00 00 00 
ffffffff80101b35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b3c:	00 00 00 
ffffffff80101b3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b46:	00 00 00 
ffffffff80101b49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b50:	00 00 00 
ffffffff80101b53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b5a:	00 00 00 
ffffffff80101b5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b64:	00 00 00 
ffffffff80101b67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b6e:	00 00 00 
ffffffff80101b71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b78:	00 00 00 
ffffffff80101b7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b82:	00 00 00 
ffffffff80101b85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b8c:	00 00 00 
ffffffff80101b8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b96:	00 00 00 
ffffffff80101b99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ba0:	00 00 00 
ffffffff80101ba3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101baa:	00 00 00 
ffffffff80101bad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bb4:	00 00 00 
ffffffff80101bb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bbe:	00 00 00 
ffffffff80101bc1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bc8:	00 00 00 
ffffffff80101bcb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bd2:	00 00 00 
ffffffff80101bd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bdc:	00 00 00 
ffffffff80101bdf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101be6:	00 00 00 
ffffffff80101be9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bf0:	00 00 00 
ffffffff80101bf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bfa:	00 00 00 
ffffffff80101bfd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c04:	00 00 00 
ffffffff80101c07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c0e:	00 00 00 
ffffffff80101c11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c18:	00 00 00 
ffffffff80101c1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c22:	00 00 00 
ffffffff80101c25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c2c:	00 00 00 
ffffffff80101c2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c36:	00 00 00 
ffffffff80101c39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c40:	00 00 00 
ffffffff80101c43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c4a:	00 00 00 
ffffffff80101c4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c54:	00 00 00 
ffffffff80101c57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c5e:	00 00 00 
ffffffff80101c61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c68:	00 00 00 
ffffffff80101c6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c72:	00 00 00 
ffffffff80101c75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c7c:	00 00 00 
ffffffff80101c7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c86:	00 00 00 
ffffffff80101c89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c90:	00 00 00 
ffffffff80101c93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c9a:	00 00 00 
ffffffff80101c9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ca4:	00 00 00 
ffffffff80101ca7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cae:	00 00 00 
ffffffff80101cb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cb8:	00 00 00 
ffffffff80101cbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cc2:	00 00 00 
ffffffff80101cc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ccc:	00 00 00 
ffffffff80101ccf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cd6:	00 00 00 
ffffffff80101cd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ce0:	00 00 00 
ffffffff80101ce3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cea:	00 00 00 
ffffffff80101ced:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cf4:	00 00 00 
ffffffff80101cf7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cfe:	00 00 00 
ffffffff80101d01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d08:	00 00 00 
ffffffff80101d0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d12:	00 00 00 
ffffffff80101d15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d1c:	00 00 00 
ffffffff80101d1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d26:	00 00 00 
ffffffff80101d29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d30:	00 00 00 
ffffffff80101d33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d3a:	00 00 00 
ffffffff80101d3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d44:	00 00 00 
ffffffff80101d47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d4e:	00 00 00 
ffffffff80101d51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d58:	00 00 00 
ffffffff80101d5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d62:	00 00 00 
ffffffff80101d65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d6c:	00 00 00 
ffffffff80101d6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d76:	00 00 00 
ffffffff80101d79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d80:	00 00 00 
ffffffff80101d83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d8a:	00 00 00 
ffffffff80101d8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d94:	00 00 00 
ffffffff80101d97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d9e:	00 00 00 
ffffffff80101da1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101da8:	00 00 00 
ffffffff80101dab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101db2:	00 00 00 
ffffffff80101db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dbc:	00 00 00 
ffffffff80101dbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dc6:	00 00 00 
ffffffff80101dc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dd0:	00 00 00 
ffffffff80101dd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dda:	00 00 00 
ffffffff80101ddd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101de4:	00 00 00 
ffffffff80101de7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dee:	00 00 00 
ffffffff80101df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101df8:	00 00 00 
ffffffff80101dfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e02:	00 00 00 
ffffffff80101e05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e0c:	00 00 00 
ffffffff80101e0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e16:	00 00 00 
ffffffff80101e19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e20:	00 00 00 
ffffffff80101e23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e2a:	00 00 00 
ffffffff80101e2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e34:	00 00 00 
ffffffff80101e37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e3e:	00 00 00 
ffffffff80101e41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e48:	00 00 00 
ffffffff80101e4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e52:	00 00 00 
ffffffff80101e55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e5c:	00 00 00 
ffffffff80101e5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e66:	00 00 00 
ffffffff80101e69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e70:	00 00 00 
ffffffff80101e73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e7a:	00 00 00 
ffffffff80101e7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e84:	00 00 00 
ffffffff80101e87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e8e:	00 00 00 
ffffffff80101e91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e98:	00 00 00 
ffffffff80101e9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ea2:	00 00 00 
ffffffff80101ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eac:	00 00 00 
ffffffff80101eaf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eb6:	00 00 00 
ffffffff80101eb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ec0:	00 00 00 
ffffffff80101ec3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eca:	00 00 00 
ffffffff80101ecd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ed4:	00 00 00 
ffffffff80101ed7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ede:	00 00 00 
ffffffff80101ee1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ee8:	00 00 00 
ffffffff80101eeb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ef2:	00 00 00 
ffffffff80101ef5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101efc:	00 00 00 
ffffffff80101eff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f06:	00 00 00 
ffffffff80101f09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f10:	00 00 00 
ffffffff80101f13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f1a:	00 00 00 
ffffffff80101f1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f24:	00 00 00 
ffffffff80101f27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f2e:	00 00 00 
ffffffff80101f31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f38:	00 00 00 
ffffffff80101f3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f42:	00 00 00 
ffffffff80101f45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f4c:	00 00 00 
ffffffff80101f4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f56:	00 00 00 
ffffffff80101f59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f60:	00 00 00 
ffffffff80101f63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f6a:	00 00 00 
ffffffff80101f6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f74:	00 00 00 
ffffffff80101f77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f7e:	00 00 00 
ffffffff80101f81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f88:	00 00 00 
ffffffff80101f8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f92:	00 00 00 
ffffffff80101f95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f9c:	00 00 00 
ffffffff80101f9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fa6:	00 00 00 
ffffffff80101fa9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fb0:	00 00 00 
ffffffff80101fb3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fba:	00 00 00 
ffffffff80101fbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fc4:	00 00 00 
ffffffff80101fc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fce:	00 00 00 
ffffffff80101fd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fd8:	00 00 00 
ffffffff80101fdb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fe2:	00 00 00 
ffffffff80101fe5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fec:	00 00 00 
ffffffff80101fef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ff6:	00 00 00 
ffffffff80101ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>:


 gdt_descriptor_t gdt_descriptors[64];
  tss_t tss ; __attribute__((aligned(4096)))
static void gdt_set_descriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran)
{
ffffffff80102000:	f3 0f 1e fa          	endbr64 
ffffffff80102004:	55                   	push   %rbp
ffffffff80102005:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102008:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8010200c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80102010:	89 f0                	mov    %esi,%eax
ffffffff80102012:	89 d6                	mov    %edx,%esi
ffffffff80102014:	89 ca                	mov    %ecx,%edx
ffffffff80102016:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff8010201a:	89 f0                	mov    %esi,%eax
ffffffff8010201c:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff8010201f:	89 d0                	mov    %edx,%eax
ffffffff80102021:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_descriptor_t *descriptor = &gdt_descriptors[sel / sizeof(*gdt_descriptors)];
ffffffff80102024:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80102028:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff8010202c:	48 89 c2             	mov    %rax,%rdx
ffffffff8010202f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102033:	48 01 d0             	add    %rdx,%rax
ffffffff80102036:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->flags = flags;
ffffffff8010203a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010203e:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff80102042:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->granularity = (gran << 4) | 0x0F;
ffffffff80102045:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff80102049:	c1 e0 04             	shl    $0x4,%eax
ffffffff8010204c:	83 c8 0f             	or     $0xf,%eax
ffffffff8010204f:	89 c2                	mov    %eax,%edx
ffffffff80102051:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102055:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->limit_low = 0xFFFF;
ffffffff80102058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010205c:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
}
ffffffff80102061:	90                   	nop
ffffffff80102062:	c9                   	leaveq 
ffffffff80102063:	c3                   	retq   

ffffffff80102064 <_ZL19gdt_set_xdescriptorP16gdt_descriptor_tthhmm>:

static void gdt_set_xdescriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran, uint64_t base, uint64_t limit)
{
ffffffff80102064:	f3 0f 1e fa          	endbr64 
ffffffff80102068:	55                   	push   %rbp
ffffffff80102069:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010206c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80102070:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80102074:	89 f0                	mov    %esi,%eax
ffffffff80102076:	89 d6                	mov    %edx,%esi
ffffffff80102078:	89 ca                	mov    %ecx,%edx
ffffffff8010207a:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
ffffffff8010207e:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
ffffffff80102082:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff80102086:	89 f0                	mov    %esi,%eax
ffffffff80102088:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff8010208b:	89 d0                	mov    %edx,%eax
ffffffff8010208d:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_xdescriptor_t *descriptor = (gdt_xdescriptor_t *) (&gdt_descriptors[sel / sizeof(*gdt_descriptors)]);
ffffffff80102090:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80102094:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80102098:	48 89 c2             	mov    %rax,%rdx
ffffffff8010209b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010209f:	48 01 d0             	add    %rdx,%rax
ffffffff801020a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->low.flags = flags;
ffffffff801020a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020aa:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff801020ae:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->low.granularity = (gran << 4) | ((limit >> 16) & 0x0F);
ffffffff801020b1:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff801020b5:	c1 e0 04             	shl    $0x4,%eax
ffffffff801020b8:	89 c2                	mov    %eax,%edx
ffffffff801020ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801020be:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801020c2:	83 e0 0f             	and    $0xf,%eax
ffffffff801020c5:	09 c2                	or     %eax,%edx
ffffffff801020c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020cb:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->low.limit_low = limit & 0xFFFF;
ffffffff801020ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801020d2:	89 c2                	mov    %eax,%edx
ffffffff801020d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020d8:	66 89 10             	mov    %dx,(%rax)
  descriptor->low.base_low = base & 0xFFFF;
ffffffff801020db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020df:	89 c2                	mov    %eax,%edx
ffffffff801020e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020e5:	66 89 50 02          	mov    %dx,0x2(%rax)
  descriptor->low.base_mid = ((base >> 16) & 0xFF);
ffffffff801020e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801020f1:	89 c2                	mov    %eax,%edx
ffffffff801020f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020f7:	88 50 04             	mov    %dl,0x4(%rax)
  descriptor->low.base_high = ((base >> 24) & 0xFF);
ffffffff801020fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020fe:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff80102102:	89 c2                	mov    %eax,%edx
ffffffff80102104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102108:	88 50 07             	mov    %dl,0x7(%rax)
  descriptor->high.base_xhigh = ((base >> 32) & 0xFFFFFFFF);
ffffffff8010210b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010210f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80102113:	89 c2                	mov    %eax,%edx
ffffffff80102115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102119:	89 50 08             	mov    %edx,0x8(%rax)
  descriptor->high.reserved = 0;
ffffffff8010211c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102120:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
}
ffffffff80102127:	90                   	nop
ffffffff80102128:	c9                   	leaveq 
ffffffff80102129:	c3                   	retq   

ffffffff8010212a <_Z9rgdt_initv>:

extern "C" void gdtr_install(gdtr_t*, unsigned short, unsigned short);
void rgdt_init(void)
{
ffffffff8010212a:	f3 0f 1e fa          	endbr64 
ffffffff8010212e:	55                   	push   %rbp
ffffffff8010212f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102132:	48 83 ec 10          	sub    $0x10,%rsp
  /* get this CPU's local data */

  /* get pointers to the GDT and GDTR */

  /* get pointer to the TSS and calculate the limit */
  uint64_t tss_base = (uint64_t) &tss;
ffffffff80102136:	48 b8 20 72 10 80 ff 	movabs $0xffffffff80107220,%rax
ffffffff8010213d:	ff ff ff 
ffffffff80102140:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  uint64_t tss_limit =tss_base+ sizeof(tss)-1;
ffffffff80102144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102148:	48 83 c0 6f          	add    $0x6f,%rax
ffffffff8010214c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

  /* reset the GDT */
  memzero(&gdt_descriptors,sizeof(gdt_descriptors) * 64);
ffffffff80102150:	be 00 80 00 00       	mov    $0x8000,%esi
ffffffff80102155:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff8010215c:	ff ff ff 
ffffffff8010215f:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff80102166:	ff ff ff 
ffffffff80102169:	ff d0                	callq  *%rax

  /* fill in the entries we need */
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_CODE, GDT_PRESENT | GDT_CS,                           GDT_LM);
ffffffff8010216b:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80102170:	ba 98 00 00 00       	mov    $0x98,%edx
ffffffff80102175:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8010217a:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff80102181:	ff ff ff 
ffffffff80102184:	48 b8 00 20 10 80 ff 	movabs $0xffffffff80102000,%rax
ffffffff8010218b:	ff ff ff 
ffffffff8010218e:	ff d0                	callq  *%rax
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_DATA, GDT_PRESENT | GDT_DS | GDT_WRITABLE,            0);
ffffffff80102190:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80102195:	ba 92 00 00 00       	mov    $0x92,%edx
ffffffff8010219a:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff8010219f:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff801021a6:	ff ff ff 
ffffffff801021a9:	48 b8 00 20 10 80 ff 	movabs $0xffffffff80102000,%rax
ffffffff801021b0:	ff ff ff 
ffffffff801021b3:	ff d0                	callq  *%rax
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_DATA,   GDT_PRESENT | GDT_DS | GDT_USER | GDT_WRITABLE, 0);
ffffffff801021b5:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff801021ba:	ba f2 00 00 00       	mov    $0xf2,%edx
ffffffff801021bf:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff801021c4:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff801021cb:	ff ff ff 
ffffffff801021ce:	48 b8 00 20 10 80 ff 	movabs $0xffffffff80102000,%rax
ffffffff801021d5:	ff ff ff 
ffffffff801021d8:	ff d0                	callq  *%rax
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_CODE,   GDT_PRESENT | GDT_CS | GDT_USER,                GDT_LM);
ffffffff801021da:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff801021df:	ba f8 00 00 00       	mov    $0xf8,%edx
ffffffff801021e4:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801021e9:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff801021f0:	ff ff ff 
ffffffff801021f3:	48 b8 00 20 10 80 ff 	movabs $0xffffffff80102000,%rax
ffffffff801021fa:	ff ff ff 
ffffffff801021fd:	ff d0                	callq  *%rax
  gdt_set_xdescriptor(gdt_descriptors, SLTR_TSS,         GDT_PRESENT | GDT_TSS,                          0, tss_base, tss_limit);
ffffffff801021ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80102203:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102207:	49 89 d1             	mov    %rdx,%r9
ffffffff8010220a:	49 89 c0             	mov    %rax,%r8
ffffffff8010220d:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80102212:	ba 89 00 00 00       	mov    $0x89,%edx
ffffffff80102217:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff8010221c:	48 bf 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdi
ffffffff80102223:	ff ff ff 
ffffffff80102226:	48 b8 64 20 10 80 ff 	movabs $0xffffffff80102064,%rax
ffffffff8010222d:	ff ff ff 
ffffffff80102230:	ff d0                	callq  *%rax
   * read the GS_BASE MSRs so we can restore it after updating the segment
   * registers
   */

  /* update the GDTR structure and install it */
  gdtr.addr = (uint64_t) &gdt_descriptors;
ffffffff80102232:	48 ba 20 70 10 80 ff 	movabs $0xffffffff80107020,%rdx
ffffffff80102239:	ff ff ff 
ffffffff8010223c:	48 b8 00 70 10 80 ff 	movabs $0xffffffff80107000,%rax
ffffffff80102243:	ff ff ff 
ffffffff80102246:	48 89 50 02          	mov    %rdx,0x2(%rax)
  gdtr.len = sizeof(gdt_descriptors) * GDT_DESCRIPTORS - 1;
ffffffff8010224a:	48 b8 00 70 10 80 ff 	movabs $0xffffffff80107000,%rax
ffffffff80102251:	ff ff ff 
ffffffff80102254:	66 c7 00 ff 0d       	movw   $0xdff,(%rax)
  gdtr_install(&gdtr, SLTR_KERNEL_CODE, SLTR_KERNEL_DATA);
ffffffff80102259:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff8010225e:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80102263:	48 bf 00 70 10 80 ff 	movabs $0xffffffff80107000,%rdi
ffffffff8010226a:	ff ff ff 
ffffffff8010226d:	48 b8 30 48 10 80 ff 	movabs $0xffffffff80104830,%rax
ffffffff80102274:	ff ff ff 
ffffffff80102277:	ff d0                	callq  *%rax

  /* restore the GS_BASE and GS_KERNEL_BASE MSR */
 
}void rgdt_init(void);
ffffffff80102279:	90                   	nop
ffffffff8010227a:	c9                   	leaveq 
ffffffff8010227b:	c3                   	retq   

ffffffff8010227c <_Z8tss_initm>:

uint8_t idt_stack[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack2[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack3[4096*4]__attribute__((aligned(4096)));
void tss_init(uint64_t i)
{
ffffffff8010227c:	f3 0f 1e fa          	endbr64 
ffffffff80102280:	55                   	push   %rbp
ffffffff80102281:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102284:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80102288:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* reset all the fields */
  memzero(&tss, sizeof(tss));
ffffffff8010228c:	be 70 00 00 00       	mov    $0x70,%esi
ffffffff80102291:	48 bf 20 72 10 80 ff 	movabs $0xffffffff80107220,%rdi
ffffffff80102298:	ff ff ff 
ffffffff8010229b:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff801022a2:	ff ff ff 
ffffffff801022a5:	ff d0                	callq  *%rax
  tss.iomap_base = sizeof(tss)-1;
ffffffff801022a7:	48 b8 20 72 10 80 ff 	movabs $0xffffffff80107220,%rax
ffffffff801022ae:	ff ff ff 
ffffffff801022b1:	66 c7 40 66 6f 00    	movw   $0x6f,0x66(%rax)
    tss.rsp0 =  (uint64_t)idt_stack+4096*4 - 32;
ffffffff801022b7:	48 b8 00 80 10 80 ff 	movabs $0xffffffff80108000,%rax
ffffffff801022be:	ff ff ff 
ffffffff801022c1:	48 8d 90 e0 3f 00 00 	lea    0x3fe0(%rax),%rdx
ffffffff801022c8:	48 b8 20 72 10 80 ff 	movabs $0xffffffff80107220,%rax
ffffffff801022cf:	ff ff ff 
ffffffff801022d2:	48 89 50 04          	mov    %rdx,0x4(%rax)
    tss.rsp1 = (uint64_t)idt_stack2+4096*4 - 32;
ffffffff801022d6:	48 b8 00 c0 10 80 ff 	movabs $0xffffffff8010c000,%rax
ffffffff801022dd:	ff ff ff 
ffffffff801022e0:	48 8d 90 e0 3f 00 00 	lea    0x3fe0(%rax),%rdx
ffffffff801022e7:	48 b8 20 72 10 80 ff 	movabs $0xffffffff80107220,%rax
ffffffff801022ee:	ff ff ff 
ffffffff801022f1:	48 89 50 0c          	mov    %rdx,0xc(%rax)
    tss.rsp2 = (uint64_t)idt_stack3+4096*4 - 32;
ffffffff801022f5:	48 b8 00 00 11 80 ff 	movabs $0xffffffff80110000,%rax
ffffffff801022fc:	ff ff ff 
ffffffff801022ff:	48 8d 90 e0 3f 00 00 	lea    0x3fe0(%rax),%rdx
ffffffff80102306:	48 b8 20 72 10 80 ff 	movabs $0xffffffff80107220,%rax
ffffffff8010230d:	ff ff ff 
ffffffff80102310:	48 89 50 14          	mov    %rdx,0x14(%rax)
    
  /* install it using the LTR instruction */

    asm volatile("mov ax, %0 \n ltr ax" : : "i" (SLTR_TSS) : "rax");
ffffffff80102314:	66 b8 28 00          	mov    $0x28,%ax
ffffffff80102318:	0f 00 d8             	ltr    %ax
}
ffffffff8010231b:	90                   	nop
ffffffff8010231c:	c9                   	leaveq 
ffffffff8010231d:	c3                   	retq   

ffffffff8010231e <_Z12tss_set_rsp0m>:

void tss_set_rsp0(uint64_t rsp0)
{
ffffffff8010231e:	f3 0f 1e fa          	endbr64 
ffffffff80102322:	55                   	push   %rbp
ffffffff80102323:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102326:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8010232a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* set the stack pointer for this CPU */
  tss.rsp0 = rsp0;
ffffffff8010232e:	48 ba 20 72 10 80 ff 	movabs $0xffffffff80107220,%rdx
ffffffff80102335:	ff ff ff 
ffffffff80102338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010233c:	48 89 42 04          	mov    %rax,0x4(%rdx)
}void setup_gdt(unsigned long i){
ffffffff80102340:	90                   	nop
ffffffff80102341:	c9                   	leaveq 
ffffffff80102342:	c3                   	retq   

ffffffff80102343 <_Z9setup_gdtm>:
ffffffff80102343:	f3 0f 1e fa          	endbr64 
ffffffff80102347:	55                   	push   %rbp
ffffffff80102348:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010234b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010234f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    rgdt_init();
ffffffff80102353:	48 b8 2a 21 10 80 ff 	movabs $0xffffffff8010212a,%rax
ffffffff8010235a:	ff ff ff 
ffffffff8010235d:	ff d0                	callq  *%rax
ffffffff8010235f:	90                   	nop
ffffffff80102360:	c9                   	leaveq 
ffffffff80102361:	c3                   	retq   

ffffffff80102362 <kernel_start>:
    .framebuffer_height = 0,
    .framebuffer_bpp = 0,
    .entry_point = 0
};

extern "C" void kernel_start(stivale_struct *bootloader_data){
ffffffff80102362:	f3 0f 1e fa          	endbr64 
ffffffff80102366:	55                   	push   %rbp
ffffffff80102367:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010236a:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010236e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    asm volatile("and rsp, -16");
ffffffff80102372:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    com_initialize(COM_PORT::COM1);
ffffffff80102376:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8010237b:	48 b8 25 44 10 80 ff 	movabs $0xffffffff80104425,%rax
ffffffff80102382:	ff ff ff 
ffffffff80102385:	ff d0                	callq  *%rax
   
    com_write_str("hello world");
ffffffff80102387:	48 bf 00 50 10 80 ff 	movabs $0xffffffff80105000,%rdi
ffffffff8010238e:	ff ff ff 
ffffffff80102391:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80102398:	ff ff ff 
ffffffff8010239b:	ff d0                	callq  *%rax
    com_write_str("init gdt");
ffffffff8010239d:	48 bf 0c 50 10 80 ff 	movabs $0xffffffff8010500c,%rdi
ffffffff801023a4:	ff ff ff 
ffffffff801023a7:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801023ae:	ff ff ff 
ffffffff801023b1:	ff d0                	callq  *%rax
    setup_gdt((uintptr_t)stack + (sizeof(char)*4096));
ffffffff801023b3:	48 b8 00 40 11 80 ff 	movabs $0xffffffff80114000,%rax
ffffffff801023ba:	ff ff ff 
ffffffff801023bd:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff801023c3:	48 89 c7             	mov    %rax,%rdi
ffffffff801023c6:	48 b8 43 23 10 80 ff 	movabs $0xffffffff80102343,%rax
ffffffff801023cd:	ff ff ff 
ffffffff801023d0:	ff d0                	callq  *%rax
    com_write_str("init gdt : ✅");
ffffffff801023d2:	48 bf 15 50 10 80 ff 	movabs $0xffffffff80105015,%rdi
ffffffff801023d9:	ff ff ff 
ffffffff801023dc:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801023e3:	ff ff ff 
ffffffff801023e6:	ff d0                	callq  *%rax
    com_write_str("init idt");
ffffffff801023e8:	48 bf 24 50 10 80 ff 	movabs $0xffffffff80105024,%rdi
ffffffff801023ef:	ff ff ff 
ffffffff801023f2:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801023f9:	ff ff ff 
ffffffff801023fc:	ff d0                	callq  *%rax
    
    init_idt();
ffffffff801023fe:	48 b8 22 39 10 80 ff 	movabs $0xffffffff80103922,%rax
ffffffff80102405:	ff ff ff 
ffffffff80102408:	ff d0                	callq  *%rax
    com_write_str("init idt : ✅");
ffffffff8010240a:	48 bf 2d 50 10 80 ff 	movabs $0xffffffff8010502d,%rdi
ffffffff80102411:	ff ff ff 
ffffffff80102414:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010241b:	ff ff ff 
ffffffff8010241e:	ff d0                	callq  *%rax

    com_write_str("init tss");
ffffffff80102420:	48 bf 3c 50 10 80 ff 	movabs $0xffffffff8010503c,%rdi
ffffffff80102427:	ff ff ff 
ffffffff8010242a:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80102431:	ff ff ff 
ffffffff80102434:	ff d0                	callq  *%rax
    tss_init((uintptr_t)stack + sizeof(char)*4096);
ffffffff80102436:	48 b8 00 40 11 80 ff 	movabs $0xffffffff80114000,%rax
ffffffff8010243d:	ff ff ff 
ffffffff80102440:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80102446:	48 89 c7             	mov    %rax,%rdi
ffffffff80102449:	48 b8 7c 22 10 80 ff 	movabs $0xffffffff8010227c,%rax
ffffffff80102450:	ff ff ff 
ffffffff80102453:	ff d0                	callq  *%rax
    com_write_str("init tss : OK");
ffffffff80102455:	48 bf 45 50 10 80 ff 	movabs $0xffffffff80105045,%rdi
ffffffff8010245c:	ff ff ff 
ffffffff8010245f:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80102466:	ff ff ff 
ffffffff80102469:	ff d0                	callq  *%rax
    com_write_str("init paging");
ffffffff8010246b:	48 bf 53 50 10 80 ff 	movabs $0xffffffff80105053,%rdi
ffffffff80102472:	ff ff ff 
ffffffff80102475:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010247c:	ff ff ff 
ffffffff8010247f:	ff d0                	callq  *%rax
    init_virtual_memory(bootloader_data);
ffffffff80102481:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102485:	48 89 c7             	mov    %rax,%rdi
ffffffff80102488:	48 b8 12 35 10 80 ff 	movabs $0xffffffff80103512,%rax
ffffffff8010248f:	ff ff ff 
ffffffff80102492:	ff d0                	callq  *%rax
    _start(bootloader_data);
ffffffff80102494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102498:	48 89 c7             	mov    %rax,%rdi
ffffffff8010249b:	48 b8 00 10 10 80 ff 	movabs $0xffffffff80101000,%rax
ffffffff801024a2:	ff ff ff 
ffffffff801024a5:	ff d0                	callq  *%rax
ffffffff801024a7:	90                   	nop
ffffffff801024a8:	c9                   	leaveq 
ffffffff801024a9:	c3                   	retq   

ffffffff801024aa <_ZL15liballoc_memsetPvil>:


// ***********   HELPER FUNCTIONS  *******************************

static void *liballoc_memset(void* s, int c, size_t n)
{
ffffffff801024aa:	f3 0f 1e fa          	endbr64 
ffffffff801024ae:	55                   	push   %rbp
ffffffff801024af:	48 89 e5             	mov    %rsp,%rbp
ffffffff801024b2:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff801024b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff801024ba:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff801024bd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	unsigned int i;
	for ( i = 0; i < n ; i++)
ffffffff801024c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff801024c8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801024cb:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff801024cf:	7e 15                	jle    ffffffff801024e6 <_ZL15liballoc_memsetPvil+0x3c>
		((char*)s)[i] = c;
ffffffff801024d1:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff801024d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801024d8:	48 01 d0             	add    %rdx,%rax
ffffffff801024db:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff801024de:	88 10                	mov    %dl,(%rax)
	for ( i = 0; i < n ; i++)
ffffffff801024e0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff801024e4:	eb e2                	jmp    ffffffff801024c8 <_ZL15liballoc_memsetPvil+0x1e>
	
	return s;
ffffffff801024e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff801024ea:	c9                   	leaveq 
ffffffff801024eb:	c3                   	retq   

ffffffff801024ec <_ZL15liballoc_memcpyPvPKvl>:
static void* liballoc_memcpy(void* s1, const void* s2, size_t n)
{
ffffffff801024ec:	f3 0f 1e fa          	endbr64 
ffffffff801024f0:	55                   	push   %rbp
ffffffff801024f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff801024f4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff801024f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff801024fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80102500:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  char *cdest;
  char *csrc;
  unsigned int *ldest = (unsigned int*)s1;
ffffffff80102504:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102508:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  unsigned int *lsrc  = (unsigned int*)s2;
ffffffff8010250c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102510:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

  while ( n >= sizeof(unsigned int) )
ffffffff80102514:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102518:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8010251c:	76 2a                	jbe    ffffffff80102548 <_ZL15liballoc_memcpyPvPKvl+0x5c>
  {
      *ldest++ = *lsrc++;
ffffffff8010251e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102522:	48 8d 50 04          	lea    0x4(%rax),%rdx
ffffffff80102526:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff8010252a:	8b 10                	mov    (%rax),%edx
ffffffff8010252c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102530:	48 8d 48 04          	lea    0x4(%rax),%rcx
ffffffff80102534:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80102538:	89 10                	mov    %edx,(%rax)
	  n -= sizeof(unsigned int);
ffffffff8010253a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8010253e:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80102542:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  while ( n >= sizeof(unsigned int) )
ffffffff80102546:	eb cc                	jmp    ffffffff80102514 <_ZL15liballoc_memcpyPvPKvl+0x28>
  }

  cdest = (char*)ldest;
ffffffff80102548:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010254c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  csrc  = (char*)lsrc;
ffffffff80102550:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102554:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  
  while ( n > 0 )
ffffffff80102558:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8010255d:	7e 24                	jle    ffffffff80102583 <_ZL15liballoc_memcpyPvPKvl+0x97>
  {
      *cdest++ = *csrc++;
ffffffff8010255f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102563:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80102567:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010256b:	0f b6 10             	movzbl (%rax),%edx
ffffffff8010256e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102572:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80102576:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8010257a:	88 10                	mov    %dl,(%rax)
	  n -= 1;
ffffffff8010257c:	48 83 6d c8 01       	subq   $0x1,-0x38(%rbp)
  while ( n > 0 )
ffffffff80102581:	eb d5                	jmp    ffffffff80102558 <_ZL15liballoc_memcpyPvPKvl+0x6c>
  }
  
  return s1;
ffffffff80102583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
ffffffff80102587:	c9                   	leaveq 
ffffffff80102588:	c3                   	retq   

ffffffff80102589 <_ZL17allocate_new_pagej>:


// ***************************************************************

static struct liballoc_major *allocate_new_page( unsigned int size )
{
ffffffff80102589:	f3 0f 1e fa          	endbr64 
ffffffff8010258d:	55                   	push   %rbp
ffffffff8010258e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102591:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80102595:	89 7d ec             	mov    %edi,-0x14(%rbp)
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
ffffffff80102598:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8010259b:	83 c0 28             	add    $0x28,%eax
ffffffff8010259e:	89 45 fc             	mov    %eax,-0x4(%rbp)
		st += sizeof(struct liballoc_minor);
ffffffff801025a1:	83 45 fc 28          	addl   $0x28,-0x4(%rbp)

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff801025a5:	48 b8 00 60 10 80 ff 	movabs $0xffffffff80106000,%rax
ffffffff801025ac:	ff ff ff 
ffffffff801025af:	8b 08                	mov    (%rax),%ecx
ffffffff801025b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801025b4:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801025b9:	f7 f1                	div    %ecx
ffffffff801025bb:	89 d0                	mov    %edx,%eax
ffffffff801025bd:	85 c0                	test   %eax,%eax
ffffffff801025bf:	75 1b                	jne    ffffffff801025dc <_ZL17allocate_new_pagej+0x53>
			st  = st / (l_pageSize);
ffffffff801025c1:	48 b8 00 60 10 80 ff 	movabs $0xffffffff80106000,%rax
ffffffff801025c8:	ff ff ff 
ffffffff801025cb:	8b 30                	mov    (%rax),%esi
ffffffff801025cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801025d0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801025d5:	f7 f6                	div    %esi
ffffffff801025d7:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff801025da:	eb 1c                	jmp    ffffffff801025f8 <_ZL17allocate_new_pagej+0x6f>
		else
			st  = st / (l_pageSize) + 1;
ffffffff801025dc:	48 b8 00 60 10 80 ff 	movabs $0xffffffff80106000,%rax
ffffffff801025e3:	ff ff ff 
ffffffff801025e6:	8b 08                	mov    (%rax),%ecx
ffffffff801025e8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801025eb:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801025f0:	f7 f1                	div    %ecx
ffffffff801025f2:	83 c0 01             	add    $0x1,%eax
ffffffff801025f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
							// No, add the buffer. 

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
ffffffff801025f8:	48 b8 04 60 10 80 ff 	movabs $0xffffffff80106004,%rax
ffffffff801025ff:	ff ff ff 
ffffffff80102602:	8b 00                	mov    (%rax),%eax
ffffffff80102604:	39 45 fc             	cmp    %eax,-0x4(%rbp)
ffffffff80102607:	73 0f                	jae    ffffffff80102618 <_ZL17allocate_new_pagej+0x8f>
ffffffff80102609:	48 b8 04 60 10 80 ff 	movabs $0xffffffff80106004,%rax
ffffffff80102610:	ff ff ff 
ffffffff80102613:	8b 00                	mov    (%rax),%eax
ffffffff80102615:	89 45 fc             	mov    %eax,-0x4(%rbp)
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80102618:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010261b:	89 c7                	mov    %eax,%edi
ffffffff8010261d:	48 b8 ae 48 10 80 ff 	movabs $0xffffffff801048ae,%rax
ffffffff80102624:	ff ff ff 
ffffffff80102627:	ff d0                	callq  *%rax
ffffffff80102629:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( maj == NULL ) 
ffffffff8010262d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80102632:	75 25                	jne    ffffffff80102659 <_ZL17allocate_new_pagej+0xd0>
		{
			l_warningCount += 1;
ffffffff80102634:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff8010263b:	ff ff ff 
ffffffff8010263e:	48 8b 00             	mov    (%rax),%rax
ffffffff80102641:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80102645:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff8010264c:	ff ff ff 
ffffffff8010264f:	48 89 10             	mov    %rdx,(%rax)
			#if defined DEBUG || defined INFO
			printf( "liballoc: WARNING: liballoc_alloc( %i ) return NULL\n", st );
			FLUSH();
			#endif
			return NULL;	// uh oh, we ran out of memory.
ffffffff80102652:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80102657:	eb 7b                	jmp    ffffffff801026d4 <_ZL17allocate_new_pagej+0x14b>
		}
		
		maj->prev 	= NULL;
ffffffff80102659:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010265d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80102664:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102668:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8010266f:	00 
		maj->pages 	= st;
ffffffff80102670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102674:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80102677:	89 50 10             	mov    %edx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff8010267a:	48 b8 00 60 10 80 ff 	movabs $0xffffffff80106000,%rax
ffffffff80102681:	ff ff ff 
ffffffff80102684:	8b 00                	mov    (%rax),%eax
ffffffff80102686:	0f af 45 fc          	imul   -0x4(%rbp),%eax
ffffffff8010268a:	89 c2                	mov    %eax,%edx
ffffffff8010268c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102690:	89 50 14             	mov    %edx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80102693:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102697:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff8010269e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026a2:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff801026a9:	00 

		l_allocated += maj->size;
ffffffff801026aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026ae:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff801026b1:	89 c2                	mov    %eax,%edx
ffffffff801026b3:	48 b8 10 50 11 80 ff 	movabs $0xffffffff80115010,%rax
ffffffff801026ba:	ff ff ff 
ffffffff801026bd:	48 8b 00             	mov    (%rax),%rax
ffffffff801026c0:	48 01 c2             	add    %rax,%rdx
ffffffff801026c3:	48 b8 10 50 11 80 ff 	movabs $0xffffffff80115010,%rax
ffffffff801026ca:	ff ff ff 
ffffffff801026cd:	48 89 10             	mov    %rdx,(%rax)
		printf( "liballoc: Total memory usage = %i KB\n",  (int)((l_allocated / (1024))) );
		FLUSH();
		#endif
	
		
      return maj;
ffffffff801026d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff801026d4:	c9                   	leaveq 
ffffffff801026d5:	c3                   	retq   

ffffffff801026d6 <malloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff801026d6:	f3 0f 1e fa          	endbr64 
ffffffff801026da:	55                   	push   %rbp
ffffffff801026db:	48 89 e5             	mov    %rsp,%rbp
ffffffff801026de:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff801026e2:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	int startedBet = 0;
ffffffff801026e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	unsigned long long bestSize = 0;
ffffffff801026ed:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801026f4:	00 
	void *p = NULL;
ffffffff801026f5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff801026fc:	00 
	uintptr_t diff;
	struct liballoc_major *maj;
	struct liballoc_minor *min;
	struct liballoc_minor *new_min;
	unsigned long size = req_size;
ffffffff801026fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102701:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

	// For alignment, we adjust size so there's enough space to align.
	if ( ALIGNMENT > 1 )
	{
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80102705:	48 83 45 b0 20       	addq   $0x20,-0x50(%rbp)
	}
				// So, ideally, we really want an alignment of 0 or 1 in order
				// to save space.
	
	liballoc_lock();
ffffffff8010270a:	48 b8 96 48 10 80 ff 	movabs $0xffffffff80104896,%rax
ffffffff80102711:	ff ff ff 
ffffffff80102714:	ff d0                	callq  *%rax

	if ( size == 0 )
ffffffff80102716:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8010271b:	75 40                	jne    ffffffff8010275d <malloc+0x87>
	{
		l_warningCount += 1;
ffffffff8010271d:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff80102724:	ff ff ff 
ffffffff80102727:	48 8b 00             	mov    (%rax),%rax
ffffffff8010272a:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8010272e:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff80102735:	ff ff ff 
ffffffff80102738:	48 89 10             	mov    %rdx,(%rax)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff8010273b:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102742:	ff ff ff 
ffffffff80102745:	ff d0                	callq  *%rax
		return PREFIX(malloc)(1);
ffffffff80102747:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8010274c:	48 b8 d6 26 10 80 ff 	movabs $0xffffffff801026d6,%rax
ffffffff80102753:	ff ff ff 
ffffffff80102756:	ff d0                	callq  *%rax
ffffffff80102758:	e9 bf 07 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>
	}
	

	if ( l_memRoot == NULL )
ffffffff8010275d:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff80102764:	ff ff ff 
ffffffff80102767:	48 8b 00             	mov    (%rax),%rax
ffffffff8010276a:	48 85 c0             	test   %rax,%rax
ffffffff8010276d:	75 47                	jne    ffffffff801027b6 <malloc+0xe0>
		atexit( liballoc_dump );
		FLUSH();
		#endif
			
		// This is the first time we are being used.
		l_memRoot = allocate_new_page( size );
ffffffff8010276f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102773:	89 c7                	mov    %eax,%edi
ffffffff80102775:	48 b8 89 25 10 80 ff 	movabs $0xffffffff80102589,%rax
ffffffff8010277c:	ff ff ff 
ffffffff8010277f:	ff d0                	callq  *%rax
ffffffff80102781:	48 ba 00 50 11 80 ff 	movabs $0xffffffff80115000,%rdx
ffffffff80102788:	ff ff ff 
ffffffff8010278b:	48 89 02             	mov    %rax,(%rdx)
		if ( l_memRoot == NULL )
ffffffff8010278e:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff80102795:	ff ff ff 
ffffffff80102798:	48 8b 00             	mov    (%rax),%rax
ffffffff8010279b:	48 85 c0             	test   %rax,%rax
ffffffff8010279e:	75 16                	jne    ffffffff801027b6 <malloc+0xe0>
		{
		  liballoc_unlock();
ffffffff801027a0:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff801027a7:	ff ff ff 
ffffffff801027aa:	ff d0                	callq  *%rax
		  #ifdef DEBUG
		  printf( "liballoc: initial l_memRoot initialization failed\n", p); 
		  FLUSH();
		  #endif
		  return NULL;
ffffffff801027ac:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff801027b1:	e9 66 07 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>
	FLUSH();
	#endif

	// Now we need to bounce through every major and find enough space....

	maj = l_memRoot;
ffffffff801027b6:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff801027bd:	ff ff ff 
ffffffff801027c0:	48 8b 00             	mov    (%rax),%rax
ffffffff801027c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	startedBet = 0;
ffffffff801027c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff801027ce:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff801027d5:	ff ff ff 
ffffffff801027d8:	48 8b 00             	mov    (%rax),%rax
ffffffff801027db:	48 85 c0             	test   %rax,%rax
ffffffff801027de:	74 50                	je     ffffffff80102830 <malloc+0x15a>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff801027e0:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff801027e7:	ff ff ff 
ffffffff801027ea:	48 8b 00             	mov    (%rax),%rax
ffffffff801027ed:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff801027f0:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff801027f7:	ff ff ff 
ffffffff801027fa:	48 8b 00             	mov    (%rax),%rax
ffffffff801027fd:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102800:	29 c2                	sub    %eax,%edx
ffffffff80102802:	89 d0                	mov    %edx,%eax
ffffffff80102804:	89 c0                	mov    %eax,%eax
ffffffff80102806:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff8010280a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010280e:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102812:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80102816:	76 18                	jbe    ffffffff80102830 <malloc+0x15a>
		{
			maj = l_bestBet;
ffffffff80102818:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff8010281f:	ff ff ff 
ffffffff80102822:	48 8b 00             	mov    (%rax),%rax
ffffffff80102825:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			startedBet = 1;
ffffffff80102829:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
		}
	}
	
	while ( maj != NULL )
ffffffff80102830:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80102835:	0f 84 d0 06 00 00    	je     ffffffff80102f0b <malloc+0x835>
	{
		diff  = maj->size - maj->usage;	
ffffffff8010283b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010283f:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80102842:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102846:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102849:	29 c2                	sub    %eax,%edx
ffffffff8010284b:	89 d0                	mov    %edx,%eax
ffffffff8010284d:	89 c0                	mov    %eax,%eax
ffffffff8010284f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
										// free memory in the block

		if ( bestSize < diff )
ffffffff80102853:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102857:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8010285b:	73 19                	jae    ffffffff80102876 <malloc+0x1a0>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff8010285d:	48 ba 08 50 11 80 ff 	movabs $0xffffffff80115008,%rdx
ffffffff80102864:	ff ff ff 
ffffffff80102867:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010286b:	48 89 02             	mov    %rax,(%rdx)
			bestSize = diff;
ffffffff8010286e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80102872:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80102876:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010287a:	48 83 c0 28          	add    $0x28,%rax
ffffffff8010287e:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102882:	0f 83 87 00 00 00    	jae    ffffffff8010290f <malloc+0x239>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80102888:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010288c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102890:	48 85 c0             	test   %rax,%rax
ffffffff80102893:	74 11                	je     ffffffff801028a6 <malloc+0x1d0>
			{
				maj = maj->next;		// Hop to that one.
ffffffff80102895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102899:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010289d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				continue;
ffffffff801028a1:	e9 5c 06 00 00       	jmpq   ffffffff80102f02 <malloc+0x82c>
			}

			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff801028a6:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff801028aa:	75 1d                	jne    ffffffff801028c9 <malloc+0x1f3>
			{							// let's start all over again.
				maj = l_memRoot;
ffffffff801028ac:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff801028b3:	ff ff ff 
ffffffff801028b6:	48 8b 00             	mov    (%rax),%rax
ffffffff801028b9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff801028bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff801028c4:	e9 39 06 00 00       	jmpq   ffffffff80102f02 <malloc+0x82c>
			}

			// Create a new major block next to this one and...
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff801028c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801028cd:	89 c7                	mov    %eax,%edi
ffffffff801028cf:	48 b8 89 25 10 80 ff 	movabs $0xffffffff80102589,%rax
ffffffff801028d6:	ff ff ff 
ffffffff801028d9:	ff d0                	callq  *%rax
ffffffff801028db:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff801028df:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff801028e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028e7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801028eb:	48 85 c0             	test   %rax,%rax
ffffffff801028ee:	0f 84 13 06 00 00    	je     ffffffff80102f07 <malloc+0x831>
			maj->next->prev = maj;
ffffffff801028f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028f8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801028fc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102900:	48 89 10             	mov    %rdx,(%rax)
			maj = maj->next;
ffffffff80102903:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102907:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010290b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff8010290f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102913:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102917:	48 85 c0             	test   %rax,%rax
ffffffff8010291a:	0f 85 17 01 00 00    	jne    ffffffff80102a37 <malloc+0x361>
		{
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80102920:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102924:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102928:	48 89 c2             	mov    %rax,%rdx
ffffffff8010292b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010292f:	48 89 50 20          	mov    %rdx,0x20(%rax)

			
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80102933:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102937:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010293b:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 		= NULL;
ffffffff80102942:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102946:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010294a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->next 		= NULL;
ffffffff80102951:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102955:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102959:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80102960:	00 
			maj->first->block 		= maj;
ffffffff80102961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102965:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102969:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8010296d:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 		= size;
ffffffff80102971:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102975:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102979:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8010297d:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff80102980:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102984:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102988:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8010298c:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 	+= size + sizeof( struct liballoc_minor );
ffffffff8010298f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102993:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102996:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8010299a:	01 d0                	add    %edx,%eax
ffffffff8010299c:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff8010299f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801029a3:	89 50 18             	mov    %edx,0x18(%rax)


			l_inuse += size;
ffffffff801029a6:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff801029ad:	ff ff ff 
ffffffff801029b0:	48 8b 10             	mov    (%rax),%rdx
ffffffff801029b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801029b7:	48 01 c2             	add    %rax,%rdx
ffffffff801029ba:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff801029c1:	ff ff ff 
ffffffff801029c4:	48 89 10             	mov    %rdx,(%rax)
			
			
			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff801029c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801029cb:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801029cf:	48 83 c0 28          	add    $0x28,%rax
ffffffff801029d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

			ALIGN( p );
ffffffff801029d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801029db:	48 83 c0 10          	add    $0x10,%rax
ffffffff801029df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801029e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801029e7:	83 e0 0f             	and    $0xf,%eax
ffffffff801029ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff801029ee:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff801029f3:	74 1c                	je     ffffffff80102a11 <malloc+0x33b>
ffffffff801029f5:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff801029fa:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
ffffffff801029fe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80102a02:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102a06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102a0a:	48 01 d0             	add    %rdx,%rax
ffffffff80102a0d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102a11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102a15:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102a18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102a1c:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102a20:	88 10                	mov    %dl,(%rax)
			
			#ifdef DEBUG
			printf( "CASE 2: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff80102a22:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102a29:	ff ff ff 
ffffffff80102a2c:	ff d0                	callq  *%rax
			return p;
ffffffff80102a2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102a32:	e9 e5 04 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>
#endif
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
ffffffff80102a37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a3b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102a3f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		diff -= (uintptr_t)maj;
ffffffff80102a43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a47:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
		diff -= sizeof(struct liballoc_major);
ffffffff80102a4b:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80102a50:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102a54:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102a58:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102a5c:	0f 82 31 01 00 00    	jb     ffffffff80102b93 <malloc+0x4bd>
		{
			// Yes, space in front. Squeeze in.
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80102a62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a66:	48 8d 50 28          	lea    0x28(%rax),%rdx
ffffffff80102a6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a6e:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102a72:	48 89 10             	mov    %rdx,(%rax)
			maj->first->prev->next = maj->first;
ffffffff80102a75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a79:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102a7d:	48 8b 00             	mov    (%rax),%rax
ffffffff80102a80:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102a84:	48 8b 52 20          	mov    0x20(%rdx),%rdx
ffffffff80102a88:	48 89 50 08          	mov    %rdx,0x8(%rax)
			maj->first = maj->first->prev;
ffffffff80102a8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a90:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102a94:	48 8b 10             	mov    (%rax),%rdx
ffffffff80102a97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a9b:	48 89 50 20          	mov    %rdx,0x20(%rax)
				
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80102a9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102aa3:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102aa7:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 	= NULL;
ffffffff80102aae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ab2:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102ab6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->block 	= maj;
ffffffff80102abd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ac1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102ac5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102ac9:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 	= size;
ffffffff80102acd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ad1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102ad5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102ad9:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff80102adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ae0:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102ae4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80102ae8:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80102aeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102aef:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102af2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102af6:	01 d0                	add    %edx,%eax
ffffffff80102af8:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102afb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102aff:	89 50 18             	mov    %edx,0x18(%rax)

			l_inuse += size;
ffffffff80102b02:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102b09:	ff ff ff 
ffffffff80102b0c:	48 8b 10             	mov    (%rax),%rdx
ffffffff80102b0f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102b13:	48 01 c2             	add    %rax,%rdx
ffffffff80102b16:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102b1d:	ff ff ff 
ffffffff80102b20:	48 89 10             	mov    %rdx,(%rax)

			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff80102b23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102b27:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102b2b:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102b2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			ALIGN( p );
ffffffff80102b33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b37:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102b3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102b3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b43:	83 e0 0f             	and    $0xf,%eax
ffffffff80102b46:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80102b4a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80102b4f:	74 1c                	je     ffffffff80102b6d <malloc+0x497>
ffffffff80102b51:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102b56:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
ffffffff80102b5a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80102b5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102b62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102b66:	48 01 d0             	add    %rdx,%rax
ffffffff80102b69:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102b6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102b71:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102b74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b78:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102b7c:	88 10                	mov    %dl,(%rax)

			#ifdef DEBUG
			printf( "CASE 3: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff80102b7e:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102b85:	ff ff ff 
ffffffff80102b88:	ff d0                	callq  *%rax
			return p;
ffffffff80102b8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b8e:	e9 89 03 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>


#ifdef USE_CASE4

		// CASE 4: There is enough space in this block. But is it contiguous?
		min = maj->first;
ffffffff80102b93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102b97:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102b9b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		
			// Looping within the block now...
		while ( min != NULL )
ffffffff80102b9f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80102ba4:	0f 84 e9 02 00 00    	je     ffffffff80102e93 <malloc+0x7bd>
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80102baa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102bae:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102bb2:	48 85 c0             	test   %rax,%rax
ffffffff80102bb5:	0f 85 5b 01 00 00    	jne    ffffffff80102d16 <malloc+0x640>
				{
					// the rest of this block is free...  is it big enough?
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80102bbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102bbf:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80102bc2:	89 c2                	mov    %eax,%edx
ffffffff80102bc4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102bc8:	48 01 d0             	add    %rdx,%rax
ffffffff80102bcb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102bcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102bd3:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff80102bd7:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size; 
ffffffff80102bdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102be0:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102be3:	89 c0                	mov    %eax,%eax
ffffffff80102be5:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
						// minus already existing usage..

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80102be9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102bed:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102bf1:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102bf5:	0f 82 1b 01 00 00    	jb     ffffffff80102d16 <malloc+0x640>
					{
						// yay....
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80102bfb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102bff:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102c02:	89 c2                	mov    %eax,%edx
ffffffff80102c04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c08:	48 01 d0             	add    %rdx,%rax
ffffffff80102c0b:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102c0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80102c12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c16:	48 89 50 08          	mov    %rdx,0x8(%rax)
						min->next->prev = min;
ffffffff80102c1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c1e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102c22:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80102c26:	48 89 10             	mov    %rdx,(%rax)
						min = min->next;
ffffffff80102c29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c2d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102c31:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
						min->next = NULL;
ffffffff80102c35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c39:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80102c40:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80102c41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c45:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						min->block = maj;
ffffffff80102c4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c50:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102c54:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->size = size;
ffffffff80102c58:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102c5c:	89 c2                	mov    %eax,%edx
ffffffff80102c5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c62:	89 50 1c             	mov    %edx,0x1c(%rax)
						min->req_size = req_size;
ffffffff80102c65:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102c69:	89 c2                	mov    %eax,%edx
ffffffff80102c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c6f:	89 50 20             	mov    %edx,0x20(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80102c72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102c76:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102c79:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102c7d:	01 d0                	add    %edx,%eax
ffffffff80102c7f:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102c82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102c86:	89 50 18             	mov    %edx,0x18(%rax)

						l_inuse += size;
ffffffff80102c89:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102c90:	ff ff ff 
ffffffff80102c93:	48 8b 10             	mov    (%rax),%rdx
ffffffff80102c96:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102c9a:	48 01 c2             	add    %rax,%rdx
ffffffff80102c9d:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102ca4:	ff ff ff 
ffffffff80102ca7:	48 89 10             	mov    %rdx,(%rax)
						
						p = (void*)((uintptr_t)min + sizeof( struct liballoc_minor ));
ffffffff80102caa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102cae:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102cb2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102cb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102cba:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102cbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102cc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102cc6:	83 e0 0f             	and    $0xf,%eax
ffffffff80102cc9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80102ccd:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80102cd2:	74 1c                	je     ffffffff80102cf0 <malloc+0x61a>
ffffffff80102cd4:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102cd9:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
ffffffff80102cdd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80102ce1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102ce5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102ce9:	48 01 d0             	add    %rdx,%rax
ffffffff80102cec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102cf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102cf4:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102cf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102cfb:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102cff:	88 10                	mov    %dl,(%rax)

						#ifdef DEBUG
						printf( "CASE 4.1: returning %x\n", p); 
						FLUSH();
						#endif
						liballoc_unlock();		// release the lock
ffffffff80102d01:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102d08:	ff ff ff 
ffffffff80102d0b:	ff d0                	callq  *%rax
						return p;
ffffffff80102d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102d11:	e9 06 02 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>
				}



				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
ffffffff80102d16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d1a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102d1e:	48 85 c0             	test   %rax,%rax
ffffffff80102d21:	0f 84 5b 01 00 00    	je     ffffffff80102e82 <malloc+0x7ac>
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
ffffffff80102d27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d2b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102d2f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102d33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d37:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff80102d3b:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size;
ffffffff80102d40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d44:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102d47:	89 c0                	mov    %eax,%eax
ffffffff80102d49:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80102d4d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102d51:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102d55:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102d59:	0f 82 23 01 00 00    	jb     ffffffff80102e82 <malloc+0x7ac>
					{
						// yay......
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80102d5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d63:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102d66:	89 c2                	mov    %eax,%edx
ffffffff80102d68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d6c:	48 01 d0             	add    %rdx,%rax
ffffffff80102d6f:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102d73:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

						new_min->magic = LIBALLOC_MAGIC;
ffffffff80102d77:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102d7b:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						new_min->next = min->next;
ffffffff80102d82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d86:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80102d8a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102d8e:	48 89 50 08          	mov    %rdx,0x8(%rax)
						new_min->prev = min;
ffffffff80102d92:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102d96:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80102d9a:	48 89 10             	mov    %rdx,(%rax)
						new_min->size = size;
ffffffff80102d9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102da1:	89 c2                	mov    %eax,%edx
ffffffff80102da3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102da7:	89 50 1c             	mov    %edx,0x1c(%rax)
						new_min->req_size = req_size;
ffffffff80102daa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102dae:	89 c2                	mov    %eax,%edx
ffffffff80102db0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102db4:	89 50 20             	mov    %edx,0x20(%rax)
						new_min->block = maj;
ffffffff80102db7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102dbb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102dbf:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->next->prev = new_min;
ffffffff80102dc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102dc7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102dcb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102dcf:	48 89 10             	mov    %rdx,(%rax)
						min->next = new_min;
ffffffff80102dd2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102dd6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102dda:	48 89 50 08          	mov    %rdx,0x8(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80102dde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102de2:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102de5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102de9:	01 d0                	add    %edx,%eax
ffffffff80102deb:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102dee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102df2:	89 50 18             	mov    %edx,0x18(%rax)
						
						l_inuse += size;
ffffffff80102df5:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102dfc:	ff ff ff 
ffffffff80102dff:	48 8b 10             	mov    (%rax),%rdx
ffffffff80102e02:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102e06:	48 01 c2             	add    %rax,%rdx
ffffffff80102e09:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff80102e10:	ff ff ff 
ffffffff80102e13:	48 89 10             	mov    %rdx,(%rax)
						
						p = (void*)((uintptr_t)new_min + sizeof( struct liballoc_minor ));
ffffffff80102e16:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102e1a:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102e1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102e22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e26:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102e2a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102e2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e32:	83 e0 0f             	and    $0xf,%eax
ffffffff80102e35:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102e39:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80102e3e:	74 1c                	je     ffffffff80102e5c <malloc+0x786>
ffffffff80102e40:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102e45:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
ffffffff80102e49:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102e4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102e51:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102e55:	48 01 d0             	add    %rdx,%rax
ffffffff80102e58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102e5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102e60:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e67:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102e6b:	88 10                	mov    %dl,(%rax)
						#ifdef DEBUG
						printf( "CASE 4.2: returning %x\n", p); 
						FLUSH();
						#endif
						
						liballoc_unlock();		// release the lock
ffffffff80102e6d:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102e74:	ff ff ff 
ffffffff80102e77:	ff d0                	callq  *%rax
						return p;
ffffffff80102e79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e7d:	e9 9a 00 00 00       	jmpq   ffffffff80102f1c <malloc+0x846>
					}
				}	// min->next != NULL

				min = min->next;
ffffffff80102e82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102e86:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102e8a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		while ( min != NULL )
ffffffff80102e8e:	e9 0c fd ff ff       	jmpq   ffffffff80102b9f <malloc+0x4c9>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80102e93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102e97:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102e9b:	48 85 c0             	test   %rax,%rax
ffffffff80102e9e:	75 56                	jne    ffffffff80102ef6 <malloc+0x820>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80102ea0:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff80102ea4:	75 1a                	jne    ffffffff80102ec0 <malloc+0x7ea>
			{
				maj = l_memRoot;
ffffffff80102ea6:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff80102ead:	ff ff ff 
ffffffff80102eb0:	48 8b 00             	mov    (%rax),%rax
ffffffff80102eb3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff80102eb7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff80102ebe:	eb 42                	jmp    ffffffff80102f02 <malloc+0x82c>
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80102ec0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102ec4:	89 c7                	mov    %eax,%edi
ffffffff80102ec6:	48 b8 89 25 10 80 ff 	movabs $0xffffffff80102589,%rax
ffffffff80102ecd:	ff ff ff 
ffffffff80102ed0:	ff d0                	callq  *%rax
ffffffff80102ed2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102ed6:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80102eda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ede:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102ee2:	48 85 c0             	test   %rax,%rax
ffffffff80102ee5:	74 23                	je     ffffffff80102f0a <malloc+0x834>
			maj->next->prev = maj;
ffffffff80102ee7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102eeb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102eef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102ef3:	48 89 10             	mov    %rdx,(%rax)

		}

#endif

		maj = maj->next;
ffffffff80102ef6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102efa:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102efe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while ( maj != NULL )
ffffffff80102f02:	e9 29 f9 ff ff       	jmpq   ffffffff80102830 <malloc+0x15a>
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80102f07:	90                   	nop
ffffffff80102f08:	eb 01                	jmp    ffffffff80102f0b <malloc+0x835>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80102f0a:	90                   	nop
	} // while (maj != NULL)


	
	liballoc_unlock();		// release the lock
ffffffff80102f0b:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80102f12:	ff ff ff 
ffffffff80102f15:	ff d0                	callq  *%rax
	#if defined DEBUG || defined INFO
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
ffffffff80102f17:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80102f1c:	c9                   	leaveq 
ffffffff80102f1d:	c3                   	retq   

ffffffff80102f1e <free>:




void PREFIX(free)(void *ptr)
{
ffffffff80102f1e:	f3 0f 1e fa          	endbr64 
ffffffff80102f22:	55                   	push   %rbp
ffffffff80102f23:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102f26:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80102f2a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80102f2e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80102f33:	75 23                	jne    ffffffff80102f58 <free+0x3a>
	{
		l_warningCount += 1;
ffffffff80102f35:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff80102f3c:	ff ff ff 
ffffffff80102f3f:	48 8b 00             	mov    (%rax),%rax
ffffffff80102f42:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80102f46:	48 b8 20 50 11 80 ff 	movabs $0xffffffff80115020,%rax
ffffffff80102f4d:	ff ff ff 
ffffffff80102f50:	48 89 10             	mov    %rdx,(%rax)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		return;
ffffffff80102f53:	e9 2b 03 00 00       	jmpq   ffffffff80103283 <free+0x365>
	}

	UNALIGN( ptr );
ffffffff80102f58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102f5c:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102f60:	0f b6 00             	movzbl (%rax),%eax
ffffffff80102f63:	48 0f be c0          	movsbq %al,%rax
ffffffff80102f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80102f6b:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
ffffffff80102f70:	77 0c                	ja     ffffffff80102f7e <free+0x60>
ffffffff80102f72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102f76:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff80102f7a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	liballoc_lock();		// lockit
ffffffff80102f7e:	48 b8 96 48 10 80 ff 	movabs $0xffffffff80104896,%rax
ffffffff80102f85:	ff ff ff 
ffffffff80102f88:	ff d0                	callq  *%rax


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80102f8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102f8e:	48 83 e8 28          	sub    $0x28,%rax
ffffffff80102f92:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80102f96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102f9a:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102f9d:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80102fa2:	0f 84 d4 00 00 00    	je     ffffffff8010307c <free+0x15e>
	{
		l_errorCount += 1;
ffffffff80102fa8:	48 b8 28 50 11 80 ff 	movabs $0xffffffff80115028,%rax
ffffffff80102faf:	ff ff ff 
ffffffff80102fb2:	48 8b 00             	mov    (%rax),%rax
ffffffff80102fb5:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80102fb9:	48 b8 28 50 11 80 ff 	movabs $0xffffffff80115028,%rax
ffffffff80102fc0:	ff ff ff 
ffffffff80102fc3:	48 89 10             	mov    %rdx,(%rax)

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80102fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102fca:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102fcd:	25 ff ff ff 00       	and    $0xffffff,%eax
		if ( 
ffffffff80102fd2:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80102fd7:	74 22                	je     ffffffff80102ffb <free+0xdd>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80102fd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102fdd:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102fe0:	0f b7 c0             	movzwl %ax,%eax
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80102fe3:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff80102fe8:	74 11                	je     ffffffff80102ffb <free+0xdd>
			((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff80102fea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102fee:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102ff1:	0f b6 c0             	movzbl %al,%eax
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80102ff4:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff80102ff9:	75 34                	jne    ffffffff8010302f <free+0x111>
		   )
		{
			l_possibleOverruns += 1;
ffffffff80102ffb:	48 b8 30 50 11 80 ff 	movabs $0xffffffff80115030,%rax
ffffffff80103002:	ff ff ff 
ffffffff80103005:	48 8b 00             	mov    (%rax),%rax
ffffffff80103008:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8010300c:	48 b8 30 50 11 80 ff 	movabs $0xffffffff80115030,%rax
ffffffff80103013:	ff ff ff 
ffffffff80103016:	48 89 10             	mov    %rdx,(%rax)
            com_write_str( "liballoc: ERROR: Possible 1-3 byte overrun for magic ");
ffffffff80103019:	48 bf 60 50 10 80 ff 	movabs $0xffffffff80105060,%rdi
ffffffff80103020:	ff ff ff 
ffffffff80103023:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010302a:	ff ff ff 
ffffffff8010302d:	ff d0                	callq  *%rax
			FLUSH();
			#endif
		}
						
						
		if ( min->magic == LIBALLOC_DEAD )
ffffffff8010302f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103033:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80103036:	3d ad de ad de       	cmp    $0xdeaddead,%eax
ffffffff8010303b:	75 18                	jne    ffffffff80103055 <free+0x137>
		{
            com_write_str( "liballoc: ERROR: multiple (free)() attempt ");
ffffffff8010303d:	48 bf 98 50 10 80 ff 	movabs $0xffffffff80105098,%rdi
ffffffff80103044:	ff ff ff 
ffffffff80103047:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010304e:	ff ff ff 
ffffffff80103051:	ff d0                	callq  *%rax
ffffffff80103053:	eb 16                	jmp    ffffffff8010306b <free+0x14d>
			FLUSH();
			#endif
		}
		else
		{
            com_write_str( "liballoc: ERROR:bad free ");
ffffffff80103055:	48 bf c4 50 10 80 ff 	movabs $0xffffffff801050c4,%rdi
ffffffff8010305c:	ff ff ff 
ffffffff8010305f:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103066:	ff ff ff 
ffffffff80103069:	ff d0                	callq  *%rax
			FLUSH();
			#endif
		}
			
		// being lied to...
		liballoc_unlock();		// release the lock
ffffffff8010306b:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80103072:	ff ff ff 
ffffffff80103075:	ff d0                	callq  *%rax
		return;
ffffffff80103077:	e9 07 02 00 00       	jmpq   ffffffff80103283 <free+0x365>
				ptr );
	FLUSH();
	#endif
	

		maj = min->block;
ffffffff8010307c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103080:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103084:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		l_inuse -= min->size;
ffffffff80103088:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff8010308f:	ff ff ff 
ffffffff80103092:	48 8b 10             	mov    (%rax),%rdx
ffffffff80103095:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103099:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff8010309c:	89 c0                	mov    %eax,%eax
ffffffff8010309e:	48 29 c2             	sub    %rax,%rdx
ffffffff801030a1:	48 b8 18 50 11 80 ff 	movabs $0xffffffff80115018,%rax
ffffffff801030a8:	ff ff ff 
ffffffff801030ab:	48 89 10             	mov    %rdx,(%rax)

		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff801030ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801030b2:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff801030b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801030b9:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff801030bc:	29 c2                	sub    %eax,%edx
ffffffff801030be:	89 d0                	mov    %edx,%eax
ffffffff801030c0:	8d 50 d8             	lea    -0x28(%rax),%edx
ffffffff801030c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801030c7:	89 50 18             	mov    %edx,0x18(%rax)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff801030ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801030ce:	c7 40 18 ad de ad de 	movl   $0xdeaddead,0x18(%rax)

		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff801030d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801030d9:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801030dd:	48 85 c0             	test   %rax,%rax
ffffffff801030e0:	74 12                	je     ffffffff801030f4 <free+0x1d6>
ffffffff801030e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801030e6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801030ea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801030ee:	48 8b 12             	mov    (%rdx),%rdx
ffffffff801030f1:	48 89 10             	mov    %rdx,(%rax)
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff801030f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801030f8:	48 8b 00             	mov    (%rax),%rax
ffffffff801030fb:	48 85 c0             	test   %rax,%rax
ffffffff801030fe:	74 13                	je     ffffffff80103113 <free+0x1f5>
ffffffff80103100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103104:	48 8b 00             	mov    (%rax),%rax
ffffffff80103107:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8010310b:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff8010310f:	48 89 50 08          	mov    %rdx,0x8(%rax)

		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80103113:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103117:	48 8b 00             	mov    (%rax),%rax
ffffffff8010311a:	48 85 c0             	test   %rax,%rax
ffffffff8010311d:	75 10                	jne    ffffffff8010312f <free+0x211>
ffffffff8010311f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103123:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80103127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010312b:	48 89 50 20          	mov    %rdx,0x20(%rax)
							// minor.


	// We need to clean up after the majors now....

	if ( maj->first == NULL )	// Block completely unused.
ffffffff8010312f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103133:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80103137:	48 85 c0             	test   %rax,%rax
ffffffff8010313a:	0f 85 d0 00 00 00    	jne    ffffffff80103210 <free+0x2f2>
	{
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80103140:	48 b8 00 50 11 80 ff 	movabs $0xffffffff80115000,%rax
ffffffff80103147:	ff ff ff 
ffffffff8010314a:	48 8b 00             	mov    (%rax),%rax
ffffffff8010314d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80103151:	75 15                	jne    ffffffff80103168 <free+0x24a>
ffffffff80103153:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103157:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010315b:	48 ba 00 50 11 80 ff 	movabs $0xffffffff80115000,%rdx
ffffffff80103162:	ff ff ff 
ffffffff80103165:	48 89 02             	mov    %rax,(%rdx)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80103168:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff8010316f:	ff ff ff 
ffffffff80103172:	48 8b 00             	mov    (%rax),%rax
ffffffff80103175:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80103179:	75 11                	jne    ffffffff8010318c <free+0x26e>
ffffffff8010317b:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff80103182:	ff ff ff 
ffffffff80103185:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff8010318c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103190:	48 8b 00             	mov    (%rax),%rax
ffffffff80103193:	48 85 c0             	test   %rax,%rax
ffffffff80103196:	74 13                	je     ffffffff801031ab <free+0x28d>
ffffffff80103198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010319c:	48 8b 00             	mov    (%rax),%rax
ffffffff8010319f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801031a3:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff801031a7:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff801031ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801031af:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801031b3:	48 85 c0             	test   %rax,%rax
ffffffff801031b6:	74 12                	je     ffffffff801031ca <free+0x2ac>
ffffffff801031b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801031bc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801031c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801031c4:	48 8b 12             	mov    (%rdx),%rdx
ffffffff801031c7:	48 89 10             	mov    %rdx,(%rax)
		l_allocated -= maj->size;
ffffffff801031ca:	48 b8 10 50 11 80 ff 	movabs $0xffffffff80115010,%rax
ffffffff801031d1:	ff ff ff 
ffffffff801031d4:	48 8b 10             	mov    (%rax),%rdx
ffffffff801031d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801031db:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff801031de:	89 c0                	mov    %eax,%eax
ffffffff801031e0:	48 29 c2             	sub    %rax,%rdx
ffffffff801031e3:	48 b8 10 50 11 80 ff 	movabs $0xffffffff80115010,%rax
ffffffff801031ea:	ff ff ff 
ffffffff801031ed:	48 89 10             	mov    %rdx,(%rax)

		liballoc_free( maj, maj->pages );
ffffffff801031f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801031f4:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff801031f7:	89 c2                	mov    %eax,%edx
ffffffff801031f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801031fd:	89 d6                	mov    %edx,%esi
ffffffff801031ff:	48 89 c7             	mov    %rax,%rdi
ffffffff80103202:	48 b8 c4 48 10 80 ff 	movabs $0xffffffff801048c4,%rax
ffffffff80103209:	ff ff ff 
ffffffff8010320c:	ff d0                	callq  *%rax
ffffffff8010320e:	eb 67                	jmp    ffffffff80103277 <free+0x359>
	}
	else
	{
		if ( l_bestBet != NULL )
ffffffff80103210:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff80103217:	ff ff ff 
ffffffff8010321a:	48 8b 00             	mov    (%rax),%rax
ffffffff8010321d:	48 85 c0             	test   %rax,%rax
ffffffff80103220:	74 55                	je     ffffffff80103277 <free+0x359>
		{
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80103222:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff80103229:	ff ff ff 
ffffffff8010322c:	48 8b 00             	mov    (%rax),%rax
ffffffff8010322f:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80103232:	48 b8 08 50 11 80 ff 	movabs $0xffffffff80115008,%rax
ffffffff80103239:	ff ff ff 
ffffffff8010323c:	48 8b 00             	mov    (%rax),%rax
ffffffff8010323f:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80103242:	29 c2                	sub    %eax,%edx
ffffffff80103244:	89 d0                	mov    %edx,%eax
ffffffff80103246:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			int majSize = maj->size - maj->usage;
ffffffff80103249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010324d:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80103250:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103254:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80103257:	29 c2                	sub    %eax,%edx
ffffffff80103259:	89 d0                	mov    %edx,%eax
ffffffff8010325b:	89 45 e0             	mov    %eax,-0x20(%rbp)

			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff8010325e:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80103261:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80103264:	7e 11                	jle    ffffffff80103277 <free+0x359>
ffffffff80103266:	48 ba 08 50 11 80 ff 	movabs $0xffffffff80115008,%rdx
ffffffff8010326d:	ff ff ff 
ffffffff80103270:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103274:	48 89 02             	mov    %rax,(%rdx)
	#ifdef DEBUG
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
ffffffff80103277:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff8010327e:	ff ff ff 
ffffffff80103281:	ff d0                	callq  *%rax
}
ffffffff80103283:	c9                   	leaveq 
ffffffff80103284:	c3                   	retq   

ffffffff80103285 <calloc>:




void* PREFIX(calloc)(size_t nobj, size_t size)
{
ffffffff80103285:	f3 0f 1e fa          	endbr64 
ffffffff80103289:	55                   	push   %rbp
ffffffff8010328a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010328d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80103291:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80103295:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff80103299:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010329d:	89 c2                	mov    %eax,%edx
ffffffff8010329f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801032a3:	0f af c2             	imul   %edx,%eax
ffffffff801032a6:	89 45 fc             	mov    %eax,-0x4(%rbp)
       
       p = PREFIX(malloc)( real_size );
ffffffff801032a9:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801032ac:	48 98                	cltq   
ffffffff801032ae:	48 89 c7             	mov    %rax,%rdi
ffffffff801032b1:	48 b8 d6 26 10 80 ff 	movabs $0xffffffff801026d6,%rax
ffffffff801032b8:	ff ff ff 
ffffffff801032bb:	ff d0                	callq  *%rax
ffffffff801032bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

       liballoc_memset( p, 0, real_size );
ffffffff801032c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801032c4:	48 63 d0             	movslq %eax,%rdx
ffffffff801032c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801032cb:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801032d0:	48 89 c7             	mov    %rax,%rdi
ffffffff801032d3:	48 b8 aa 24 10 80 ff 	movabs $0xffffffff801024aa,%rax
ffffffff801032da:	ff ff ff 
ffffffff801032dd:	ff d0                	callq  *%rax

       return p;
ffffffff801032df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff801032e3:	c9                   	leaveq 
ffffffff801032e4:	c3                   	retq   

ffffffff801032e5 <realloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff801032e5:	f3 0f 1e fa          	endbr64 
ffffffff801032e9:	55                   	push   %rbp
ffffffff801032ea:	48 89 e5             	mov    %rsp,%rbp
ffffffff801032ed:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff801032f1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff801032f5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff801032f9:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff801032fe:	75 1d                	jne    ffffffff8010331d <realloc+0x38>
	{
		PREFIX(free)( p );
ffffffff80103300:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103304:	48 89 c7             	mov    %rax,%rdi
ffffffff80103307:	48 b8 1e 2f 10 80 ff 	movabs $0xffffffff80102f1e,%rax
ffffffff8010330e:	ff ff ff 
ffffffff80103311:	ff d0                	callq  *%rax
		return NULL;
ffffffff80103313:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80103318:	e9 87 01 00 00       	jmpq   ffffffff801034a4 <realloc+0x1bf>
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8010331d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80103322:	75 18                	jne    ffffffff8010333c <realloc+0x57>
ffffffff80103324:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103328:	48 89 c7             	mov    %rax,%rdi
ffffffff8010332b:	48 b8 d6 26 10 80 ff 	movabs $0xffffffff801026d6,%rax
ffffffff80103332:	ff ff ff 
ffffffff80103335:	ff d0                	callq  *%rax
ffffffff80103337:	e9 68 01 00 00       	jmpq   ffffffff801034a4 <realloc+0x1bf>

	// Unalign the pointer if required.
	ptr = p;
ffffffff8010333c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103340:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	UNALIGN(ptr);
ffffffff80103344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103348:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8010334c:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010334f:	48 0f be c0          	movsbq %al,%rax
ffffffff80103353:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80103357:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
ffffffff8010335c:	77 0c                	ja     ffffffff8010336a <realloc+0x85>
ffffffff8010335e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103362:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80103366:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	liballoc_lock();		// lockit
ffffffff8010336a:	48 b8 96 48 10 80 ff 	movabs $0xffffffff80104896,%rax
ffffffff80103371:	ff ff ff 
ffffffff80103374:	ff d0                	callq  *%rax

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80103376:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010337a:	48 83 e8 28          	sub    $0x28,%rax
ffffffff8010337e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80103382:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103386:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80103389:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff8010338e:	0f 84 87 00 00 00    	je     ffffffff8010341b <realloc+0x136>
		{
			l_errorCount += 1;
ffffffff80103394:	48 b8 28 50 11 80 ff 	movabs $0xffffffff80115028,%rax
ffffffff8010339b:	ff ff ff 
ffffffff8010339e:	48 8b 00             	mov    (%rax),%rax
ffffffff801033a1:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff801033a5:	48 b8 28 50 11 80 ff 	movabs $0xffffffff80115028,%rax
ffffffff801033ac:	ff ff ff 
ffffffff801033af:	48 89 10             	mov    %rdx,(%rax)
	
			// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
			if ( 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801033b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801033b6:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801033b9:	25 ff ff ff 00       	and    $0xffffff,%eax
			if ( 
ffffffff801033be:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff801033c3:	74 22                	je     ffffffff801033e7 <realloc+0x102>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff801033c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801033c9:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801033cc:	0f b7 c0             	movzwl %ax,%eax
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801033cf:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff801033d4:	74 11                	je     ffffffff801033e7 <realloc+0x102>
				((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff801033d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801033da:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801033dd:	0f b6 c0             	movzbl %al,%eax
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff801033e0:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff801033e5:	75 1e                	jne    ffffffff80103405 <realloc+0x120>
			   )
			{
				l_possibleOverruns += 1;
ffffffff801033e7:	48 b8 30 50 11 80 ff 	movabs $0xffffffff80115030,%rax
ffffffff801033ee:	ff ff ff 
ffffffff801033f1:	48 8b 00             	mov    (%rax),%rax
ffffffff801033f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff801033f8:	48 b8 30 50 11 80 ff 	movabs $0xffffffff80115030,%rax
ffffffff801033ff:	ff ff ff 
ffffffff80103402:	48 89 10             	mov    %rdx,(%rax)
				FLUSH();
				#endif
			}
			
			// being lied to...
			liballoc_unlock();		// release the lock
ffffffff80103405:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff8010340c:	ff ff ff 
ffffffff8010340f:	ff d0                	callq  *%rax
			return NULL;
ffffffff80103411:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80103416:	e9 89 00 00 00       	jmpq   ffffffff801034a4 <realloc+0x1bf>
		}	
		
		// Definitely a memory block.
		
		real_size = min->req_size;
ffffffff8010341b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010341f:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff80103422:	89 45 e4             	mov    %eax,-0x1c(%rbp)

		if ( real_size >= size ) 
ffffffff80103425:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80103428:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8010342c:	7f 1f                	jg     ffffffff8010344d <realloc+0x168>
		{
			min->req_size = size;
ffffffff8010342e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103432:	89 c2                	mov    %eax,%edx
ffffffff80103434:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103438:	89 50 20             	mov    %edx,0x20(%rax)
			liballoc_unlock();
ffffffff8010343b:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80103442:	ff ff ff 
ffffffff80103445:	ff d0                	callq  *%rax
			return p;
ffffffff80103447:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010344b:	eb 57                	jmp    ffffffff801034a4 <realloc+0x1bf>
		}

	liballoc_unlock();
ffffffff8010344d:	48 b8 a2 48 10 80 ff 	movabs $0xffffffff801048a2,%rax
ffffffff80103454:	ff ff ff 
ffffffff80103457:	ff d0                	callq  *%rax

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80103459:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010345d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103460:	48 b8 d6 26 10 80 ff 	movabs $0xffffffff801026d6,%rax
ffffffff80103467:	ff ff ff 
ffffffff8010346a:	ff d0                	callq  *%rax
ffffffff8010346c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	liballoc_memcpy( ptr, p, real_size );
ffffffff80103470:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff80103473:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80103477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010347b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8010347e:	48 89 c7             	mov    %rax,%rdi
ffffffff80103481:	48 b8 ec 24 10 80 ff 	movabs $0xffffffff801024ec,%rax
ffffffff80103488:	ff ff ff 
ffffffff8010348b:	ff d0                	callq  *%rax
	PREFIX(free)( p );
ffffffff8010348d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103491:	48 89 c7             	mov    %rax,%rdi
ffffffff80103494:	48 b8 1e 2f 10 80 ff 	movabs $0xffffffff80102f1e,%rax
ffffffff8010349b:	ff ff ff 
ffffffff8010349e:	ff d0                	callq  *%rax

	return ptr;
ffffffff801034a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff801034a4:	c9                   	leaveq 
ffffffff801034a5:	c3                   	retq   

ffffffff801034a6 <_Z10init_framem>:
#include <com.h>
#include <utility.h>

extern "C" uint64_t kernel_end;
uint32_t* frames = 0;
void init_frame(uint64_t lenght){
ffffffff801034a6:	f3 0f 1e fa          	endbr64 
ffffffff801034aa:	55                   	push   %rbp
ffffffff801034ab:	48 89 e5             	mov    %rsp,%rbp
ffffffff801034ae:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801034b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    lenght = 4096 * 4096 * 4096;
ffffffff801034b6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff801034bd:	00 
  frames = (uint32_t*)&kernel_end;
ffffffff801034be:	48 b8 00 60 11 80 ff 	movabs $0xffffffff80116000,%rax
ffffffff801034c5:	ff ff ff 
ffffffff801034c8:	48 ba 80 b0 11 80 ff 	movabs $0xffffffff8011b080,%rdx
ffffffff801034cf:	ff ff ff 
ffffffff801034d2:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff801034d5:	90                   	nop
ffffffff801034d6:	c9                   	leaveq 
ffffffff801034d7:	c3                   	retq   

ffffffff801034d8 <_Z13get_kern_addrm>:
paging_pml4 pml4e[512] __attribute__((aligned(4096)));
paging_pdpe  pdpe[512] __attribute__((aligned(4096)));
paging_pde   pde[512] __attribute__((aligned(4096)));
uint64_t get_kern_addr(uint64_t addr){
ffffffff801034d8:	f3 0f 1e fa          	endbr64 
ffffffff801034dc:	55                   	push   %rbp
ffffffff801034dd:	48 89 e5             	mov    %rsp,%rbp
ffffffff801034e0:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801034e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr + 0xffffffff80000000;
ffffffff801034e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801034ec:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
}uint64_t get_r_addr(uint64_t addr){
ffffffff801034f2:	c9                   	leaveq 
ffffffff801034f3:	c3                   	retq   

ffffffff801034f4 <_Z10get_r_addrm>:
ffffffff801034f4:	f3 0f 1e fa          	endbr64 
ffffffff801034f8:	55                   	push   %rbp
ffffffff801034f9:	48 89 e5             	mov    %rsp,%rbp
ffffffff801034fc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80103500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr - 0xffffffff80000000;
ffffffff80103504:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff80103509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010350d:	48 01 d0             	add    %rdx,%rax
}
ffffffff80103510:	c9                   	leaveq 
ffffffff80103511:	c3                   	retq   

ffffffff80103512 <_Z19init_virtual_memoryP14stivale_struct>:
    }

inline void SetPageFlags(uint64_t* page, uint64_t flags){
   *page |= flags;
}
void init_virtual_memory(stivale_struct* sti_struct){
ffffffff80103512:	f3 0f 1e fa          	endbr64 
ffffffff80103516:	55                   	push   %rbp
ffffffff80103517:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010351a:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8010351e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80103522:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103526:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010352a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    char buffer[64];
    memzero(buffer, sizeof(buffer));
ffffffff8010352e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103532:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103537:	48 89 c7             	mov    %rax,%rdi
ffffffff8010353a:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff80103541:	ff ff ff 
ffffffff80103544:	ff d0                	callq  *%rax
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff80103546:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8010354d:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103550:	48 63 d0             	movslq %eax,%rdx
ffffffff80103553:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103557:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8010355b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8010355e:	0f 83 55 02 00 00    	jae    ffffffff801037b9 <_Z19init_virtual_memoryP14stivale_struct+0x2a7>
    {
        if (mementry[i].type != MEMMAP_USABLE)
ffffffff80103564:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103567:	48 63 d0             	movslq %eax,%rdx
ffffffff8010356a:	48 89 d0             	mov    %rdx,%rax
ffffffff8010356d:	48 01 c0             	add    %rax,%rax
ffffffff80103570:	48 01 d0             	add    %rdx,%rax
ffffffff80103573:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103577:	48 89 c2             	mov    %rax,%rdx
ffffffff8010357a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010357e:	48 01 d0             	add    %rdx,%rax
ffffffff80103581:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80103584:	83 f8 01             	cmp    $0x1,%eax
ffffffff80103587:	0f 85 22 02 00 00    	jne    ffffffff801037af <_Z19init_virtual_memoryP14stivale_struct+0x29d>
        {
            continue;
        }
        
        com_write_str(" ============== ");
ffffffff8010358d:	48 bf de 50 10 80 ff 	movabs $0xffffffff801050de,%rdi
ffffffff80103594:	ff ff ff 
ffffffff80103597:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010359e:	ff ff ff 
ffffffff801035a1:	ff d0                	callq  *%rax
        kitoaT<uint64_t>(buffer, 'x', mementry[i].base);
ffffffff801035a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801035a6:	48 63 d0             	movslq %eax,%rdx
ffffffff801035a9:	48 89 d0             	mov    %rdx,%rax
ffffffff801035ac:	48 01 c0             	add    %rax,%rax
ffffffff801035af:	48 01 d0             	add    %rdx,%rax
ffffffff801035b2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801035b6:	48 89 c2             	mov    %rax,%rdx
ffffffff801035b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801035bd:	48 01 d0             	add    %rdx,%rax
ffffffff801035c0:	48 8b 10             	mov    (%rax),%rdx
ffffffff801035c3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801035c7:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff801035cc:	48 89 c7             	mov    %rax,%rdi
ffffffff801035cf:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff801035d6:	ff ff ff 
ffffffff801035d9:	ff d0                	callq  *%rax
        com_write_str(" memory start : ");
ffffffff801035db:	48 bf ef 50 10 80 ff 	movabs $0xffffffff801050ef,%rdi
ffffffff801035e2:	ff ff ff 
ffffffff801035e5:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801035ec:	ff ff ff 
ffffffff801035ef:	ff d0                	callq  *%rax
        com_write_str(buffer);
ffffffff801035f1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801035f5:	48 89 c7             	mov    %rax,%rdi
ffffffff801035f8:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801035ff:	ff ff ff 
ffffffff80103602:	ff d0                	callq  *%rax
        memzero(buffer, sizeof(buffer));
ffffffff80103604:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103608:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010360d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103610:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff80103617:	ff ff ff 
ffffffff8010361a:	ff d0                	callq  *%rax
         kitoaT<uint64_t>(buffer, 'x', mementry[i].length + mementry[i].base);
ffffffff8010361c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010361f:	48 63 d0             	movslq %eax,%rdx
ffffffff80103622:	48 89 d0             	mov    %rdx,%rax
ffffffff80103625:	48 01 c0             	add    %rax,%rax
ffffffff80103628:	48 01 d0             	add    %rdx,%rax
ffffffff8010362b:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8010362f:	48 89 c2             	mov    %rax,%rdx
ffffffff80103632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103636:	48 01 d0             	add    %rdx,%rax
ffffffff80103639:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8010363d:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103640:	48 63 d0             	movslq %eax,%rdx
ffffffff80103643:	48 89 d0             	mov    %rdx,%rax
ffffffff80103646:	48 01 c0             	add    %rax,%rax
ffffffff80103649:	48 01 d0             	add    %rdx,%rax
ffffffff8010364c:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103650:	48 89 c2             	mov    %rax,%rdx
ffffffff80103653:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103657:	48 01 d0             	add    %rdx,%rax
ffffffff8010365a:	48 8b 00             	mov    (%rax),%rax
ffffffff8010365d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80103661:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103665:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010366a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010366d:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff80103674:	ff ff ff 
ffffffff80103677:	ff d0                	callq  *%rax
        com_write_str(" memory end : ");
ffffffff80103679:	48 bf 00 51 10 80 ff 	movabs $0xffffffff80105100,%rdi
ffffffff80103680:	ff ff ff 
ffffffff80103683:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010368a:	ff ff ff 
ffffffff8010368d:	ff d0                	callq  *%rax
        com_write_str(buffer);
ffffffff8010368f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103693:	48 89 c7             	mov    %rax,%rdi
ffffffff80103696:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010369d:	ff ff ff 
ffffffff801036a0:	ff d0                	callq  *%rax
        memzero(buffer, sizeof(buffer));
ffffffff801036a2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801036a6:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801036ab:	48 89 c7             	mov    %rax,%rdi
ffffffff801036ae:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff801036b5:	ff ff ff 
ffffffff801036b8:	ff d0                	callq  *%rax
        kitoaT<uint64_t>(buffer, 'x', mementry[i].length );
ffffffff801036ba:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801036bd:	48 63 d0             	movslq %eax,%rdx
ffffffff801036c0:	48 89 d0             	mov    %rdx,%rax
ffffffff801036c3:	48 01 c0             	add    %rax,%rax
ffffffff801036c6:	48 01 d0             	add    %rdx,%rax
ffffffff801036c9:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801036cd:	48 89 c2             	mov    %rax,%rdx
ffffffff801036d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801036d4:	48 01 d0             	add    %rdx,%rax
ffffffff801036d7:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff801036db:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801036df:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff801036e4:	48 89 c7             	mov    %rax,%rdi
ffffffff801036e7:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff801036ee:	ff ff ff 
ffffffff801036f1:	ff d0                	callq  *%rax
        com_write_str(" memory lenght : ");
ffffffff801036f3:	48 bf 0f 51 10 80 ff 	movabs $0xffffffff8010510f,%rdi
ffffffff801036fa:	ff ff ff 
ffffffff801036fd:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103704:	ff ff ff 
ffffffff80103707:	ff d0                	callq  *%rax
        com_write_str(buffer);
ffffffff80103709:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010370d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103710:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103717:	ff ff ff 
ffffffff8010371a:	ff d0                	callq  *%rax
        memzero(buffer, sizeof(buffer));
ffffffff8010371c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103720:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103725:	48 89 c7             	mov    %rax,%rdi
ffffffff80103728:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff8010372f:	ff ff ff 
ffffffff80103732:	ff d0                	callq  *%rax
        kitoaT<uint32_t>(buffer, 'x', mementry[i].type);
ffffffff80103734:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103737:	48 63 d0             	movslq %eax,%rdx
ffffffff8010373a:	48 89 d0             	mov    %rdx,%rax
ffffffff8010373d:	48 01 c0             	add    %rax,%rax
ffffffff80103740:	48 01 d0             	add    %rdx,%rax
ffffffff80103743:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103747:	48 89 c2             	mov    %rax,%rdx
ffffffff8010374a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010374e:	48 01 d0             	add    %rdx,%rax
ffffffff80103751:	8b 50 10             	mov    0x10(%rax),%edx
ffffffff80103754:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103758:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010375d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103760:	48 b8 c9 49 10 80 ff 	movabs $0xffffffff801049c9,%rax
ffffffff80103767:	ff ff ff 
ffffffff8010376a:	ff d0                	callq  *%rax
        com_write_str(" memory type : ");
ffffffff8010376c:	48 bf 21 51 10 80 ff 	movabs $0xffffffff80105121,%rdi
ffffffff80103773:	ff ff ff 
ffffffff80103776:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010377d:	ff ff ff 
ffffffff80103780:	ff d0                	callq  *%rax
        com_write_str(buffer);
ffffffff80103782:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103786:	48 89 c7             	mov    %rax,%rdi
ffffffff80103789:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103790:	ff ff ff 
ffffffff80103793:	ff d0                	callq  *%rax
        memzero(buffer, sizeof(buffer));
ffffffff80103795:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103799:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010379e:	48 89 c7             	mov    %rax,%rdi
ffffffff801037a1:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff801037a8:	ff ff ff 
ffffffff801037ab:	ff d0                	callq  *%rax
ffffffff801037ad:	eb 01                	jmp    ffffffff801037b0 <_Z19init_virtual_memoryP14stivale_struct+0x29e>
            continue;
ffffffff801037af:	90                   	nop
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff801037b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff801037b4:	e9 94 fd ff ff       	jmpq   ffffffff8010354d <_Z19init_virtual_memoryP14stivale_struct+0x3b>
        pml4e[i].fields.writable = 1;
    }
    */


}
ffffffff801037b9:	90                   	nop
ffffffff801037ba:	c9                   	leaveq 
ffffffff801037bb:	c3                   	retq   

ffffffff801037bc <_Z8virt_mapmmm>:



void virt_map(uint64_t vaddress, uint64_t paddress, uint64_t flags ){
ffffffff801037bc:	f3 0f 1e fa          	endbr64 
ffffffff801037c0:	55                   	push   %rbp
ffffffff801037c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff801037c4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff801037c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff801037cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff801037d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    
	uint64_t _pml4e_offset = PML4_GET_INDEX(vaddress);
ffffffff801037d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801037d8:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff801037dc:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff801037e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	uint64_t _pdpt_offset  = PDPT_GET_INDEX(vaddress);
ffffffff801037e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801037e9:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff801037ed:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff801037f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint64_t _pd_offset   = PAGE_DIR_GET_INDEX(vaddress);
ffffffff801037f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801037fa:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff801037fe:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103803:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t _pt_offset = PAGE_TABLE_GET_INDEX(vaddress);
ffffffff80103807:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010380b:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff8010380f:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103814:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    if (!pml4e[_pml4e_offset].fields.present)
    {
    }
    
ffffffff80103818:	90                   	nop
ffffffff80103819:	c9                   	leaveq 
ffffffff8010381a:	c3                   	retq   

ffffffff8010381b <_Z8pic_initv>:
                  "1:\n\t" \
                  "    jmp 2f\n\t" \
                  "2:"); \
    } while (0)

void pic_init(){
ffffffff8010381b:	f3 0f 1e fa          	endbr64 
ffffffff8010381f:	55                   	push   %rbp
ffffffff80103820:	48 89 e5             	mov    %rsp,%rbp
    outb(PIC1_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff80103823:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80103828:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8010382d:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80103834:	ff ff ff 
ffffffff80103837:	ff d0                	callq  *%rax
ffffffff80103839:	eb 00                	jmp    ffffffff8010383b <_Z8pic_initv+0x20>
ffffffff8010383b:	eb 00                	jmp    ffffffff8010383d <_Z8pic_initv+0x22>
	outb(PIC2_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff8010383d:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80103842:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80103847:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010384e:	ff ff ff 
ffffffff80103851:	ff d0                	callq  *%rax
ffffffff80103853:	eb 00                	jmp    ffffffff80103855 <_Z8pic_initv+0x3a>
ffffffff80103855:	eb 00                	jmp    ffffffff80103857 <_Z8pic_initv+0x3c>

	outb(PIC1_DATA, PIC1_OFFSET); pic_wait();
ffffffff80103857:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8010385c:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103861:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80103868:	ff ff ff 
ffffffff8010386b:	ff d0                	callq  *%rax
ffffffff8010386d:	eb 00                	jmp    ffffffff8010386f <_Z8pic_initv+0x54>
ffffffff8010386f:	eb 00                	jmp    ffffffff80103871 <_Z8pic_initv+0x56>
	outb(PIC2_DATA, PIC2_OFFSET); pic_wait();
ffffffff80103871:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80103876:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8010387b:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80103882:	ff ff ff 
ffffffff80103885:	ff d0                	callq  *%rax
ffffffff80103887:	eb 00                	jmp    ffffffff80103889 <_Z8pic_initv+0x6e>
ffffffff80103889:	eb 00                	jmp    ffffffff8010388b <_Z8pic_initv+0x70>

	outb(PIC1_DATA, 0x04); pic_wait();
ffffffff8010388b:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80103890:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103895:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010389c:	ff ff ff 
ffffffff8010389f:	ff d0                	callq  *%rax
ffffffff801038a1:	eb 00                	jmp    ffffffff801038a3 <_Z8pic_initv+0x88>
ffffffff801038a3:	eb 00                	jmp    ffffffff801038a5 <_Z8pic_initv+0x8a>
	outb(PIC2_DATA, 0x02); pic_wait();
ffffffff801038a5:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff801038aa:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff801038af:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801038b6:	ff ff ff 
ffffffff801038b9:	ff d0                	callq  *%rax
ffffffff801038bb:	eb 00                	jmp    ffffffff801038bd <_Z8pic_initv+0xa2>
ffffffff801038bd:	eb 00                	jmp    ffffffff801038bf <_Z8pic_initv+0xa4>

	outb(PIC1_DATA, 0x01); pic_wait();
ffffffff801038bf:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff801038c4:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff801038c9:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801038d0:	ff ff ff 
ffffffff801038d3:	ff d0                	callq  *%rax
ffffffff801038d5:	eb 00                	jmp    ffffffff801038d7 <_Z8pic_initv+0xbc>
ffffffff801038d7:	eb 00                	jmp    ffffffff801038d9 <_Z8pic_initv+0xbe>
	outb(PIC2_DATA, 0x01); pic_wait();
ffffffff801038d9:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff801038de:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff801038e3:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801038ea:	ff ff ff 
ffffffff801038ed:	ff d0                	callq  *%rax
ffffffff801038ef:	eb 00                	jmp    ffffffff801038f1 <_Z8pic_initv+0xd6>
ffffffff801038f1:	eb 00                	jmp    ffffffff801038f3 <_Z8pic_initv+0xd8>
    
	outb(PIC1_DATA, 0x00);
ffffffff801038f3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801038f8:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff801038fd:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80103904:	ff ff ff 
ffffffff80103907:	ff d0                	callq  *%rax
	outb(PIC2_DATA, 0x00);
ffffffff80103909:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8010390e:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80103913:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010391a:	ff ff ff 
ffffffff8010391d:	ff d0                	callq  *%rax
}
ffffffff8010391f:	90                   	nop
ffffffff80103920:	5d                   	pop    %rbp
ffffffff80103921:	c3                   	retq   

ffffffff80103922 <_Z8init_idtv>:
void init_idt(){
ffffffff80103922:	f3 0f 1e fa          	endbr64 
ffffffff80103926:	55                   	push   %rbp
ffffffff80103927:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010392a:	48 83 ec 10          	sub    $0x10,%rsp
    com_write_str("loading idt");
ffffffff8010392e:	48 bf 31 51 10 80 ff 	movabs $0xffffffff80105131,%rdi
ffffffff80103935:	ff ff ff 
ffffffff80103938:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010393f:	ff ff ff 
ffffffff80103942:	ff d0                	callq  *%rax
    com_write_str("loading idt table");
ffffffff80103944:	48 bf 3d 51 10 80 ff 	movabs $0xffffffff8010513d,%rdi
ffffffff8010394b:	ff ff ff 
ffffffff8010394e:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103955:	ff ff ff 
ffffffff80103958:	ff d0                	callq  *%rax
    for (int i = 0; i < 32+48; i++)
ffffffff8010395a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80103961:	83 7d fc 4f          	cmpl   $0x4f,-0x4(%rbp)
ffffffff80103965:	0f 8f 1b 01 00 00    	jg     ffffffff80103a86 <_Z8init_idtv+0x164>
    {
        idt[i] = IDT_ENTRY(__interrupt_vector[i], 0x08, INTGATE);
ffffffff8010396b:	48 ba 40 61 10 80 ff 	movabs $0xffffffff80106140,%rdx
ffffffff80103972:	ff ff ff 
ffffffff80103975:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103978:	48 98                	cltq   
ffffffff8010397a:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
ffffffff8010397e:	89 c7                	mov    %eax,%edi
ffffffff80103980:	48 ba 40 61 10 80 ff 	movabs $0xffffffff80106140,%rdx
ffffffff80103987:	ff ff ff 
ffffffff8010398a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010398d:	48 98                	cltq   
ffffffff8010398f:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
ffffffff80103993:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80103997:	89 c6                	mov    %eax,%esi
ffffffff80103999:	48 ba 40 61 10 80 ff 	movabs $0xffffffff80106140,%rdx
ffffffff801039a0:	ff ff ff 
ffffffff801039a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801039a6:	48 98                	cltq   
ffffffff801039a8:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
ffffffff801039ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff801039b0:	89 c1                	mov    %eax,%ecx
ffffffff801039b2:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff801039b9:	ff ff ff 
ffffffff801039bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801039bf:	48 98                	cltq   
ffffffff801039c1:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff801039c5:	48 01 d0             	add    %rdx,%rax
ffffffff801039c8:	66 89 38             	mov    %di,(%rax)
ffffffff801039cb:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff801039d2:	ff ff ff 
ffffffff801039d5:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801039d8:	48 98                	cltq   
ffffffff801039da:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff801039de:	48 01 d0             	add    %rdx,%rax
ffffffff801039e1:	48 83 c0 02          	add    $0x2,%rax
ffffffff801039e5:	66 c7 00 08 00       	movw   $0x8,(%rax)
ffffffff801039ea:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff801039f1:	ff ff ff 
ffffffff801039f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801039f7:	48 98                	cltq   
ffffffff801039f9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff801039fd:	48 01 d0             	add    %rdx,%rax
ffffffff80103a00:	48 83 c0 04          	add    $0x4,%rax
ffffffff80103a04:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80103a07:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff80103a0e:	ff ff ff 
ffffffff80103a11:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103a14:	48 98                	cltq   
ffffffff80103a16:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103a1a:	48 01 d0             	add    %rdx,%rax
ffffffff80103a1d:	48 83 c0 05          	add    $0x5,%rax
ffffffff80103a21:	c6 00 8e             	movb   $0x8e,(%rax)
ffffffff80103a24:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff80103a2b:	ff ff ff 
ffffffff80103a2e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103a31:	48 98                	cltq   
ffffffff80103a33:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103a37:	48 01 d0             	add    %rdx,%rax
ffffffff80103a3a:	48 83 c0 06          	add    $0x6,%rax
ffffffff80103a3e:	66 89 30             	mov    %si,(%rax)
ffffffff80103a41:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff80103a48:	ff ff ff 
ffffffff80103a4b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103a4e:	48 98                	cltq   
ffffffff80103a50:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103a54:	48 01 d0             	add    %rdx,%rax
ffffffff80103a57:	48 83 c0 08          	add    $0x8,%rax
ffffffff80103a5b:	89 08                	mov    %ecx,(%rax)
ffffffff80103a5d:	48 ba 80 a0 11 80 ff 	movabs $0xffffffff8011a080,%rdx
ffffffff80103a64:	ff ff ff 
ffffffff80103a67:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103a6a:	48 98                	cltq   
ffffffff80103a6c:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103a70:	48 01 d0             	add    %rdx,%rax
ffffffff80103a73:	48 83 c0 0c          	add    $0xc,%rax
ffffffff80103a77:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    for (int i = 0; i < 32+48; i++)
ffffffff80103a7d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80103a81:	e9 db fe ff ff       	jmpq   ffffffff80103961 <_Z8init_idtv+0x3f>
    }
    
    com_write_str("loading idt idt_flush");
ffffffff80103a86:	48 bf 4f 51 10 80 ff 	movabs $0xffffffff8010514f,%rdi
ffffffff80103a8d:	ff ff ff 
ffffffff80103a90:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103a97:	ff ff ff 
ffffffff80103a9a:	ff d0                	callq  *%rax
     asm volatile("lidt [%0]" : : "m" (idt_descriptor));
ffffffff80103a9c:	48 b8 20 60 10 80 ff 	movabs $0xffffffff80106020,%rax
ffffffff80103aa3:	ff ff ff 
ffffffff80103aa6:	0f 01 18             	lidt   (%rax)
    com_write_str("loading pic");
ffffffff80103aa9:	48 bf 65 51 10 80 ff 	movabs $0xffffffff80105165,%rdi
ffffffff80103ab0:	ff ff ff 
ffffffff80103ab3:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103aba:	ff ff ff 
ffffffff80103abd:	ff d0                	callq  *%rax
    pic_init();
ffffffff80103abf:	48 b8 1b 38 10 80 ff 	movabs $0xffffffff8010381b,%rax
ffffffff80103ac6:	ff ff ff 
ffffffff80103ac9:	ff d0                	callq  *%rax
    com_write_str("loading pic : OK");
ffffffff80103acb:	48 bf 71 51 10 80 ff 	movabs $0xffffffff80105171,%rdi
ffffffff80103ad2:	ff ff ff 
ffffffff80103ad5:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103adc:	ff ff ff 
ffffffff80103adf:	ff d0                	callq  *%rax
    com_write_str("loading idt : OK");
ffffffff80103ae1:	48 bf 82 51 10 80 ff 	movabs $0xffffffff80105182,%rdi
ffffffff80103ae8:	ff ff ff 
ffffffff80103aeb:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103af2:	ff ff ff 
ffffffff80103af5:	ff d0                	callq  *%rax
    
com_write_str("turning on interrupt : OK ");
ffffffff80103af7:	48 bf 93 51 10 80 ff 	movabs $0xffffffff80105193,%rdi
ffffffff80103afe:	ff ff ff 
ffffffff80103b01:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103b08:	ff ff ff 
ffffffff80103b0b:	ff d0                	callq  *%rax
};
ffffffff80103b0d:	90                   	nop
ffffffff80103b0e:	c9                   	leaveq 
ffffffff80103b0f:	c3                   	retq   

ffffffff80103b10 <_Z5dump1mPKc>:
    "Reserved",
    "Reserved"
};

char buff2[64];
void dump1(uint64_t reg, const char* name){
ffffffff80103b10:	f3 0f 1e fa          	endbr64 
ffffffff80103b14:	55                   	push   %rbp
ffffffff80103b15:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103b18:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80103b1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80103b20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
     memzero(buff2, 64);
ffffffff80103b24:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103b29:	48 bf 00 a0 11 80 ff 	movabs $0xffffffff8011a000,%rdi
ffffffff80103b30:	ff ff ff 
ffffffff80103b33:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff80103b3a:	ff ff ff 
ffffffff80103b3d:	ff d0                	callq  *%rax
        kitoaT<uint64_t>(buff2, 'x',reg);
ffffffff80103b3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103b43:	48 89 c2             	mov    %rax,%rdx
ffffffff80103b46:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80103b4b:	48 bf 00 a0 11 80 ff 	movabs $0xffffffff8011a000,%rdi
ffffffff80103b52:	ff ff ff 
ffffffff80103b55:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff80103b5c:	ff ff ff 
ffffffff80103b5f:	ff d0                	callq  *%rax
        com_write_strl(" | ");
ffffffff80103b61:	48 bf ea 52 10 80 ff 	movabs $0xffffffff801052ea,%rdi
ffffffff80103b68:	ff ff ff 
ffffffff80103b6b:	48 b8 cb 43 10 80 ff 	movabs $0xffffffff801043cb,%rax
ffffffff80103b72:	ff ff ff 
ffffffff80103b75:	ff d0                	callq  *%rax
        com_write_strl(name);
ffffffff80103b77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103b7b:	48 89 c7             	mov    %rax,%rdi
ffffffff80103b7e:	48 b8 cb 43 10 80 ff 	movabs $0xffffffff801043cb,%rax
ffffffff80103b85:	ff ff ff 
ffffffff80103b88:	ff d0                	callq  *%rax
        com_write_strl(" = ");
ffffffff80103b8a:	48 bf ee 52 10 80 ff 	movabs $0xffffffff801052ee,%rdi
ffffffff80103b91:	ff ff ff 
ffffffff80103b94:	48 b8 cb 43 10 80 ff 	movabs $0xffffffff801043cb,%rax
ffffffff80103b9b:	ff ff ff 
ffffffff80103b9e:	ff d0                	callq  *%rax
        com_write_strl("0x");
ffffffff80103ba0:	48 bf f2 52 10 80 ff 	movabs $0xffffffff801052f2,%rdi
ffffffff80103ba7:	ff ff ff 
ffffffff80103baa:	48 b8 cb 43 10 80 ff 	movabs $0xffffffff801043cb,%rax
ffffffff80103bb1:	ff ff ff 
ffffffff80103bb4:	ff d0                	callq  *%rax
        com_write_strl(buff2);
ffffffff80103bb6:	48 bf 00 a0 11 80 ff 	movabs $0xffffffff8011a000,%rdi
ffffffff80103bbd:	ff ff ff 
ffffffff80103bc0:	48 b8 cb 43 10 80 ff 	movabs $0xffffffff801043cb,%rax
ffffffff80103bc7:	ff ff ff 
ffffffff80103bca:	ff d0                	callq  *%rax
}
ffffffff80103bcc:	90                   	nop
ffffffff80103bcd:	c9                   	leaveq 
ffffffff80103bce:	c3                   	retq   

ffffffff80103bcf <_Z12dumpregisterP19InterruptStackFrame>:
void dumpregister(InterruptStackFrame* stck){
ffffffff80103bcf:	f3 0f 1e fa          	endbr64 
ffffffff80103bd3:	55                   	push   %rbp
ffffffff80103bd4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103bd7:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80103bdb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    com_write_str(" ===== cpu dump =====");
ffffffff80103bdf:	48 bf f5 52 10 80 ff 	movabs $0xffffffff801052f5,%rdi
ffffffff80103be6:	ff ff ff 
ffffffff80103be9:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103bf0:	ff ff ff 
ffffffff80103bf3:	ff d0                	callq  *%rax
    com_write_str(" ===== cs and ss =====");
ffffffff80103bf5:	48 bf 0b 53 10 80 ff 	movabs $0xffffffff8010530b,%rdi
ffffffff80103bfc:	ff ff ff 
ffffffff80103bff:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103c06:	ff ff ff 
ffffffff80103c09:	ff d0                	callq  *%rax
    dump1(stck->cs, "cs");
ffffffff80103c0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103c0f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80103c16:	48 be 22 53 10 80 ff 	movabs $0xffffffff80105322,%rsi
ffffffff80103c1d:	ff ff ff 
ffffffff80103c20:	48 89 c7             	mov    %rax,%rdi
ffffffff80103c23:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103c2a:	ff ff ff 
ffffffff80103c2d:	ff d0                	callq  *%rax
    dump1(stck->ss, "ss");
ffffffff80103c2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103c33:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff80103c3a:	48 be 25 53 10 80 ff 	movabs $0xffffffff80105325,%rsi
ffffffff80103c41:	ff ff ff 
ffffffff80103c44:	48 89 c7             	mov    %rax,%rdi
ffffffff80103c47:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103c4e:	ff ff ff 
ffffffff80103c51:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103c53:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103c5a:	ff ff ff 
ffffffff80103c5d:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103c64:	ff ff ff 
ffffffff80103c67:	ff d0                	callq  *%rax
    com_write_str(" ===== rx =====");
ffffffff80103c69:	48 bf 2a 53 10 80 ff 	movabs $0xffffffff8010532a,%rdi
ffffffff80103c70:	ff ff ff 
ffffffff80103c73:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103c7a:	ff ff ff 
ffffffff80103c7d:	ff d0                	callq  *%rax
    dump1(stck->r8, "r8");
ffffffff80103c7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103c83:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80103c87:	48 be 3a 53 10 80 ff 	movabs $0xffffffff8010533a,%rsi
ffffffff80103c8e:	ff ff ff 
ffffffff80103c91:	48 89 c7             	mov    %rax,%rdi
ffffffff80103c94:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103c9b:	ff ff ff 
ffffffff80103c9e:	ff d0                	callq  *%rax
    dump1(stck->r9, "r9");
ffffffff80103ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ca4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80103ca8:	48 be 3d 53 10 80 ff 	movabs $0xffffffff8010533d,%rsi
ffffffff80103caf:	ff ff ff 
ffffffff80103cb2:	48 89 c7             	mov    %rax,%rdi
ffffffff80103cb5:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103cbc:	ff ff ff 
ffffffff80103cbf:	ff d0                	callq  *%rax
    dump1(stck->r10, "r10");
ffffffff80103cc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103cc5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80103cc9:	48 be 40 53 10 80 ff 	movabs $0xffffffff80105340,%rsi
ffffffff80103cd0:	ff ff ff 
ffffffff80103cd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80103cd6:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103cdd:	ff ff ff 
ffffffff80103ce0:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103ce2:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103ce9:	ff ff ff 
ffffffff80103cec:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103cf3:	ff ff ff 
ffffffff80103cf6:	ff d0                	callq  *%rax
    dump1(stck->r11, "r11");
ffffffff80103cf8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103cfc:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80103d00:	48 be 44 53 10 80 ff 	movabs $0xffffffff80105344,%rsi
ffffffff80103d07:	ff ff ff 
ffffffff80103d0a:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d0d:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103d14:	ff ff ff 
ffffffff80103d17:	ff d0                	callq  *%rax
    dump1(stck->r12, "r12");
ffffffff80103d19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103d1d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80103d21:	48 be 48 53 10 80 ff 	movabs $0xffffffff80105348,%rsi
ffffffff80103d28:	ff ff ff 
ffffffff80103d2b:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d2e:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103d35:	ff ff ff 
ffffffff80103d38:	ff d0                	callq  *%rax
    dump1(stck->r13, "r13");
ffffffff80103d3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103d3e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103d42:	48 be 4c 53 10 80 ff 	movabs $0xffffffff8010534c,%rsi
ffffffff80103d49:	ff ff ff 
ffffffff80103d4c:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d4f:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103d56:	ff ff ff 
ffffffff80103d59:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103d5b:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103d62:	ff ff ff 
ffffffff80103d65:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103d6c:	ff ff ff 
ffffffff80103d6f:	ff d0                	callq  *%rax
    dump1(stck->r14, "r14");
ffffffff80103d71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103d75:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103d79:	48 be 50 53 10 80 ff 	movabs $0xffffffff80105350,%rsi
ffffffff80103d80:	ff ff ff 
ffffffff80103d83:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d86:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103d8d:	ff ff ff 
ffffffff80103d90:	ff d0                	callq  *%rax
    dump1(stck->r15, "r15");
ffffffff80103d92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103d96:	48 8b 00             	mov    (%rax),%rax
ffffffff80103d99:	48 be 54 53 10 80 ff 	movabs $0xffffffff80105354,%rsi
ffffffff80103da0:	ff ff ff 
ffffffff80103da3:	48 89 c7             	mov    %rax,%rdi
ffffffff80103da6:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103dad:	ff ff ff 
ffffffff80103db0:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103db2:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103db9:	ff ff ff 
ffffffff80103dbc:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103dc3:	ff ff ff 
ffffffff80103dc6:	ff d0                	callq  *%rax
    com_write_str(" ===== utility =====");
ffffffff80103dc8:	48 bf 58 53 10 80 ff 	movabs $0xffffffff80105358,%rdi
ffffffff80103dcf:	ff ff ff 
ffffffff80103dd2:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103dd9:	ff ff ff 
ffffffff80103ddc:	ff d0                	callq  *%rax
    dump1(stck->rsp, "rsp");
ffffffff80103dde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103de2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80103de9:	48 be 6d 53 10 80 ff 	movabs $0xffffffff8010536d,%rsi
ffffffff80103df0:	ff ff ff 
ffffffff80103df3:	48 89 c7             	mov    %rax,%rdi
ffffffff80103df6:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103dfd:	ff ff ff 
ffffffff80103e00:	ff d0                	callq  *%rax
    dump1(stck->rbp, "rbp");
ffffffff80103e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e06:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80103e0a:	48 be 71 53 10 80 ff 	movabs $0xffffffff80105371,%rsi
ffffffff80103e11:	ff ff ff 
ffffffff80103e14:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e17:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103e1e:	ff ff ff 
ffffffff80103e21:	ff d0                	callq  *%rax
    dump1(stck->rdi, "rdi");
ffffffff80103e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e27:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80103e2b:	48 be 75 53 10 80 ff 	movabs $0xffffffff80105375,%rsi
ffffffff80103e32:	ff ff ff 
ffffffff80103e35:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e38:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103e3f:	ff ff ff 
ffffffff80103e42:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103e44:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103e4b:	ff ff ff 
ffffffff80103e4e:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103e55:	ff ff ff 
ffffffff80103e58:	ff d0                	callq  *%rax
    dump1(stck->rsi, "rsi");
ffffffff80103e5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e5e:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80103e62:	48 be 79 53 10 80 ff 	movabs $0xffffffff80105379,%rsi
ffffffff80103e69:	ff ff ff 
ffffffff80103e6c:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e6f:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103e76:	ff ff ff 
ffffffff80103e79:	ff d0                	callq  *%rax
    dump1(stck->rdx, "rdx");
ffffffff80103e7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e7f:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80103e83:	48 be 7d 53 10 80 ff 	movabs $0xffffffff8010537d,%rsi
ffffffff80103e8a:	ff ff ff 
ffffffff80103e8d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e90:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103e97:	ff ff ff 
ffffffff80103e9a:	ff d0                	callq  *%rax
    dump1(stck->rcx, "rcx");
ffffffff80103e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ea0:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80103ea4:	48 be 81 53 10 80 ff 	movabs $0xffffffff80105381,%rsi
ffffffff80103eab:	ff ff ff 
ffffffff80103eae:	48 89 c7             	mov    %rax,%rdi
ffffffff80103eb1:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103eb8:	ff ff ff 
ffffffff80103ebb:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103ebd:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103ec4:	ff ff ff 
ffffffff80103ec7:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103ece:	ff ff ff 
ffffffff80103ed1:	ff d0                	callq  *%rax
    dump1(stck->rbx, "rbx");
ffffffff80103ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ed7:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80103edb:	48 be 85 53 10 80 ff 	movabs $0xffffffff80105385,%rsi
ffffffff80103ee2:	ff ff ff 
ffffffff80103ee5:	48 89 c7             	mov    %rax,%rdi
ffffffff80103ee8:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103eef:	ff ff ff 
ffffffff80103ef2:	ff d0                	callq  *%rax
    dump1(stck->rax, "rax");
ffffffff80103ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ef8:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80103efc:	48 be 89 53 10 80 ff 	movabs $0xffffffff80105389,%rsi
ffffffff80103f03:	ff ff ff 
ffffffff80103f06:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f09:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103f10:	ff ff ff 
ffffffff80103f13:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103f15:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103f1c:	ff ff ff 
ffffffff80103f1f:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103f26:	ff ff ff 
ffffffff80103f29:	ff d0                	callq  *%rax
    com_write_str(" ===== other =====");
ffffffff80103f2b:	48 bf 8d 53 10 80 ff 	movabs $0xffffffff8010538d,%rdi
ffffffff80103f32:	ff ff ff 
ffffffff80103f35:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103f3c:	ff ff ff 
ffffffff80103f3f:	ff d0                	callq  *%rax
    dump1(stck->error_code, "error_code");
ffffffff80103f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f45:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80103f48:	89 c0                	mov    %eax,%eax
ffffffff80103f4a:	48 be a0 53 10 80 ff 	movabs $0xffffffff801053a0,%rsi
ffffffff80103f51:	ff ff ff 
ffffffff80103f54:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f57:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103f5e:	ff ff ff 
ffffffff80103f61:	ff d0                	callq  *%rax
    dump1(stck->int_no, "int_no");
ffffffff80103f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f67:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80103f6a:	89 c0                	mov    %eax,%eax
ffffffff80103f6c:	48 be ab 53 10 80 ff 	movabs $0xffffffff801053ab,%rsi
ffffffff80103f73:	ff ff ff 
ffffffff80103f76:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f79:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103f80:	ff ff ff 
ffffffff80103f83:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103f85:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103f8c:	ff ff ff 
ffffffff80103f8f:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103f96:	ff ff ff 
ffffffff80103f99:	ff d0                	callq  *%rax
    dump1(stck->rip, "rip");
ffffffff80103f9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f9f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80103fa6:	48 be b2 53 10 80 ff 	movabs $0xffffffff801053b2,%rsi
ffffffff80103fad:	ff ff ff 
ffffffff80103fb0:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fb3:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103fba:	ff ff ff 
ffffffff80103fbd:	ff d0                	callq  *%rax
    dump1(stck->rflags, "rflags");
ffffffff80103fbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103fc3:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80103fca:	48 be b6 53 10 80 ff 	movabs $0xffffffff801053b6,%rsi
ffffffff80103fd1:	ff ff ff 
ffffffff80103fd4:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fd7:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff80103fde:	ff ff ff 
ffffffff80103fe1:	ff d0                	callq  *%rax
    com_write_str(" ");
ffffffff80103fe3:	48 bf 28 53 10 80 ff 	movabs $0xffffffff80105328,%rdi
ffffffff80103fea:	ff ff ff 
ffffffff80103fed:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80103ff4:	ff ff ff 
ffffffff80103ff7:	ff d0                	callq  *%rax
    com_write_str(" ===== CRX =====");
ffffffff80103ff9:	48 bf bd 53 10 80 ff 	movabs $0xffffffff801053bd,%rdi
ffffffff80104000:	ff ff ff 
ffffffff80104003:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010400a:	ff ff ff 
ffffffff8010400d:	ff d0                	callq  *%rax

    uint64_t CRX;
    asm volatile("mov %%cr2, %0" : "=r" (CRX));
ffffffff8010400f:	0f 22 d0             	mov    %rax,%cr2
ffffffff80104012:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dump1(CRX, "CR2");
ffffffff80104016:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010401a:	48 be ce 53 10 80 ff 	movabs $0xffffffff801053ce,%rsi
ffffffff80104021:	ff ff ff 
ffffffff80104024:	48 89 c7             	mov    %rax,%rdi
ffffffff80104027:	48 b8 10 3b 10 80 ff 	movabs $0xffffffff80103b10,%rax
ffffffff8010402e:	ff ff ff 
ffffffff80104031:	ff d0                	callq  *%rax
}
ffffffff80104033:	90                   	nop
ffffffff80104034:	c9                   	leaveq 
ffffffff80104035:	c3                   	retq   

ffffffff80104036 <_Z7pic_acki>:
void pic_ack(int intno)
{
ffffffff80104036:	f3 0f 1e fa          	endbr64 
ffffffff8010403a:	55                   	push   %rbp
ffffffff8010403b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010403e:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104042:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if (intno >= 40)
ffffffff80104045:	83 7d fc 27          	cmpl   $0x27,-0x4(%rbp)
ffffffff80104049:	7e 16                	jle    ffffffff80104061 <_Z7pic_acki+0x2b>
	{
		outb(0xA0, 0x20);
ffffffff8010404b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80104050:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80104055:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010405c:	ff ff ff 
ffffffff8010405f:	ff d0                	callq  *%rax
	}

	outb(0x20, 0x20);
ffffffff80104061:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80104066:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8010406b:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80104072:	ff ff ff 
ffffffff80104075:	ff d0                	callq  *%rax
}
ffffffff80104077:	90                   	nop
ffffffff80104078:	c9                   	leaveq 
ffffffff80104079:	c3                   	retq   

ffffffff8010407a <_Z8is_errori>:
    char buff[64];
bool is_error(int intno){
ffffffff8010407a:	f3 0f 1e fa          	endbr64 
ffffffff8010407e:	55                   	push   %rbp
ffffffff8010407f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104082:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104086:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (intno > 31)
ffffffff80104089:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff8010408d:	7e 07                	jle    ffffffff80104096 <_Z8is_errori+0x1c>
    {
        return false;
ffffffff8010408f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80104094:	eb 2a                	jmp    ffffffff801040c0 <_Z8is_errori+0x46>
    }
    // yeah i should do an array 
    if (intno == 1 || intno == 15 || (intno >= 21 && intno <= 29) || intno == 31)
ffffffff80104096:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff8010409a:	74 18                	je     ffffffff801040b4 <_Z8is_errori+0x3a>
ffffffff8010409c:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
ffffffff801040a0:	74 12                	je     ffffffff801040b4 <_Z8is_errori+0x3a>
ffffffff801040a2:	83 7d fc 14          	cmpl   $0x14,-0x4(%rbp)
ffffffff801040a6:	7e 06                	jle    ffffffff801040ae <_Z8is_errori+0x34>
ffffffff801040a8:	83 7d fc 1d          	cmpl   $0x1d,-0x4(%rbp)
ffffffff801040ac:	7e 06                	jle    ffffffff801040b4 <_Z8is_errori+0x3a>
ffffffff801040ae:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff801040b2:	75 07                	jne    ffffffff801040bb <_Z8is_errori+0x41>
    {
        return false;
ffffffff801040b4:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff801040b9:	eb 05                	jmp    ffffffff801040c0 <_Z8is_errori+0x46>
    }
    return true;
ffffffff801040bb:	b8 01 00 00 00       	mov    $0x1,%eax
    
}
ffffffff801040c0:	c9                   	leaveq 
ffffffff801040c1:	c3                   	retq   

ffffffff801040c2 <interrupts_handler>:
extern "C" void interrupts_handler( InterruptStackFrame* stackframe){
ffffffff801040c2:	f3 0f 1e fa          	endbr64 
ffffffff801040c6:	55                   	push   %rbp
ffffffff801040c7:	48 89 e5             	mov    %rsp,%rbp
ffffffff801040ca:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801040ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    com_write_str("receive an interrupt");
ffffffff801040d2:	48 bf d2 53 10 80 ff 	movabs $0xffffffff801053d2,%rdi
ffffffff801040d9:	ff ff ff 
ffffffff801040dc:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801040e3:	ff ff ff 
ffffffff801040e6:	ff d0                	callq  *%rax
    if (is_error(stackframe->int_no))
ffffffff801040e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801040ec:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801040ef:	89 c7                	mov    %eax,%edi
ffffffff801040f1:	48 b8 7a 40 10 80 ff 	movabs $0xffffffff8010407a,%rax
ffffffff801040f8:	ff ff ff 
ffffffff801040fb:	ff d0                	callq  *%rax
ffffffff801040fd:	84 c0                	test   %al,%al
ffffffff801040ff:	0f 84 c0 00 00 00    	je     ffffffff801041c5 <interrupts_handler+0x103>
    {
        
        com_write_str("error fatal");
ffffffff80104105:	48 bf e7 53 10 80 ff 	movabs $0xffffffff801053e7,%rdi
ffffffff8010410c:	ff ff ff 
ffffffff8010410f:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80104116:	ff ff ff 
ffffffff80104119:	ff d0                	callq  *%rax
        com_write_str(exception_messages[stackframe->int_no]);
ffffffff8010411b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010411f:	8b 50 7c             	mov    0x7c(%rax),%edx
ffffffff80104122:	48 b8 40 60 10 80 ff 	movabs $0xffffffff80106040,%rax
ffffffff80104129:	ff ff ff 
ffffffff8010412c:	89 d2                	mov    %edx,%edx
ffffffff8010412e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80104132:	48 89 c7             	mov    %rax,%rdi
ffffffff80104135:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010413c:	ff ff ff 
ffffffff8010413f:	ff d0                	callq  *%rax
        dumpregister(stackframe);
ffffffff80104141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104145:	48 89 c7             	mov    %rax,%rdi
ffffffff80104148:	48 b8 cf 3b 10 80 ff 	movabs $0xffffffff80103bcf,%rax
ffffffff8010414f:	ff ff ff 
ffffffff80104152:	ff d0                	callq  *%rax
        memzero(buff, 64);
ffffffff80104154:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104159:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff80104160:	ff ff ff 
ffffffff80104163:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff8010416a:	ff ff ff 
ffffffff8010416d:	ff d0                	callq  *%rax
        kitoaT<uint64_t>(buff, 'x', stackframe->rip);
ffffffff8010416f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104173:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff8010417a:	48 89 c2             	mov    %rax,%rdx
ffffffff8010417d:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80104182:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff80104189:	ff ff ff 
ffffffff8010418c:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff80104193:	ff ff ff 
ffffffff80104196:	ff d0                	callq  *%rax
        com_write_str("rip :");
ffffffff80104198:	48 bf f3 53 10 80 ff 	movabs $0xffffffff801053f3,%rdi
ffffffff8010419f:	ff ff ff 
ffffffff801041a2:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801041a9:	ff ff ff 
ffffffff801041ac:	ff d0                	callq  *%rax
        com_write_str(buff);
ffffffff801041ae:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff801041b5:	ff ff ff 
ffffffff801041b8:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801041bf:	ff ff ff 
ffffffff801041c2:	ff d0                	callq  *%rax
        asm volatile("hlt");
ffffffff801041c4:	f4                   	hlt    
    }
    
    pic_ack(stackframe->int_no);
ffffffff801041c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801041c9:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801041cc:	89 c7                	mov    %eax,%edi
ffffffff801041ce:	48 b8 36 40 10 80 ff 	movabs $0xffffffff80104036,%rax
ffffffff801041d5:	ff ff ff 
ffffffff801041d8:	ff d0                	callq  *%rax
    memzero(buff, 64);
ffffffff801041da:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801041df:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff801041e6:	ff ff ff 
ffffffff801041e9:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff801041f0:	ff ff ff 
ffffffff801041f3:	ff d0                	callq  *%rax
    kitoa(buff, 'd', stackframe->int_no);
ffffffff801041f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801041f9:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801041fc:	89 c2                	mov    %eax,%edx
ffffffff801041fe:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff80104203:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff8010420a:	ff ff ff 
ffffffff8010420d:	48 b8 ca 4a 10 80 ff 	movabs $0xffffffff80104aca,%rax
ffffffff80104214:	ff ff ff 
ffffffff80104217:	ff d0                	callq  *%rax
    
    com_write_str("id :");
ffffffff80104219:	48 bf f9 53 10 80 ff 	movabs $0xffffffff801053f9,%rdi
ffffffff80104220:	ff ff ff 
ffffffff80104223:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010422a:	ff ff ff 
ffffffff8010422d:	ff d0                	callq  *%rax
    com_write_str(buff);
ffffffff8010422f:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff80104236:	ff ff ff 
ffffffff80104239:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff80104240:	ff ff ff 
ffffffff80104243:	ff d0                	callq  *%rax


    memzero(buff, 64);
ffffffff80104245:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010424a:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff80104251:	ff ff ff 
ffffffff80104254:	48 b8 55 48 10 80 ff 	movabs $0xffffffff80104855,%rax
ffffffff8010425b:	ff ff ff 
ffffffff8010425e:	ff d0                	callq  *%rax
    kitoaT<uint64_t>(buff, 'x', stackframe->rip);
ffffffff80104260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104264:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff8010426b:	48 89 c2             	mov    %rax,%rdx
ffffffff8010426e:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80104273:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff8010427a:	ff ff ff 
ffffffff8010427d:	48 b8 de 48 10 80 ff 	movabs $0xffffffff801048de,%rax
ffffffff80104284:	ff ff ff 
ffffffff80104287:	ff d0                	callq  *%rax

    com_write_str("rip :");
ffffffff80104289:	48 bf f3 53 10 80 ff 	movabs $0xffffffff801053f3,%rdi
ffffffff80104290:	ff ff ff 
ffffffff80104293:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff8010429a:	ff ff ff 
ffffffff8010429d:	ff d0                	callq  *%rax
    com_write_str(buff);
ffffffff8010429f:	48 bf 40 a0 11 80 ff 	movabs $0xffffffff8011a040,%rdi
ffffffff801042a6:	ff ff ff 
ffffffff801042a9:	48 b8 5b 43 10 80 ff 	movabs $0xffffffff8010435b,%rax
ffffffff801042b0:	ff ff ff 
ffffffff801042b3:	ff d0                	callq  *%rax
ffffffff801042b5:	90                   	nop
ffffffff801042b6:	c9                   	leaveq 
ffffffff801042b7:	c3                   	retq   

ffffffff801042b8 <_Z8com_putc8COM_PORTc>:
    while ((inb(port + 5) & 0x20) == 0)
    { 
    }
}
void com_putc(COM_PORT port, char c)
{
ffffffff801042b8:	f3 0f 1e fa          	endbr64 
ffffffff801042bc:	55                   	push   %rbp
ffffffff801042bd:	48 89 e5             	mov    %rsp,%rbp
ffffffff801042c0:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801042c4:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff801042c7:	89 f0                	mov    %esi,%eax
ffffffff801042c9:	88 45 f8             	mov    %al,-0x8(%rbp)
    com_wait_write(port);
ffffffff801042cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801042cf:	89 c7                	mov    %eax,%edi
ffffffff801042d1:	48 b8 0b 4c 10 80 ff 	movabs $0xffffffff80104c0b,%rax
ffffffff801042d8:	ff ff ff 
ffffffff801042db:	ff d0                	callq  *%rax
    outb(port, c); 
ffffffff801042dd:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff801042e1:	0f b6 d0             	movzbl %al,%edx
ffffffff801042e4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801042e7:	0f b7 c0             	movzwl %ax,%eax
ffffffff801042ea:	89 d6                	mov    %edx,%esi
ffffffff801042ec:	89 c7                	mov    %eax,%edi
ffffffff801042ee:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801042f5:	ff ff ff 
ffffffff801042f8:	ff d0                	callq  *%rax
}
ffffffff801042fa:	90                   	nop
ffffffff801042fb:	c9                   	leaveq 
ffffffff801042fc:	c3                   	retq   

ffffffff801042fd <_Z9com_write8COM_PORTPKvi>:

int com_write(COM_PORT port, const void *buffer, int size)
{   
ffffffff801042fd:	f3 0f 1e fa          	endbr64 
ffffffff80104301:	55                   	push   %rbp
ffffffff80104302:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104305:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104309:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff8010430c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80104310:	89 55 e8             	mov    %edx,-0x18(%rbp)
    const char * bufaddr = (const char*)buffer;
ffffffff80104313:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104317:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for (int i = 0; i < size; i++)
ffffffff8010431b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80104322:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104325:	3b 45 e8             	cmp    -0x18(%rbp),%eax
ffffffff80104328:	7d 2c                	jge    ffffffff80104356 <_Z9com_write8COM_PORTPKvi+0x59>
    {
        com_putc(port, (bufaddr)[i]);
ffffffff8010432a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010432d:	48 63 d0             	movslq %eax,%rdx
ffffffff80104330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104334:	48 01 d0             	add    %rdx,%rax
ffffffff80104337:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010433a:	0f be d0             	movsbl %al,%edx
ffffffff8010433d:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80104340:	89 d6                	mov    %edx,%esi
ffffffff80104342:	89 c7                	mov    %eax,%edi
ffffffff80104344:	48 b8 b8 42 10 80 ff 	movabs $0xffffffff801042b8,%rax
ffffffff8010434b:	ff ff ff 
ffffffff8010434e:	ff d0                	callq  *%rax
    for (int i = 0; i < size; i++)
ffffffff80104350:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80104354:	eb cc                	jmp    ffffffff80104322 <_Z9com_write8COM_PORTPKvi+0x25>
    }


    return size;
ffffffff80104356:	8b 45 e8             	mov    -0x18(%rbp),%eax
}
ffffffff80104359:	c9                   	leaveq 
ffffffff8010435a:	c3                   	retq   

ffffffff8010435b <_Z13com_write_strPKc>:
void com_write_str( const char *buffer)
{
ffffffff8010435b:	f3 0f 1e fa          	endbr64 
ffffffff8010435f:	55                   	push   %rbp
ffffffff80104360:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104363:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104367:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff8010436b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104372:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104375:	48 63 d0             	movslq %eax,%rdx
ffffffff80104378:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010437c:	48 01 d0             	add    %rdx,%rax
ffffffff8010437f:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104382:	84 c0                	test   %al,%al
ffffffff80104384:	74 2c                	je     ffffffff801043b2 <_Z13com_write_strPKc+0x57>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff80104386:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104389:	48 63 d0             	movslq %eax,%rdx
ffffffff8010438c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104390:	48 01 d0             	add    %rdx,%rax
ffffffff80104393:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104396:	0f be c0             	movsbl %al,%eax
ffffffff80104399:	89 c6                	mov    %eax,%esi
ffffffff8010439b:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff801043a0:	48 b8 b8 42 10 80 ff 	movabs $0xffffffff801042b8,%rax
ffffffff801043a7:	ff ff ff 
ffffffff801043aa:	ff d0                	callq  *%rax
        i++;
ffffffff801043ac:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff801043b0:	eb c0                	jmp    ffffffff80104372 <_Z13com_write_strPKc+0x17>
    }
    
    com_putc(COM_PORT::COM1,'\n');
ffffffff801043b2:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff801043b7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff801043bc:	48 b8 b8 42 10 80 ff 	movabs $0xffffffff801042b8,%rax
ffffffff801043c3:	ff ff ff 
ffffffff801043c6:	ff d0                	callq  *%rax
}
ffffffff801043c8:	90                   	nop
ffffffff801043c9:	c9                   	leaveq 
ffffffff801043ca:	c3                   	retq   

ffffffff801043cb <_Z14com_write_strlPKc>:
void com_write_strl( const char *buffer)
{
ffffffff801043cb:	f3 0f 1e fa          	endbr64 
ffffffff801043cf:	55                   	push   %rbp
ffffffff801043d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff801043d3:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801043d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff801043db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff801043e2:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801043e5:	48 63 d0             	movslq %eax,%rdx
ffffffff801043e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801043ec:	48 01 d0             	add    %rdx,%rax
ffffffff801043ef:	0f b6 00             	movzbl (%rax),%eax
ffffffff801043f2:	84 c0                	test   %al,%al
ffffffff801043f4:	74 2c                	je     ffffffff80104422 <_Z14com_write_strlPKc+0x57>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff801043f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801043f9:	48 63 d0             	movslq %eax,%rdx
ffffffff801043fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104400:	48 01 d0             	add    %rdx,%rax
ffffffff80104403:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104406:	0f be c0             	movsbl %al,%eax
ffffffff80104409:	89 c6                	mov    %eax,%esi
ffffffff8010440b:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80104410:	48 b8 b8 42 10 80 ff 	movabs $0xffffffff801042b8,%rax
ffffffff80104417:	ff ff ff 
ffffffff8010441a:	ff d0                	callq  *%rax
        i++;
ffffffff8010441c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104420:	eb c0                	jmp    ffffffff801043e2 <_Z14com_write_strlPKc+0x17>
    }
    
}
ffffffff80104422:	90                   	nop
ffffffff80104423:	c9                   	leaveq 
ffffffff80104424:	c3                   	retq   

ffffffff80104425 <_Z14com_initialize8COM_PORT>:
void com_initialize(COM_PORT port)
{
ffffffff80104425:	f3 0f 1e fa          	endbr64 
ffffffff80104429:	55                   	push   %rbp
ffffffff8010442a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010442d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104431:	89 7d fc             	mov    %edi,-0x4(%rbp)
    outb(port + 2, 0);
ffffffff80104434:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104437:	83 c0 02             	add    $0x2,%eax
ffffffff8010443a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010443d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80104442:	89 c7                	mov    %eax,%edi
ffffffff80104444:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010444b:	ff ff ff 
ffffffff8010444e:	ff d0                	callq  *%rax
    outb(port + 3, 1<<7);
ffffffff80104450:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104453:	83 c0 03             	add    $0x3,%eax
ffffffff80104456:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104459:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8010445e:	89 c7                	mov    %eax,%edi
ffffffff80104460:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80104467:	ff ff ff 
ffffffff8010446a:	ff d0                	callq  *%rax
    outb(port + 0,3);
ffffffff8010446c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010446f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104472:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80104477:	89 c7                	mov    %eax,%edi
ffffffff80104479:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff80104480:	ff ff ff 
ffffffff80104483:	ff d0                	callq  *%rax
    outb(port + 1, 0);
ffffffff80104485:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104488:	83 c0 01             	add    $0x1,%eax
ffffffff8010448b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010448e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80104493:	89 c7                	mov    %eax,%edi
ffffffff80104495:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff8010449c:	ff ff ff 
ffffffff8010449f:	ff d0                	callq  *%rax
    outb(port + 3, 0x03);
ffffffff801044a1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044a4:	83 c0 03             	add    $0x3,%eax
ffffffff801044a7:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044aa:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff801044af:	89 c7                	mov    %eax,%edi
ffffffff801044b1:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801044b8:	ff ff ff 
ffffffff801044bb:	ff d0                	callq  *%rax
outb(port + 2, 0xC7); // No idea what this does :/
ffffffff801044bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044c0:	83 c0 02             	add    $0x2,%eax
ffffffff801044c3:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044c6:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff801044cb:	89 c7                	mov    %eax,%edi
ffffffff801044cd:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801044d4:	ff ff ff 
ffffffff801044d7:	ff d0                	callq  *%rax
outb(port + 4, 0x0B); // No idea what this does either
ffffffff801044d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044dc:	83 c0 04             	add    $0x4,%eax
ffffffff801044df:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044e2:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff801044e7:	89 c7                	mov    %eax,%edi
ffffffff801044e9:	48 b8 a5 4a 10 80 ff 	movabs $0xffffffff80104aa5,%rax
ffffffff801044f0:	ff ff ff 
ffffffff801044f3:	ff d0                	callq  *%rax
ffffffff801044f5:	90                   	nop
ffffffff801044f6:	c9                   	leaveq 
ffffffff801044f7:	c3                   	retq   
ffffffff801044f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff801044ff:	00 

ffffffff80104500 <idt_flush>:

[BITS 64]
section .text
global idt_flush
idt_flush:
    mov  rax, [rsp + 4]
ffffffff80104500:	48 8b 44 24 04       	mov    0x4(%rsp),%rax
    lidt  [rax]
ffffffff80104505:	0f 01 18             	lidt   (%rax)
    ret
ffffffff80104508:	c3                   	retq   

ffffffff80104509 <__interrupt_common>:
%endmacro

extern interrupts_handler

__interrupt_common:
    cli
ffffffff80104509:	fa                   	cli    
    cld
ffffffff8010450a:	fc                   	cld    
    push_all
ffffffff8010450b:	50                   	push   %rax
ffffffff8010450c:	53                   	push   %rbx
ffffffff8010450d:	51                   	push   %rcx
ffffffff8010450e:	52                   	push   %rdx
ffffffff8010450f:	56                   	push   %rsi
ffffffff80104510:	57                   	push   %rdi
ffffffff80104511:	55                   	push   %rbp
ffffffff80104512:	41 50                	push   %r8
ffffffff80104514:	41 51                	push   %r9
ffffffff80104516:	41 52                	push   %r10
ffffffff80104518:	41 53                	push   %r11
ffffffff8010451a:	41 54                	push   %r12
ffffffff8010451c:	41 55                	push   %r13
ffffffff8010451e:	41 56                	push   %r14
ffffffff80104520:	41 57                	push   %r15
    

    mov rdi, rsp
ffffffff80104522:	48 89 e7             	mov    %rsp,%rdi

    call interrupts_handler
ffffffff80104525:	e8 98 fb ff ff       	callq  ffffffff801040c2 <interrupts_handler>

    pop_all
ffffffff8010452a:	41 5f                	pop    %r15
ffffffff8010452c:	41 5e                	pop    %r14
ffffffff8010452e:	41 5d                	pop    %r13
ffffffff80104530:	41 5c                	pop    %r12
ffffffff80104532:	41 5b                	pop    %r11
ffffffff80104534:	41 5a                	pop    %r10
ffffffff80104536:	41 59                	pop    %r9
ffffffff80104538:	41 58                	pop    %r8
ffffffff8010453a:	5d                   	pop    %rbp
ffffffff8010453b:	5f                   	pop    %rdi
ffffffff8010453c:	5e                   	pop    %rsi
ffffffff8010453d:	5a                   	pop    %rdx
ffffffff8010453e:	59                   	pop    %rcx
ffffffff8010453f:	5b                   	pop    %rbx
ffffffff80104540:	58                   	pop    %rax

    add rsp, 8 ; pop errcode and int number
ffffffff80104541:	48 83 c4 08          	add    $0x8,%rsp
    sti
ffffffff80104545:	fb                   	sti    
    iretq
ffffffff80104546:	48 cf                	iretq  

ffffffff80104548 <__interrupt0>:
    

INTERRUPT_NOERR 0
ffffffff80104548:	6a 00                	pushq  $0x0
ffffffff8010454a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
ffffffff80104551:	00 
ffffffff80104552:	eb b5                	jmp    ffffffff80104509 <__interrupt_common>

ffffffff80104554 <__interrupt1>:
INTERRUPT_NOERR 1
ffffffff80104554:	6a 00                	pushq  $0x0
ffffffff80104556:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
ffffffff8010455d:	00 
ffffffff8010455e:	eb a9                	jmp    ffffffff80104509 <__interrupt_common>

ffffffff80104560 <__interrupt2>:
INTERRUPT_NOERR 2
ffffffff80104560:	6a 00                	pushq  $0x0
ffffffff80104562:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp)
ffffffff80104569:	00 
ffffffff8010456a:	eb 9d                	jmp    ffffffff80104509 <__interrupt_common>

ffffffff8010456c <__interrupt3>:
INTERRUPT_NOERR 3
ffffffff8010456c:	6a 00                	pushq  $0x0
ffffffff8010456e:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%rsp)
ffffffff80104575:	00 
ffffffff80104576:	eb 91                	jmp    ffffffff80104509 <__interrupt_common>

ffffffff80104578 <__interrupt4>:
INTERRUPT_NOERR 4
ffffffff80104578:	6a 00                	pushq  $0x0
ffffffff8010457a:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%rsp)
ffffffff80104581:	00 
ffffffff80104582:	eb 85                	jmp    ffffffff80104509 <__interrupt_common>

ffffffff80104584 <__interrupt5>:
INTERRUPT_NOERR 5
ffffffff80104584:	6a 00                	pushq  $0x0
ffffffff80104586:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%rsp)
ffffffff8010458d:	00 
ffffffff8010458e:	e9 76 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104593 <__interrupt6>:
INTERRUPT_NOERR 6
ffffffff80104593:	6a 00                	pushq  $0x0
ffffffff80104595:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%rsp)
ffffffff8010459c:	00 
ffffffff8010459d:	e9 67 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045a2 <__interrupt7>:
INTERRUPT_NOERR 7
ffffffff801045a2:	6a 00                	pushq  $0x0
ffffffff801045a4:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%rsp)
ffffffff801045ab:	00 
ffffffff801045ac:	e9 58 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045b1 <__interrupt8>:
INTERRUPT_ERR   8
ffffffff801045b1:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%rsp)
ffffffff801045b8:	00 
ffffffff801045b9:	e9 4b ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045be <__interrupt9>:
INTERRUPT_NOERR 9
ffffffff801045be:	6a 00                	pushq  $0x0
ffffffff801045c0:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%rsp)
ffffffff801045c7:	00 
ffffffff801045c8:	e9 3c ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045cd <__interrupt10>:
INTERRUPT_ERR   10
ffffffff801045cd:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%rsp)
ffffffff801045d4:	00 
ffffffff801045d5:	e9 2f ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045da <__interrupt11>:
INTERRUPT_ERR   11
ffffffff801045da:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%rsp)
ffffffff801045e1:	00 
ffffffff801045e2:	e9 22 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045e7 <__interrupt12>:
INTERRUPT_ERR   12
ffffffff801045e7:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%rsp)
ffffffff801045ee:	00 
ffffffff801045ef:	e9 15 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801045f4 <__interrupt13>:
INTERRUPT_ERR   13
ffffffff801045f4:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%rsp)
ffffffff801045fb:	00 
ffffffff801045fc:	e9 08 ff ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104601 <__interrupt14>:
INTERRUPT_ERR   14
ffffffff80104601:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%rsp)
ffffffff80104608:	00 
ffffffff80104609:	e9 fb fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010460e <__interrupt15>:
INTERRUPT_NOERR 15
ffffffff8010460e:	6a 00                	pushq  $0x0
ffffffff80104610:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%rsp)
ffffffff80104617:	00 
ffffffff80104618:	e9 ec fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010461d <__interrupt16>:
INTERRUPT_NOERR 16
ffffffff8010461d:	6a 00                	pushq  $0x0
ffffffff8010461f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%rsp)
ffffffff80104626:	00 
ffffffff80104627:	e9 dd fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010462c <__interrupt17>:
INTERRUPT_NOERR 17
ffffffff8010462c:	6a 00                	pushq  $0x0
ffffffff8010462e:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%rsp)
ffffffff80104635:	00 
ffffffff80104636:	e9 ce fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010463b <__interrupt18>:
INTERRUPT_NOERR 18
ffffffff8010463b:	6a 00                	pushq  $0x0
ffffffff8010463d:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%rsp)
ffffffff80104644:	00 
ffffffff80104645:	e9 bf fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010464a <__interrupt19>:
INTERRUPT_NOERR 19
ffffffff8010464a:	6a 00                	pushq  $0x0
ffffffff8010464c:	c7 44 24 04 13 00 00 	movl   $0x13,0x4(%rsp)
ffffffff80104653:	00 
ffffffff80104654:	e9 b0 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104659 <__interrupt20>:
INTERRUPT_NOERR 20
ffffffff80104659:	6a 00                	pushq  $0x0
ffffffff8010465b:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%rsp)
ffffffff80104662:	00 
ffffffff80104663:	e9 a1 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104668 <__interrupt21>:
INTERRUPT_NOERR 21
ffffffff80104668:	6a 00                	pushq  $0x0
ffffffff8010466a:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%rsp)
ffffffff80104671:	00 
ffffffff80104672:	e9 92 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104677 <__interrupt22>:
INTERRUPT_NOERR 22
ffffffff80104677:	6a 00                	pushq  $0x0
ffffffff80104679:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%rsp)
ffffffff80104680:	00 
ffffffff80104681:	e9 83 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104686 <__interrupt23>:
INTERRUPT_NOERR 23
ffffffff80104686:	6a 00                	pushq  $0x0
ffffffff80104688:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%rsp)
ffffffff8010468f:	00 
ffffffff80104690:	e9 74 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104695 <__interrupt24>:
INTERRUPT_NOERR 24
ffffffff80104695:	6a 00                	pushq  $0x0
ffffffff80104697:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%rsp)
ffffffff8010469e:	00 
ffffffff8010469f:	e9 65 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046a4 <__interrupt25>:
INTERRUPT_NOERR 25
ffffffff801046a4:	6a 00                	pushq  $0x0
ffffffff801046a6:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
ffffffff801046ad:	00 
ffffffff801046ae:	e9 56 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046b3 <__interrupt26>:
INTERRUPT_NOERR 26
ffffffff801046b3:	6a 00                	pushq  $0x0
ffffffff801046b5:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%rsp)
ffffffff801046bc:	00 
ffffffff801046bd:	e9 47 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046c2 <__interrupt27>:
INTERRUPT_NOERR 27
ffffffff801046c2:	6a 00                	pushq  $0x0
ffffffff801046c4:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%rsp)
ffffffff801046cb:	00 
ffffffff801046cc:	e9 38 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046d1 <__interrupt28>:
INTERRUPT_NOERR 28
ffffffff801046d1:	6a 00                	pushq  $0x0
ffffffff801046d3:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%rsp)
ffffffff801046da:	00 
ffffffff801046db:	e9 29 fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046e0 <__interrupt29>:
INTERRUPT_NOERR 29
ffffffff801046e0:	6a 00                	pushq  $0x0
ffffffff801046e2:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%rsp)
ffffffff801046e9:	00 
ffffffff801046ea:	e9 1a fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046ef <__interrupt30>:
INTERRUPT_ERR   30
ffffffff801046ef:	c7 44 24 04 1e 00 00 	movl   $0x1e,0x4(%rsp)
ffffffff801046f6:	00 
ffffffff801046f7:	e9 0d fe ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801046fc <__interrupt31>:
INTERRUPT_NOERR 31
ffffffff801046fc:	6a 00                	pushq  $0x0
ffffffff801046fe:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%rsp)
ffffffff80104705:	00 
ffffffff80104706:	e9 fe fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010470b <__interrupt32>:

INTERRUPT_NOERR 32
ffffffff8010470b:	6a 00                	pushq  $0x0
ffffffff8010470d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
ffffffff80104714:	00 
ffffffff80104715:	e9 ef fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010471a <__interrupt33>:
INTERRUPT_NOERR 33
ffffffff8010471a:	6a 00                	pushq  $0x0
ffffffff8010471c:	c7 44 24 04 21 00 00 	movl   $0x21,0x4(%rsp)
ffffffff80104723:	00 
ffffffff80104724:	e9 e0 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104729 <__interrupt34>:
INTERRUPT_NOERR 34
ffffffff80104729:	6a 00                	pushq  $0x0
ffffffff8010472b:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%rsp)
ffffffff80104732:	00 
ffffffff80104733:	e9 d1 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104738 <__interrupt35>:
INTERRUPT_NOERR 35
ffffffff80104738:	6a 00                	pushq  $0x0
ffffffff8010473a:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%rsp)
ffffffff80104741:	00 
ffffffff80104742:	e9 c2 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104747 <__interrupt36>:
INTERRUPT_NOERR 36
ffffffff80104747:	6a 00                	pushq  $0x0
ffffffff80104749:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%rsp)
ffffffff80104750:	00 
ffffffff80104751:	e9 b3 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104756 <__interrupt37>:
INTERRUPT_NOERR 37
ffffffff80104756:	6a 00                	pushq  $0x0
ffffffff80104758:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%rsp)
ffffffff8010475f:	00 
ffffffff80104760:	e9 a4 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104765 <__interrupt38>:
INTERRUPT_NOERR 38
ffffffff80104765:	6a 00                	pushq  $0x0
ffffffff80104767:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%rsp)
ffffffff8010476e:	00 
ffffffff8010476f:	e9 95 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104774 <__interrupt39>:
INTERRUPT_NOERR 39
ffffffff80104774:	6a 00                	pushq  $0x0
ffffffff80104776:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%rsp)
ffffffff8010477d:	00 
ffffffff8010477e:	e9 86 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104783 <__interrupt40>:
INTERRUPT_NOERR 40
ffffffff80104783:	6a 00                	pushq  $0x0
ffffffff80104785:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%rsp)
ffffffff8010478c:	00 
ffffffff8010478d:	e9 77 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff80104792 <__interrupt41>:
INTERRUPT_NOERR 41
ffffffff80104792:	6a 00                	pushq  $0x0
ffffffff80104794:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%rsp)
ffffffff8010479b:	00 
ffffffff8010479c:	e9 68 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047a1 <__interrupt42>:
INTERRUPT_NOERR 42
ffffffff801047a1:	6a 00                	pushq  $0x0
ffffffff801047a3:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%rsp)
ffffffff801047aa:	00 
ffffffff801047ab:	e9 59 fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047b0 <__interrupt43>:
INTERRUPT_NOERR 43
ffffffff801047b0:	6a 00                	pushq  $0x0
ffffffff801047b2:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%rsp)
ffffffff801047b9:	00 
ffffffff801047ba:	e9 4a fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047bf <__interrupt44>:
INTERRUPT_NOERR 44
ffffffff801047bf:	6a 00                	pushq  $0x0
ffffffff801047c1:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%rsp)
ffffffff801047c8:	00 
ffffffff801047c9:	e9 3b fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047ce <__interrupt45>:
INTERRUPT_NOERR 45
ffffffff801047ce:	6a 00                	pushq  $0x0
ffffffff801047d0:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%rsp)
ffffffff801047d7:	00 
ffffffff801047d8:	e9 2c fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047dd <__interrupt46>:
INTERRUPT_NOERR 46
ffffffff801047dd:	6a 00                	pushq  $0x0
ffffffff801047df:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%rsp)
ffffffff801047e6:	00 
ffffffff801047e7:	e9 1d fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047ec <__interrupt47>:
INTERRUPT_NOERR 47
ffffffff801047ec:	6a 00                	pushq  $0x0
ffffffff801047ee:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%rsp)
ffffffff801047f5:	00 
ffffffff801047f6:	e9 0e fd ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff801047fb <__interrupt50>:

INTERRUPT_NOERR 50
ffffffff801047fb:	6a 00                	pushq  $0x0
ffffffff801047fd:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%rsp)
ffffffff80104804:	00 
ffffffff80104805:	e9 ff fc ff ff       	jmpq   ffffffff80104509 <__interrupt_common>

ffffffff8010480a <__interrupt127>:
INTERRUPT_NOERR 127
ffffffff8010480a:	6a 00                	pushq  $0x0
ffffffff8010480c:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%rsp)
ffffffff80104813:	00 
ffffffff80104814:	e9 f0 fc ff ff       	jmpq   ffffffff80104509 <__interrupt_common>
ffffffff80104819:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80104820 <tss_install>:
global tss_install
tss_install:
  push rbp
ffffffff80104820:	55                   	push   %rbp
  mov rbp, rsp
ffffffff80104821:	48 89 e5             	mov    %rsp,%rbp
  mov rax, rdi
ffffffff80104824:	48 89 f8             	mov    %rdi,%rax
  ltr ax
ffffffff80104827:	0f 00 d8             	ltr    %ax
  pop rbp
ffffffff8010482a:	5d                   	pop    %rbp
ffffffff8010482b:	c3                   	retq   
ffffffff8010482c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80104830 <gdtr_install>:

bits 64
global gdtr_install
gdtr_install:
  push rbp
ffffffff80104830:	55                   	push   %rbp
  mov rbp, rsp
ffffffff80104831:	48 89 e5             	mov    %rsp,%rbp
  lgdt [rdi]
ffffffff80104834:	0f 01 17             	lgdt   (%rdi)
  mov ax, 16
ffffffff80104837:	66 b8 10 00          	mov    $0x10,%ax
  mov ss, ax
ffffffff8010483b:	8e d0                	mov    %eax,%ss
  mov ds, ax
ffffffff8010483d:	8e d8                	mov    %eax,%ds
  mov es, ax
ffffffff8010483f:	8e c0                	mov    %eax,%es
  mov fs, ax
ffffffff80104841:	8e e0                	mov    %eax,%fs
  mov gs, ax
ffffffff80104843:	8e e8                	mov    %eax,%gs
  mov rax, qword .trampoline
ffffffff80104845:	48 b8 53 48 10 80 ff 	movabs $0xffffffff80104853,%rax
ffffffff8010484c:	ff ff ff 
  push rsi
ffffffff8010484f:	56                   	push   %rsi
  push rax
ffffffff80104850:	50                   	push   %rax
  o64 retf
ffffffff80104851:	48 cb                	lretq  

ffffffff80104853 <gdtr_install.trampoline>:
.trampoline:
  pop rbp
ffffffff80104853:	5d                   	pop    %rbp
ffffffff80104854:	c3                   	retq   

ffffffff80104855 <_Z7memzeroPvm>:

void _start(struct stivale_struct *bootloader_data) ;

inline void * memzero(void * s, uint64_t n) {
ffffffff80104855:	f3 0f 1e fa          	endbr64 
ffffffff80104859:	55                   	push   %rbp
ffffffff8010485a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010485d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104861:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80104865:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    for (uint64_t i = 0; i < n; i++) ((uint8_t*)s)[i] = 0;
ffffffff80104869:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80104870:	00 
ffffffff80104871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104875:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80104879:	73 15                	jae    ffffffff80104890 <_Z7memzeroPvm+0x3b>
ffffffff8010487b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010487f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104883:	48 01 d0             	add    %rdx,%rax
ffffffff80104886:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80104889:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8010488e:	eb e1                	jmp    ffffffff80104871 <_Z7memzeroPvm+0x1c>
    return s;
ffffffff80104890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104894:	c9                   	leaveq 
ffffffff80104895:	c3                   	retq   

ffffffff80104896 <liballoc_lock>:
 * It's up to you to decide. 
 *
 * \return 0 if the lock was acquired successfully. Anything else is
 * failure.
 */
inline int liballoc_lock(){
ffffffff80104896:	f3 0f 1e fa          	endbr64 
ffffffff8010489a:	55                   	push   %rbp
ffffffff8010489b:	48 89 e5             	mov    %rsp,%rbp
    asm volatile("cli");
ffffffff8010489e:	fa                   	cli    
};
ffffffff8010489f:	90                   	nop
ffffffff801048a0:	5d                   	pop    %rbp
ffffffff801048a1:	c3                   	retq   

ffffffff801048a2 <liballoc_unlock>:
 * function.  If it disabled interrupts, it enables interrupts. If it
 * had acquiried a spinlock, it releases the spinlock. etc.
 *
 * \return 0 if the lock was successfully released.
 */
inline int liballoc_unlock(){
ffffffff801048a2:	f3 0f 1e fa          	endbr64 
ffffffff801048a6:	55                   	push   %rbp
ffffffff801048a7:	48 89 e5             	mov    %rsp,%rbp

    asm volatile("sti");
ffffffff801048aa:	fb                   	sti    
}
ffffffff801048ab:	90                   	nop
ffffffff801048ac:	5d                   	pop    %rbp
ffffffff801048ad:	c3                   	retq   

ffffffff801048ae <liballoc_alloc>:
 * required.  The page size was set up in the liballoc_init function.
 *
 * \return NULL if the pages were not allocated.
 * \return A pointer to the allocated memory.
 */
inline void* liballoc_alloc(int d){ // alloc x page
ffffffff801048ae:	f3 0f 1e fa          	endbr64 
ffffffff801048b2:	55                   	push   %rbp
ffffffff801048b3:	48 89 e5             	mov    %rsp,%rbp
ffffffff801048b6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801048ba:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return nullptr;
ffffffff801048bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff801048c2:	c9                   	leaveq 
ffffffff801048c3:	c3                   	retq   

ffffffff801048c4 <liballoc_free>:
 *
 * The integer value is the number of pages to free.
 *
 * \return 0 if the memory was successfully freed.
 */
inline int liballoc_free(void* addr,int d){
ffffffff801048c4:	f3 0f 1e fa          	endbr64 
ffffffff801048c8:	55                   	push   %rbp
ffffffff801048c9:	48 89 e5             	mov    %rsp,%rbp
ffffffff801048cc:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801048d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff801048d4:	89 75 f4             	mov    %esi,-0xc(%rbp)
    return 0;
ffffffff801048d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff801048dc:	c9                   	leaveq 
ffffffff801048dd:	c3                   	retq   

ffffffff801048de <_Z6kitoaTImEvPciT_>:
		p2--;
	}
}

template<class T>
inline void kitoaT(char* buf, int base, T d)
ffffffff801048de:	f3 0f 1e fa          	endbr64 
ffffffff801048e2:	55                   	push   %rbp
ffffffff801048e3:	48 89 e5             	mov    %rsp,%rbp
ffffffff801048e6:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff801048ea:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff801048ee:	89 75 b4             	mov    %esi,-0x4c(%rbp)
ffffffff801048f1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	char* p = buf;
ffffffff801048f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801048f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	char* p1, * p2;
	T ud = d;
ffffffff801048fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80104901:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	T divisor = 10;
ffffffff80104905:	48 c7 45 d8 0a 00 00 	movq   $0xa,-0x28(%rbp)
ffffffff8010490c:	00 
	{
		*p++ = '-';
		buf++;
		ud = -d;
	}
	else if (base == 'x')
ffffffff8010490d:	83 7d b4 78          	cmpl   $0x78,-0x4c(%rbp)
ffffffff80104911:	75 08                	jne    ffffffff8010491b <_Z6kitoaTImEvPciT_+0x3d>
		divisor = 16;
ffffffff80104913:	48 c7 45 d8 10 00 00 	movq   $0x10,-0x28(%rbp)
ffffffff8010491a:	00 

	/* Divide UD by DIVISOR until UD == 0. */
	do
	{
		T remainder = ud % divisor;
ffffffff8010491b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010491f:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104924:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff80104928:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)

		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff8010492c:	48 83 7d d0 09       	cmpq   $0x9,-0x30(%rbp)
ffffffff80104931:	77 0b                	ja     ffffffff8010493e <_Z6kitoaTImEvPciT_+0x60>
ffffffff80104933:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104937:	83 c0 30             	add    $0x30,%eax
ffffffff8010493a:	89 c1                	mov    %eax,%ecx
ffffffff8010493c:	eb 09                	jmp    ffffffff80104947 <_Z6kitoaTImEvPciT_+0x69>
ffffffff8010493e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104942:	83 c0 57             	add    $0x57,%eax
ffffffff80104945:	89 c1                	mov    %eax,%ecx
ffffffff80104947:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010494b:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8010494f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104953:	88 08                	mov    %cl,(%rax)
	do
ffffffff80104955:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104959:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8010495e:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff80104962:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104966:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8010496b:	0f 95 c0             	setne  %al
ffffffff8010496e:	84 c0                	test   %al,%al
ffffffff80104970:	74 02                	je     ffffffff80104974 <_Z6kitoaTImEvPciT_+0x96>
ffffffff80104972:	eb a7                	jmp    ffffffff8010491b <_Z6kitoaTImEvPciT_+0x3d>
	} while (ud /= divisor);

	/* Terminate BUF. */
	*p = 0;
ffffffff80104974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104978:	c6 00 00             	movb   $0x0,(%rax)

	/* Reverse BUF. */
	p1 = buf;
ffffffff8010497b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010497f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104983:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104987:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8010498b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff8010498f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104993:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104997:	73 2d                	jae    ffffffff801049c6 <_Z6kitoaTImEvPciT_+0xe8>
	{
		char tmp = *p1;
ffffffff80104999:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010499d:	0f b6 00             	movzbl (%rax),%eax
ffffffff801049a0:	88 45 cf             	mov    %al,-0x31(%rbp)
		*p1 = *p2;
ffffffff801049a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801049a7:	0f b6 10             	movzbl (%rax),%edx
ffffffff801049aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801049ae:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff801049b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801049b4:	0f b6 55 cf          	movzbl -0x31(%rbp),%edx
ffffffff801049b8:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff801049ba:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff801049bf:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff801049c4:	eb c9                	jmp    ffffffff8010498f <_Z6kitoaTImEvPciT_+0xb1>
	}
ffffffff801049c6:	90                   	nop
ffffffff801049c7:	c9                   	leaveq 
ffffffff801049c8:	c3                   	retq   

ffffffff801049c9 <_Z6kitoaTIjEvPciT_>:
inline void kitoaT(char* buf, int base, T d)
ffffffff801049c9:	f3 0f 1e fa          	endbr64 
ffffffff801049cd:	55                   	push   %rbp
ffffffff801049ce:	48 89 e5             	mov    %rsp,%rbp
ffffffff801049d1:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff801049d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff801049d9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff801049dc:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff801049df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801049e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	T ud = d;
ffffffff801049e7:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff801049ea:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	T divisor = 10;
ffffffff801049ed:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%rbp)
	else if (base == 'x')
ffffffff801049f4:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff801049f8:	75 07                	jne    ffffffff80104a01 <_Z6kitoaTIjEvPciT_+0x38>
		divisor = 16;
ffffffff801049fa:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%rbp)
		T remainder = ud % divisor;
ffffffff80104a01:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80104a04:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104a09:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff80104a0c:	89 55 dc             	mov    %edx,-0x24(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80104a0f:	83 7d dc 09          	cmpl   $0x9,-0x24(%rbp)
ffffffff80104a13:	77 0a                	ja     ffffffff80104a1f <_Z6kitoaTIjEvPciT_+0x56>
ffffffff80104a15:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104a18:	83 c0 30             	add    $0x30,%eax
ffffffff80104a1b:	89 c1                	mov    %eax,%ecx
ffffffff80104a1d:	eb 08                	jmp    ffffffff80104a27 <_Z6kitoaTIjEvPciT_+0x5e>
ffffffff80104a1f:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104a22:	83 c0 57             	add    $0x57,%eax
ffffffff80104a25:	89 c1                	mov    %eax,%ecx
ffffffff80104a27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104a2b:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104a2f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104a33:	88 08                	mov    %cl,(%rax)
	do
ffffffff80104a35:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80104a38:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104a3d:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff80104a40:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80104a43:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff80104a47:	0f 95 c0             	setne  %al
ffffffff80104a4a:	84 c0                	test   %al,%al
ffffffff80104a4c:	74 02                	je     ffffffff80104a50 <_Z6kitoaTIjEvPciT_+0x87>
ffffffff80104a4e:	eb b1                	jmp    ffffffff80104a01 <_Z6kitoaTIjEvPciT_+0x38>
	*p = 0;
ffffffff80104a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104a54:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff80104a57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104a5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104a5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104a63:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80104a67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104a6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104a6f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104a73:	73 2d                	jae    ffffffff80104aa2 <_Z6kitoaTIjEvPciT_+0xd9>
		char tmp = *p1;
ffffffff80104a75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104a79:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104a7c:	88 45 db             	mov    %al,-0x25(%rbp)
		*p1 = *p2;
ffffffff80104a7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a83:	0f b6 10             	movzbl (%rax),%edx
ffffffff80104a86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104a8a:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff80104a8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a90:	0f b6 55 db          	movzbl -0x25(%rbp),%edx
ffffffff80104a94:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80104a96:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80104a9b:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104aa0:	eb c9                	jmp    ffffffff80104a6b <_Z6kitoaTIjEvPciT_+0xa2>
ffffffff80104aa2:	90                   	nop
ffffffff80104aa3:	c9                   	leaveq 
ffffffff80104aa4:	c3                   	retq   

ffffffff80104aa5 <_Z4outbth>:

#ifdef X64


inline void outb(uint16_t port, uint8_t value)
{
ffffffff80104aa5:	f3 0f 1e fa          	endbr64 
ffffffff80104aa9:	55                   	push   %rbp
ffffffff80104aaa:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104aad:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104ab1:	89 f8                	mov    %edi,%eax
ffffffff80104ab3:	89 f2                	mov    %esi,%edx
ffffffff80104ab5:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
ffffffff80104ab9:	89 d0                	mov    %edx,%eax
ffffffff80104abb:	88 45 f8             	mov    %al,-0x8(%rbp)
	asm volatile("out  dx, al"::"a"(value), "d"(port));
ffffffff80104abe:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80104ac2:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx
ffffffff80104ac6:	ee                   	out    %al,(%dx)
}
ffffffff80104ac7:	90                   	nop
ffffffff80104ac8:	c9                   	leaveq 
ffffffff80104ac9:	c3                   	retq   

ffffffff80104aca <_Z5kitoaPcii>:
{
ffffffff80104aca:	f3 0f 1e fa          	endbr64 
ffffffff80104ace:	55                   	push   %rbp
ffffffff80104acf:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104ad2:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80104ad6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80104ada:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff80104add:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff80104ae0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104ae4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	unsigned long ud = d;
ffffffff80104ae8:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80104aeb:	48 98                	cltq   
ffffffff80104aed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int divisor = 10;
ffffffff80104af1:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
	if (base == 'd' && d < 0)
ffffffff80104af8:	83 7d c4 64          	cmpl   $0x64,-0x3c(%rbp)
ffffffff80104afc:	75 27                	jne    ffffffff80104b25 <_Z5kitoaPcii+0x5b>
ffffffff80104afe:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
ffffffff80104b02:	79 21                	jns    ffffffff80104b25 <_Z5kitoaPcii+0x5b>
		*p++ = '-';
ffffffff80104b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b08:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104b0c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104b10:	c6 00 2d             	movb   $0x2d,(%rax)
		buf++;
ffffffff80104b13:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
		ud = -d;
ffffffff80104b18:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80104b1b:	f7 d8                	neg    %eax
ffffffff80104b1d:	48 98                	cltq   
ffffffff80104b1f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104b23:	eb 0d                	jmp    ffffffff80104b32 <_Z5kitoaPcii+0x68>
	else if (base == 'x')
ffffffff80104b25:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff80104b29:	75 07                	jne    ffffffff80104b32 <_Z5kitoaPcii+0x68>
		divisor = 16;
ffffffff80104b2b:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
		int remainder = ud % divisor;
ffffffff80104b32:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104b35:	48 63 c8             	movslq %eax,%rcx
ffffffff80104b38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104b3c:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104b41:	48 f7 f1             	div    %rcx
ffffffff80104b44:	48 89 d0             	mov    %rdx,%rax
ffffffff80104b47:	89 45 d8             	mov    %eax,-0x28(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80104b4a:	83 7d d8 09          	cmpl   $0x9,-0x28(%rbp)
ffffffff80104b4e:	7f 0a                	jg     ffffffff80104b5a <_Z5kitoaPcii+0x90>
ffffffff80104b50:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80104b53:	83 c0 30             	add    $0x30,%eax
ffffffff80104b56:	89 c1                	mov    %eax,%ecx
ffffffff80104b58:	eb 08                	jmp    ffffffff80104b62 <_Z5kitoaPcii+0x98>
ffffffff80104b5a:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80104b5d:	83 c0 57             	add    $0x57,%eax
ffffffff80104b60:	89 c1                	mov    %eax,%ecx
ffffffff80104b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b66:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104b6a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104b6e:	88 08                	mov    %cl,(%rax)
	} while (ud /= divisor);
ffffffff80104b70:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104b73:	48 63 f0             	movslq %eax,%rsi
ffffffff80104b76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104b7a:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104b7f:	48 f7 f6             	div    %rsi
ffffffff80104b82:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104b86:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80104b8b:	0f 95 c0             	setne  %al
ffffffff80104b8e:	84 c0                	test   %al,%al
ffffffff80104b90:	74 02                	je     ffffffff80104b94 <_Z5kitoaPcii+0xca>
	do
ffffffff80104b92:	eb 9e                	jmp    ffffffff80104b32 <_Z5kitoaPcii+0x68>
	*p = 0;
ffffffff80104b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b98:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff80104b9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104b9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104ba3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ba7:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80104bab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104baf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104bb3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104bb7:	73 2d                	jae    ffffffff80104be6 <_Z5kitoaPcii+0x11c>
		char tmp = *p1;
ffffffff80104bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104bbd:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104bc0:	88 45 d7             	mov    %al,-0x29(%rbp)
		*p1 = *p2;
ffffffff80104bc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104bc7:	0f b6 10             	movzbl (%rax),%edx
ffffffff80104bca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104bce:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff80104bd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104bd4:	0f b6 55 d7          	movzbl -0x29(%rbp),%edx
ffffffff80104bd8:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80104bda:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80104bdf:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104be4:	eb c9                	jmp    ffffffff80104baf <_Z5kitoaPcii+0xe5>
}
ffffffff80104be6:	90                   	nop
ffffffff80104be7:	c9                   	leaveq 
ffffffff80104be8:	c3                   	retq   

ffffffff80104be9 <_Z3inbt>:
inline void outl(uint16_t port, uint32_t value)
{
	asm volatile("out  dx, eax"::"a"(value), "d"(port));
}
inline uint8_t inb(uint16_t port)
{
ffffffff80104be9:	f3 0f 1e fa          	endbr64 
ffffffff80104bed:	55                   	push   %rbp
ffffffff80104bee:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104bf1:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80104bf5:	89 f8                	mov    %edi,%eax
ffffffff80104bf7:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
	uint8_t ret;
	asm volatile("in al, dx"
		: "=a"(ret)
		: "d"(port)
		);
ffffffff80104bfb:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80104bff:	89 c2                	mov    %eax,%edx
ffffffff80104c01:	ec                   	in     (%dx),%al
ffffffff80104c02:	88 45 ff             	mov    %al,-0x1(%rbp)
	return ret;
ffffffff80104c05:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff80104c09:	c9                   	leaveq 
ffffffff80104c0a:	c3                   	retq   

ffffffff80104c0b <_Z14com_wait_write8COM_PORT>:
{
ffffffff80104c0b:	f3 0f 1e fa          	endbr64 
ffffffff80104c0f:	55                   	push   %rbp
ffffffff80104c10:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104c13:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104c17:	89 7d fc             	mov    %edi,-0x4(%rbp)
    while ((inb(port + 5) & 0x20) == 0)
ffffffff80104c1a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104c1d:	83 c0 05             	add    $0x5,%eax
ffffffff80104c20:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104c23:	89 c7                	mov    %eax,%edi
ffffffff80104c25:	48 b8 e9 4b 10 80 ff 	movabs $0xffffffff80104be9,%rax
ffffffff80104c2c:	ff ff ff 
ffffffff80104c2f:	ff d0                	callq  *%rax
ffffffff80104c31:	0f b6 c0             	movzbl %al,%eax
ffffffff80104c34:	83 e0 20             	and    $0x20,%eax
ffffffff80104c37:	85 c0                	test   %eax,%eax
ffffffff80104c39:	0f 94 c0             	sete   %al
ffffffff80104c3c:	84 c0                	test   %al,%al
ffffffff80104c3e:	74 02                	je     ffffffff80104c42 <_Z14com_wait_write8COM_PORT+0x37>
ffffffff80104c40:	eb d8                	jmp    ffffffff80104c1a <_Z14com_wait_write8COM_PORT+0xf>
}
ffffffff80104c42:	90                   	nop
ffffffff80104c43:	c9                   	leaveq 
ffffffff80104c44:	c3                   	retq   
