
kernel.elf:     format de fichier elf64-x86-64
architecture: i386:x86-64, fanions 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adresse de départ 0xffffffff801013bc

Contenu de la section .stivalehdr :
 ffffffff80100000 20601180 ffffffff 01004006 b0042000   `........@... .
 ffffffff80100010 00000000 00000000                    ........        
Contenu de la section .text :
 ffffffff80101000 554889e5 4883ec60 48897da8 fbe85436  UH..H..`H.}...T6
 ffffffff80101010 00004889 c7e80a35 000048c7 45d80000  ..H....5..H.E...
 ffffffff80101020 0000c745 fc640000 00488b45 a8488b40  ...E.d...H.E.H.@
 ffffffff80101030 18488945 d048c745 f0000000 0048c745  .H.E.H.E.....H.E
 ffffffff80101040 e8000000 00e8ed04 000048c7 45e00000  ..........H.E...
 ffffffff80101050 0000488b 45a80fb7 40220fb7 d0488b45  ..H.E...@"...H.E
 ffffffff80101060 a80fb740 240fb7c0 0fafc248 98483945  ...@$......H.H9E
 ffffffff80101070 e0731f48 8b45e048 8d148500 00000048  .s.H.E.H.......H
 ffffffff80101080 8b45d048 01c28b45 fc890248 8345e001  .E.H...E...H.E..
 ffffffff80101090 ebc04883 45f001e8 ca350000 488b4010  ..H.E....5..H.@.
 ffffffff801010a0 483945e8 0f95c084 c07453e8 b6350000  H9E......tS..5..
 ffffffff801010b0 488b4010 488945e8 488d45b0 be200000  H.@.H.E.H.E.. ..
 ffffffff801010c0 004889c7 e84c3900 00488b55 f0488d45  .H...L9..H.U.H.E
 ffffffff801010d0 b0be6400 00004889 c7e87139 000048c7  ..d...H...q9..H.
 ffffffff801010e0 c7005010 80e83d33 0000488d 45b04889  ..P...=3..H.E.H.
 ffffffff801010f0 c7e8d332 000048c7 45f00000 00008345  ...2..H.E......E
 ffffffff80101100 fc01e943 ffffff55 4889e548 c7c02080  ...C...UH..H.. .
 ffffffff80101110 10805dc3 554889e5 4883ec28 48897de8  ..].UH..H..(H.}.
 ffffffff80101120 89f089d6 89ca6689 45e489f0 8845e089  ......f.E....E..
 ffffffff80101130 d08845dc 0fb745e4 4883e0f8 4889c248  ..E...E.H...H..H
 ffffffff80101140 8b45e848 01d04889 45f8488b 45f80fb6  .E.H..H.E.H.E...
 ffffffff80101150 55e08850 050fb645 dcc1e004 83c80f89  U..P...E........
 ffffffff80101160 c2488b45 f8885006 488b45f8 66c700ff  .H.E..P.H.E.f...
 ffffffff80101170 ff90c9c3 554889e5 4883ec38 48897de8  ....UH..H..8H.}.
 ffffffff80101180 89f089d6 89ca4c89 45d04c89 4dc86689  ......L.E.L.M.f.
 ffffffff80101190 45e489f0 8845e089 d08845dc 0fb745e4  E....E....E...E.
 ffffffff801011a0 4883e0f8 4889c248 8b45e848 01d04889  H...H..H.E.H..H.
 ffffffff801011b0 45f8488b 45f80fb6 55e08850 050fb645  E.H.E...U..P...E
 ffffffff801011c0 dcc1e004 89c2488b 45c848c1 e81083e0  ......H.E.H.....
 ffffffff801011d0 0f09c248 8b45f888 5006488b 45c889c2  ...H.E..P.H.E...
 ffffffff801011e0 488b45f8 66891048 8b45d089 c2488b45  H.E.f..H.E...H.E
 ffffffff801011f0 f8668950 02488b45 d048c1e8 1089c248  .f.P.H.E.H.....H
 ffffffff80101200 8b45f888 5004488b 45d048c1 e81889c2  .E..P.H.E.H.....
 ffffffff80101210 488b45f8 88500748 8b45d048 c1e82089  H.E..P.H.E.H.. .
 ffffffff80101220 c2488b45 f8895008 488b45f8 c7400c00  .H.E..P.H.E..@..
 ffffffff80101230 00000090 c9c35548 89e54883 ec1048c7  ......UH..H...H.
 ffffffff80101240 c7085010 80e87f31 000048c7 45f82080  ..P....1..H.E. .
 ffffffff80101250 1080488b 45f84883 c06f4889 45f048c7  ..H.E.H..oH.E.H.
 ffffffff80101260 c7125010 80e85f31 0000be00 80000048  ..P..._1.......H
 ffffffff80101270 c7c7a080 1080e89a 37000048 c7c71c50  ........7..H...P
 ffffffff80101280 1080e842 310000b9 02000000 ba980000  ...B1...........
 ffffffff80101290 00be0800 000048c7 c7a08010 80e872fe  ......H.......r.
 ffffffff801012a0 ffffb900 000000ba 92000000 be100000  ................
 ffffffff801012b0 0048c7c7 a0801080 e857feff ffb90000  .H.......W......
 ffffffff801012c0 0000baf2 000000be 18000000 48c7c7a0  ............H...
 ffffffff801012d0 801080e8 3cfeffff b9020000 00baf800  ....<...........
 ffffffff801012e0 0000be20 00000048 c7c7a080 1080e821  ... ...H.......!
 ffffffff801012f0 feffff48 8b55f048 8b45f849 89d14989  ...H.U.H.E.I..I.
 ffffffff80101300 c0b90000 0000ba89 000000be 28000000  ............(...
 ffffffff80101310 48c7c7a0 801080e8 58feffff 48c7c0a0  H.......X...H...
 ffffffff80101320 80108048 8905d86c 000066c7 05cd6c00  ...H...l..f...l.
 ffffffff80101330 00ff0dba 10000000 be080000 0048c7c7  .............H..
 ffffffff80101340 00801080 e8a73600 0090c9c3 554889e5  ......6.....UH..
 ffffffff80101350 4883ec10 48897df8 be700000 0048c7c7  H...H.}..p...H..
 ffffffff80101360 20801080 e8ac3600 0066c705 146d0000   .....6..f...m..
 ffffffff80101370 6f00488b 45f84889 05a76c00 0066b828  o.H.E.H...l..f.(
 ffffffff80101380 000f00d8 90c9c355 4889e548 83ec0848  .......UH..H...H
 ffffffff80101390 897df848 8b45f848 8905866c 000066b8  .}.H.E.H...l..f.
 ffffffff801013a0 28000f00 d890c9c3 554889e5 4883ec10  (.......UH..H...
 ffffffff801013b0 48897df8 e87dfeff ff90c9c3 554889e5  H.}..}......UH..
 ffffffff801013c0 4883ec20 48897de8 4883e4f0 bff80300  H.. H.}.H.......
 ffffffff801013d0 00e8a030 000048c7 c72c5010 80e8e72f  ...0..H..,P..../
 ffffffff801013e0 000048c7 c7385010 80e8db2f 000048c7  ..H..8P..../..H.
 ffffffff801013f0 c0205011 80480500 10000048 89c7e8a5  . P..H.....H....
 ffffffff80101400 ffffff48 c7c74150 1080e8ba 2f000048  ...H..AP..../..H
 ffffffff80101410 c7c75050 1080e8ae 2f0000e8 08280000  ..PP..../....(..
 ffffffff80101420 48c7c759 501080e8 9d2f0000 48c7c768  H..YP..../..H..h
 ffffffff80101430 501080e8 912f0000 48c7c020 50118048  P..../..H.. P..H
 ffffffff80101440 05001000 004889c7 e8fffeff ff48c7c7  .....H.......H..
 ffffffff80101450 71501080 e8702f00 0048c7c7 7f501080  qP...p/..H...P..
 ffffffff80101460 e8642f00 00488b45 e84889c7 e8c82100  .d/..H.E.H....!.
 ffffffff80101470 0048c7c7 8b501080 e84c2f00 0048c7c7  .H...P...L/..H..
 ffffffff80101480 9c501080 e8402f00 00488b05 703b0100  .P...@/..H..p;..
 ffffffff80101490 4889c7e8 9e360000 48c7c7a4 501080e8  H....6..H...P...
 ffffffff801014a0 252f0000 48c7c7af 501080e8 192f0000  %/..H...P..../..
 ffffffff801014b0 e8b40000 0048c7c7 bc501080 e8082f00  .....H...P..../.
 ffffffff801014c0 0048c7c7 cc501080 e8fc2e00 00bf8000  .H...P..........
 ffffffff801014d0 0000e805 09000048 8945f048 c7c7e050  .......H.E.H...P
 ffffffff801014e0 1080e8e2 2e000048 c745f800 00000048  .......H.E.....H
 ffffffff801014f0 837df87f 7718488b 55f0488b 45f84801  .}..w.H.U.H.E.H.
 ffffffff80101500 d0488b55 f8881048 8345f801 ebe148c7  .H.U...H.E....H.
 ffffffff80101510 c7f75010 80e8af2e 0000488b 45e84889  ..P.......H.E.H.
 ffffffff80101520 c7e8dafa ffff90c9 c3554889 e5c605cc  .........UH.....
 ffffffff80101530 5a000001 905dc355 4889e5c6 05be5a00  Z....].UH.....Z.
 ffffffff80101540 0000905d c3554889 e548c7c7 0e511080  ...].UH..H...Q..
 ffffffff80101550 e8742e00 00ebf255 4889e548 c7c71651  .t.....UH..H...Q
 ffffffff80101560 1080e862 2e0000eb f2554889 e54883ec  ...b.....UH..H..
 ffffffff80101570 1048c7c7 1e511080 e84c2e00 00bf000e  .H...Q...L......
 ffffffff80101580 0800e855 08000048 8905725a 010048c7  ...U...H..rZ..H.
 ffffffff80101590 c72e5110 80e82f2e 0000c745 fc000000  ..Q.../....E....
 ffffffff801015a0 00837dfc 7f7f7848 8b15525a 01008b45  ..}...xH..RZ...E
 ffffffff801015b0 fc489848 69c01c10 00004801 c28b45fc  .H.Hi.....H...E.
 ffffffff801015c0 48984889 420c488b 15335a01 008b45fc  H.H.B.H..3Z...E.
 ffffffff801015d0 48984869 c01c1000 004801d0 c7400800  H.Hi.....H...@..
 ffffffff801015e0 000000c7 45f80000 0000817d f8ff0f00  ....E......}....
 ffffffff801015f0 007f2648 8b15065a 01008b45 fc489848  ..&H...Z...E.H.H
 ffffffff80101600 69c01c10 00004801 c28b45f8 4898c644  i.....H...E.H..D
 ffffffff80101610 02140083 45f801eb d18345fc 01eb8248  ....E.....E....H
 ffffffff80101620 c7c74151 1080e89e 2d000048 c7c74515  ..AQ....-..H..E.
 ffffffff80101630 1080e827 00000048 c7c75351 1080e886  ...'...H..SQ....
 ffffffff80101640 2d000048 c7c75715 1080e80f 000000c6  -..H..W.........
 ffffffff80101650 05f26901 0001e950 32000090 c9c35548  ..i....P2.....UH
 ffffffff80101660 89e54883 ec304889 7dd8c745 fc000000  ..H..0H.}..E....
 ffffffff80101670 00837dfc 7f0f8fa1 02000048 8b157e59  ..}........H..~Y
 ffffffff80101680 01008b45 fc489848 69c01c10 00004801  ...E.H.Hi.....H.
 ffffffff80101690 d08b4008 85c00f85 77020000 488b155d  ..@.....w...H..]
 ffffffff801016a0 5901008b 45fc4898 4869c01c 10000048  Y...E.H.Hi.....H
 ffffffff801016b0 01d0c740 08020000 00488b15 40590100  ...@.....H..@Y..
 ffffffff801016c0 8b45fc48 984869c0 1c100000 4801c248  .E.H.Hi.....H..H
 ffffffff801016d0 8b45d848 89821410 0000488b 151f5901  .E.H......H...Y.
 ffffffff801016e0 008b45fc 48984869 c01c1000 004801d0  ..E.H.Hi.....H..
 ffffffff801016f0 4883c014 4889c148 8b150259 01008b45  H...H..H...Y...E
 ffffffff80101700 fc489848 69c01c10 00004801 d0488d91  .H.Hi.....H..H..
 ffffffff80101710 00100000 48891048 8b15e258 01008b45  ....H..H...X...E
 ffffffff80101720 fc489848 69c01c10 00004801 d0488b00  .H.Hi.....H..H..
 ffffffff80101730 488945f0 48836df0 08488b45 f0488945  H.E.H.m..H.E.H.E
 ffffffff80101740 e8488b45 f0488d50 f8488955 f048c700  .H.E.H.P.H.U.H..
 ffffffff80101750 10000000 488b55e8 488b45f0 488d48f8  ....H.U.H.E.H.H.
 ffffffff80101760 48894df0 48891048 8b45f048 8d50f848  H.M.H..H.E.H.P.H
 ffffffff80101770 8955f048 c7008602 0000488b 45f0488d  .U.H......H.E.H.
 ffffffff80101780 50f84889 55f048c7 00080000 00488b55  P.H.U.H......H.U
 ffffffff80101790 d8488b45 f0488d48 f848894d f0488910  .H.E.H.H.H.M.H..
 ffffffff801017a0 488b45f0 488d50f8 488955f0 48c70000  H.E.H.P.H.U.H...
 ffffffff801017b0 00000048 8b45f048 8d50f848 8955f048  ...H.E.H.P.H.U.H
 ffffffff801017c0 c7000000 0000488b 45f0488d 50f84889  ......H.E.H.P.H.
 ffffffff801017d0 55f048c7 00000000 00488b45 f0488d50  U.H......H.E.H.P
 ffffffff801017e0 f8488955 f048c700 00000000 488b45f0  .H.U.H......H.E.
 ffffffff801017f0 488d50f8 488955f0 48c70000 00000048  H.P.H.U.H......H
 ffffffff80101800 8b45f048 8d50f848 8955f048 c7000000  .E.H.P.H.U.H....
 ffffffff80101810 0000488b 45f0488d 50f84889 55f048c7  ..H.E.H.P.H.U.H.
 ffffffff80101820 00000000 00488b45 f0488d50 f8488955  .....H.E.H.P.H.U
 ffffffff80101830 f048c700 00000000 488b45f0 488d50f8  .H......H.E.H.P.
 ffffffff80101840 488955f0 48c70000 00000048 8b45f048  H.U.H......H.E.H
 ffffffff80101850 8d50f848 8955f048 c7000000 0000488b  .P.H.U.H......H.
 ffffffff80101860 45f0488d 50f84889 55f048c7 00000000  E.H.P.H.U.H.....
 ffffffff80101870 00488b45 f0488d50 f8488955 f048c700  .H.E.H.P.H.U.H..
 ffffffff80101880 00000000 488b45f0 488d50f8 488955f0  ....H.E.H.P.H.U.
 ffffffff80101890 48c70000 00000048 8b45f048 8d50f848  H......H.E.H.P.H
 ffffffff801018a0 8955f048 c7000000 0000488b 45f048c7  .U.H......H.E.H.
 ffffffff801018b0 00000000 00488b15 44570100 8b45fc48  .....H..DW...E.H
 ffffffff801018c0 984869c0 1c100000 4801c248 8b45f048  .Hi.....H..H.E.H
 ffffffff801018d0 8902488b 05676701 004885c0 751d488b  ..H..gg..H..u.H.
 ffffffff801018e0 151b5701 008b45fc 48984869 c01c1000  ..W...E.H.Hi....
 ffffffff801018f0 004801d0 48890545 67010048 8b15fe56  .H..H..Eg..H...V
 ffffffff80101900 01008b45 fc489848 69c01c10 00004801  ...E.H.Hi.....H.
 ffffffff80101910 d0eb1a83 45fc01e9 55fdffff 48c7c765  ....E...U...H..e
 ffffffff80101920 511080e8 a12a0000 b8000000 00c9c355  Q....*.........U
 ffffffff80101930 4889e548 83ec1048 897df848 8975f048  H..H...H.}.H.u.H
 ffffffff80101940 837df000 7475488b 05f36601 004885c0  .}..tuH...f..H..
 ffffffff80101950 7523488b 45f0488b 00488945 f8488b45  u#H.E.H..H.E.H.E
 ffffffff80101960 f0c74008 01000000 488b45f0 488905cd  ..@.....H.E.H...
 ffffffff80101970 660100eb 47488b05 c4660100 c7400802  f...GH...f...@..
 ffffffff80101980 00000048 8b05b666 0100488b 55f8488b  ...H...f..H.U.H.
 ffffffff80101990 92980000 00488910 488b45f0 488b0048  .....H..H.E.H..H
 ffffffff801019a0 8945f848 8b45f0c7 40080100 0000488b  .E.H.E..@.....H.
 ffffffff801019b0 45f04889 05876601 00eb0190 c9c35548  E.H...f.......UH
 ffffffff801019c0 89e54883 ec204889 7de8488b 45e84889  ..H.. H.}.H.E.H.
 ffffffff801019d0 45f84883 7df87f77 58488b15 20560100  E.H.}..wXH.. V..
 ffffffff801019e0 488b45f8 4869c01c 10000048 01d08b40  H.E.Hi.....H...@
 ffffffff801019f0 0885c074 3b488b15 04560100 488b45f8  ...t;H...V..H.E.
 ffffffff80101a00 4869c01c 10000048 01d08b40 0883f802  Hi.....H...@....
 ffffffff80101a10 7517488b 15e75501 00488b45 f84869c0  u.H...U..H.E.Hi.
 ffffffff80101a20 1c100000 4801d0eb 66488345 f801eba2  ....H...fH.E....
 ffffffff80101a30 9048c745 f0000000 00488b45 f0483b45  .H.E.....H.E.H;E
 ffffffff80101a40 e8733b48 8b15b655 0100488b 45f04869  .s;H...U..H.E.Hi
 ffffffff80101a50 c01c1000 004801d0 8b400883 f8027517  .....H...@....u.
 ffffffff80101a60 488b1599 55010048 8b45f048 69c01c10  H...U..H.E.Hi...
 ffffffff80101a70 00004801 d0eb1848 8345f001 ebbb48c7  ..H....H.E....H.
 ffffffff80101a80 c77b5110 80e83f29 0000b800 000000c9  .{Q...?)........
 ffffffff80101a90 c3554889 e54883ec 2048897d e80fb605  .UH..H.. H.}....
 ffffffff80101aa0 5c550000 84c07569 488b0591 65010048  \U....uiH...e..H
 ffffffff80101ab0 85c0752a bf000000 00e800ff ffff4889  ..u*..........H.
 ffffffff80101ac0 45f04883 7df00074 4b488b55 f0488b45  E.H.}..tKH.U.H.E
 ffffffff80101ad0 e84889d6 4889c7e8 53feffff eb3a488b  .H..H...S....:H.
 ffffffff80101ae0 055b6501 00488b40 0c4889c7 e8cdfeff  .[e..H.@.H......
 ffffffff80101af0 ff488945 f848837d f800741b 488b55f8  .H.E.H.}..t.H.U.
 ffffffff80101b00 488b45e8 4889d648 89c7e820 feffffeb  H.E.H..H... ....
 ffffffff80101b10 0790eb04 90eb0190 c9c35548 89e5488b  ..........UH..H.
 ffffffff80101b20 051b6501 004885c0 750f48c7 c0608011  ..e..H..u.H..`..
 ffffffff80101b30 80480500 100000eb 0a488b05 00650100  .H.......H...e..
 ffffffff80101b40 488b005d c3554889 e5488b05 f0640100  H..].UH..H...d..
 ffffffff80101b50 4885c075 0fbf0000 0000e85f feffff48  H..u......._...H
 ffffffff80101b60 8b00eb16 488b05d5 64010048 8b400c48  ....H...d..H.@.H
 ffffffff80101b70 89c7e847 feffff48 8b005dc3 554889e5  ...G...H..].UH..
 ffffffff80101b80 4883ec10 48897df8 488b45f8 488b0048  H...H.}.H.E.H..H
 ffffffff80101b90 89c7e8f0 f7ffff48 8b05a264 0100c740  .......H...d...@
 ffffffff80101ba0 08020000 00488b45 f8488905 90640100  .....H.E.H...d..
 ffffffff80101bb0 488b45f8 c7400801 00000090 c9c35548  H.E..@........UH
 ffffffff80101bc0 89e54883 ec10897d fc8975f8 837dfc01  ..H....}..u..}..
 ffffffff80101bd0 7515817d f8ffff00 00750c48 c7c72070  u..}.....u.H.. p
 ffffffff80101be0 1180e865 2f000090 c9c35548 89e5beff  ...e/.....UH....
 ffffffff80101bf0 ff0000bf 01000000 e8c1ffff ff5dc355  .............].U
 ffffffff80101c00 4889e548 83ec2848 897de889 75e44889  H..H..(H.}..u.H.
 ffffffff80101c10 55d8c745 fc000000 008b45fc 483945d8  U..E......E.H9E.
 ffffffff80101c20 7e158b55 fc488b45 e84801d0 8b55e488  ~..U.H.E.H...U..
 ffffffff80101c30 108345fc 01ebe248 8b45e8c9 c3554889  ..E....H.E...UH.
 ffffffff80101c40 e54883ec 3848897d d8488975 d0488955  .H..8H.}.H.u.H.U
 ffffffff80101c50 c8488b45 d8488945 e8488b45 d0488945  .H.E.H.E.H.E.H.E
 ffffffff80101c60 e0488b45 c84883f8 03762a48 8b45e048  .H.E.H...v*H.E.H
 ffffffff80101c70 8d500448 8955e08b 10488b45 e8488d48  .P.H.U...H.E.H.H
 ffffffff80101c80 0448894d e8891048 8b45c848 83e80448  .H.M...H.E.H...H
 ffffffff80101c90 8945c8eb cc488b45 e8488945 f8488b45  .E...H.E.H.E.H.E
 ffffffff80101ca0 e0488945 f048837d c8007e24 488b45f0  .H.E.H.}..~$H.E.
 ffffffff80101cb0 488d5001 488955f0 0fb61048 8b45f848  H.P.H.U....H.E.H
 ffffffff80101cc0 8d480148 894df888 1048836d c801ebd5  .H.H.M...H.m....
 ffffffff80101cd0 488b45d8 c9c35548 89e54883 ec20897d  H.E...UH..H.. .}
 ffffffff80101ce0 ec8b45ec 83c02889 45fc8345 fc288b0d  ..E...(.E..E.(..
 ffffffff80101cf0 10530000 8b45fcba 00000000 f7f189d0  .S...E..........
 ffffffff80101d00 85c07515 8b35fa52 00008b45 fcba0000  ..u..5.R...E....
 ffffffff80101d10 0000f7f6 8945fceb 168b0de5 5200008b  .....E......R...
 ffffffff80101d20 45fcba00 000000f7 f183c001 8945fc8b  E............E..
 ffffffff80101d30 05d35200 003945fc 73098b05 c8520000  ..R..9E.s....R..
 ffffffff80101d40 8945fc8b 45fc89c7 e84a2e00 00488945  .E..E....J...H.E
 ffffffff80101d50 f048837d f0007519 488b05c9 a2010048  .H.}..u.H......H
 ffffffff80101d60 83c00148 8905bea2 0100b800 000000eb  ...H............
 ffffffff80101d70 69488b45 f048c700 00000000 488b45f0  iH.E.H......H.E.
 ffffffff80101d80 48c74008 00000000 488b45f0 8b55fc89  H.@.....H.E..U..
 ffffffff80101d90 50108b05 6c520000 0faf45fc 89c2488b  P...lR....E...H.
 ffffffff80101da0 45f08950 14488b45 f0c74018 28000000  E..P.H.E..@.(...
 ffffffff80101db0 488b45f0 48c74020 00000000 488b45f0  H.E.H.@ ....H.E.
 ffffffff80101dc0 8b401489 c2488b05 4ca20100 4801d048  .@...H..L...H..H
 ffffffff80101dd0 890542a2 0100488b 45f0c9c3 554889e5  ..B...H.E...UH..
 ffffffff80101de0 4883ec70 48897d98 c745fc00 00000048  H..pH.}..E.....H
 ffffffff80101df0 c745f000 00000048 c745e800 00000048  .E.....H.E.....H
 ffffffff80101e00 8b459848 8945b048 8345b020 e8702d00  .E.H.E.H.E. .p-.
 ffffffff80101e10 0048837d b0007526 488b0509 a2010048  .H.}..u&H......H
 ffffffff80101e20 83c00148 8905fea1 0100e85d 2d0000bf  ...H.......]-...
 ffffffff80101e30 01000000 e8a3ffff ffe90a07 0000488b  ..............H.
 ffffffff80101e40 05c3a101 004885c0 752d488b 45b089c7  .....H..u-H.E...
 ffffffff80101e50 e881feff ff488905 aca10100 488b05a5  .....H......H...
 ffffffff80101e60 a1010048 85c0750f e81f2d00 00b80000  ...H..u...-.....
 ffffffff80101e70 0000e9d1 06000048 8b058aa1 01004889  .......H......H.
 ffffffff80101e80 45e0c745 fc000000 00488b05 80a10100  E..E.....H......
 ffffffff80101e90 4885c074 3e488b05 74a10100 8b501448  H..t>H..t....P.H
 ffffffff80101ea0 8b056aa1 01008b48 1889d029 c889c048  ..j....H...)...H
 ffffffff80101eb0 8945f048 8b45b048 83c02848 3945f076  .E.H.E.H..(H9E.v
 ffffffff80101ec0 12488b05 48a10100 488945e0 c745fc01  .H..H...H.E..E..
 ffffffff80101ed0 00000048 837de000 0f846006 0000488b  ...H.}....`...H.
 ffffffff80101ee0 45e08b50 14488b45 e08b4818 89d029c8  E..P.H.E..H...).
 ffffffff80101ef0 89c04889 45a8488b 45f0483b 45a87313  ..H.E.H.E.H;E.s.
 ffffffff80101f00 488b45e0 48890505 a1010048 8b45a848  H.E.H......H.E.H
 ffffffff80101f10 8945f048 8b45b048 83c02848 3945a873  .E.H.E.H..(H9E.s
 ffffffff80101f20 7a488b45 e0488b40 084885c0 7411488b  zH.E.H.@.H..t.H.
 ffffffff80101f30 45e0488b 40084889 45e0e9f6 05000083  E.H.@.H.E.......
 ffffffff80101f40 7dfc0175 17488b05 bca00100 488945e0  }..u.H......H.E.
 ffffffff80101f50 c745fc00 000000e9 d9050000 488b45b0  .E..........H.E.
 ffffffff80101f60 89c7e86f fdffff48 8b55e048 89420848  ...o...H.U.H.B.H
 ffffffff80101f70 8b45e048 8b400848 85c00f84 ba050000  .E.H.@.H........
 ffffffff80101f80 488b45e0 488b4008 488b55e0 48891048  H.E.H.@.H.U.H..H
 ffffffff80101f90 8b45e048 8b400848 8945e048 8b45e048  .E.H.@.H.E.H.E.H
 ffffffff80101fa0 8b402048 85c00f85 04010000 488b45e0  .@ H........H.E.
 ffffffff80101fb0 4883c028 4889c248 8b45e048 89502048  H..(H..H.E.H.P H
 ffffffff80101fc0 8b45e048 8b4020c7 4018dec0 01c0488b  .E.H.@ .@.....H.
 ffffffff80101fd0 45e0488b 402048c7 00000000 00488b45  E.H.@ H......H.E
 ffffffff80101fe0 e0488b40 2048c740 08000000 00488b45  .H.@ H.@.....H.E
 ffffffff80101ff0 e0488b40 20488b55 e0488950 10488b45  .H.@ H.U.H.P.H.E
 ffffffff80102000 e0488b40 20488b55 b089501c 488b45e0  .H.@ H.U..P.H.E.
 ffffffff80102010 488b4020 488b5598 89502048 8b45e08b  H.@ H.U..P H.E..
 ffffffff80102020 5018488b 45b001d0 8d502848 8b45e089  P.H.E....P(H.E..
 ffffffff80102030 5018488b 15e79f01 00488b45 b04801d0  P.H......H.E.H..
 ffffffff80102040 488905d9 9f010048 8b45e048 8b402048  H......H.E.H.@ H
 ffffffff80102050 83c02848 8945e848 8b45e848 83c01048  ..(H.E.H.E.H...H
 ffffffff80102060 8945e848 8b45e883 e00f4889 45d04883  .E.H.E....H.E.H.
 ffffffff80102070 7dd00074 1cb81000 0000482b 45d04889  }..t......H+E.H.
 ffffffff80102080 45d0488b 55e8488b 45d04801 d0488945  E.H.U.H.E.H..H.E
 ffffffff80102090 e8488b45 d08d5010 488b45e8 4883e810  .H.E..P.H.E.H...
 ffffffff801020a0 8810e8e5 2a000048 8b45e8e9 98040000  ....*..H.E......
 ffffffff801020b0 488b45e0 488b4020 488945a8 488b45e0  H.E.H.@ H.E.H.E.
 ffffffff801020c0 482945a8 48836da8 28488b45 b04883c0  H)E.H.m.(H.E.H..
 ffffffff801020d0 28483945 a80f821e 01000048 8b45e048  (H9E.......H.E.H
 ffffffff801020e0 8d502848 8b45e048 8b402048 8910488b  .P(H.E.H.@ H..H.
 ffffffff801020f0 45e0488b 4020488b 00488b55 e0488b52  E.H.@ H..H.U.H.R
 ffffffff80102100 20488950 08488b45 e0488b40 20488b10   H.P.H.E.H.@ H..
 ffffffff80102110 488b45e0 48895020 488b45e0 488b4020  H.E.H.P H.E.H.@ 
 ffffffff80102120 c74018de c001c048 8b45e048 8b402048  .@.....H.E.H.@ H
 ffffffff80102130 c7000000 0000488b 45e0488b 4020488b  ......H.E.H.@ H.
 ffffffff80102140 55e04889 5010488b 45e0488b 4020488b  U.H.P.H.E.H.@ H.
 ffffffff80102150 55b08950 1c488b45 e0488b40 20488b55  U..P.H.E.H.@ H.U
 ffffffff80102160 98895020 488b45e0 8b501848 8b45b001  ..P H.E..P.H.E..
 ffffffff80102170 d08d5028 488b45e0 89501848 8b159e9e  ..P(H.E..P.H....
 ffffffff80102180 0100488b 45b04801 d0488905 909e0100  ..H.E.H..H......
 ffffffff80102190 488b45e0 488b4020 4883c028 488945e8  H.E.H.@ H..(H.E.
 ffffffff801021a0 488b45e8 4883c010 488945e8 488b45e8  H.E.H...H.E.H.E.
 ffffffff801021b0 83e00f48 8945c848 837dc800 741cb810  ...H.E.H.}..t...
 ffffffff801021c0 00000048 2b45c848 8945c848 8b55e848  ...H+E.H.E.H.U.H
 ffffffff801021d0 8b45c848 01d04889 45e8488b 45c88d50  .E.H..H.E.H.E..P
 ffffffff801021e0 10488b45 e84883e8 108810e8 9c290000  .H.E.H.......)..
 ffffffff801021f0 488b45e8 e94f0300 00488b45 e0488b40  H.E..O...H.E.H.@
 ffffffff80102200 20488945 d848837d d8000f84 c3020000   H.E.H.}........
 ffffffff80102210 488b45d8 488b4008 4885c00f 85480100  H.E.H.@.H....H..
 ffffffff80102220 00488b45 e08b4014 89c2488b 45e04801  .H.E..@...H.E.H.
 ffffffff80102230 d0488945 a8488b45 d8482945 a848836d  .H.E.H.E.H)E.H.m
 ffffffff80102240 a828488b 45d88b40 1c89c048 2945a848  .(H.E..@...H)E.H
 ffffffff80102250 8b45b048 83c02848 3945a80f 82080100  .E.H..(H9E......
 ffffffff80102260 00488b45 d88b401c 89c2488b 45d84801  .H.E..@...H.E.H.
 ffffffff80102270 d04883c0 284889c2 488b45d8 48895008  .H..(H..H.E.H.P.
 ffffffff80102280 488b45d8 488b4008 488b55d8 48891048  H.E.H.@.H.U.H..H
 ffffffff80102290 8b45d848 8b400848 8945d848 8b45d848  .E.H.@.H.E.H.E.H
 ffffffff801022a0 c7400800 00000048 8b45d8c7 4018dec0  .@.....H.E..@...
 ffffffff801022b0 01c0488b 45d8488b 55e04889 5010488b  ..H.E.H.U.H.P.H.
 ffffffff801022c0 45b089c2 488b45d8 89501c48 8b459889  E...H.E..P.H.E..
 ffffffff801022d0 c2488b45 d8895020 488b45e0 8b501848  .H.E..P H.E..P.H
 ffffffff801022e0 8b45b001 d08d5028 488b45e0 89501848  .E....P(H.E..P.H
 ffffffff801022f0 8b152a9d 0100488b 45b04801 d0488905  ..*...H.E.H..H..
 ffffffff80102300 1c9d0100 488b45d8 4883c028 488945e8  ....H.E.H..(H.E.
 ffffffff80102310 488b45e8 4883c010 488945e8 488b45e8  H.E.H...H.E.H.E.
 ffffffff80102320 83e00f48 8945c048 837dc000 741cb810  ...H.E.H.}..t...
 ffffffff80102330 00000048 2b45c048 8945c048 8b55e848  ...H+E.H.E.H.U.H
 ffffffff80102340 8b45c048 01d04889 45e8488b 45c08d50  .E.H..H.E.H.E..P
 ffffffff80102350 10488b45 e84883e8 108810e8 2c280000  .H.E.H......,(..
 ffffffff80102360 488b45e8 e9df0100 00488b45 d8488b40  H.E......H.E.H.@
 ffffffff80102370 084885c0 0f844801 0000488b 45d8488b  .H....H...H.E.H.
 ffffffff80102380 40084889 45a8488b 45d84829 45a84883  @.H.E.H.E.H)E.H.
 ffffffff80102390 6da82848 8b45d88b 401c89c0 482945a8  m.(H.E..@...H)E.
 ffffffff801023a0 488b45b0 4883c028 483945a8 0f821001  H.E.H..(H9E.....
 ffffffff801023b0 0000488b 45d88b40 1c89c248 8b45d848  ..H.E..@...H.E.H
 ffffffff801023c0 01d04883 c0284889 45a0488b 45a0c740  ..H..(H.E.H.E..@
 ffffffff801023d0 18dec001 c0488b45 d8488b50 08488b45  .....H.E.H.P.H.E
 ffffffff801023e0 a0488950 08488b45 a0488b55 d8488910  .H.P.H.E.H.U.H..
 ffffffff801023f0 488b45b0 89c2488b 45a08950 1c488b45  H.E...H.E..P.H.E
 ffffffff80102400 9889c248 8b45a089 5020488b 45a0488b  ...H.E..P H.E.H.
 ffffffff80102410 55e04889 5010488b 45d8488b 4008488b  U.H.P.H.E.H.@.H.
 ffffffff80102420 55a04889 10488b45 d8488b55 a0488950  U.H..H.E.H.U.H.P
 ffffffff80102430 08488b45 e08b5018 488b45b0 01d08d50  .H.E..P.H.E....P
 ffffffff80102440 28488b45 e0895018 488b15d1 9b010048  (H.E..P.H......H
 ffffffff80102450 8b45b048 01d04889 05c39b01 00488b45  .E.H..H......H.E
 ffffffff80102460 a04883c0 28488945 e8488b45 e84883c0  .H..(H.E.H.E.H..
 ffffffff80102470 10488945 e8488b45 e883e00f 488945b8  .H.E.H.E....H.E.
 ffffffff80102480 48837db8 00741cb8 10000000 482b45b8  H.}..t......H+E.
 ffffffff80102490 488945b8 488b55e8 488b45b8 4801d048  H.E.H.U.H.E.H..H
 ffffffff801024a0 8945e848 8b45b88d 5010488b 45e84883  .E.H.E..P.H.E.H.
 ffffffff801024b0 e8108810 e8d32600 00488b45 e8e98600  ......&..H.E....
 ffffffff801024c0 0000488b 45d8488b 40084889 45d8e932  ..H.E.H.@.H.E..2
 ffffffff801024d0 fdffff48 8b45e048 8b400848 85c07549  ...H.E.H.@.H..uI
 ffffffff801024e0 837dfc01 7514488b 051b9b01 00488945  .}..u.H......H.E
 ffffffff801024f0 e0c745fc 00000000 eb3b488b 45b089c7  ..E......;H.E...
 ffffffff80102500 e8d1f7ff ff488b55 e0488942 08488b45  .....H.U.H.B.H.E
 ffffffff80102510 e0488b40 084885c0 7423488b 45e0488b  .H.@.H..t#H.E.H.
 ffffffff80102520 4008488b 55e04889 10488b45 e0488b40  @.H.U.H..H.E.H.@
 ffffffff80102530 08488945 e0e999f9 ffff90eb 0190e849  .H.E...........I
 ffffffff80102540 260000b8 00000000 c9c35548 89e54883  &.........UH..H.
 ffffffff80102550 ec304889 7dd84883 7dd80075 17488b05  .0H.}.H.}..u.H..
 ffffffff80102560 c49a0100 4883c001 488905b9 9a0100e9  ....H...H.......
 ffffffff80102570 97020000 488b45d8 4883e810 0fb60048  ....H.E.H......H
 ffffffff80102580 0fbec048 8945f848 837df81f 770c488b  ...H.E.H.}..w.H.
 ffffffff80102590 45d8482b 45f84889 45d8e8e2 25000048  E.H+E.H.E...%..H
 ffffffff801025a0 8b45d848 83e82848 8945f048 8b45f08b  .E.H..(H.E.H.E..
 ffffffff801025b0 40183dde c001c00f 84970000 00488b05  @.=..........H..
 ffffffff801025c0 6c9a0100 4883c001 48890561 9a010048  l...H...H..a...H
 ffffffff801025d0 8b45f08b 401825ff ffff003d dec00100  .E..@.%....=....
 ffffffff801025e0 7422488b 45f08b40 180fb7c0 3ddec000  t"H.E..@....=...
 ffffffff801025f0 00741148 8b45f08b 40180fb6 c03dde00  .t.H.E..@....=..
 ffffffff80102600 0000751e 488b052d 9a010048 83c00148  ..u.H..-...H...H
 ffffffff80102610 8905229a 010048c7 c7905110 80e8a71d  .."...H...Q.....
 ffffffff80102620 0000488b 45f08b40 183dadde adde750e  ..H.E..@.=....u.
 ffffffff80102630 48c7c7c8 511080e8 8d1d0000 eb0c48c7  H...Q.........H.
 ffffffff80102640 c7f45110 80e87f1d 0000e83d 250000e9  ..Q........=%...
 ffffffff80102650 b7010000 488b45f0 488b4010 488945e8  ....H.E.H.@.H.E.
 ffffffff80102660 488b15b9 99010048 8b45f08b 401c89c1  H......H.E..@...
 ffffffff80102670 4889d048 29c84889 05a39901 00488b45  H..H).H......H.E
 ffffffff80102680 e88b5018 488b45f0 8b481c89 d029c88d  ..P.H.E..H...)..
 ffffffff80102690 50d8488b 45e88950 18488b45 f0c74018  P.H.E..P.H.E..@.
 ffffffff801026a0 addeadde 488b45f0 488b4008 4885c074  ....H.E.H.@.H..t
 ffffffff801026b0 12488b45 f0488b40 08488b55 f0488b12  .H.E.H.@.H.U.H..
 ffffffff801026c0 48891048 8b45f048 8b004885 c0741348  H..H.E.H..H..t.H
 ffffffff801026d0 8b45f048 8b00488b 55f0488b 52084889  .E.H..H.U.H.R.H.
 ffffffff801026e0 5008488b 45f0488b 004885c0 7510488b  P.H.E.H..H..u.H.
 ffffffff801026f0 45f0488b 5008488b 45e84889 5020488b  E.H.P.H.E.H.P H.
 ffffffff80102700 45e8488b 40204885 c00f85a8 00000048  E.H.@ H........H
 ffffffff80102710 8b05f298 01004839 45e8750f 488b45e8  ......H9E.u.H.E.
 ffffffff80102720 488b4008 488905dd 98010048 8b05de98  H.@.H......H....
 ffffffff80102730 01004839 45e8750b 48c705cd 98010000  ..H9E.u.H.......
 ffffffff80102740 00000048 8b45e848 8b004885 c0741348  ...H.E.H..H..t.H
 ffffffff80102750 8b45e848 8b00488b 55e8488b 52084889  .E.H..H.U.H.R.H.
 ffffffff80102760 5008488b 45e8488b 40084885 c0741248  P.H.E.H.@.H..t.H
 ffffffff80102770 8b45e848 8b400848 8b55e848 8b124889  .E.H.@.H.U.H..H.
 ffffffff80102780 10488b15 90980100 488b45e8 8b401489  .H......H.E..@..
 ffffffff80102790 c14889d0 4829c848 89057a98 0100488b  .H..H).H..z...H.
 ffffffff801027a0 45e88b40 1089c248 8b45e889 d64889c7  E..@...H.E...H..
 ffffffff801027b0 e8012400 00eb4f48 8b055298 01004885  ..$...OH..R...H.
 ffffffff801027c0 c0744348 8b054698 01008b50 14488b05  .tCH..F....P.H..
 ffffffff801027d0 3c980100 8b481889 d029c889 45e4488b  <....H...)..E.H.
 ffffffff801027e0 45e88b50 14488b45 e88b4818 89d029c8  E..P.H.E..H...).
 ffffffff801027f0 8945e08b 45e03b45 e47e0b48 8b45e848  .E..E.;E.~.H.E.H
 ffffffff80102800 89050a98 0100e881 230000c9 c3554889  ........#....UH.
 ffffffff80102810 e54883ec 2048897d e8488975 e0488b45  .H.. H.}.H.u.H.E
 ffffffff80102820 e889c248 8b45e00f afc28945 fc8b45fc  ...H.E.....E..E.
 ffffffff80102830 48984889 c7e8a2f5 ffff4889 45f08b45  H.H.......H.E..E
 ffffffff80102840 fc4863d0 488b45f0 be000000 004889c7  .Hc.H.E......H..
 ffffffff80102850 e8aaf3ff ff488b45 f0c9c355 4889e548  .....H.E...UH..H
 ffffffff80102860 83ec3048 897dd848 8975d048 837dd000  ..0H.}.H.u.H.}..
 ffffffff80102870 7516488b 45d84889 c7e8ccfc ffffb800  u.H.E.H.........
 ffffffff80102880 000000e9 30010000 48837dd8 00751148  ....0...H.}..u.H
 ffffffff80102890 8b45d048 89c7e841 f5ffffe9 18010000  .E.H...A........
 ffffffff801028a0 488b45d8 488945f8 488b45f8 4883e810  H.E.H.E.H.E.H...
 ffffffff801028b0 0fb60048 0fbec048 8945f048 837df01f  ...H...H.E.H.}..
 ffffffff801028c0 770c488b 45f8482b 45f04889 45f8e8ae  w.H.E.H+E.H.E...
 ffffffff801028d0 22000048 8b45f848 83e82848 8945e848  "..H.E.H..(H.E.H
 ffffffff801028e0 8b45e88b 40183dde c001c074 65488b05  .E..@.=....teH..
 ffffffff801028f0 3c970100 4883c001 48890531 97010048  <...H...H..1...H
 ffffffff80102900 8b45e88b 401825ff ffff003d dec00100  .E..@.%....=....
 ffffffff80102910 7422488b 45e88b40 180fb7c0 3ddec000  t"H.E..@....=...
 ffffffff80102920 00741148 8b45e88b 40180fb6 c03dde00  .t.H.E..@....=..
 ffffffff80102930 00007512 488b05fd 96010048 83c00148  ..u.H......H...H
 ffffffff80102940 8905f296 0100e841 220000b8 00000000  .......A".......
 ffffffff80102950 eb66488b 45e88b40 208945e4 8b45e448  .fH.E..@ .E..E.H
 ffffffff80102960 3945d07f 18488b45 d089c248 8b45e889  9E...H.E...H.E..
 ffffffff80102970 5020e815 22000048 8b45d8eb 3be80a22  P .."..H.E..;.."
 ffffffff80102980 0000488b 45d04889 c7e84ef4 ffff4889  ..H.E.H...N...H.
 ffffffff80102990 45f88b55 e4488b4d d8488b45 f84889ce  E..U.H.M.H.E.H..
 ffffffff801029a0 4889c7e8 95f2ffff 488b45d8 4889c7e8  H.......H.E.H...
 ffffffff801029b0 96fbffff 488b45f8 c9c35548 89e54883  ....H.E...UH..H.
 ffffffff801029c0 ec104889 7df84889 75f0488b 55f8488b  ..H.}.H.u.H.U.H.
 ffffffff801029d0 45f04801 d04883e8 01ba0000 000048f7  E.H..H........H.
 ffffffff801029e0 75f0480f af45f0c9 c3554889 e54883ec  u.H..E...UH..H..
 ffffffff801029f0 2848897d d848816d d8001000 00488b45  (H.}.H.m.....H.E
 ffffffff80102a00 d848c1e8 0c488945 f8488b45 f848c1e8  .H...H.E.H.E.H..
 ffffffff80102a10 05488945 f0488b45 f883e01f 488945e8  .H.E.H.E....H.E.
 ffffffff80102a20 488b15e9 a5010048 8b45f048 c1e00248  H......H.E.H...H
 ffffffff80102a30 01d08b10 488b45e8 be010000 0089c1d3  ....H.E.........
 ffffffff80102a40 e689f089 c6488b0d c4a50100 488b45f0  .....H......H.E.
 ffffffff80102a50 48c1e002 4801c809 f2891090 c9c35548  H...H.........UH
 ffffffff80102a60 89e54883 ec184889 7de8c745 fcffffff  ..H...H.}..E....
 ffffffff80102a70 ff488b05 98a50100 488b55e8 480fa310  .H......H.U.H...
 ffffffff80102a80 0f92c00f b6c08945 fc8b45fc c9c35548  .......E..E...UH
 ffffffff80102a90 89e54883 ec184889 7de8c745 fcffffff  ..H...H.}..E....
 ffffffff80102aa0 ff488b05 68a50100 488b55e8 480fab10  .H..h...H.U.H...
 ffffffff80102ab0 0f92c00f b6c08945 fc8b45fc c9c35548  .......E..E...UH
 ffffffff80102ac0 89e54883 ec184889 7de8c745 fc000000  ..H...H.}..E....
 ffffffff80102ad0 00488b05 38a50100 488b55e8 480fb310  .H..8...H.U.H...
 ffffffff80102ae0 0f92c00f b6c08945 fcb80000 0000c9c3  .......E........
 ffffffff80102af0 554889e5 4883ec40 48897dc8 488975c0  UH..H..@H.}.H.u.
 ffffffff80102b00 488b45c8 48c1e80c 488945f8 488b45f8  H.E.H...H.E.H.E.
 ffffffff80102b10 488945f0 488b45c0 488945e8 48816df0  H.E.H.E.H.E.H.m.
 ffffffff80102b20 00100000 488b55e8 488b45f0 4801d048  ....H.U.H.E.H..H
 ffffffff80102b30 8945e048 8b45f048 8945d848 8b45e048  .E.H.E.H.E.H.E.H
 ffffffff80102b40 3b45d87e 13488b45 d84889c7 e86dffff  ;E.~.H.E.H...m..
 ffffffff80102b50 ff488345 d801ebe3 9090c9c3 554889e5  .H.E........UH..
 ffffffff80102b60 4883ec08 48897df8 48ba0000 00000080  H...H.}.H.......
 ffffffff80102b70 ffff488b 45f84801 d0c9c355 4889e548  ..H.E.H....UH..H
 ffffffff80102b80 83ec0848 897df848 ba000000 00008000  ...H.}.H........
 ffffffff80102b90 00488b45 f84801d0 c9c35548 89e54883  .H.E.H....UH..H.
 ffffffff80102ba0 ec084889 7df8488b 45f84805 00000080  ..H.}.H.E.H.....
 ffffffff80102bb0 c9c35548 89e54883 ec084889 7df8ba00  ..UH..H...H.}...
 ffffffff80102bc0 00008048 8b45f848 01d0c9c3 554889e5  ...H.E.H....UH..
 ffffffff80102bd0 4883ec28 48897dd8 488b45d8 48c1e80c  H..(H.}.H.E.H...
 ffffffff80102be0 488945f8 488b45f8 48c1e805 488945f0  H.E.H.E.H...H.E.
 ffffffff80102bf0 488b45f8 83e01f48 8945e848 8b150ea4  H.E....H.E.H....
 ffffffff80102c00 0100488b 45f048c1 e0024801 d08b1048  ..H.E.H...H....H
 ffffffff80102c10 8b45e8be 01000000 89c1d3e6 89f0f7d0  .E..............
 ffffffff80102c20 89c6488b 0de7a301 00488b45 f048c1e0  ..H......H.E.H..
 ffffffff80102c30 024801c8 21f28910 90c9c355 4889e548  .H..!......UH..H
 ffffffff80102c40 83ec2848 897dd848 8b45d848 c1e80c48  ..(H.}.H.E.H...H
 ffffffff80102c50 8945f848 8b45f848 c1e80548 8945f048  .E.H.E.H...H.E.H
 ffffffff80102c60 8b45f883 e01f4889 45e8488b 159fa301  .E....H.E.H.....
 ffffffff80102c70 00488b45 f048c1e0 024801d0 8b10488b  .H.E.H...H....H.
 ffffffff80102c80 45e8be01 00000089 c1d3e689 f021d089  E............!..
 ffffffff80102c90 c0c9c355 4889e548 81eca000 00004889  ...UH..H......H.
 ffffffff80102ca0 bd68ffff ff4889b5 60ffffff 48c7c710  .h...H..`...H...
 ffffffff80102cb0 521080e8 11170000 48c7054d 43000020  R.......H..MC.. 
 ffffffff80102cc0 00000048 c70542a3 01001870 1080be00  ...H..B....p....
 ffffffff80102cd0 000000bf 01000000 e8580600 00488905  .........X...H..
 ffffffff80102ce0 64a30102 488b055d a3010248 89c7e869  d...H..]...H...i
 ffffffff80102cf0 feffff48 89054ea3 010248c7 45f80000  ...H..N...H.E...
 ffffffff80102d00 00004881 7df8ff03 0000771f 488b1535  ..H.}.....w.H..5
 ffffffff80102d10 a3010248 8b45f848 c1e00248 01d0c700  ...H.E.H...H....
 ffffffff80102d20 ffffffff 488345f8 01ebd748 8b0516a3  ....H.E....H....
 ffffffff80102d30 01024889 05d7a201 0048c705 cc420000  ..H......H...B..
 ffffffff80102d40 00800000 488b8560 ffffff48 8b400848  ....H..`...H.@.H
 ffffffff80102d50 8945c048 c745f000 00000048 8b8560ff  .E.H.E.....H..`.
 ffffffff80102d60 ffff488b 5010488b 45f04839 c20f8690  ..H.P.H.E.H9....
 ffffffff80102d70 02000048 8b55f048 89d04801 c04801d0  ...H.U.H..H..H..
 ffffffff80102d80 48c1e003 4889c248 8b45c048 01d04889  H...H..H.E.H..H.
 ffffffff80102d90 45b8488b 45b8488b 0025ff0f 00004885  E.H.E.H..%....H.
 ffffffff80102da0 c0741948 8b45b848 8b004825 00f0ffff  .t.H.E.H..H%....
 ffffffff80102db0 48050010 00004889 45e8eb0b 488b45b8  H.....H.E...H.E.
 ffffffff80102dc0 488b0048 8945e848 8b45b848 8b400848  H..H.E.H.E.H.@.H
 ffffffff80102dd0 2500f0ff ff488945 e0488b45 b8488b00  %....H.E.H.E.H..
 ffffffff80102de0 25ff0f00 004885c0 740f4883 7de00074  %....H..t.H.}..t
 ffffffff80102df0 0848816d e0001000 0048c745 d8000000  .H.m.....H.E....
 ffffffff80102e00 00488b45 d848c1e0 0c483945 e00f8ee6  .H.E.H...H9E....
 ffffffff80102e10 01000048 8b45d848 c1e00c48 89c2488b  ...H.E.H...H..H.
 ffffffff80102e20 45e84801 d0488945 b0488b45 b048c1e8  E.H..H.E.H.E.H..
 ffffffff80102e30 0c488945 a848817d b0ff0f00 010f86a8  .H.E.H.}........
 ffffffff80102e40 01000048 8b05c641 00004805 00100000  ...H...A..H.....
 ffffffff80102e50 48c1e00c 483945b0 0f822301 0000488b  H...H9E...#...H.
 ffffffff80102e60 05ab4100 0048c1e8 0548c1e0 0248c1e8  ..A..H...H...H..
 ffffffff80102e70 0c488945 a0488b45 a04883c0 01488945  .H.E.H.E.H...H.E
 ffffffff80102e80 98488b45 98be0000 00004889 c7e8a304  .H.E......H.....
 ffffffff80102e90 00004889 05afa101 02488b05 a8a10102  ..H......H......
 ffffffff80102ea0 4889c7e8 b4fcffff 48890599 a1010248  H.......H......H
 ffffffff80102eb0 c745d000 00000048 8b45a048 c1e00c48  .E.....H.E.H...H
 ffffffff80102ec0 c1e80248 3945d073 2f488b15 40a10100  ...H9E.s/H..@...
 ffffffff80102ed0 488b45d0 48c1e002 4801d048 8b0d66a1  H.E.H...H..H..f.
 ffffffff80102ee0 0102488b 55d048c1 e2024801 ca8b0089  ..H.U.H...H.....
 ffffffff80102ef0 02488345 d001ebbf 488b45a0 48c1e00c  .H.E....H.E.H...
 ffffffff80102f00 48c1e802 488945c8 488b4598 48c1e00c  H...H.E.H.E.H...
 ffffffff80102f10 48c1e802 483945c8 731f488b 1527a101  H...H9E.s.H..'..
 ffffffff80102f20 02488b45 c848c1e0 024801d0 c700ffff  .H.E.H...H......
 ffffffff80102f30 ffff4883 45c801eb cf488b05 d0400000  ..H.E....H...@..
 ffffffff80102f40 48050080 00004889 05c34000 00488b05  H.....H...@..H..
 ffffffff80102f50 bca00100 4889c7e8 1ffcffff 48894590  ....H.......H.E.
 ffffffff80102f60 488b05e1 a0010248 8905a2a0 0100488b  H......H......H.
 ffffffff80102f70 55a0488b 45904889 d64889c7 e86ffbff  U.H.E.H..H...o..
 ffffffff80102f80 ff488b45 b88b4010 83f80175 62488b45  .H.E..@....ubH.E
 ffffffff80102f90 a8488945 8848c745 80010000 0048816d  .H.E.H.E.....H.m
 ffffffff80102fa0 88001000 00488b55 80488b45 884801d0  .....H.U.H.E.H..
 ffffffff80102fb0 48898578 ffffff48 8b458848 898570ff  H..x...H.E.H..p.
 ffffffff80102fc0 ffff488b 8578ffff ff483b85 70ffffff  ..H..x...H;.p...
 ffffffff80102fd0 7e1c488b 8570ffff ff4889c7 e8ddfaff  ~.H..p...H......
 ffffffff80102fe0 ff488385 70ffffff 01ebd790 eb019048  .H..p..........H
 ffffffff80102ff0 8345d801 e908feff ff488345 f001e958  .E.......H.E...X
 ffffffff80103000 fdffff48 c7c72c52 1080e8ba 13000090  ...H..,R........
 ffffffff80103010 c9c35548 89e54883 ec2048c7 45f80000  ..UH..H.. H.E...
 ffffffff80103020 0000488b 05e73f00 00483945 f8737a48  ..H...?..H9E.szH
 ffffffff80103030 8b15da9f 0100488b 45f848c1 e0024801  ......H.E.H...H.
 ffffffff80103040 d08b0083 f8ff7457 48c745f0 00000000  ......tWH.E.....
 ffffffff80103050 48837df0 1f774848 8b45f0ba 01000000  H.}..wHH.E......
 ffffffff80103060 89c1d3e2 89d08945 ec488b15 a09f0100  .......E.H......
 ffffffff80103070 488b45f8 48c1e002 4801d08b 002345ec  H.E.H...H....#E.
 ffffffff80103080 85c07514 488b45f8 48c1e005 4889c248  ..u.H.E.H...H..H
 ffffffff80103090 8b45f048 01d0eb16 488345f0 01ebb148  .E.H....H.E....H
 ffffffff801030a0 8345f801 e979ffff ffb80000 0000c9c3  .E...y..........
 ffffffff801030b0 554889e5 4883ec08 48897df8 488b45f8  UH..H...H.}.H.E.
 ffffffff801030c0 4889c7e8 04fbffff 90c9c355 4889e548  H..........UH..H
 ffffffff801030d0 83ec10e8 3affffff 488945f8 48837df8  ....:...H.E.H.}.
 ffffffff801030e0 00751348 c7c73f52 1080e8da 120000b8  .u.H..?R........
 ffffffff801030f0 00000000 eb18488b 45f848c1 e00c4889  ......H.E.H...H.
 ffffffff80103100 c7e8e3f8 ffff488b 45f848c1 e00cc9c3  ......H.E.H.....
 ffffffff80103110 554889e5 4883ec70 48897d98 89f08845  UH..H..pH.}....E
 ffffffff80103120 94807d94 000f8428 01000048 8b05f69e  ..}....(...H....
 ffffffff80103130 01004885 c0750b48 c705e69e 01000010  ..H..u.H........
 ffffffff80103140 0000488b 45984889 45f848c7 45e00000  ..H.E.H.E.H.E...
 ffffffff80103150 000048c7 45e00000 0000488b 05af3e00  ..H.E.....H...>.
 ffffffff80103160 00483945 e00f83dc 00000048 8b059e3e  .H9E.......H...>
 ffffffff80103170 0000488d 90001000 00488b05 a89e0100  ..H......H......
 ffffffff80103180 4839c275 1348c705 989e0100 00100000  H9.u.H..........
 ffffffff80103190 488b4598 488945f8 488b0589 9e010048  H.E.H.E.H......H
 ffffffff801031a0 8d500148 89157e9e 0100482d 00100000  .P.H..~...H-....
 ffffffff801031b0 4889c7e8 a6f8ffff 85c00f94 c084c074  H..............t
 ffffffff801031c0 7948836d f8014883 7df8000f 94c084c0  yH.m..H.}.......
 ffffffff801031d0 7488488b 054f9e01 00482b45 98488945  t.H..O...H+E.H.E
 ffffffff801031e0 d8488b45 98488945 d048816d d8001000  .H.E.H.E.H.m....
 ffffffff801031f0 00488b55 d0488b45 d84801d0 488945c8  .H.U.H.E.H..H.E.
 ffffffff80103200 488b45d8 488945c0 488b45c8 483b45c0  H.E.H.E.H.E.H;E.
 ffffffff80103210 7e13488b 45c04889 c7e870f8 ffff4883  ~.H.E.H...p...H.
 ffffffff80103220 45c001eb e390488b 05fb9d01 00482b45  E.....H......H+E
 ffffffff80103230 9848c1e0 0ce9f900 0000488b 45984889  .H........H.E.H.
 ffffffff80103240 45f8e913 ffffff48 c7c76052 1080e876  E......H..`R...v
 ffffffff80103250 11000048 8b459848 8945f048 c745e800  ...H.E.H.E.H.E..
 ffffffff80103260 10000048 c745e800 10000048 8b059e3d  ...H.E.....H...=
 ffffffff80103270 00004805 00100000 483945e8 0f83a000  ..H.....H9E.....
 ffffffff80103280 0000488b 45e8488d 50014889 55e8482d  ..H.E.H.P.H.U.H-
 ffffffff80103290 00100000 4889c7e8 c2f7ffff 85c00f94  ....H...........
 ffffffff801032a0 c084c074 7048836d f0014883 7df0000f  ...tpH.m..H.}...
 ffffffff801032b0 94c084c0 74b5488b 45e8482b 45984889  ....t.H.E.H+E.H.
 ffffffff801032c0 45b8488b 45984889 45b04881 6db80010  E.H.E.H.E.H.m...
 ffffffff801032d0 0000488b 55b0488b 45b84801 d0488945  ..H.U.H.E.H..H.E
 ffffffff801032e0 a8488b45 b8488945 a0488b45 a8483b45  .H.E.H.E.H.E.H;E
 ffffffff801032f0 a07e1348 8b45a048 89c7e88f f7ffff48  .~.H.E.H.......H
 ffffffff80103300 8345a001 ebe39048 8b45e848 2b459848  .E.....H.E.H+E.H
 ffffffff80103310 c1e00ceb 1e488b45 98488945 f0e949ff  .....H.E.H.E..I.
 ffffffff80103320 ffff48c7 c7985210 80e89b10 0000b800  ..H...R.........
 ffffffff80103330 000000c9 c3554889 e54883ec 3048897d  .....UH..H..0H.}
 ffffffff80103340 d889f088 45d40fb6 55d4488b 45d889d6  ....E...U.H.E...
 ffffffff80103350 4889c7e8 b8fdffff 488945f0 488b45f0  H.......H.E.H.E.
 ffffffff80103360 4889c7e8 f4f7ffff 488945e8 48c745f8  H.......H.E.H.E.
 ffffffff80103370 00000000 488b45d8 48c1e00c 48c1e803  ....H.E.H...H...
 ffffffff80103380 483945f8 7321488b 45f8488d 14c50000  H9E.s!H.E.H.....
 ffffffff80103390 0000488b 45e84801 d048c700 00000000  ..H.E.H..H......
 ffffffff801033a0 488345f8 01ebcd48 8b45f0c9 c3554889  H.E....H.E...UH.
 ffffffff801033b0 e54883ec 7048897d 9848c7c7 ce521080  .H..pH.}.H...R..
 ffffffff801033c0 e8041000 00be0000 0000bf01 000000e8  ................
 ffffffff801033d0 61ffffff 4889c7e8 80f7ffff 4889051d  a...H.......H...
 ffffffff801033e0 ac010248 c745f800 00000048 817df8ff  ...H.E.....H.}..
 ffffffff801033f0 1f000077 71488b45 f848c1e0 0c488945  ...wqH.E.H...H.E
 ffffffff80103400 d0488b4d d0488b45 d0ba0300 00004889  .H.M.H.E......H.
 ffffffff80103410 ce4889c7 e8290500 00488b45 d04889c7  .H...)...H.E.H..
 ffffffff80103420 e837f7ff ff4889c1 488b45d0 ba030000  .7...H..H.E.....
 ffffffff80103430 004889ce 4889c7e8 06050000 488b45d0  .H..H.......H.E.
 ffffffff80103440 4889c7e8 52f7ffff 4889c148 8b45d0ba  H...R...H..H.E..
 ffffffff80103450 03010000 4889ce48 89c7e8e3 04000048  ....H..H.......H
 ffffffff80103460 8345f801 eb8548c7 c7df5210 80e8570f  .E....H...R...W.
 ffffffff80103470 0000488b 0587ab01 024889c7 e8faf6ff  ..H......H......
 ffffffff80103480 ff4889c7 e8ad1600 00488b45 980fb740  .H.......H.E...@
 ffffffff80103490 220fb7d0 488b4598 0fb74024 0fb7c00f  "...H.E...@$....
 ffffffff801034a0 afd0488b 45980fb7 40260fb7 c00fafc2  ..H.E...@&......
 ffffffff801034b0 48984889 45c8488b 4598488b 401848c1  H.H.E.H.E.H.@.H.
 ffffffff801034c0 e80c4889 45f0488b 4598488b 5018488b  ..H.E.H.E.H.P.H.
 ffffffff801034d0 45c84801 d048c1e8 0c4883c0 01483945  E.H..H...H...H9E
 ffffffff801034e0 f0733648 8b45f048 c1e00c48 8945c048  .s6H.E.H...H.E.H
 ffffffff801034f0 8b45c048 89c7e861 f6ffff48 89c1488b  .E.H...a...H..H.
 ffffffff80103500 45c0ba03 00000048 89ce4889 c7e83004  E......H..H...0.
 ffffffff80103510 00004883 45f001eb ad48c7c7 f0521080  ..H.E....H...R..
 ffffffff80103520 e8a40e00 00488b45 98488b40 08488945  .....H.E.H.@.H.E
 ffffffff80103530 b848c745 e8000000 00488b45 98488b40  .H.E.....H.E.H.@
 ffffffff80103540 10483945 e80f83d0 00000048 8b55e848  .H9E.......H.U.H
 ffffffff80103550 89d04801 c04801d0 48c1e003 4889c248  ..H..H..H...H..H
 ffffffff80103560 8b45b848 01d04889 45b0488b 45b0488b  .E.H..H.E.H.E.H.
 ffffffff80103570 00482500 f0ffff48 8945a848 8b45b048  .H%....H.E.H.E.H
 ffffffff80103580 8b4008be 00100000 4889c7e8 2af4ffff  .@......H...*...
 ffffffff80103590 488945e0 488b45b0 488b0025 ff0f0000  H.E.H.E.H..%....
 ffffffff801035a0 4885c074 08488145 e0001000 0048c745  H..t.H.E.....H.E
 ffffffff801035b0 d8000000 00488b45 d848c1e0 0c483945  .....H.E.H...H9E
 ffffffff801035c0 e0764e48 8b45d848 c1e00c48 89c2488b  .vNH.E.H...H..H.
 ffffffff801035d0 45a84801 d0488945 a0b8feff ffff4839  E.H..H.E......H9
 ffffffff801035e0 45a07e25 488b45a0 4889c7e8 6cf5ffff  E.~%H.E.H...l...
 ffffffff801035f0 4889c148 8b45a0ba 03000000 4889ce48  H..H.E......H..H
 ffffffff80103600 89c7e83b 030000eb 01904883 45d801eb  ...;......H.E...
 ffffffff80103610 a4488345 e801e91e ffffff48 8b05dea9  .H.E.......H....
 ffffffff80103620 01024889 c7e80c15 000048c7 c7015310  ..H.......H...S.
 ffffffff80103630 80e8930d 000090c9 c3554889 e54883ec  .........UH..H..
 ffffffff80103640 6048897d a8488b45 a8488b40 08488945  `H.}.H.E.H.@.H.E
 ffffffff80103650 f0488d45 b0be4000 00004889 c7e8b313  .H.E..@...H.....
 ffffffff80103660 0000c745 fc000000 008b45fc 4863d048  ...E......E.Hc.H
 ffffffff80103670 8b45a848 8b401048 39c20f83 21020000  .E.H.@.H9...!...
 ffffffff80103680 48c7c715 531080e8 3d0d0000 8b45fc48  H...S...=....E.H
 ffffffff80103690 63d04889 d04801c0 4801d048 c1e00348  c.H..H..H..H...H
 ffffffff801036a0 89c2488b 45f04801 d08b4010 83f80174  ..H.E.H...@....t
 ffffffff801036b0 0c3d0110 00007413 e9db0100 0048c7c7  .=....t......H..
 ffffffff801036c0 26531080 e8000d00 00eb0d48 c7c73453  &S.........H..4S
 ffffffff801036d0 1080e8f2 0c000090 8b45fc48 63d04889  .........E.Hc.H.
 ffffffff801036e0 d04801c0 4801d048 c1e00348 89c2488b  .H..H..H...H..H.
 ffffffff801036f0 45f04801 d0488b50 08488b05 00990100  E.H..H.P.H......
 ffffffff80103700 4801d048 8905f698 01008b45 fc4863d0  H..H.......E.Hc.
 ffffffff80103710 4889d048 01c04801 d048c1e0 034889c2  H..H..H..H...H..
 ffffffff80103720 488b45f0 4801d048 8b10488d 45b0be78  H.E.H..H..H.E..x
 ffffffff80103730 00000048 89c7e814 13000048 c7c73b53  ...H.......H..;S
 ffffffff80103740 1080e882 0c000048 8d45b048 89c7e876  .......H.E.H...v
 ffffffff80103750 0c000048 8d45b0be 40000000 4889c7e8  ...H.E..@...H...
 ffffffff80103760 b1120000 8b45fc48 63d04889 d04801c0  .....E.Hc.H..H..
 ffffffff80103770 4801d048 c1e00348 89c2488b 45f04801  H..H...H..H.E.H.
 ffffffff80103780 d0488b48 088b45fc 4863d048 89d04801  .H.H..E.Hc.H..H.
 ffffffff80103790 c04801d0 48c1e003 4889c248 8b45f048  .H..H...H..H.E.H
 ffffffff801037a0 01d0488b 00488d14 01488d45 b0be7800  ..H..H...H.E..x.
 ffffffff801037b0 00004889 c7e89512 000048c7 c74c5310  ..H.......H..LS.
 ffffffff801037c0 80e8030c 0000488d 45b04889 c7e8f70b  ......H.E.H.....
 ffffffff801037d0 0000488d 45b0be40 00000048 89c7e832  ..H.E..@...H...2
 ffffffff801037e0 1200008b 45fc4863 d04889d0 4801c048  ....E.Hc.H..H..H
 ffffffff801037f0 01d048c1 e0034889 c2488b45 f04801d0  ..H...H..H.E.H..
 ffffffff80103800 488b5008 488d45b0 be780000 004889c7  H.P.H.E..x...H..
 ffffffff80103810 e83a1200 0048c7c7 5b531080 e8a80b00  .:...H..[S......
 ffffffff80103820 00488d45 b04889c7 e89c0b00 00488d45  .H.E.H.......H.E
 ffffffff80103830 b0be4000 00004889 c7e8d711 00008b45  ..@...H........E
 ffffffff80103840 fc4863d0 4889d048 01c04801 d048c1e0  .Hc.H..H..H..H..
 ffffffff80103850 034889c2 488b45f0 4801d08b 5010488d  .H..H.E.H...P.H.
 ffffffff80103860 45b0be78 00000048 89c7e872 13000048  E..x...H...r...H
 ffffffff80103870 c7c76d53 1080e84e 0b000048 8d45b048  ..mS...N...H.E.H
 ffffffff80103880 89c7e842 0b000048 8d45b0be 40000000  ...B...H.E..@...
 ffffffff80103890 4889c7e8 7d110000 8345fc01 e9c8fdff  H...}....E......
 ffffffff801038a0 ff488d45 b0be4000 00004889 c7e86311  .H.E..@...H...c.
 ffffffff801038b0 0000488b 0d479701 0048ba11 00000100  ..H..G...H......
 ffffffff801038c0 10000048 89c848f7 e24889c8 4829d048  ...H..H..H..H).H
 ffffffff801038d0 d1e84801 d048c1e8 134889c2 488d45b0  ..H..H...H..H.E.
 ffffffff801038e0 be640000 004889c7 e8621100 0048c7c7  .d...H...b...H..
 ffffffff801038f0 7d531080 e8d00a00 00488d45 b04889c7  }S.......H.E.H..
 ffffffff80103900 e8c40a00 0048c7c7 96531080 e8b80a00  .....H...S......
 ffffffff80103910 00488b05 e8960100 488b55a8 4889d648  .H......H.U.H..H
 ffffffff80103920 89c7e86c f3ffff48 c7c7a453 1080e896  ...l...H...S....
 ffffffff80103930 0a000048 8b45a848 89c7e86e faffff90  ...H.E.H...n....
 ffffffff80103940 c9c35548 89e54883 ec604889 7db84889  ..UH..H..`H.}.H.
 ffffffff80103950 75b04889 55a8488b 45b848c1 e82725ff  u.H.U.H.E.H..'%.
 ffffffff80103960 01000048 8945e048 8b45b848 c1e81e25  ...H.E.H.E.H...%
 ffffffff80103970 ff010000 488945d8 488b45b8 48c1e815  ....H.E.H.E.H...
 ffffffff80103980 25ff0100 00488945 d0488b45 b848c1e8  %....H.E.H.E.H..
 ffffffff80103990 0c25ff01 00004889 45c848c7 45f80000  .%....H.E.H.E...
 ffffffff801039a0 0000488b 1557a601 02488b45 e048c1e0  ..H..W...H.E.H..
 ffffffff801039b0 034801d0 488b0083 e0014885 c0742948  .H..H.....H..t)H
 ffffffff801039c0 8b153aa6 0102488b 45e048c1 e0034801  ..:...H.E.H...H.
 ffffffff801039d0 d0488b00 482500f0 ffff4889 c7e87af1  .H..H%....H...z.
 ffffffff801039e0 ffff4889 45f8eb40 be010000 00bf0100  ..H.E..@........
 ffffffff801039f0 0000e83e f9ffff48 89c7e85d f1ffff48  ...>...H...]...H
 ffffffff80103a00 8945f848 8b45f848 89c7e86c f1ffff48  .E.H.E.H...l...H
 ffffffff80103a10 8b0deaa5 0102488b 55e048c1 e2034801  ......H.U.H...H.
 ffffffff80103a20 ca4883c8 07488902 48c745f0 00000000  .H...H..H.E.....
 ffffffff80103a30 488b45d8 488d14c5 00000000 488b45f8  H.E.H.......H.E.
 ffffffff80103a40 4801d048 8b0083e0 014885c0 742a488b  H..H.....H..t*H.
 ffffffff80103a50 45d8488d 14c50000 0000488b 45f84801  E.H.......H.E.H.
 ffffffff80103a60 d0488b00 482500f0 ffff4889 c7e8eaf0  .H..H%....H.....
 ffffffff80103a70 ffff4889 45f0eb41 be010000 00bf0100  ..H.E..A........
 ffffffff80103a80 0000e8ae f8ffff48 89c7e8cd f0ffff48  .......H.......H
 ffffffff80103a90 8945f048 8b45f048 89c7e8dc f0ffff48  .E.H.E.H.......H
 ffffffff80103aa0 8b55d848 8d0cd500 00000048 8b55f848  .U.H.......H.U.H
 ffffffff80103ab0 01ca4883 c8074889 0248c745 e8000000  ..H...H..H.E....
 ffffffff80103ac0 00488b45 d0488d14 c5000000 00488b45  .H.E.H.......H.E
 ffffffff80103ad0 f84801d0 488b0083 e0014885 c0742a48  .H..H.....H..t*H
 ffffffff80103ae0 8b45d048 8d14c500 00000048 8b45f048  .E.H.......H.E.H
 ffffffff80103af0 01d0488b 00482500 f0ffff48 89c7e859  ..H..H%....H...Y
 ffffffff80103b00 f0ffff48 8945e8eb 41be0100 0000bf01  ...H.E..A.......
 ffffffff80103b10 000000e8 1df8ffff 4889c7e8 3cf0ffff  ........H...<...
 ffffffff80103b20 488945e8 488b45e8 4889c7e8 4bf0ffff  H.E.H.E.H...K...
 ffffffff80103b30 488b55d0 488d0cd5 00000000 488b55f0  H.U.H.......H.U.
 ffffffff80103b40 4801ca48 83c80748 8902488b 45c8488d  H..H...H..H.E.H.
 ffffffff80103b50 14c50000 0000488b 45e84801 c2488b45  ......H.E.H..H.E
 ffffffff80103b60 b0480b45 a8488902 90c9c355 4889e5be  .H.E.H.....UH...
 ffffffff80103b70 11000000 bf200000 00e83b11 0000eb00  ..... ....;.....
 ffffffff80103b80 eb00be11 000000bf a0000000 e8281100  .............(..
 ffffffff80103b90 00eb00eb 00be2000 0000bf21 000000e8  ...... ....!....
 ffffffff80103ba0 15110000 eb00eb00 be280000 00bfa100  .........(......
 ffffffff80103bb0 0000e802 110000eb 00eb00be 04000000  ................
 ffffffff80103bc0 bf210000 00e8ef10 0000eb00 eb00be02  .!..............
 ffffffff80103bd0 000000bf a1000000 e8dc1000 00eb00eb  ................
 ffffffff80103be0 00be0100 0000bf21 000000e8 c9100000  .......!........
 ffffffff80103bf0 eb00eb00 be010000 00bfa100 0000e8b6  ................
 ffffffff80103c00 100000eb 00eb00be 00000000 bf210000  .............!..
 ffffffff80103c10 00e8a310 0000be00 000000bf a1000000  ................
 ffffffff80103c20 e8941000 00905dc3 554889e5 4883ec10  ......].UH..H...
 ffffffff80103c30 48c7c7b3 531080e8 8d070000 48c7c7bf  H...S.......H...
 ffffffff80103c40 531080e8 81070000 c745fc00 00000083  S........E......
 ffffffff80103c50 7dfc4f0f 8fc00000 008b45fc 4898488b  }.O.......E.H.H.
 ffffffff80103c60 04c54071 108089c6 8b45fc48 98488b04  ..@q.....E.H.H..
 ffffffff80103c70 c5407110 8048c1e8 1089c18b 45fc4898  .@q..H......E.H.
 ffffffff80103c80 488b04c5 40711080 48c1e820 89c28b45  H...@q..H.. ...E
 ffffffff80103c90 fc489848 c1e00448 0540e111 82668930  .H.H...H.@...f.0
 ffffffff80103ca0 8b45fc48 9848c1e0 04480542 e1118266  .E.H.H...H.B...f
 ffffffff80103cb0 c7000800 8b45fc48 9848c1e0 04480544  .....E.H.H...H.D
 ffffffff80103cc0 e11182c6 00008b45 fc489848 c1e00448  .......E.H.H...H
 ffffffff80103cd0 0545e111 82c6008e 8b45fc48 9848c1e0  .E.......E.H.H..
 ffffffff80103ce0 04480546 e1118266 89088b45 fc489848  .H.F...f...E.H.H
 ffffffff80103cf0 c1e00448 0548e111 8289108b 45fc4898  ...H.H......E.H.
 ffffffff80103d00 48c1e004 48054ce1 1182c700 00000000  H...H.L.........
 ffffffff80103d10 8345fc01 e936ffff ff48c7c7 d1531080  .E...6...H...S..
 ffffffff80103d20 e8a40600 000f011d f4320000 48c7c7e7  .........2..H...
 ffffffff80103d30 531080e8 91060000 e82efeff ff48c7c7  S............H..
 ffffffff80103d40 f3531080 e8800600 0048c7c7 04541080  .S.......H...T..
 ffffffff80103d50 e8740600 0048c7c7 15541080 e8680600  .t...H...T...h..
 ffffffff80103d60 0090c9c3 554889e5 4883ec10 48897df8  ....UH..H...H.}.
 ffffffff80103d70 488975f0 be400000 0048c7c7 20e01182  H.u..@...H.. ...
 ffffffff80103d80 e8900c00 00488b45 f84889c2 be780000  .....H.E.H...x..
 ffffffff80103d90 0048c7c7 20e01182 e8b20c00 0048c7c7  .H.. ........H..
 ffffffff80103da0 6c551080 e87e0600 00488b45 f04889c7  lU...~...H.E.H..
 ffffffff80103db0 e8720600 0048c7c7 70551080 e8660600  .r...H..pU...f..
 ffffffff80103dc0 0048c7c7 74551080 e85a0600 0048c7c7  .H..tU...Z...H..
 ffffffff80103dd0 20e01182 e84e0600 0090c9c3 554889e5   ....N......UH..
 ffffffff80103de0 4883ec20 48897de8 48c7c777 551080e8  H.. H.}.H..wU...
 ffffffff80103df0 d5050000 48c7c78d 551080e8 c9050000  ....H...U.......
 ffffffff80103e00 488b45e8 488b8088 00000048 c7c6a455  H.E.H......H...U
 ffffffff80103e10 10804889 c7e84aff ffff488b 45e8488b  ..H...J...H.E.H.
 ffffffff80103e20 80a00000 0048c7c6 a7551080 4889c7e8  .....H...U..H...
 ffffffff80103e30 30ffffff 48c7c7aa 551080e8 89050000  0...H...U.......
 ffffffff80103e40 48c7c7ac 551080e8 7d050000 488b45e8  H...U...}...H.E.
 ffffffff80103e50 488b4038 48c7c6bc 55108048 89c7e801  H.@8H...U..H....
 ffffffff80103e60 ffffff48 8b45e848 8b403048 c7c6bf55  ...H.E.H.@0H...U
 ffffffff80103e70 10804889 c7e8eafe ffff488b 45e8488b  ..H.......H.E.H.
 ffffffff80103e80 402848c7 c6c25510 804889c7 e8d3feff  @(H...U..H......
 ffffffff80103e90 ff48c7c7 aa551080 e82c0500 00488b45  .H...U...,...H.E
 ffffffff80103ea0 e8488b40 2048c7c6 c6551080 4889c7e8  .H.@ H...U..H...
 ffffffff80103eb0 b0feffff 488b45e8 488b4018 48c7c6ca  ....H.E.H.@.H...
 ffffffff80103ec0 55108048 89c7e899 feffff48 8b45e848  U..H.......H.E.H
 ffffffff80103ed0 8b401048 c7c6ce55 10804889 c7e882fe  .@.H...U..H.....
 ffffffff80103ee0 ffff48c7 c7aa5510 80e8db04 0000488b  ..H...U.......H.
 ffffffff80103ef0 45e8488b 400848c7 c6d25510 804889c7  E.H.@.H...U..H..
 ffffffff80103f00 e85ffeff ff488b45 e8488b00 48c7c6d6  ._...H.E.H..H...
 ffffffff80103f10 55108048 89c7e849 feffff48 c7c7aa55  U..H...I...H...U
 ffffffff80103f20 1080e8a2 04000048 c7c7da55 1080e896  .......H...U....
 ffffffff80103f30 04000048 8b45e848 8b809800 000048c7  ...H.E.H......H.
 ffffffff80103f40 c6ef5510 804889c7 e817feff ff488b45  ..U..H.......H.E
 ffffffff80103f50 e8488b40 4048c7c6 f3551080 4889c7e8  .H.@@H...U..H...
 ffffffff80103f60 00feffff 488b45e8 488b4048 48c7c6f7  ....H.E.H.@HH...
 ffffffff80103f70 55108048 89c7e8e9 fdffff48 c7c7aa55  U..H.......H...U
 ffffffff80103f80 1080e842 04000048 8b45e848 8b405048  ...B...H.E.H.@PH
 ffffffff80103f90 c7c6fb55 10804889 c7e8c6fd ffff488b  ...U..H.......H.
 ffffffff80103fa0 45e8488b 405848c7 c6ff5510 804889c7  E.H.@XH...U..H..
 ffffffff80103fb0 e8affdff ff488b45 e8488b40 6048c7c6  .....H.E.H.@`H..
 ffffffff80103fc0 03561080 4889c7e8 98fdffff 48c7c7aa  .V..H.......H...
 ffffffff80103fd0 551080e8 f1030000 488b45e8 488b4068  U.......H.E.H.@h
 ffffffff80103fe0 48c7c607 56108048 89c7e875 fdffff48  H...V..H...u...H
 ffffffff80103ff0 8b45e848 8b407048 c7c60b56 10804889  .E.H.@pH...V..H.
 ffffffff80104000 c7e85efd ffff48c7 c7aa5510 80e8b703  ..^...H...U.....
 ffffffff80104010 000048c7 c70f5610 80e8ab03 0000488b  ..H...V.......H.
 ffffffff80104020 45e88b40 7889c048 c7c62256 10804889  E..@x..H.."V..H.
 ffffffff80104030 c7e82efd ffff488b 45e88b40 7c89c048  ......H.E..@|..H
 ffffffff80104040 c7c62d56 10804889 c7e816fd ffff48c7  ..-V..H.......H.
 ffffffff80104050 c7aa5510 80e86f03 0000488b 45e8488b  ..U...o...H.E.H.
 ffffffff80104060 80800000 0048c7c6 34561080 4889c7e8  .....H..4V..H...
 ffffffff80104070 f0fcffff 488b45e8 488b8090 00000048  ....H.E.H......H
 ffffffff80104080 c7c63856 10804889 c7e8d6fc ffff48c7  ..8V..H.......H.
 ffffffff80104090 c7aa5510 80e82f03 000048c7 c73f5610  ..U.../...H..?V.
 ffffffff801040a0 80e82303 00000f22 d0488945 f8488b45  ..#....".H.E.H.E
 ffffffff801040b0 f848c7c6 50561080 4889c7e8 a4fcffff  .H..PV..H.......
 ffffffff801040c0 90c9c355 4889e548 83ec1089 7dfc837d  ...UH..H....}..}
 ffffffff801040d0 fc277e0f be200000 00bfa000 0000e8d6  .'~.. ..........
 ffffffff801040e0 0b0000be 20000000 bf200000 00e8c70b  .... .... ......
 ffffffff801040f0 000090c9 c3554889 e54883ec 08897dfc  .....UH..H....}.
 ffffffff80104100 837dfc1f 7e07b800 000000eb 2a837dfc  .}..~.......*.}.
 ffffffff80104110 01741883 7dfc0f74 12837dfc 147e0683  .t..}..t..}..~..
 ffffffff80104120 7dfc1d7e 06837dfc 1f7507b8 00000000  }..~..}..u......
 ffffffff80104130 eb05b801 000000c9 c3554889 e54883ec  .........UH..H..
 ffffffff80104140 0848897d f8488b45 f88b15d1 9f01028d  .H.}.H.E........
 ffffffff80104150 4a01890d c89f0102 89d24889 04d5a0e0  J.........H.....
 ffffffff80104160 11828b05 b89f0102 83f80f75 0ac705a9  ...........u....
 ffffffff80104170 9f010200 00000090 c9c35548 89e54883  ..........UH..H.
 ffffffff80104180 ec204889 7de8488b 45e8488b 80800000  . H.}.H.E.H.....
 ffffffff80104190 004889c7 e8a0ffff ff488b45 e88b407c  .H.......H.E..@|
 ffffffff801041a0 89c7e84e ffffff84 c00f845e 010000c7  ...N.......^....
 ffffffff801041b0 45fc0000 0000488b 45e88b50 7c89d0c1  E.....H.E..P|...
 ffffffff801041c0 e00201d0 c1e00689 c28b45fc 39c27614  ..........E.9.v.
 ffffffff801041d0 488b45e8 8b407c89 c7e817ff ffff8345  H.E..@|........E
 ffffffff801041e0 fc01ebd2 be400000 0048c7c7 60e01182  .....@...H..`...
 ffffffff801041f0 e8200800 00488b45 e88b407c 89c2be64  . ...H.E..@|...d
 ffffffff80104200 00000048 c7c760e0 1182e8cb 0a000048  ...H..`........H
 ffffffff80104210 c7c75456 1080e8ae 01000048 c7c760e0  ..TV.......H..`.
 ffffffff80104220 1182e8a2 01000048 c7c75956 1080e896  .......H..YV....
 ffffffff80104230 01000048 8b45e88b 407c89c0 488b04c5  ...H.E..@|..H...
 ffffffff80104240 40701080 4889c7e8 7d010000 488b45e8  @p..H...}...H.E.
 ffffffff80104250 4889c7e8 84fbffff be400000 0048c7c7  H........@...H..
 ffffffff80104260 60e01182 e8ac0700 00488b45 e8488b80  `........H.E.H..
 ffffffff80104270 80000000 4889c2be 78000000 48c7c760  ....H...x...H..`
 ffffffff80104280 e01182e8 c7070000 48c7c765 561080e8  ........H..eV...
 ffffffff80104290 35010000 48c7c76d 561080e8 29010000  5...H..mV...)...
 ffffffff801042a0 48c7c760 e01182e8 1d010000 48c745f0  H..`........H.E.
 ffffffff801042b0 00000000 48837df0 0f7750be 40000000  ....H.}..wP.@...
 ffffffff801042c0 48c7c760 e01182e8 49070000 488b45f0  H..`....I...H.E.
 ffffffff801042d0 488b04c5 a0e01182 4889c2be 78000000  H.......H...x...
 ffffffff801042e0 48c7c760 e01182e8 63070000 48c7c76d  H..`....c...H..m
 ffffffff801042f0 561080e8 d1000000 48c7c760 e01182e8  V.......H..`....
 ffffffff80104300 c5000000 488345f0 01eba9eb fe488b45  ....H.E......H.E
 ffffffff80104310 e88b407c 83f82075 19e84803 00004889  ..@|.. u..H...H.
 ffffffff80104320 c7e8d202 0000488b 45e84889 c7e85fd7  ......H.E.H..._.
 ffffffff80104330 ffff488b 45e88b40 7c89c7e8 83fdffff  ..H.E..@|.......
 ffffffff80104340 90c9c355 4889e548 83ec1089 7dfc89f0  ...UH..H....}...
 ffffffff80104350 8845f88b 45fc89c7 e8b60a00 000fb645  .E..E..........E
 ffffffff80104360 f80fb6d0 8b45fc0f b7c089d6 89c7e846  .....E.........F
 ffffffff80104370 09000090 c9c35548 89e54883 ec20897d  ......UH..H.. .}
 ffffffff80104380 ec488975 e08955e8 488b45e0 488945f0  .H.u..U.H.E.H.E.
 ffffffff80104390 c745fc00 0000008b 45fc3b45 e87d258b  .E......E.;E.}%.
 ffffffff801043a0 45fc4863 d0488b45 f04801d0 0fb6000f  E.Hc.H.E.H......
 ffffffff801043b0 bed08b45 ec89d689 c7e885ff ffff8345  ...E...........E
 ffffffff801043c0 fc01ebd3 8b45e8c9 c3554889 e54883ec  .....E...UH..H..
 ffffffff801043d0 2048897d e8c745fc 00000000 8b45fc48   H.}..E......E.H
 ffffffff801043e0 63d0488b 45e84801 d00fb600 84c07425  c.H.E.H.......t%
 ffffffff801043f0 8b45fc48 63d0488b 45e84801 d00fb600  .E.Hc.H.E.H.....
 ffffffff80104400 0fbec089 c6bff803 0000e834 ffffff83  ...........4....
 ffffffff80104410 45fc01eb c7be0a00 0000bff8 030000e8  E...............
 ffffffff80104420 1fffffff 90c9c355 4889e548 83ec2048  .......UH..H.. H
 ffffffff80104430 897de8c7 45fc0000 00008b45 fc4863d0  .}..E......E.Hc.
 ffffffff80104440 488b45e8 4801d00f b60084c0 74258b45  H.E.H.......t%.E
 ffffffff80104450 fc4863d0 488b45e8 4801d00f b6000fbe  .Hc.H.E.H.......
 ffffffff80104460 c089c6bf f8030000 e8d6feff ff8345fc  ..............E.
 ffffffff80104470 01ebc790 c9c35548 89e54883 ec10897d  ......UH..H....}
 ffffffff80104480 fc8b45fc 83c0020f b7c0be00 00000089  ..E.............
 ffffffff80104490 c7e82308 00008b45 fc83c003 0fb7c0be  ..#....E........
 ffffffff801044a0 80000000 89c7e80e 0800008b 45fc0fb7  ............E...
 ffffffff801044b0 c0be0300 000089c7 e8fc0700 008b45fc  ..............E.
 ffffffff801044c0 83c0010f b7c0be00 00000089 c7e8e707  ................
 ffffffff801044d0 00008b45 fc83c003 0fb7c0be 03000000  ...E............
 ffffffff801044e0 89c7e8d2 0700008b 45fc83c0 020fb7c0  ........E.......
 ffffffff801044f0 bec70000 0089c7e8 bd070000 8b45fc83  .............E..
 ffffffff80104500 c0040fb7 c0be0b00 000089c7 e8a80700  ................
 ffffffff80104510 0090c9c3 554889e5 4883ec08 48897df8  ....UH..H...H.}.
 ffffffff80104520 90c9c390 554889e5 4883ec40 48897dc8  ....UH..H..@H.}.
 ffffffff80104530 48c745d0 00000000 48c745d8 00000000  H.E.....H.E.....
 ffffffff80104540 48c745e0 00000000 48c745e8 00000000  H.E.....H.E.....
 ffffffff80104550 c745f000 00000048 8d45d048 89c7e82b  .E.....H.E.H...+
 ffffffff80104560 09000048 8b45c848 8b55d048 8910488b  ...H.E.H.U.H..H.
 ffffffff80104570 55d84889 5008488b 55e04889 5010488b  U.H.P.H.U.H.P.H.
 ffffffff80104580 55e84889 50188b55 f0895020 48c7c773  U.H.P..U..P H..s
 ffffffff80104590 561080e8 31feffff 66c745fe a904be36  V...1...f.E....6
 ffffffff801045a0 000000bf 43000000 e80c0700 000fb745  ....C..........E
 ffffffff801045b0 fe8845fd e8a90800 000fb645 fd89c6bf  ..E........E....
 ffffffff801045c0 40000000 e8f00600 00e89408 00000fb7  @...............
 ffffffff801045d0 45fe66c1 e8088845 fc0fb645 fc89c6bf  E.f....E...E....
 ffffffff801045e0 40000000 e8d00600 0048c7c7 7f561080  @........H...V..
 ffffffff801045f0 e8d4fdff ff90c9c3 554889e5 4883ec10  ........UH..H...
 ffffffff80104600 48897df8 488b45f8 488b4018 488d5001  H.}.H.E.H.@.H.P.
 ffffffff80104610 488b45f8 48895018 488b45f8 8b40208d  H.E.H.P.H.E..@ .
 ffffffff80104620 5001488b 45f88950 20488b45 f88b4020  P.H.E..P H.E..@ 
 ffffffff80104630 3de80300 007e2b48 c7c78a56 1080e886  =....~+H...V....
 ffffffff80104640 fdffff48 8b45f8c7 40200000 0000488b  ...H.E..@ ....H.
 ffffffff80104650 45f8488b 4010488d 5001488b 45f84889  E.H.@.H.P.H.E.H.
 ffffffff80104660 501090c9 c3905548 89e548c7 c060f111  P.....UH..H..`..
 ffffffff80104670 825dc366 2e0f1f84 00000000 000f1f00  .].f............
 ffffffff80104680 488b4424 040f0118 c3fafc50 53515256  H.D$.......PSQRV
 ffffffff80104690 57554150 41514152 41534154 41554156  WUAPAQARASATAUAV
 ffffffff801046a0 41574889 e7e8d0fa ffff415f 415e415d  AWH.......A_A^A]
 ffffffff801046b0 415c415b 415a4159 41585d5f 5e5a595b  A\A[AZAYAX]_^ZY[
 ffffffff801046c0 584883c4 08fb48cf 6a00c744 24040000  XH....H.j..D$...
 ffffffff801046d0 0000ebb5 6a00c744 24040100 0000eba9  ....j..D$.......
 ffffffff801046e0 6a00c744 24040200 0000eb9d 6a00c744  j..D$.......j..D
 ffffffff801046f0 24040300 0000eb91 6a00c744 24040400  $.......j..D$...
 ffffffff80104700 0000eb85 6a00c744 24040500 0000e976  ....j..D$......v
 ffffffff80104710 ffffff6a 00c74424 04060000 00e967ff  ...j..D$......g.
 ffffffff80104720 ffff6a00 c7442404 07000000 e958ffff  ..j..D$......X..
 ffffffff80104730 ffc74424 04080000 00e94bff ffff6a00  ..D$......K...j.
 ffffffff80104740 c7442404 09000000 e93cffff ffc74424  .D$......<....D$
 ffffffff80104750 040a0000 00e92fff ffffc744 24040b00  ....../....D$...
 ffffffff80104760 0000e922 ffffffc7 4424040c 000000e9  ..."....D$......
 ffffffff80104770 15ffffff c7442404 0d000000 e908ffff  .....D$.........
 ffffffff80104780 ffc74424 040e0000 00e9fbfe ffff6a00  ..D$..........j.
 ffffffff80104790 c7442404 0f000000 e9ecfeff ff6a00c7  .D$..........j..
 ffffffff801047a0 44240410 000000e9 ddfeffff 6a00c744  D$..........j..D
 ffffffff801047b0 24041100 0000e9ce feffff6a 00c74424  $..........j..D$
 ffffffff801047c0 04120000 00e9bffe ffff6a00 c7442404  ..........j..D$.
 ffffffff801047d0 13000000 e9b0feff ff6a00c7 44240414  .........j..D$..
 ffffffff801047e0 000000e9 a1feffff 6a00c744 24041500  ........j..D$...
 ffffffff801047f0 0000e992 feffff6a 00c74424 04160000  .......j..D$....
 ffffffff80104800 00e983fe ffff6a00 c7442404 17000000  ......j..D$.....
 ffffffff80104810 e974feff ff6a00c7 44240418 000000e9  .t...j..D$......
 ffffffff80104820 65feffff 6a00c744 24041900 0000e956  e...j..D$......V
 ffffffff80104830 feffff6a 00c74424 041a0000 00e947fe  ...j..D$......G.
 ffffffff80104840 ffff6a00 c7442404 1b000000 e938feff  ..j..D$......8..
 ffffffff80104850 ff6a00c7 4424041c 000000e9 29feffff  .j..D$......)...
 ffffffff80104860 6a00c744 24041d00 0000e91a feffffc7  j..D$...........
 ffffffff80104870 4424041e 000000e9 0dfeffff 6a00c744  D$..........j..D
 ffffffff80104880 24041f00 0000e9fe fdfffffa 50535152  $...........PSQR
 ffffffff80104890 56575541 50415141 52415341 54415541  VWUAPAQARASATAUA
 ffffffff801048a0 564157e8 72d2ffff 488920e8 95d2ffff  VAW.r...H. .....
 ffffffff801048b0 488b2048 89c7e8c1 d2ffffb0 20e62041  H. H........ . A
 ffffffff801048c0 5f415e41 5d415c41 5b415a41 5941585d  _A^A]A\A[AZAYAX]
 ffffffff801048d0 5f5e5a59 5b58fb48 cf6a00c7 44240421  _^ZY[X.H.j..D$.!
 ffffffff801048e0 000000e9 a1fdffff 6a00c744 24042200  ........j..D$.".
 ffffffff801048f0 0000e992 fdffff6a 00c74424 04230000  .......j..D$.#..
 ffffffff80104900 00e983fd ffff6a00 c7442404 24000000  ......j..D$.$...
 ffffffff80104910 e974fdff ff6a00c7 44240425 000000e9  .t...j..D$.%....
 ffffffff80104920 65fdffff 6a00c744 24042600 0000e956  e...j..D$.&....V
 ffffffff80104930 fdffff6a 00c74424 04270000 00e947fd  ...j..D$.'....G.
 ffffffff80104940 ffff6a00 c7442404 28000000 e938fdff  ..j..D$.(....8..
 ffffffff80104950 ff6a00c7 44240429 000000e9 29fdffff  .j..D$.)....)...
 ffffffff80104960 6a00c744 24042a00 0000e91a fdffff6a  j..D$.*........j
 ffffffff80104970 00c74424 042b0000 00e90bfd ffff6a00  ..D$.+........j.
 ffffffff80104980 c7442404 2c000000 e9fcfcff ff6a00c7  .D$.,........j..
 ffffffff80104990 4424042d 000000e9 edfcffff 6a00c744  D$.-........j..D
 ffffffff801049a0 24042e00 0000e9de fcffff6a 00c74424  $..........j..D$
 ffffffff801049b0 042f0000 00e9cffc ffff6a00 c7442404  ./........j..D$.
 ffffffff801049c0 32000000 e9c0fcff ff6a00c7 4424047f  2........j..D$..
 ffffffff801049d0 000000e9 b1fcffff 0f1f8400 00000000  ................
 ffffffff801049e0 554889e5 4889f80f 00d85dc3 0f1f4000  UH..H.....]...@.
 ffffffff801049f0 554889e5 0f011766 b810008e d08ed88e  UH.....f........
 ffffffff80104a00 c08ee08e e848b813 4a1080ff ffffff56  .....H..J......V
 ffffffff80104a10 5048cb5d c3554889 e54883ec 2048897d  PH.].UH..H.. H.}
 ffffffff80104a20 e8488975 e048c745 f8000000 00488b45  .H.u.H.E.....H.E
 ffffffff80104a30 f8483b45 e0731548 8b55e848 8b45f848  .H;E.s.H.U.H.E.H
 ffffffff80104a40 01d0c600 00488345 f801ebe1 90c9c355  .....H.E.......U
 ffffffff80104a50 4889e548 83ec5848 897db889 75b44889  H..H..XH.}..u.H.
 ffffffff80104a60 55a8488b 45b84889 45f8488b 45a84889  U.H.E.H.E.H.E.H.
 ffffffff80104a70 45e048c7 45d80a00 0000837d b4787508  E.H.E......}.xu.
 ffffffff80104a80 48c745d8 10000000 488b45e0 ba000000  H.E.....H.E.....
 ffffffff80104a90 0048f775 d8488955 d048837d d009770b  .H.u.H.U.H.}..w.
 ffffffff80104aa0 488b45d0 83c03089 c1eb0948 8b45d083  H.E...0....H.E..
 ffffffff80104ab0 c05789c1 488b45f8 488d5001 488955f8  .W..H.E.H.P.H.U.
 ffffffff80104ac0 8808488b 45e0ba00 00000048 f775d848  ..H.E......H.u.H
 ffffffff80104ad0 8945e048 837de000 0f95c084 c07402eb  .E.H.}.......t..
 ffffffff80104ae0 a7488b45 f8c60000 488b45b8 488945f0  .H.E....H.E.H.E.
 ffffffff80104af0 488b45f8 4883e801 488945e8 488b45f0  H.E.H...H.E.H.E.
 ffffffff80104b00 483b45e8 732d488b 45f00fb6 008845cf  H;E.s-H.E.....E.
 ffffffff80104b10 488b45e8 0fb61048 8b45f088 10488b45  H.E....H.E...H.E
 ffffffff80104b20 e80fb655 cf881048 8345f001 48836de8  ...U...H.E..H.m.
 ffffffff80104b30 01ebc990 c9c35548 89e54883 ec084889  ......UH..H...H.
 ffffffff80104b40 7df8488b 45f80f20 d890c9c3 554889e5  }.H.E.. ....UH..
 ffffffff80104b50 4883ec08 48897df8 488b45f8 48c70000  H...H.}.H.E.H...
 ffffffff80104b60 00000048 8b45f848 c7400c00 00000048  ...H.E.H.@.....H
 ffffffff80104b70 8b45f848 c7801410 00000000 000090c9  .E.H............
 ffffffff80104b80 c3554889 e5b80000 00005dc3 554889e5  .UH.......].UH..
 ffffffff80104b90 b8000000 005dc355 4889e548 83ec1089  .....].UH..H....
 ffffffff80104ba0 7dfc8b45 fc4898be 01000000 4889c7e8  }..E.H......H...
 ffffffff80104bb0 5ce5ffff c9c35548 89e54883 ec104889  \.....UH..H...H.
 ffffffff80104bc0 7df88975 f48b45f4 4863d048 8b45f848  }..u..E.Hc.H.E.H
 ffffffff80104bd0 89d64889 c7e816df ffffb800 000000c9  ..H.............
 ffffffff80104be0 c3554889 e54883ec 4048897d c88975c4  .UH..H..@H.}..u.
 ffffffff80104bf0 8955c048 8b45c848 8945f88b 45c08945  .U.H.E.H.E..E..E
 ffffffff80104c00 e4c745e0 0a000000 837dc478 7507c745  ..E......}.xu..E
 ffffffff80104c10 e0100000 008b45e4 ba000000 00f775e0  ......E.......u.
 ffffffff80104c20 8955dc83 7ddc0977 0a8b45dc 83c03089  .U..}..w..E...0.
 ffffffff80104c30 c1eb088b 45dc83c0 5789c148 8b45f848  ....E...W..H.E.H
 ffffffff80104c40 8d500148 8955f888 088b45e4 ba000000  .P.H.U....E.....
 ffffffff80104c50 00f775e0 8945e483 7de4000f 95c084c0  ..u..E..}.......
 ffffffff80104c60 7402ebb1 488b45f8 c6000048 8b45c848  t...H.E....H.E.H
 ffffffff80104c70 8945f048 8b45f848 83e80148 8945e848  .E.H.E.H...H.E.H
 ffffffff80104c80 8b45f048 3b45e873 2d488b45 f00fb600  .E.H;E.s-H.E....
 ffffffff80104c90 8845db48 8b45e80f b610488b 45f08810  .E.H.E....H.E...
 ffffffff80104ca0 488b45e8 0fb655db 88104883 45f00148  H.E...U...H.E..H
 ffffffff80104cb0 836de801 ebc990c9 c3554889 e54883ec  .m.......UH..H..
 ffffffff80104cc0 0889f889 f2668945 fc89d088 45f80fb6  .....f.E....E...
 ffffffff80104cd0 45f80fb7 55fcee90 c9c35548 89e54883  E...U.....UH..H.
 ffffffff80104ce0 ec404889 7dc88975 c48955c0 488b45c8  .@H.}..u..U.H.E.
 ffffffff80104cf0 488945f8 8b45c048 98488945 e0c745dc  H.E..E.H.H.E..E.
 ffffffff80104d00 0a000000 837dc464 7527837d c0007921  .....}.du'.}..y!
 ffffffff80104d10 488b45f8 488d5001 488955f8 c6002d48  H.E.H.P.H.U...-H
 ffffffff80104d20 8345c801 8b45c0f7 d8489848 8945e0eb  .E...E...H.H.E..
 ffffffff80104d30 0d837dc4 787507c7 45dc1000 00008b45  ..}.xu..E......E
 ffffffff80104d40 dc4863c8 488b45e0 ba000000 0048f7f1  .Hc.H.E......H..
 ffffffff80104d50 4889d089 45d8837d d8097f0a 8b45d883  H...E..}.....E..
 ffffffff80104d60 c03089c1 eb088b45 d883c057 89c1488b  .0.....E...W..H.
 ffffffff80104d70 45f8488d 50014889 55f88808 8b45dc48  E.H.P.H.U....E.H
 ffffffff80104d80 63f0488b 45e0ba00 00000048 f7f64889  c.H.E......H..H.
 ffffffff80104d90 45e04883 7de0000f 95c084c0 7402eb9e  E.H.}.......t...
 ffffffff80104da0 488b45f8 c6000048 8b45c848 8945f048  H.E....H.E.H.E.H
 ffffffff80104db0 8b45f848 83e80148 8945e848 8b45f048  .E.H...H.E.H.E.H
 ffffffff80104dc0 3b45e873 2d488b45 f00fb600 8845d748  ;E.s-H.E.....E.H
 ffffffff80104dd0 8b45e80f b610488b 45f08810 488b45e8  .E....H.E...H.E.
 ffffffff80104de0 0fb655d7 88104883 45f00148 836de801  ..U...H.E..H.m..
 ffffffff80104df0 ebc990c9 c3554889 e54883ec 1889f866  .....UH..H.....f
 ffffffff80104e00 8945ec0f b745ec89 c2ec8845 ff0fb645  .E...E.....E...E
 ffffffff80104e10 ffc9c355 4889e548 83ec1089 7dfc8b45  ...UH..H....}..E
 ffffffff80104e20 fc83c005 0fb7c089 c7e8c7ff ffff0fb6  ................
 ffffffff80104e30 c083e020 85c00f94 c084c074 02ebdf90  ... .......t....
 ffffffff80104e40 c9c35548 89e54883 ec1889f8 668945ec  ..UH..H.....f.E.
 ffffffff80104e50 0fb745ec 89c266ed 668945fe 0fb745fe  ..E...f.f.E...E.
 ffffffff80104e60 c9c35548 89e54883 ec10c745 fc000000  ..UH..H....E....
 ffffffff80104e70 00837dfc 277f138b 45fc0fb7 c089c7e8  ..}.'...E.......
 ffffffff80104e80 beffffff 8345fc01 ebe790c9 c3905548  .....E........UH
 ffffffff80104e90 89e54883 ec084889 7df8488b 45f848c7  ..H...H.}.H.E.H.
 ffffffff80104ea0 00000000 00488b45 f848c740 08000000  .....H.E.H.@....
 ffffffff80104eb0 00488b45 f848c740 10000000 00488b45  .H.E.H.@.....H.E
 ffffffff80104ec0 f848c740 18000000 00488b45 f8c74020  .H.@.....H.E..@ 
 ffffffff80104ed0 00000000 90c9c390 ea1b1080 ffffffff  ................
Contenu de la section .rodata :
 ffffffff80105000 66707320 203a2000 72676474 5f696e69  fps  : .rgdt_ini
 ffffffff80105010 74007265 73657420 67647400 73657420  t.reset gdt.set 
 ffffffff80105020 67647420 656e7472 69657300 68656c6c  gdt entries.hell
 ffffffff80105030 6f20776f 726c6400 696e6974 20676474  o world.init gdt
 ffffffff80105040 00696e69 74206764 74203a20 e29c8500  .init gdt : ....
 ffffffff80105050 696e6974 20696474 00696e69 74206964  init idt.init id
 ffffffff80105060 74203a20 e29c8500 696e6974 20747373  t : ....init tss
 ffffffff80105070 00696e69 74207473 73203a20 4f4b0069  .init tss : OK.i
 ffffffff80105080 6e697420 70616769 6e670069 6e697420  nit paging.init 
 ffffffff80105090 70616769 6e67203a 204f4b00 6d617070  paging : OK.mapp
 ffffffff801050a0 696e6700 6d617070 696e6720 6f6b0069  ing.mapping ok.i
 ffffffff801050b0 6e697420 70726f63 65737300 696e6974  nit process.init
 ffffffff801050c0 2070726f 63657373 204f4b00 74657374   process OK.test
 ffffffff801050d0 696e6720 77697468 206d656d 6f727900  ing with memory.
 ffffffff801050e0 74657374 696e6720 77697468 206d656d  testing with mem
 ffffffff801050f0 6f727920 32200074 65737469 6e672077  ory 2 .testing w
 ffffffff80105100 69746820 6d656d6f 72792033 20006865  ith memory 3 .he
 ffffffff80105110 6c6c6f20 31006865 6c6c6f20 32006c6f  llo 1.hello 2.lo
 ffffffff80105120 6164696e 67207072 6f636573 73006c6f  ading process.lo
 ffffffff80105130 6164696e 67207072 6f636573 73203020  ading process 0 
 ffffffff80105140 006c6f61 64696e67 2070726f 63657373  .loading process
 ffffffff80105150 2031006c 6f616469 6e672070 726f6365   1.loading proce
 ffffffff80105160 73732032 006e6f20 66726565 2070726f  ss 2.no free pro
 ffffffff80105170 63657373 20666f75 6e64006e 6f207072  cess found.no pr
 ffffffff80105180 6f636573 7320666f 756e6400 00000000  ocess found.....
 ffffffff80105190 6c696261 6c6c6f63 3a204552 524f523a  liballoc: ERROR:
 ffffffff801051a0 20506f73 7369626c 6520312d 33206279   Possible 1-3 by
 ffffffff801051b0 7465206f 76657272 756e2066 6f72206d  te overrun for m
 ffffffff801051c0 61676963 20000000 6c696261 6c6c6f63  agic ...liballoc
 ffffffff801051d0 3a204552 524f523a 206d756c 7469706c  : ERROR: multipl
 ffffffff801051e0 65202866 72656529 28292061 7474656d  e (free)() attem
 ffffffff801051f0 70742000 6c696261 6c6c6f63 3a204552  pt .liballoc: ER
 ffffffff80105200 524f523a 62616420 66726565 20000000  ROR:bad free ...
 ffffffff80105210 6c6f6164 696e6720 696e6974 69616c20  loading initial 
 ffffffff80105220 6672616d 65207461 626c6500 6c6f6164  frame table.load
 ffffffff80105230 696e6720 6672616d 65203a20 4f4b0065  ing frame : OK.e
 ffffffff80105240 72726f72 206e6f74 20656e6f 75676874  rror not enought
 ffffffff80105250 20667261 6d65203a 5e280000 00000000   frame :^(......
 ffffffff80105260 6572726f 72206b65 726e656c 20646f65  error kernel doe
 ffffffff80105270 736e2774 20686176 65207468 6174206d  sn't have that m
 ffffffff80105280 75636820 6d656d6f 72792028 66617374  uch memory (fast
 ffffffff80105290 29000000 00000000 6572726f 72206b65  ).......error ke
 ffffffff801052a0 726e656c 20646f65 736e2774 20686176  rnel doesn't hav
 ffffffff801052b0 65207468 6174206d 75636820 6d656d6f  e that much memo
 ffffffff801052c0 72792028 6e6f2066 72616d65 29006c6f  ry (no frame).lo
 ffffffff801052d0 6164696e 67207061 67696e67 2031006c  ading paging 1.l
 ffffffff801052e0 6f616469 6e672070 6167696e 67203200  oading paging 2.
 ffffffff801052f0 6c6f6164 696e6720 70616769 6e672033  loading paging 3
 ffffffff80105300 006c6f61 64696e67 20706167 696e6720  .loading paging 
 ffffffff80105310 646f6e65 00203d3d 3d3d3d3d 3d3d3d3d  done. ==========
 ffffffff80105320 3d3d3d3d 20006d65 6d6f7279 20757361  ==== .memory usa
 ffffffff80105330 626c6500 6b65726e 656c0020 6d656d6f  ble.kernel. memo
 ffffffff80105340 72792073 74617274 203a2000 206d656d  ry start : . mem
 ffffffff80105350 6f727920 656e6420 3a200020 6d656d6f  ory end : . memo
 ffffffff80105360 7279206c 656e6768 74203a20 00206d65  ry lenght : . me
 ffffffff80105370 6d6f7279 20747970 65203a20 00206b65  mory type : . ke
 ffffffff80105380 726e656c 206d656d 6f727920 28696e20  rnel memory (in 
 ffffffff80105390 4d62293a 20006c6f 6164696e 67206672  Mb): .loading fr
 ffffffff801053a0 616d6500 6c6f6164 696e6720 70616769  ame.loading pagi
 ffffffff801053b0 6e67006c 6f616469 6e672069 6474006c  ng.loading idt.l
 ffffffff801053c0 6f616469 6e672069 64742074 61626c65  oading idt table
 ffffffff801053d0 006c6f61 64696e67 20696474 20696474  .loading idt idt
 ffffffff801053e0 5f666c75 7368006c 6f616469 6e672070  _flush.loading p
 ffffffff801053f0 6963006c 6f616469 6e672070 6963203a  ic.loading pic :
 ffffffff80105400 204f4b00 6c6f6164 696e6720 69647420   OK.loading idt 
 ffffffff80105410 3a204f4b 00747572 6e696e67 206f6e20  : OK.turning on 
 ffffffff80105420 696e7465 72727570 74203a20 4f4b2000  interrupt : OK .
 ffffffff80105430 44697669 73696f6e 20427920 5a65726f  Division By Zero
 ffffffff80105440 00446562 7567004e 6f6e204d 61736b61  .Debug.Non Maska
 ffffffff80105450 626c6520 496e7465 72727570 74004272  ble Interrupt.Br
 ffffffff80105460 65616b70 6f696e74 00496e74 6f204465  eakpoint.Into De
 ffffffff80105470 74656374 6564204f 76657266 6c6f7700  tected Overflow.
 ffffffff80105480 4f757420 6f662042 6f756e64 7300496e  Out of Bounds.In
 ffffffff80105490 76616c69 64204f70 636f6465 004e6f20  valid Opcode.No 
 ffffffff801054a0 436f7072 6f636573 736f7200 446f7562  Coprocessor.Doub
 ffffffff801054b0 6c652046 61756c74 00436f70 726f6365  le Fault.Coproce
 ffffffff801054c0 73736f72 20536567 6d656e74 204f7665  ssor Segment Ove
 ffffffff801054d0 7272756e 00426164 20545353 00536567  rrun.Bad TSS.Seg
 ffffffff801054e0 6d656e74 204e6f74 20507265 73656e74  ment Not Present
 ffffffff801054f0 00537461 636b2046 61756c74 0047656e  .Stack Fault.Gen
 ffffffff80105500 6572616c 2050726f 74656374 696f6e20  eral Protection 
 ffffffff80105510 4661756c 74005061 67652046 61756c74  Fault.Page Fault
 ffffffff80105520 00556e6b 6e6f776e 20496e74 65727275  .Unknown Interru
 ffffffff80105530 70740043 6f70726f 63657373 6f722046  pt.Coprocessor F
 ffffffff80105540 61756c74 00416c69 676e6d65 6e742043  ault.Alignment C
 ffffffff80105550 6865636b 004d6163 68696e65 20436865  heck.Machine Che
 ffffffff80105560 636b0052 65736572 76656400 207c2000  ck.Reserved. | .
 ffffffff80105570 203d2000 30780020 3d3d3d3d 3d206370   = .0x. ===== cp
 ffffffff80105580 75206475 6d70203d 3d3d3d3d 00203d3d  u dump =====. ==
 ffffffff80105590 3d3d3d20 63732061 6e642073 73203d3d  === cs and ss ==
 ffffffff801055a0 3d3d3d00 63730073 73002000 203d3d3d  ===.cs.ss. . ===
 ffffffff801055b0 3d3d2072 78203d3d 3d3d3d00 72380072  == rx =====.r8.r
 ffffffff801055c0 39007231 30007231 31007231 32007231  9.r10.r11.r12.r1
 ffffffff801055d0 33007231 34007231 3500203d 3d3d3d3d  3.r14.r15. =====
 ffffffff801055e0 20757469 6c697479 203d3d3d 3d3d0072   utility =====.r
 ffffffff801055f0 73700072 62700072 64690072 73690072  sp.rbp.rdi.rsi.r
 ffffffff80105600 64780072 63780072 62780072 61780020  dx.rcx.rbx.rax. 
 ffffffff80105610 3d3d3d3d 3d206f74 68657220 3d3d3d3d  ===== other ====
 ffffffff80105620 3d006572 726f725f 636f6465 00696e74  =.error_code.int
 ffffffff80105630 5f6e6f00 72697000 72666c61 67730020  _no.rip.rflags. 
 ffffffff80105640 3d3d3d3d 3d204352 58203d3d 3d3d3d00  ===== CRX =====.
 ffffffff80105650 43523200 6964203a 00657272 6f722066  CR2.id :.error f
 ffffffff80105660 6174616c 00203d3d 3d3d3d20 00726970  atal. ===== .rip
 ffffffff80105670 203a006c 6f616469 6e672050 4954006c   :.loading PIT.l
 ffffffff80105680 6f616465 64205049 54007365 6300      oaded PIT.sec.  
Contenu de la section .eh_frame :
 ffffffff80105690 14000000 00000000 017a5200 01781001  .........zR..x..
 ffffffff801056a0 1b0c0708 90010000 1c000000 1c000000  ................
 ffffffff801056b0 65f3ffff 3a000000 00410e10 8602430d  e...:....A....C.
 ffffffff801056c0 0675c60c 07080000 18000000 3c000000  .u..........<...
 ffffffff801056d0 30b9ffff 07010000 00410e10 8602430d  0........A....C.
 ffffffff801056e0 06000000 20000000 58000000 63f3ffff  .... ...X...c...
 ffffffff801056f0 e7000000 00410e10 8602430d 0602e2c6  .....A....C.....
 ffffffff80105700 0c070800 00000000 1c000000 7c000000  ............|...
 ffffffff80105710 f7b9ffff 0d000000 00410e10 8602430d  .........A....C.
 ffffffff80105720 0648c60c 07080000 1c000000 9c000000  .H..............
 ffffffff80105730 e4b9ffff 60000000 00410e10 8602430d  ....`....A....C.
 ffffffff80105740 06025bc6 0c070800 1c000000 bc000000  ..[.............
 ffffffff80105750 24baffff c2000000 00410e10 8602430d  $........A....C.
 ffffffff80105760 0602bdc6 0c070800 1c000000 dc000000  ................
 ffffffff80105770 c6baffff 16010000 00410e10 8602430d  .........A....C.
 ffffffff80105780 06031101 c60c0708 1c000000 fc000000  ................
 ffffffff80105790 bcbbffff 3b000000 00410e10 8602430d  ....;....A....C.
 ffffffff801057a0 0676c60c 07080000 1c000000 1c010000  .v..............
 ffffffff801057b0 d7bbffff 21000000 00410e10 8602430d  ....!....A....C.
 ffffffff801057c0 065cc60c 07080000 1c000000 3c010000  .\..........<...
 ffffffff801057d0 d8bbffff 14000000 00410e10 8602430d  .........A....C.
 ffffffff801057e0 064fc60c 07080000 1c000000 5c010000  .O..........\...
 ffffffff801057f0 46f3ffff 16000000 00410e10 8602430d  F........A....C.
 ffffffff80105800 0651c60c 07080000 1c000000 7c010000  .Q..........|...
 ffffffff80105810 acbbffff 6d010000 00410e10 8602430d  ....m....A....C.
 ffffffff80105820 06036801 c60c0708 1c000000 9c010000  ..h.............
 ffffffff80105830 1cf3ffff 35000000 00410e10 8602430d  ....5....A....C.
 ffffffff80105840 0670c60c 07080000 1c000000 bc010000  .p..............
 ffffffff80105850 d9bcffff 0e000000 00410e10 8602430d  .........A....C.
 ffffffff80105860 0649c60c 07080000 1c000000 dc010000  .I..............
 ffffffff80105870 c7bcffff 0e000000 00410e10 8602430d  .........A....C.
 ffffffff80105880 0649c60c 07080000 18000000 fc010000  .I..............
 ffffffff80105890 b5bcffff 12000000 00410e10 8602430d  .........A....C.
 ffffffff801058a0 06000000 18000000 18020000 abbcffff  ................
 ffffffff801058b0 12000000 00410e10 8602430d 06000000  .....A....C.....
 ffffffff801058c0 1c000000 34020000 a1bcffff f5000000  ....4...........
 ffffffff801058d0 00410e10 8602430d 0602f0c6 0c070800  .A....C.........
 ffffffff801058e0 1c000000 54020000 76bdffff d1020000  ....T...v.......
 ffffffff801058f0 00410e10 8602430d 0603cc02 c60c0708  .A....C.........
 ffffffff80105900 1c000000 74020000 27c0ffff 8f000000  ....t...'.......
 ffffffff80105910 00410e10 8602430d 06028ac6 0c070800  .A....C.........
 ffffffff80105920 1c000000 94020000 96c0ffff d3000000  ................
 ffffffff80105930 00410e10 8602430d 0602cec6 0c070800  .A....C.........
 ffffffff80105940 1c000000 b4020000 49c1ffff 89000000  ........I.......
 ffffffff80105950 00410e10 8602430d 060284c6 0c070800  .A....C.........
 ffffffff80105960 1c000000 d4020000 b2c1ffff 2b000000  ............+...
 ffffffff80105970 00410e10 8602430d 0666c60c 07080000  .A....C..f......
 ffffffff80105980 1c000000 f4020000 bdc1ffff 37000000  ............7...
 ffffffff80105990 00410e10 8602430d 0672c60c 07080000  .A....C..r......
 ffffffff801059a0 1c000000 14030000 d4c1ffff 42000000  ............B...
 ffffffff801059b0 00410e10 8602430d 067dc60c 07080000  .A....C..}......
 ffffffff801059c0 1c000000 34030000 f6c1ffff 2c000000  ....4.......,...
 ffffffff801059d0 00410e10 8602430d 0667c60c 07080000  .A....C..g......
 ffffffff801059e0 1c000000 54030000 02c2ffff 15000000  ....T...........
 ffffffff801059f0 00410e10 8602430d 0650c60c 07080000  .A....C..P......
 ffffffff80105a00 1c000000 74030000 79f1ffff 0b000000  ....t...y.......
 ffffffff80105a10 00410e10 8602430d 0646c60c 07080000  .A....C..F......
 ffffffff80105a20 1c000000 94030000 64f1ffff 0b000000  ........d.......
 ffffffff80105a30 00410e10 8602430d 0646c60c 07080000  .A....C..F......
 ffffffff80105a40 1c000000 b4030000 4ff1ffff 1f000000  ........O.......
 ffffffff80105a50 00410e10 8602430d 065ac60c 07080000  .A....C..Z......
 ffffffff80105a60 1c000000 d4030000 4ef1ffff 2b000000  ........N...+...
 ffffffff80105a70 00410e10 8602430d 0666c60c 07080000  .A....C..f......
 ffffffff80105a80 1c000000 f4030000 77c1ffff 3e000000  ........w...>...
 ffffffff80105a90 00410e10 8602430d 0679c60c 07080000  .A....C..y......
 ffffffff80105aa0 1c000000 14040000 95c1ffff 99000000  ................
 ffffffff80105ab0 00410e10 8602430d 060294c6 0c070800  .A....C.........
 ffffffff80105ac0 1c000000 34040000 0ec2ffff 06010000  ....4...........
 ffffffff80105ad0 00410e10 8602430d 06030101 c60c0708  .A....C.........
 ffffffff80105ae0 1c000000 54040000 f4c2ffff 6e070000  ....T.......n...
 ffffffff80105af0 00410e10 8602430d 06036907 c60c0708  .A....C...i.....
 ffffffff80105b00 1c000000 74040000 42caffff c3020000  ....t...B.......
 ffffffff80105b10 00410e10 8602430d 0603be02 c60c0708  .A....C.........
 ffffffff80105b20 1c000000 94040000 e5ccffff 4e000000  ............N...
 ffffffff80105b30 00410e10 8602430d 060249c6 0c070800  .A....C...I.....
 ffffffff80105b40 1c000000 b4040000 13cdffff 5f010000  ............_...
 ffffffff80105b50 00410e10 8602430d 06035a01 c60c0708  .A....C...Z.....
 ffffffff80105b60 1c000000 d4040000 52ceffff 2f000000  ........R.../...
 ffffffff80105b70 00410e10 8602430d 066ac60c 07080000  .A....C..j......
 ffffffff80105b80 1c000000 f4040000 61ceffff 75000000  ........a...u...
 ffffffff80105b90 00410e10 8602430d 060270c6 0c070800  .A....C...p.....
 ffffffff80105ba0 1c000000 14050000 b6ceffff 30000000  ............0...
 ffffffff80105bb0 00410e10 8602430d 066bc60c 07080000  .A....C..k......
 ffffffff80105bc0 1c000000 34050000 c6ceffff 30000000  ....4.......0...
 ffffffff80105bd0 00410e10 8602430d 066bc60c 07080000  .A....C..k......
 ffffffff80105be0 1c000000 54050000 d6ceffff 32000000  ....T.......2...
 ffffffff80105bf0 00410e10 8602430d 066dc60c 07080000  .A....C..m......
 ffffffff80105c00 1c000000 74050000 e8ceffff 6c000000  ....t.......l...
 ffffffff80105c10 00410e10 8602430d 060267c6 0c070800  .A....C...g.....
 ffffffff80105c20 1c000000 94050000 34cfffff 1f000000  ........4.......
 ffffffff80105c30 00410e10 8602430d 065ac60c 07080000  .A....C..Z......
 ffffffff80105c40 1c000000 b4050000 33cfffff 1f000000  ........3.......
 ffffffff80105c50 00410e10 8602430d 065ac60c 07080000  .A....C..Z......
 ffffffff80105c60 1c000000 d4050000 32cfffff 18000000  ........2.......
 ffffffff80105c70 00410e10 8602430d 0653c60c 07080000  .A....C..S......
 ffffffff80105c80 1c000000 f4050000 2acfffff 1a000000  ........*.......
 ffffffff80105c90 00410e10 8602430d 0655c60c 07080000  .A....C..U......
 ffffffff80105ca0 1c000000 14060000 24cfffff 6f000000  ........$...o...
 ffffffff80105cb0 00410e10 8602430d 06026ac6 0c070800  .A....C...j.....
 ffffffff80105cc0 1c000000 34060000 73cfffff 58000000  ....4...s...X...
 ffffffff80105cd0 00410e10 8602430d 060253c6 0c070800  .A....C...S.....
 ffffffff80105ce0 1c000000 54060000 abcfffff 7f030000  ....T...........
 ffffffff80105cf0 00410e10 8602430d 06037a03 c60c0708  .A....C...z.....
 ffffffff80105d00 1c000000 74060000 0ad3ffff 9e000000  ....t...........
 ffffffff80105d10 00410e10 8602430d 060299c6 0c070800  .A....C.........
 ffffffff80105d20 1c000000 94060000 88d3ffff 1b000000  ................
 ffffffff80105d30 00410e10 8602430d 0656c60c 07080000  .A....C..V......
 ffffffff80105d40 1c000000 b4060000 83d3ffff 45000000  ............E...
 ffffffff80105d50 00410e10 8602430d 060240c6 0c070800  .A....C...@.....
 ffffffff80105d60 1c000000 d4060000 a8d3ffff 25020000  ............%...
 ffffffff80105d70 00410e10 8602430d 06032002 c60c0708  .A....C... .....
 ffffffff80105d80 1c000000 f4060000 add5ffff 78000000  ............x...
 ffffffff80105d90 00410e10 8602430d 060273c6 0c070800  .A....C...s.....
 ffffffff80105da0 1c000000 14070000 05d6ffff 8c020000  ................
 ffffffff80105db0 00410e10 8602430d 06038702 c60c0708  .A....C.........
 ffffffff80105dc0 1c000000 34070000 71d8ffff 09030000  ....4...q.......
 ffffffff80105dd0 00410e10 8602430d 06030403 c60c0708  .A....C.........
 ffffffff80105de0 1c000000 54070000 5adbffff 29020000  ....T...Z...)...
 ffffffff80105df0 00410e10 8602430d 06032402 c60c0708  .A....C...$.....
 ffffffff80105e00 1c000000 74070000 d9edffff d8000000  ....t...........
 ffffffff80105e10 00410e10 8602430d 0602d3c6 0c070800  .A....C.........
 ffffffff80105e20 1c000000 94070000 91eeffff 21000000  ............!...
 ffffffff80105e30 00410e10 8602430d 065cc60c 07080000  .A....C..\......
 ffffffff80105e40 1c000000 b4070000 92eeffff 1b010000  ................
 ffffffff80105e50 00410e10 8602430d 06031601 c60c0708  .A....C.........
 ffffffff80105e60 1c000000 d4070000 03ddffff bd000000  ................
 ffffffff80105e70 00410e10 8602430d 0602b8c6 0c070800  .A....C.........
 ffffffff80105e80 1c000000 f4070000 a0ddffff 3c010000  ............<...
 ffffffff80105e90 00410e10 8602430d 06033701 c60c0708  .A....C...7.....
 ffffffff80105ea0 1c000000 14080000 bcdeffff 78000000  ............x...
 ffffffff80105eb0 00410e10 8602430d 060273c6 0c070800  .A....C...s.....
 ffffffff80105ec0 1c000000 34080000 14dfffff e7020000  ....4...........
 ffffffff80105ed0 00410e10 8602430d 0603e202 c60c0708  .A....C.........
 ffffffff80105ee0 1c000000 54080000 dbe1ffff 32000000  ....T.......2...
 ffffffff80105ef0 00410e10 8602430d 066dc60c 07080000  .A....C..m......
 ffffffff80105f00 1c000000 74080000 ede1ffff 44000000  ....t.......D...
 ffffffff80105f10 00410e10 8602430d 067fc60c 07080000  .A....C.........
 ffffffff80105f20 1c000000 94080000 11e2ffff 41000000  ............A...
 ffffffff80105f30 00410e10 8602430d 067cc60c 07080000  .A....C..|......
 ffffffff80105f40 1c000000 b4080000 32e2ffff c9010000  ........2.......
 ffffffff80105f50 00410e10 8602430d 0603c401 c60c0708  .A....C.........
 ffffffff80105f60 1c000000 d4080000 8deeffff 1e000000  ................
 ffffffff80105f70 00410e10 8602430d 0659c60c 07080000  .A....C..Y......
 ffffffff80105f80 1c000000 f4080000 8beeffff 2f000000  ............/...
 ffffffff80105f90 00410e10 8602430d 066ac60c 07080000  .A....C..j......
 ffffffff80105fa0 1c000000 14090000 9be3ffff 33000000  ............3...
 ffffffff80105fb0 00410e10 8602430d 066ec60c 07080000  .A....C..n......
 ffffffff80105fc0 1c000000 34090000 aee3ffff 53000000  ....4.......S...
 ffffffff80105fd0 00410e10 8602430d 06024ec6 0c070800  .A....C...N.....
 ffffffff80105fe0 1c000000 54090000 e1e3ffff 5e000000  ....T.......^...
 ffffffff80105ff0 00410e10 8602430d 060259c6 0c070800  .A....C...Y.....
 ffffffff80106000 1c000000 74090000 1fe4ffff 4f000000  ....t.......O...
 ffffffff80106010 00410e10 8602430d 06024ac6 0c070800  .A....C...J.....
 ffffffff80106020 1c000000 94090000 4ee4ffff 9e000000  ........N.......
 ffffffff80106030 00410e10 8602430d 060299c6 0c070800  .A....C.........
 ffffffff80106040 1c000000 b4090000 cce4ffff 0f000000  ................
 ffffffff80106050 00410e10 8602430d 064ac60c 07080000  .A....C..J......
 ffffffff80106060 1c000000 d4090000 daedffff 20000000  ............ ...
 ffffffff80106070 00410e10 8602430d 065bc60c 07080000  .A....C..[......
 ffffffff80106080 1c000000 f4090000 daedffff 2b000000  ............+...
 ffffffff80106090 00410e10 8602430d 0666c60c 07080000  .A....C..f......
 ffffffff801060a0 1c000000 140a0000 e6edffff 49000000  ............I...
 ffffffff801060b0 00410e10 8602430d 060244c6 0c070800  .A....C...D.....
 ffffffff801060c0 1c000000 340a0000 5ce4ffff d4000000  ....4...\.......
 ffffffff801060d0 00410e10 8602430d 0602cfc6 0c070800  .A....C.........
 ffffffff801060e0 1c000000 540a0000 10e5ffff 6d000000  ....T.......m...
 ffffffff801060f0 00410e10 8602430d 060268c6 0c070800  .A....C...h.....
 ffffffff80106100 1c000000 740a0000 5ee5ffff 0d000000  ....t...^.......
 ffffffff80106110 00410e10 8602430d 0648c60c 07080000  .A....C..H......
Contenu de la section .data :
 ffffffff80107000 01000000 00100000 10000000 00000000  ................
 ffffffff80107010 20000000 00000000 7fffffff 00000000   ...............
 ffffffff80107020 001040e1 1182ffff ffff0000 00000000  ..@.............
 ffffffff80107030 00000000 00000000 00000000 00000000  ................
 ffffffff80107040 30541080 ffffffff 41541080 ffffffff  0T......AT......
 ffffffff80107050 47541080 ffffffff 5e541080 ffffffff  GT......^T......
 ffffffff80107060 69541080 ffffffff 80541080 ffffffff  iT.......T......
 ffffffff80107070 8e541080 ffffffff 9d541080 ffffffff  .T.......T......
 ffffffff80107080 ac541080 ffffffff b9541080 ffffffff  .T.......T......
 ffffffff80107090 d5541080 ffffffff dd541080 ffffffff  .T.......T......
 ffffffff801070a0 f1541080 ffffffff fd541080 ffffffff  .T.......T......
 ffffffff801070b0 16551080 ffffffff 21551080 ffffffff  .U......!U......
 ffffffff801070c0 33551080 ffffffff 45551080 ffffffff  3U......EU......
 ffffffff801070d0 55551080 ffffffff 63551080 ffffffff  UU......cU......
 ffffffff801070e0 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff801070f0 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff80107100 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff80107110 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff80107120 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff80107130 63551080 ffffffff 63551080 ffffffff  cU......cU......
 ffffffff80107140 c8461080 ffffffff d4461080 ffffffff  .F.......F......
 ffffffff80107150 e0461080 ffffffff ec461080 ffffffff  .F.......F......
 ffffffff80107160 f8461080 ffffffff 04471080 ffffffff  .F.......G......
 ffffffff80107170 13471080 ffffffff 22471080 ffffffff  .G......"G......
 ffffffff80107180 31471080 ffffffff 3e471080 ffffffff  1G......>G......
 ffffffff80107190 4d471080 ffffffff 5a471080 ffffffff  MG......ZG......
 ffffffff801071a0 67471080 ffffffff 74471080 ffffffff  gG......tG......
 ffffffff801071b0 81471080 ffffffff 8e471080 ffffffff  .G.......G......
 ffffffff801071c0 9d471080 ffffffff ac471080 ffffffff  .G.......G......
 ffffffff801071d0 bb471080 ffffffff ca471080 ffffffff  .G.......G......
 ffffffff801071e0 d9471080 ffffffff e8471080 ffffffff  .G.......G......
 ffffffff801071f0 f7471080 ffffffff 06481080 ffffffff  .G.......H......
 ffffffff80107200 15481080 ffffffff 24481080 ffffffff  .H......$H......
 ffffffff80107210 33481080 ffffffff 42481080 ffffffff  3H......BH......
 ffffffff80107220 51481080 ffffffff 60481080 ffffffff  QH......`H......
 ffffffff80107230 6f481080 ffffffff 7c481080 ffffffff  oH......|H......
 ffffffff80107240 8b481080 ffffffff d9481080 ffffffff  .H.......H......
 ffffffff80107250 e8481080 ffffffff f7481080 ffffffff  .H.......H......
 ffffffff80107260 06491080 ffffffff 15491080 ffffffff  .I.......I......
 ffffffff80107270 24491080 ffffffff 33491080 ffffffff  $I......3I......
 ffffffff80107280 42491080 ffffffff 51491080 ffffffff  BI......QI......
 ffffffff80107290 60491080 ffffffff 6f491080 ffffffff  `I......oI......
 ffffffff801072a0 7e491080 ffffffff 8d491080 ffffffff  ~I.......I......
 ffffffff801072b0 9c491080 ffffffff ab491080 ffffffff  .I.......I......
 ffffffff801072c0 c9491080 ffffffff ba491080 ffffffff  .I.......I......
Contenu de la section .debug_info :
 0000 fa030000 04000000 00000801 b2010000  ................
 0010 04420000 00af0200 00000000 00000000  .B..............
 0020 00000000 00000000 00020106 39010000  ............9...
 0030 02020570 00000003 0405696e 74000208  ...p......int...
 0040 05e10300 0004bc00 0000040c 18510000  .............Q..
 0050 00020108 37010000 04730100 00040d1d  ....7....s......
 0060 64000000 0202079f 01000004 65010000  d...........e...
 0070 040e1d77 00000002 0407a409 00000467  ...w...........g
 0080 00000004 0f1b8a00 00000208 079f0900  ................
 0090 00020106 40010000 05fd0e00 00500516  ....@........P..
 00a0 084f0100 00067a00 00000517 0e7e0000  .O....z......~..
 00b0 0000067c 01000005 180e7e00 00000806  ...|......~.....
 00c0 08030000 05190e7e 00000010 06210000  .......~.....!..
 00d0 00051a0e 7e000000 18068d02 0000051b  ....~...........
 00e0 0e580000 00200653 01000005 1c0e5800  .X... .S......X.
 00f0 00002206 ed020000 051d0e58 00000024  .."........X...$
 0100 060e0100 00051e0e 58000000 26066e01  ........X...&.n.
 0110 0000051f 0e7e0000 0028068d 00000005  .....~...(......
 0120 200e7e00 00003006 9a000000 05210e7e   .~...0......!.~
 0130 00000038 06310100 0005220e 7e000000  ...8.1....".~...
 0140 40063907 00000523 0e7e0000 00480007  @.9....#.~...H..
 0150 50495400 28060807 e8010000 06a60200  PIT.(...........
 0160 0006090e 7e000000 00061b03 0000060a  ....~...........
 0170 0e7e0000 00080882 00000006 0c0e7e00  .~............~.
 0180 00001001 08d50200 00060d0e 7e000000  ............~...
 0190 180108f0 00000006 0e093700 00002001  ..........7... .
 01a0 09fe0000 00060f0a df000000 01b50100  ................
 01b0 00bb0100 000ae801 00000009 05010000  ................
 01c0 06100a1e 01000001 d0010000 d6010000  ................
 01d0 0ae80100 00000b74 68650006 13111300  .......the......
 01e0 0000e801 00000100 0c084f01 00000da2  ..........O.....
 01f0 00000003 560d0000 00004f4a 1080ffff  ....V.....OJ....
 0200 ffffe700 00000000 0000019c d3020000  ................
 0210 0e54008a 0000000f 62756600 03561ad3  .T......buf..V..
 0220 02000003 91a87f10 c30a0000 03562337  .............V#7
 0230 00000003 91a47f0f 64000356 2b8a0000  ........d..V+...
 0240 00039198 7f117000 035808d3 02000002  ......p..X......
 0250 91681170 31000359 08d30200 00029160  .h.p1..Y.......`
 0260 11703200 03590ed3 02000002 91581175  .p2..Y.......X.u
 0270 6400035a 048a0000 00029150 12000300  d..Z.......P....
 0280 00035b04 8a000000 02914813 884a1080  ..[.......H..J..
 0290 ffffffff 3a000000 00000000 b0020000  ....:...........
 02a0 12510000 00036a05 8a000000 02914000  .Q....j.......@.
 02b0 14064b10 80ffffff ff2b0000 00000000  ..K......+......
 02c0 0011746d 70000377 08910000 000391bf  ..tmp..w........
 02d0 7f00000c 08910000 00153a05 0000020c  ..........:.....
 02e0 06c40000 00001010 80ffffff ff070100  ................
 02f0 00000000 00019c83 03000010 32000000  ............2...
 0300 020c1e83 03000003 91987f12 8c010000  ................
 0310 02100e7e 00000002 91481164 0002110e  ...~.....H.d....
 0320 6b000000 02916c12 9f020000 02120a89  k.....l.........
 0330 03000003 91a07f11 64640002 130f9903  ........dd......
 0340 00000291 40125b00 00000215 0e7e0000  ....@.[......~..
 0350 00029160 12e10200 0002160e 7e000000  ...`........~...
 0360 02915814 4a101080 ffffffff 48000000  ..X.J.......H...
 0370 00000000 11690002 19167e00 00000291  .....i....~.....
 0380 5000000c 08980000 00169100 00009903  P...............
 0390 0000178a 0000001f 000c086b 0000000d  ...........k....
 03a0 26030000 01072e45 01000015 4a1080ff  &......E....J...
 03b0 ffffff3a 00000000 00000001 9cfb0300  ...:............
 03c0 000f7300 01073dfb 03000002 91580f6e  ..s...=......X.n
 03d0 00010749 7e000000 02915014 254a1080  ...I~.....P.%J..
 03e0 ffffffff 27000000 00000000 11690001  ....'........i..
 03f0 08137e00 00000291 68000018 08007f05  ..~.....h.......
 0400 00000400 73010000 0801b201 000004bd  ....s...........
 0410 040000af 02000040 00000000 00000000  .......@........
 0420 000000b2 01000002 01063901 00000202  ..........9.....
 0430 05700000 00030405 696e7400 020805e1  .p......int.....
 0440 03000004 bc000000 032e1851 00000002  ...........Q....
 0450 01083701 00000473 01000003 31196400  ..7....s....1.d.
 0460 00000202 079f0100 00046501 00000334  ..........e....4
 0470 19770000 00020407 a4090000 04670000  .w...........g..
 0480 00033719 8a000000 0208079f 09000002  ..7.............
 0490 01064001 0000050a 041301e1 040000c0  ..@.............
 04a0 00000006 6c656e00 04140c58 00000000  ....len....X....
 04b0 07ba0d00 0004150c 7e000000 020004e2  ........~.......
 04c0 04000004 161f9800 00000508 041901ea  ................
 04d0 03000028 01000007 10040000 041a0c58  ...(...........X
 04e0 00000000 07ce0400 00041b0c 58000000  ............X...
 04f0 02074503 0000041c 0c450000 00040739  ..E......E.....9
 0500 07000004 1d0c4500 00000507 4e030000  ......E.....N...
 0510 041e0c45 00000006 078c0400 00041f0c  ...E............
 0520 45000000 070004ec 03000004 201fcc00  E........... ...
 0530 00000510 04230164 04000080 01000008  .....#.d........
 0540 08042603 65010000 07590400 0004270e  ..&.e....Y....'.
 0550 6b000000 00075004 00000428 0e6b0000  k.....P....(.k..
 0560 00040006 6c6f7700 04241428 01000000  ....low..$.(....
 0570 07910400 00042905 41010000 08000466  ......).A......f
 0580 04000004 2a1f3401 00000970 10043201  ....*.4....p..2.
 0590 33040000 5f020000 0a780400 0004330c  3..._....x....3.
 05a0 6b000000 100007fb 04000004 340c7e00  k...........4.~.
 05b0 00000407 46040000 04350c7e 0000000c  ....F....5.~....
 05c0 074b0400 0004360c 7e000000 14070604  .K....6.~.......
 05d0 00000437 0c7e0000 001c0700 05000004  ...7.~..........
 05e0 380c7e00 00002407 96040000 04390c7e  8.~...$......9.~
 05f0 0000002c 079b0400 00043a0c 7e000000  ...,......:.~...
 0600 3407a004 0000043b 0c7e0000 003c07a5  4......;.~...<..
 0610 04000004 3c0c7e00 00004407 25050000  ....<.~...D.%...
 0620 043d0c7e 0000004c 07aa0400 00043e0c  .=.~...L......>.
 0630 7e000000 54078204 0000043f 0c7e0000  ~...T......?.~..
 0640 005c07e9 04000004 400c5800 00006407  .\......@.X...d.
 0650 bd030000 04410c58 00000066 000b3404  .....A.X...f..4.
 0660 00000442 1f8c0100 00100208 05dc0300  ...B............
 0670 00021004 3a040000 0c330300 000d5a03  ....:....3....Z.
 0680 00000210 08c00000 00090300 801080ff  ................
 0690 ffffff0e 74737300 0212085f 02000009  ....tss...._....
 06a0 03208010 80ffffff ff0f2801 0000bb02  . ........(.....
 06b0 0000108a 0000003f 000d1a04 00000218  .......?........
 06c0 13ab0200 000903a0 801080ff ffffff0f  ................
 06d0 45000000 e2020000 118a0000 00ff3f00  E.............?.
 06e0 122a0500 00024b09 d1020000 00100903  .*....K.........
 06f0 00901080 ffffffff 128f0300 00024c09  ..............L.
 0700 d1020000 00100903 00d01080 ffffffff  ................
 0710 129a0300 00024d09 d1020000 00100903  ......M.........
 0720 00101180 ffffffff 13790300 00026407  .........y....d.
 0730 af030000 a8131080 ffffffff 14000000  ................
 0740 00000000 019c5a03 00001469 0002641f  ......Z....i..d.
 0750 8a000000 02916800 15f30400 00025c06  ......h.......\.
 0760 67030000 87131080 ffffffff 21000000  g...........!...
 0770 00000000 019c8c03 000016fb 04000002  ................
 0780 5c1c7e00 00000291 6800132a 04000002  \.~.....h..*....
 0790 4e060505 00004c13 1080ffff ffff3b00  N.....L.......;.
 07a0 00000000 0000019c bc030000 14690002  .............i..
 07b0 4e187e00 00000291 680013d7 04000002  N.~.....h.......
 07c0 2f26af04 00003612 1080ffff ffff1601  /&....6.........
 07d0 00000000 0000019c fd030000 17fd0300  ................
 07e0 0002330c 7e000000 02916817 a5030000  ..3.~.....h.....
 07f0 02340c7e 00000002 91600018 c8030000  .4.~.....`......
 0800 02210d74 111080ff ffffffc2 00000000  .!.t............
 0810 00000001 9c860400 00161a04 00000221  ...............!
 0820 33860400 00029158 1473656c 0002214d  3......X.sel..!M
 0830 58000000 02915416 39070000 02215a45  X.....T.9....!ZE
 0840 00000002 9150162e 03000002 21694500  .....P......!iE.
 0850 00000291 4c16c30a 00000221 787e0000  ....L......!x~..
 0860 00029140 16a90300 00022187 7e000000  ...@......!.~...
 0870 0391b87f 17c40f00 00022316 8c040000  ..........#.....
 0880 02916800 19082801 00001908 80010000  ..h...(.........
 0890 18120500 0002190d 14111080 ffffffff  ................
 08a0 60000000 00000000 019cfc04 0000161a  `...............
 08b0 04000002 19328604 00000291 58147365  .....2......X.se
 08c0 6c000219 4c580000 00029154 16390700  l...LX.....T.9..
 08d0 00021959 45000000 02915016 2e030000  ...YE.....P.....
 08e0 02196845 00000002 914c17c4 0f000002  ..hE.....L......
 08f0 1b158604 00000291 68001a5f 03000002  ........h.._....
 0900 14088303 00001e05 00000711 1080ffff  ................
 0910 ffff0d00 00000000 0000019c 19085f02  .............._.
 0920 00001526 03000001 072e4501 0000154a  ...&......E....J
 0930 1080ffff ffff3a00 00000000 0000019c  ......:.........
 0940 80050000 14730001 073d8005 00000291  .....s...=......
 0950 58146e00 0107497e 00000002 91501b25  X.n...I~.....P.%
 0960 4a1080ff ffffff27 00000000 0000001c  J......'........
 0970 69000108 137e0000 00029168 00001d08  i....~.....h....
 0980 00d10200 0004004f 03000008 01b20100  .......O........
 0990 00047d05 0000af02 00007000 00000000  ..}.......p.....
 09a0 00000000 00005e03 00000201 06390100  ......^......9..
 09b0 00020205 70000000 03040569 6e740002  ....p......int..
 09c0 0805e103 000004bc 00000003 2e185100  ..............Q.
 09d0 00000201 08370100 00047301 00000331  .....7....s....1
 09e0 19640000 00020207 9f010000 020407a4  .d..............
 09f0 09000004 67000000 0337197e 00000002  ....g....7.~....
 0a00 08079f09 00000441 05000003 561a7e00  .......A....V.~.
 0a10 0000054b 05000018 040308ed 00000006  ...K............
 0a20 2e050000 04050e72 00000000 06390700  .......r.....9..
 0a30 0004080e 58000000 08065301 00000409  ....X.....S.....
 0a40 0e580000 000a06ed 02000004 0a0e5800  .X............X.
 0a50 00000c06 0e010000 040b0e58 0000000e  ...........X....
 0a60 06a40500 00040c0b 72000000 10000201  ........r.......
 0a70 06400100 0005fd0e 00005004 1608ab01  .@........P.....
 0a80 0000067a 00000004 170e7200 00000006  ...z......r.....
 0a90 7c010000 04180e72 00000008 06080300  |......r........
 0aa0 0004190e 72000000 10062100 0000041a  ....r.....!.....
 0ab0 0e720000 0018068d 02000004 1b0e5800  .r............X.
 0ac0 00002006 53010000 041c0e58 00000022  .. .S......X..."
 0ad0 06ed0200 00041d0e 58000000 24060e01  ........X...$...
 0ae0 0000041e 0e580000 0026066e 01000004  .....X...&.n....
 0af0 1f0e7200 00002806 8d000000 04200e72  ..r...(...... .r
 0b00 00000030 069a0000 0004210e 72000000  ...0......!.r...
 0b10 38063101 00000422 0e720000 00400639  8.1....".r...@.9
 0b20 07000004 230e7200 00004800 071e1200  ....#.r...H.....
 0b30 0007046b 00000005 0406da01 000008b0  ...k............
 0b40 050000f8 0308b505 0000f802 08ba0500  ................
 0b50 00e80308 bf050000 e8020004 99050000  ................
 0b60 01111272 00000009 8f050000 011314fe  ...r............
 0b70 01000000 10090300 501180ff ffffff0a  ........P.......
 0b80 08da0100 000bed00 00001502 00000c7e  ...............~
 0b90 000000ff 0f000d2e 05000002 0a0d0402  ................
 0ba0 00000903 20501180 ffffffff 0e530500  .... P.......S..
 0bb0 00020d11 91000000 09030000 1080ffff  ................
 0bc0 ffff0f34 05000002 1611bc13 1080ffff  ...4............
 0bd0 ffff6d01 00000000 0000019c 9b020000  ..m.............
 0be0 10320000 0002162e 9b020000 02915811  .2............X.
 0bf0 6d000236 0ea10200 00029160 12e71410  m..6.......`....
 0c00 80ffffff ff270000 00000000 00116900  .....'........i.
 0c10 02381272 00000002 91680000 0a08f400  .8.r.....h......
 0c20 00000a08 45000000 136e0500 00011e0d  ....E....n......
 0c30 5a050000 364b1080 ffffffff 16000000  Z...6K..........
 0c40 00000000 019c1470 6400011e 25720000  .......pd...%r..
 0c50 00029168 0000b206 00000400 8b040000  ...h............
 0c60 0801b201 0000047c 060000af 02000000  .......|........
 0c70 01000000 00000000 000000c2 04000002  ................
 0c80 01063901 00000202 05700000 00030405  ..9......p......
 0c90 696e7400 020805e1 03000004 bc000000  int.............
 0ca0 030c1851 00000002 01083701 00000202  ...Q......7.....
 0cb0 079f0100 00046501 0000030e 1d6b0000  ......e......k..
 0cc0 00020407 a4090000 04670000 00030f1b  .........g......
 0cd0 7e000000 0208079f 09000005 ff050000  ~...............
 0ce0 a8040608 ad010000 06723135 0004070b  .........r15....
 0cf0 72000000 00067231 34000408 0b720000  r.....r14....r..
 0d00 00080672 31330004 090b7200 00001006  ...r13....r.....
 0d10 72313200 040a0b72 00000018 06723131  r12....r.....r11
 0d20 00040b0b 72000000 20067231 3000040c  ....r... .r10...
 0d30 0b720000 00280672 3900040d 0b720000  .r...(.r9....r..
 0d40 00300672 3800040e 0b720000 00380672  .0.r8....r...8.r
 0d50 62700004 0f0b7200 00004006 72646900  bp....r...@.rdi.
 0d60 04100b72 00000048 06727369 0004110b  ...r...H.rsi....
 0d70 72000000 50067264 78000412 0b720000  r...P.rdx....r..
 0d80 00580672 63780004 130b7200 00006006  .X.rcx....r...`.
 0d90 72627800 04140b72 00000068 06726178  rbx....r...h.rax
 0da0 0004150b 72000000 70077106 0000041a  ....r...p.q.....
 0db0 0b5f0000 007807ed 07000004 1b0b5f00  ._...x........_.
 0dc0 00007c06 72697000 041d0b72 00000080  ..|.rip....r....
 0dd0 06637300 041e0b72 00000088 07380700  .cs....r.....8..
 0de0 00041f0b 72000000 90067273 70000420  ....r.....rsp.. 
 0df0 0b720000 00980673 73000421 0b720000  .r.....ss..!.r..
 0e00 00a00008 30080000 07046b00 00000106  ....0.....k.....
 0e10 06d80100 00096408 00000009 13060000  ......d.........
 0e20 0109bb07 00000209 32060000 03000ac5  ........2.......
 0e30 0800001c 10010c08 3c020000 06727370  ........<....rsp
 0e40 00010d0e 72000000 00072808 0000010e  ....r.....(.....
 0e50 13ad0100 00080670 69640001 0f0e7200  .......pid....r.
 0e60 00000c07 2e050000 01100d3c 02000014  ...........<....
 0e70 0ba40500 0001110e 72000000 14100cc5  ........r.......
 0e80 08000071 07000035 0200000d a7020000  ...q...5........
 0e90 00000e45 0000004d 0200000f 7e000000  ...E...M....~...
 0ea0 ff0f0004 e1060000 01131059 02000010  ...........Y....
 0eb0 085f0200 00110201 06400100 00049905  ._.......@......
 0ec0 00000511 12720000 00128f05 00000513  .....r..........
 0ed0 148b0200 00001009 0300b011 80ffffff  ................
 0ee0 ff100867 02000013 4f060000 02080aa7  ...g....O.......
 0ef0 02000009 03007011 80ffffff ff1008d8  ......p.........
 0f00 01000014 a7020000 13f20600 00020909  ................
 0f10 d8010000 09032070 1180ffff ffff1328  ...... p.......(
 0f20 07000002 0a0aa702 00000903 40801180  ............@...
 0f30 ffffffff 13c40500 00020b06 f4020000  ................
 0f40 09030070 1080ffff ffff0201 02a80600  ...p............
 0f50 0013bc06 0000020c 06f40200 00090348  ...............H
 0f60 801180ff ffffff0e 60020000 22030000  ........`..."...
 0f70 0f7e0000 00ff1f00 13100700 00029406  .~..............
 0f80 11030000 09036080 1180ffff ffff1540  ......`........@
 0f90 060000ea 1b1080ff ffffff15 00000000  ................
 0fa0 00000001 9c168107 0000be1b 1080ffff  ................
 0fb0 ffff2c00 00000000 0000019c 89030000  ..,.............
 0fc0 17190700 0002ab01 37000000 02916c17  ........7.....l.
 0fd0 ab070000 02ab0137 00000002 91680018  .......7.....h..
 0fe0 cb070000 02a6117c 1b1080ff ffffff42  .......|.......B
 0ff0 00000000 00000001 9cb70300 0017cd08  ................
 1000 000002a6 2da70200 00029168 00197608  ....-......h..v.
 1010 0000029c 16720000 00451b10 80ffffff  .....r...E......
 1020 ff370000 00000000 00019c1a d3050000  .7..............
 1030 02951572 0000001a 1b1080ff ffffff2b  ...r...........+
 1040 00000000 00000001 9c1bcb06 00000282  ................
 1050 06e30500 00911a10 80ffffff ff890000  ................
 1060 00000000 00019c4f 0400001c 69736600  .......O....isf.
 1070 0282314f 04000002 91581da0 0000003b  ..1O.....X.....;
 1080 0400001e 69000287 12a70200 00029160  ....i..........`
 1090 001fd000 00001e69 00028d12 a7020000  .......i........
 10a0 02916800 00100885 00000020 60070000  ..h........ `...
 10b0 02720a3e 080000a7 020000be 191080ff  .r.>............
 10c0 ffffffd3 00000000 00000001 9ccd0400  ................
 10d0 00175507 00000272 24720000 00029158  ..U....r$r.....X
 10e0 21ca1910 80ffffff ff670000 00000000  !........g......
 10f0 00ad0400 001e6900 02731272 00000002  ......i..s.r....
 1100 91680022 311a1080 ffffffff 4d000000  .h."1.......M...
 1110 00000000 1e690002 79137200 00000291  .....i..y.r.....
 1120 60000023 de070000 0260069b 0800002f  `..#.....`...../
 1130 191080ff ffffff8f 00000000 00000001  ................
 1140 9c0e0500 0017e606 00000260 2a4f0400  ...........`*O..
 1150 00029168 17cd0800 00026040 a7020000  ...h......`@....
 1160 02916000 20070800 0002330a 3f070000  ..`. .....3.?...
 1170 a7020000 5e161080 ffffffff d1020000  ....^...........
 1180 00000000 019c9305 000017a4 05000002  ................
 1190 331c4d02 00000291 48226a16 1080ffff  3.M.....H"j.....
 11a0 ffffb202 00000000 00001e69 0002350e  ...........i..5.
 11b0 37000000 02916c22 9c161080 ffffffff  7.....l"........
 11c0 77020000 00000000 1e727370 00023c17  w........rsp..<.
 11d0 93050000 02916024 a3060000 023e1672  ......`$.....>.r
 11e0 00000002 91580000 00100872 0000001b  .....X.....r....
 11f0 f4070000 021e0683 08000069 151080ff  ...........i....
 1200 fffffff5 00000000 00000001 9cfa0500  ................
 1210 00229a15 1080ffff ffff8500 00000000  ."..............
 1220 00001e69 0002220e 37000000 02916c22  ...i..".7.....l"
 1230 e3151080 ffffffff 36000000 00000000  ........6.......
 1240 1e6a0002 25143700 00000291 68000000  .j..%.7.....h...
 1250 25230600 00021806 d2080000 57151080  %#..........W...
 1260 ffffffff 12000000 00000000 019c2501  ..............%.
 1270 07000002 13061408 00004515 1080ffff  ..........E.....
 1280 ffff1200 00000000 0000019c 26ad0600  ............&...
 1290 00021006 5d060000 37151080 ffffffff  ....]...7.......
 12a0 0e000000 00000000 019c26af 06000002  ..........&.....
 12b0 0d069106 00002915 1080ffff ffff0e00  ......).........
 12c0 00000000 0000019c 27280200 00010c08  ........'(......
 12d0 83060000 028d0600 0028b607 0000ad02  .........(......
 12e0 00000029 72060000 54080000 ac060000  ...)r...T.......
 12f0 4c4b1080 ffffffff 35000000 00000000  LK......5.......
 1300 019c2a83 06000002 91680000 1b070000  ..*......h......
 1310 04004007 00000801 b2010000 04230a00  ..@..........#..
 1320 00af0200 00300100 00000000 00000000  .....0..........
 1330 003b0800 00020106 39010000 02020570  .;......9......p
 1340 00000003 0405696e 74000208 05e10300  ......int.......
 1350 00020108 37010000 0202079f 01000002  ....7...........
 1360 0407a409 00000467 00000003 37196600  .......g....7.f.
 1370 00000208 079f0900 00044105 00000356  ..........A....V
 1380 1a660000 00020106 40010000 04990500  .f......@.......
 1390 00041112 5a000000 058f0500 00041314  ....Z...........
 13a0 a4000000 00100903 00c01180 ffffffff  ................
 13b0 06088000 000004fc 08000001 0e0e3e00  ..............>.
 13c0 0000078b 09000028 023f0812 01000008  .......(.?......
 13d0 820a0000 02411912 01000000 08cd0800  .....A..........
 13e0 00024219 12010000 08081f0f 00000243  ..B............C
 13f0 0f530000 001008f9 09000002 440f5300  .S..........D.S.
 1400 00001408 e6080000 02450f53 00000018  .........E.S....
 1410 08380d00 00024619 74010000 20000608  .8....F.t... ...
 1420 b6000000 070a0900 0028024e 08740100  .........(.N.t..
 1430 0008820a 00000250 19740100 000008cd  .......P.t......
 1440 08000002 51197401 00000808 77090000  ....Q.t.....w...
 1450 02521912 01000010 08770a00 0002530f  .R.......w....S.
 1460 53000000 1808f909 00000254 0f530000  S..........T.S..
 1470 001c081a 0a000002 550f5300 00002000  ........U.S... .
 1480 06081801 00000955 09000002 591f1201  .......U....Y...
 1490 00000903 08c01180 ffffffff 09fe0900  ................
 14a0 00025a1f 12010000 090310c0 1180ffff  ..Z.............
 14b0 ffff09e1 09000002 5c155300 00000903  ........\.S.....
 14c0 04701080 ffffffff 09870a00 00025d15  .p............].
 14d0 53000000 09030870 1080ffff ffff09c1  S......p........
 14e0 09000002 5e1be801 00000903 18c01180  ....^...........
 14f0 ffffffff 0208079a 09000009 6f090000  ............o...
 1500 025f1be8 01000009 0320c011 80ffffff  ._....... ......
 1510 ff09420a 00000262 121b0200 00090328  ..B....b.......(
 1520 c01180ff ffffff02 0805dc03 000009cd  ................
 1530 09000002 63121b02 00000903 30c01180  ....c.......0...
 1540 ffffffff 093c0900 00026412 1b020000  .....<....d.....
 1550 090338c0 1180ffff ffff0aec 09000002  ..8.............
 1560 e70209e2 0200005b 281080ff ffffff5f  .......[(......_
 1570 01000000 00000001 9ce20200 000b7000  ..............p.
 1580 02e7021f e2020000 0291480c f9090000  ..........H.....
 1590 02e70229 aa000000 0291400d 70747200  ...)......@.ptr.
 15a0 02e90208 e2020000 0291680d 6d696e00  ..........h.min.
 15b0 02ea0219 74010000 0291580e f4090000  ....t.....X.....
 15c0 02eb020f 53000000 0291540f a8281080  ....S.....T..(..
 15d0 ffffffff 26000000 00000000 0eec0800  ....&...........
 15e0 0002f902 026d0000 00029160 00001008  .....m.....`....
 15f0 0ada0900 0002d702 07e20200 000d2810  ..............(.
 1600 80ffffff ff4e0000 00000000 00019c46  .....N.........F
 1610 0300000c 7d0a0000 02d7021d aa000000  ....}...........
 1620 0291580c f9090000 02d7022a aa000000  ..X........*....
 1630 0291500e f4090000 02d9020c 37000000  ..P.........7...
 1640 02916c0d 700002da 020ee202 00000291  ..l.p...........
 1650 60001186 09000002 5302064a 251080ff  `.......S..J%...
 1660 ffffffc3 02000000 00000001 9cee0300  ................
 1670 000b7074 72000253 0219e202 00000291  ..ptr..S........
 1680 480d6d69 6e000255 02197401 00000291  H.min..U..t.....
 1690 600d6d61 6a000256 02191201 00000291  `.maj..V........
 16a0 58127425 1080ffff ffff2600 00000000  X.t%......&.....
 16b0 0000bb03 00000eec 08000002 6302026d  ............c..m
 16c0 00000002 9168000f c3271080 ffffffff  .....h...'......
 16d0 43000000 00000000 0e600a00 0002c202  C........`......
 16e0 08370000 00029154 0e930a00 0002c302  .7.....T........
 16f0 08370000 00029150 00001303 09000002  .7.....P........
 1700 f207e202 0000dc1d 1080ffff ffff6e07  ..............n.
 1710 00000000 0000019c 31050000 141a0a00  ........1.......
 1720 0002f21d aa000000 0391887f 09f10800  ................
 1730 0002f406 37000000 02916c09 600a0000  ....7.....l.`...
 1740 02f515e8 01000002 91601570 0002f608  .........`.p....
 1750 e2020000 02915809 ec080000 02f70c6d  ......X........m
 1760 00000003 91987f15 6d616a00 02f81912  ........maj.....
 1770 01000002 9150156d 696e0002 f9197401  .....P.min....t.
 1780 00000291 48092409 000002fa 19740100  ....H.$......t..
 1790 00039190 7f09f909 000002fb 10660000  .............f..
 17a0 000391a0 7f125720 1080ffff ffff4b00  ......W ......K.
 17b0 00000000 0000bf04 00000eec 08000002  ................
 17c0 8f01046d 00000002 91400012 a0211080  ...m.....@...!..
 17d0 ffffffff 4b000000 00000000 e6040000  ....K...........
 17e0 0eec0800 0002b301 046d0000 000391b8  .........m......
 17f0 7f001210 231080ff ffffff4b 00000000  ....#......K....
 1800 0000000d 0500000e ec080000 02e20107  ................
 1810 6d000000 0391b07f 000f6924 1080ffff  m.........i$....
 1820 ffff4b00 00000000 00000eec 08000002  ..K.............
 1830 0b02076d 00000003 91a87f00 0016080a  ...m............
 1840 000002ba 1f120100 00d61c10 80ffffff  ................
 1850 ff060100 00000000 00019c80 05000014  ................
 1860 f9090000 02ba3f53 00000002 915c1573  ......?S.....\.s
 1870 740002bc 0f530000 0002916c 156d616a  t....S.....l.maj
 1880 0002bd19 12010000 02916000 175f0900  ..........`.._..
 1890 0002740e e2020000 3d1c1080 ffffffff  ..t.....=.......
 18a0 99000000 00000000 019c0906 00001873  ...............s
 18b0 31000274 24e20200 00029148 18733200  1..t$......H.s2.
 18c0 02743409 06000002 9140186e 0002743f  .t4......@.n..t?
 18d0 aa000000 0391b87f 09190900 00027609  ..............v.
 18e0 10060000 02916809 3d0a0000 02770910  ......h.=....w..
 18f0 06000002 9160094f 09000002 78111606  .....`.O....x...
 1900 00000291 58091f09 00000279 11160600  ....X......y....
 1910 00029150 0006080f 06000019 06087900  ...P..........y.
 1920 00000608 53000000 17b10900 00026c0e  ....S.........l.
 1930 e2020000 ff1b1080 ffffffff 3e000000  ............>...
 1940 00000000 019c7306 00001873 00026c24  ......s....s..l$
 1950 e2020000 02915818 6300026c 2b370000  ......X.c..l+7..
 1960 00029154 186e0002 6c35aa00 00000291  ...T.n..l5......
 1970 48156900 026e0f53 00000002 916c0013  H.i..n.S.....l..
 1980 7d090000 01490c37 000000b6 4b1080ff  }....I.7....K...
 1990 ffffff2b 00000000 00000001 9cb20600  ...+............
 19a0 0014ba0d 00000149 20e20200 00029168  .......I ......h
 19b0 18640001 49293700 00000291 64001351  .d..I)7.....d..Q
 19c0 0a000001 3c0ee202 0000974b 1080ffff  ....<......K....
 19d0 ffff1f00 00000000 0000019c e2060000  ................
 19e0 18640001 3c213700 00000291 6c001a2c  .d..<!7.....l..,
 19f0 09000001 2f0c3700 00008c4b 1080ffff  ..../.7....K....
 1a00 ffff0b00 00000000 0000019c 1a690a00  .............i..
 1a10 0001240c 37000000 814b1080 ffffffff  ..$.7....K......
 1a20 0b000000 00000000 019c00ef 10000004  ................
 1a30 00000900 000801b2 01000004 220e0000  ............"...
 1a40 af020000 c0010000 00000000 00000000  ................
 1a50 1b0f0000 02010639 01000002 02057000  .......9......p.
 1a60 00000304 05696e74 00020805 e1030000  .....int........
 1a70 04bc0000 00052e18 51000000 02010837  ........Q......7
 1a80 01000004 73010000 05311964 00000002  ....s....1.d....
 1a90 02079f01 00000465 01000005 34197700  .......e....4.w.
 1aa0 00000204 07a40900 00046700 00000537  ..........g....7
 1ab0 198a0000 00020807 9f090000 02010640  ...............@
 1ac0 01000005 fd0e0000 50061608 4f010000  ........P...O...
 1ad0 067a0000 0006170e 7e000000 00067c01  .z......~.....|.
 1ae0 00000618 0e7e0000 00080608 03000006  .....~..........
 1af0 190e7e00 00001006 21000000 061a0e7e  ..~.....!......~
 1b00 00000018 068d0200 00061b0e 58000000  ............X...
 1b10 20065301 0000061c 0e580000 002206ed   .S......X..."..
 1b20 02000006 1d0e5800 00002406 0e010000  ......X...$.....
 1b30 061e0e58 00000026 066e0100 00061f0e  ...X...&.n......
 1b40 7e000000 28068d00 00000620 0e7e0000  ~...(...... .~..
 1b50 0030069a 00000006 210e7e00 00003806  .0......!.~...8.
 1b60 31010000 06220e7e 00000040 06390700  1....".~...@.9..
 1b70 0006230e 7e000000 4800058e 0c000018  ..#.~...H.......
 1b80 062e0891 01000006 c30a0000 062f0e7e  ............./.~
 1b90 00000000 06130e00 0006300e 7e000000  ..........0.~...
 1ba0 0806b60a 00000631 0e6b0000 00100613  .......1.k......
 1bb0 0d000006 320e6b00 00001400 04990500  ....2.k.........
 1bc0 00011112 7e000000 078f0500 00011314  ....~...........
 1bd0 b5010000 00100903 00e01182 ffffffff  ................
 1be0 08089101 000004fc 08000007 0e0e3e00  ..............>.
 1bf0 0000091a 0e000003 0c0a7e00 00000903  ..........~.....
 1c00 00d01180 ffffffff 09bf0d00 00030e0a  ................
 1c10 7e000000 090308d0 1180ffff ffff0998  ~...............
 1c20 0f000003 0f0b0902 00000903 10d01180  ................
 1c30 ffffffff 08086b00 0000096b 0d000003  ......k....k....
 1c40 100a7e00 00000903 10701080 ffffffff  ..~......p......
 1c50 09690f00 0003110a 7e000000 090318d0  .i......~.......
 1c60 1180ffff ffff098c 0d000003 120a7e00  ..............~.
 1c70 00000903 20d01180 ffffffff 09da0e00  .... ...........
 1c80 0003130a 7e000000 090328d0 1180ffff  ....~.....(.....
 1c90 ffff0a45 0000007a 0200000b 8a000000  ...E...z........
 1ca0 ffffff01 0009fe0a 00000315 09670200  .............g..
 1cb0 00090340 d01180ff ffffff09 600c0000  ...@........`...
 1cc0 03160a6b 00000009 0340d011 82ffffff  ...k.....@......
 1cd0 ff09950d 00000317 06bc0200 00090344  ...............D
 1ce0 d01182ff ffffff02 0102a806 00000a6b  ...............k
 1cf0 000000d3 0200000c 8a000000 000009cd  ................
 1d00 0c000003 7e0ac302 00000903 18701080  ....~........p..
 1d10 ffffffff 09b00c00 00037f0b 09020000  ................
 1d20 090348d0 1182ffff ffff0d16 0b000004  ..H.............
 1d30 560d970e 0000e14b 1080ffff ffffd800  V......K........
 1d40 00000000 0000019c e3030000 0e540077  .............T.w
 1d50 0000000f 62756600 04561ae3 03000003  ....buf..V......
 1d60 91b87f10 c30a0000 04562337 00000003  .........V#7....
 1d70 91b47f0f 64000456 2b770000 000391b0  ....d..V+w......
 1d80 7f117000 045808e3 03000002 91681170  ..p..X.......h.p
 1d90 31000459 08e30300 00029160 11703200  1..Y.......`.p2.
 1da0 04590ee3 03000002 91581175 6400045a  .Y.......X.ud..Z
 1db0 04770000 00029154 12000300 00045b04  .w.....T......[.
 1dc0 77000000 02915013 154c1080 ffffffff  w.....P..L......
 1dd0 34000000 00000000 c1030000 12510000  4............Q..
 1de0 00046a05 77000000 02914c00 14894c10  ..j.w.....L...L.
 1df0 80ffffff ff2b0000 00000000 0011746d  .....+........tm
 1e00 70000477 08910000 0002914b 00000808  p..w.......K....
 1e10 91000000 0da20000 0004560d 00000000  ..........V.....
 1e20 4f4a1080 ffffffff e7000000 00000000  OJ..............
 1e30 019cce04 00000e54 008a0000 000f6275  .......T......bu
 1e40 66000456 1ae30300 000391a8 7f10c30a  f..V............
 1e50 00000456 23370000 000391a4 7f0f6400  ...V#7........d.
 1e60 04562b8a 00000003 91987f11 70000458  .V+.........p..X
 1e70 08e30300 00029168 11703100 045908e3  .......h.p1..Y..
 1e80 03000002 91601170 32000459 0ee30300  .....`.p2..Y....
 1e90 00029158 11756400 045a048a 00000002  ...X.ud..Z......
 1ea0 91501200 03000004 5b048a00 00000291  .P......[.......
 1eb0 4813884a 1080ffff ffff3a00 00000000  H..J......:.....
 1ec0 0000ab04 00001251 00000004 6a058a00  .......Q....j...
 1ed0 00000291 40001406 4b1080ff ffffff2b  ....@...K......+
 1ee0 00000000 00000011 746d7000 04770891  ........tmp..w..
 1ef0 00000003 91bf7f00 00158f0f 00000399  ................
 1f00 0106390c 00004239 1080ffff ffff2902  ..9...B9......).
 1f10 00000000 0000019c 94050000 16c80e00  ................
 1f20 00039901 187e0000 000391a8 7f16d10e  .....~..........
 1f30 00000399 012b7e00 00000391 a07f1639  .....+~........9
 1f40 07000003 99013e7e 00000003 91987f17  ......>~........
 1f50 a20c0000 039b010b 7e000000 02915017  ........~.....P.
 1f60 c90d0000 039c010b 7e000000 02914817  ........~.....H.
 1f70 740f0000 039d010b 7e000000 02914017  t.......~.....@.
 1f80 3b0e0000 039e010e 7e000000 0391b87f  ;.......~.......
 1f90 179b0a00 0003a001 0f940500 00029168  ...............h
 1fa0 18706400 03aa010f 94050000 02916018  .pd...........`.
 1fb0 70740003 b3010f94 05000002 91580008  pt...........X..
 1fc0 087e0000 00159f0f 00000360 0106eb0b  .~.........`....
 1fd0 00003936 1080ffff ffff0903 00000000  ..96............
 1fe0 0000019c 10060000 16e60c00 00036001  ..............`.
 1ff0 2a100600 00039198 7f17d60d 00000361  *..............a
 2000 01131606 00000291 60179f02 00000362  ........`......b
 2010 010a1c06 00000391 a07f1462 361080ff  ...........b6...
 2020 ffffff3f 02000000 00000018 69000364  ...?........i..d
 2030 010e3700 00000291 6c000008 08980000  ..7.....l.......
 2040 0008084f 0100000a 91000000 2c060000  ...O........,...
 2050 0c8a0000 003f0015 8b0e0000 03310106  .....?.......1..
 2060 eb0e0000 ad331080 ffffffff 8c020000  .....3..........
 2070 00000000 019cb707 000016e6 0c000003  ................
 2080 31012310 06000003 91887f17 f10c0000  1.#.............
 2090 033f010e 7e000000 0391b87f 17d60d00  .?..~...........
 20a0 00034701 13160600 000391a8 7f13e333  ..G............3
 20b0 1080ffff ffff8300 00000000 0000c806  ................
 20c0 00001869 00033501 137e0000 00029168  ...i..5..~.....h
 20d0 14f53310 80ffffff ff6a0000 00000000  ..3......j......
 20e0 0017ba0d 00000336 01137e00 00000291  .......6..~.....
 20f0 40000013 b6341080 ffffffff 63000000  @....4......c...
 2100 00000000 0f070000 18690003 4001137e  .........i..@..~
 2110 00000002 916014e3 341080ff ffffff2f  .....`..4....../
 2120 00000000 00000017 ba0d0000 03410112  .............A..
 2130 7e000000 0391b07f 00001431 351080ff  ~..........15...
 2140 ffffffea 00000000 00000018 69000348  ............i..H
 2150 01127e00 00000291 58144b35 1080ffff  ..~.....X.K5....
 2160 ffffc600 00000000 000017d9 0d000003  ................
 2170 4a011716 06000003 91a07f17 a90a0000  J...............
 2180 034b0112 7e000000 0391987f 177e0b00  .K..~........~..
 2190 00034c01 127e0000 00029150 14ad3510  ..L..~.....P..5.
 21a0 80ffffff ff640000 00000000 00186a00  .....d........j.
 21b0 03510115 bb010000 02914814 c3351080  .Q........H..5..
 21c0 ffffffff 47000000 00000000 17ba0d00  ....G...........
 21d0 00035201 18bb0100 00039190 7f000000  ..R.............
 21e0 0000193b 0b000003 1801075e 0b00003d  ...;.......^...=
 21f0 08000035 331080ff ffffff78 00000000  ...53......x....
 2200 00000001 9c3d0800 00169400 00000318  .....=..........
 2210 012a7e00 00000291 4816550b 00000318  .*~.....H.U.....
 2220 0136bc02 00000291 44186400 0319010b  .6......D.d.....
 2230 3d080000 02916017 1f0f0000 031b010f  =.....`.........
 2240 94050000 02915814 6c331080 ffffffff  ......X.l3......
 2250 3b000000 00000000 18690003 1d01127e  ;........i.....~
 2260 00000002 91680000 1a081b46 0e000003  .....h.....F....
 2270 ed07620e 00003d08 00001031 1080ffff  ..b...=....1....
 2280 ffff2502 00000000 0000019c 7b090000  ..%.........{...
 2290 10940000 0003ed25 7e000000 0391887f  .......%~.......
 22a0 10550b00 0003ed32 bc020000 0391847f  .U.....2........
 22b0 179b0c00 00030701 0cbb0100 00029160  ...............`
 22c0 18690003 08010e7e 00000002 9158132b  .i.....~.....X.+
 22d0 311080ff ffffff28 01000000 00000026  1......(.......&
 22e0 09000012 9b0c0000 03f210bb 01000002  ................
 22f0 91681169 0003f312 7e000000 0291501c  .h.i....~.....P.
 2300 be0e0000 e9311080 ffffffff 3d000000  .....1......=...
 2310 00000000 03fd251d d50e0000 0291401d  ......%.......@.
 2320 cb0e0000 0291481e e10e0000 0391b87f  ......H.........
 2330 1feb0e00 00003210 80ffffff ff250000  ......2......%..
 2340 00000000 001eec0e 00000391 b07f0000  ................
 2350 0020be0e 0000ca32 1080ffff ffff3d00  . .....2......=.
 2360 00000000 0000030c 01211dd5 0e000003  .........!......
 2370 91a07f1d cb0e0000 0391a87f 1ee10e00  ................
 2380 00039198 7f1feb0e 0000e132 1080ffff  ...........2....
 2390 ffff2500 00000000 00001eec 0e000003  ..%.............
 23a0 91907f00 00001bc1 0c000003 e407d70a  ................
 23b0 00003d08 0000cb30 1080ffff ffff4500  ..=....0......E.
 23c0 00000000 0000019c b1090000 12c70c00  ................
 23d0 0003e50c 7e000000 02916800 21600d00  ....~.....h.!`..
 23e0 0003e006 2b0b0000 b0301080 ffffffff  ....+....0......
 23f0 1b000000 00000000 019ce309 00000f70  ...............p
 2400 74720003 e01a7e00 00000291 6800222d  tr....~.....h."-
 2410 0d000003 cd0ae80a 00007e00 00001230  ..........~....0
 2420 1080ffff ffff9e00 00000000 0000019c  ................
 2430 450a0000 11690003 ce0c7e00 00000291  E....i....~.....
 2440 68116a00 03ce0f7e 00000002 91601457  h.j....~.....`.W
 2450 301080ff ffffff41 00000000 00000012  0......A........
 2460 5b0e0000 03d5126b 00000002 915c0000  [......k.....\..
 2470 21bd0e00 00038006 250f0000 932c1080  !.......%....,..
 2480 ffffffff 7f030000 00000000 019c490c  ..............I.
 2490 000010fd 0c000003 801a7e00 00000391  ..........~.....
 24a0 d87e10e6 0c000003 80321006 00000391  .~.......2......
 24b0 d07e12d6 0d000003 8d141606 00000391  .~..............
 24c0 b07f13fa 2c1080ff ffffff31 00000000  ....,......1....
 24d0 000000ba 0a000011 69000386 137e0000  ........i....~..
 24e0 00029168 0014532d 1080ffff ffffb002  ...h..S-........
 24f0 00000000 00001169 00038e11 bb010000  .......i........
 2500 02916014 732d1080 ffffffff 86020000  ..`.s-..........
 2510 00000000 12d90d00 00039018 16060000  ................
 2520 0391a87f 12bb0a00 00039213 7e000000  ............~...
 2530 02915812 0b0e0000 039911bb 01000002  ..X.............
 2540 915014f9 2d1080ff ffffff00 02000000  .P..-...........
 2550 00000011 6a00039f 16bb0100 00029148  ....j..........H
 2560 14132e10 80ffffff ffdc0100 00000000  ................
 2570 0012ba0d 000003a0 177e0000 000391a0  .........~......
 2580 7f12150a 000003a1 15bb0100 00039198  ................
 2590 7f135e2e 1080ffff ffff2301 00000000  ..^.......#.....
 25a0 0000ef0b 0000120c 0f000003 a725bb01  .............%..
 25b0 00000391 907f12bf 0b000003 a825bb01  .............%..
 25c0 00000391 887f1246 0f000003 bb280902  .......F.....(..
 25d0 00000391 807f13af 2e1080ff ffffff49  ...............I
 25e0 00000000 000000ce 0b000011 690003af  ............i...
 25f0 2c7e0000 00029140 0014f82e 1080ffff  ,~.....@........
 2600 ffff4100 00000000 00001169 0003b52c  ..A........i...,
 2610 7e000000 0391b87f 00002384 0e00009d  ~.........#.....
 2620 2f1080ff ffffff90 01000003 c2301d9b  /............0..
 2630 0e000003 91f07e1d 910e0000 0391f87e  ......~........~
 2640 24900100 001ea70e 00000391 e87e1fb1  $............~..
 2650 0e0000b7 2f1080ff ffffff34 00000000  ..../......4....
 2660 0000001e b20e0000 0391e07e 00000000  ...........~....
 2670 00000000 22480c00 0003780a 7a0c0000  ...."H....x.z...
 2680 7e000000 3b2c1080 ffffffff 58000000  ~...;,......X...
 2690 00000000 019cac0c 000010b4 0d000003  ................
 26a0 78227e00 00000291 4812c70c 00000379  x"~.....H......y
 26b0 0c7e0000 00029168 11696478 00037a0c  .~.....h.idx..z.
 26c0 7e000000 02916011 6f666600 037b0c7e  ~.....`.off..{.~
 26d0 00000002 9158000d df0d0000 036c0628  .....X.......l.(
 26e0 0c0000cc 2b1080ff ffffff6f 00000000  ....+......o....
 26f0 00000001 9c0b0d00 0010d20e 0000036c  ...............l
 2700 1b7e0000 00029148 12c70c00 00036e0f  .~.....H......n.
 2710 7e000000 02916811 69647800 03710f7e  ~.....h.idx..q.~
 2720 00000002 91601278 0f000003 730f7e00  .....`.x....s.~.
 2730 00000291 580022a2 0b000003 670b140c  ....X.".....g...
 2740 00007e00 0000b22b 1080ffff ffff1a00  ..~....+........
 2750 00000000 0000019c 410d0000 10ba0d00  ........A.......
 2760 00036723 7e000000 02916800 227d0e00  ..g#~.....h."}..
 2770 0003650a 1a0d0000 7e000000 9a2b1080  ..e.....~....+..
 2780 ffffffff 18000000 00000000 019c770d  ..............w.
 2790 000010ba 0d000003 65217e00 00000291  ........e!~.....
 27a0 6800223e 0d000003 620bd80b 00007e00  h.">....b.....~.
 27b0 00007b2b 1080ffff ffff1f00 00000000  ..{+............
 27c0 0000019c ad0d0000 10ba0d00 00036222  ..............b"
 27d0 7e000000 02916800 22fe0d00 0003600a  ~.....h.".....`.
 27e0 7a0d0000 7e000000 5c2b1080 ffffffff  z...~...\+......
 27f0 1f000000 00000000 019ce30d 000010ba  ................
 2800 0d000003 60207e00 00000291 680021a0  ....` ~.....h.!.
 2810 0a000003 5906c80a 0000f02a 1080ffff  ....Y......*....
 2820 ffff6c00 00000000 0000019c 840e0000  ..l.............
 2830 0f707472 00035915 3d080000 0391b87f  .ptr..Y.=.......
 2840 100d0b00 00035923 7e000000 0391b07f  ......Y#~.......
 2850 123b0500 00035b0e 7e000000 0291681c  .;....[.~.....h.
 2860 840e0000 1c2b1080 ffffffff 3d000000  .....+......=...
 2870 00000000 035d171d 9b0e0000 0291581d  .....]........X.
 2880 910e0000 0291601e a70e0000 0291501f  ......`.......P.
 2890 b10e0000 332b1080 ffffffff 25000000  ....3+......%...
 28a0 00000000 1eb20e00 00029148 00000025  ...........H...%
 28b0 eb0d0000 03513303 be0e0000 26690003  .....Q3.....&i..
 28c0 514f7e00 00002794 00000003 515b7e00  QO~...'.....Q[~.
 28d0 00002866 0003540c bb010000 29286a00  ..(f..T.....)(j.
 28e0 035511bb 01000000 0025ed0d 0000034b  .U.......%.....K
 28f0 3303f80e 00002669 00034b4d 7e000000  3.....&i..KM~...
 2900 27940000 00034b59 7e000000 28660003  '.....KY~...(f..
 2910 4d0cbb01 00002928 6a00034e 11bb0100  M.....)(j..N....
 2920 00000022 7f0f0000 0340058d 0b000037  ...".....@.....7
 2930 000000be 2a1080ff ffffff32 00000000  ....*......2....
 2940 00000001 9c3b0f00 0010780f 00000340  .....;....x....@
 2950 1e7e0000 00029158 11640003 41093700  .~.....X.d..A.7.
 2960 00000291 6c002281 0f000003 3505aa0e  ....l.".....5...
 2970 00003700 00008e2a 1080ffff ffff3000  ..7....*......0.
 2980 00000000 0000019c 800f0000 10780f00  .............x..
 2990 0003351c 7e000000 02915811 72657400  ..5.~.....X.ret.
 29a0 03370937 00000002 916c0022 040d0000  .7.7.....l."....
 29b0 032b054c 0d000037 0000005e 2a1080ff  .+.L...7...^*...
 29c0 ffffff30 00000000 00000001 9cc50f00  ...0............
 29d0 0010780f 0000032b 1d7e0000 00029158  ..x....+.~.....X
 29e0 11726574 00032c09 37000000 02916c00  .ret..,.7.....l.
 29f0 0d510f00 00031f06 5b0f0000 e9291080  .Q......[....)..
 2a00 ffffffff 75000000 00000000 019c2410  ....u.........$.
 2a10 000010d2 0e000003 1f197e00 00000291  ..........~.....
 2a20 4812c70c 00000322 0f7e0000 00029168  H......".~.....h
 2a30 11696478 0003250f 7e000000 02916012  .idx..%.~.....`.
 2a40 780f0000 03270f7e 00000002 91580022  x....'.~.....X."
 2a50 ab0d0000 031a0bb1 0b00007e 000000ba  ...........~....
 2a60 291080ff ffffff2f 00000000 00000001  )....../........
 2a70 9c691000 000f6e75 6d00031a 1d7e0000  .i....num....~..
 2a80 00029168 10570c00 00031a2b 7e000000  ...h.W.....+~...
 2a90 02916000 0d260300 0002072e 45010000  ..`..&......E...
 2aa0 154a1080 ffffffff 3a000000 00000000  .J......:.......
 2ab0 019cc510 00000f73 0002073d 3d080000  .......s...==...
 2ac0 0291580f 6e000207 497e0000 00029150  ..X.n...I~.....P
 2ad0 14254a10 80ffffff ff270000 00000000  .%J......'......
 2ae0 00116900 0208137e 00000002 91680000  ..i....~.....h..
 2af0 2a6e0500 00011e0d 5a050000 364b1080  *n......Z...6K..
 2b00 ffffffff 16000000 00000000 019c0f70  ...............p
 2b10 6400011e 257e0000 00029168 00008308  d...%~.....h....
 2b20 00000400 a30b0000 0801b201 000004da  ................
 2b30 0f0000af 02000020 02000000 00000000  ....... ........
 2b40 000000b4 17000002 01063901 00000202  ..........9.....
 2b50 05700000 00030405 696e7400 020805e1  .p......int.....
 2b60 03000004 bc000000 052e1851 00000002  ...........Q....
 2b70 01083701 00000473 01000005 31196400  ..7....s....1.d.
 2b80 00000202 079f0100 00046501 00000534  ..........e....4
 2b90 19770000 00020407 a4090000 04670000  .w...........g..
 2ba0 00053719 8a000000 0208079f 09000004  ..7.............
 2bb0 41050000 05561a8a 00000005 10060410  A....V..........
 2bc0 35100000 05010000 06681100 0006050e  5........h......
 2bd0 58000000 00076373 0006060e 58000000  X.....cs....X...
 2be0 02076973 74000607 0d450000 000406cf  ..ist....E......
 2bf0 0f000006 080d4500 00000506 5b110000  ......E.....[...
 2c00 06090e58 00000006 06121000 00060a0e  ...X............
 2c10 6b000000 0806500b 0000060b 0e6b0000  k.....P......k..
 2c20 000c0004 37100000 060c1b9d 00000005  ....7...........
 2c30 0a060d10 40110000 39010000 06f90900  ....@...9.......
 2c40 00060e0e 58000000 0006780f 0000060f  ....X.....x.....
 2c50 0e7e0000 00020004 41110000 06101b11  .~......A.......
 2c60 01000008 ff050000 a8070608 6d020000  ............m...
 2c70 07723135 0007070b 7e000000 00077231  .r15....~.....r1
 2c80 34000708 0b7e0000 00080772 31330007  4....~.....r13..
 2c90 090b7e00 00001007 72313200 070a0b7e  ..~.....r12....~
 2ca0 00000018 07723131 00070b0b 7e000000  .....r11....~...
 2cb0 20077231 3000070c 0b7e0000 00280772   .r10....~...(.r
 2cc0 3900070d 0b7e0000 00300772 3800070e  9....~...0.r8...
 2cd0 0b7e0000 00380772 62700007 0f0b7e00  .~...8.rbp....~.
 2ce0 00004007 72646900 07100b7e 00000048  ..@.rdi....~...H
 2cf0 07727369 0007110b 7e000000 50077264  .rsi....~...P.rd
 2d00 78000712 0b7e0000 00580772 63780007  x....~...X.rcx..
 2d10 130b7e00 00006007 72627800 07140b7e  ..~...`.rbx....~
 2d20 00000068 07726178 0007150b 7e000000  ...h.rax....~...
 2d30 70067106 0000071a 0b6b0000 007806ed  p.q......k...x..
 2d40 07000007 1b0b6b00 00007c07 72697000  ......k...|.rip.
 2d50 071d0b7e 00000080 07637300 071e0b7e  ...~.....cs....~
 2d60 00000088 06380700 00071f0b 7e000000  .....8......~...
 2d70 90077273 70000720 0b7e0000 00980773  ..rsp.. .~.....s
 2d80 73000721 0b7e0000 00a00002 01064001  s..!.~........@.
 2d90 0000096d 0200000a 50495400 28080807  ...m....PIT.(...
 2da0 12030000 06a60200 0008090e 7e000000  ............~...
 2db0 00061b03 0000080a 0e7e0000 00080b82  .........~......
 2dc0 00000008 0c0e7e00 00001001 0bd50200  ......~.........
 2dd0 00080d0e 7e000000 18010bf0 00000008  ....~...........
 2de0 0e093700 00002001 0cfe0000 00080f0a  ..7... .........
 2df0 df000000 01df0200 00e50200 000d1203  ................
 2e00 0000000c 05010000 08100a1e 01000001  ................
 2e10 fa020000 00030000 0d120300 00000e74  ...............t
 2e20 68650008 13111300 00001203 00000100  he..............
 2e30 0f087902 00001091 00000028 03000011  ..y........(....
 2e40 8a000000 7f0012fa 10000004 1a121803  ................
 2e50 00001005 01000044 03000011 8a000000  .......D........
 2e60 ff001369 64740004 1b143403 00000903  ...idt....4.....
 2e70 40e11182 ffffffff 14c00f00 00041c0f  @...............
 2e80 39010000 09032070 1080ffff ffff1080  9..... p........
 2e90 03000080 03000011 8a000000 1f000f08  ................
 2ea0 74020000 15221100 0004580d 70030000  t...."....X.p...
 2eb0 09034070 1080ffff ffff106d 020000ac  ..@p.......m....
 2ec0 03000011 8a000000 3f00152f 10000004  ........?../....
 2ed0 7e069c03 00000903 20e01182 ffffffff  ~....... .......
 2ee0 15f51000 0004bd0a 9c030000 090360e0  ..............`.
 2ef0 1182ffff ffff107e 000000e8 03000011  .......~........
 2f00 8a000000 0f0015cb 10000004 ca0ad803  ................
 2f10 00000903 a0e01182 ffffffff 15841000  ................
 2f20 0004cb0a 6b000000 090320e1 1182ffff  ....k..... .....
 2f30 ffff1364 640004d3 0c370000 00090340  ...dd....7.....@
 2f40 f11182ff ffffff16 a2000000 03560d00  .............V..
 2f50 0000004f 4a1080ff ffffffe7 00000000  ...OJ...........
 2f60 00000001 9c0e0500 00175400 8a000000  ..........T.....
 2f70 18627566 0003561a 0e050000 0391a87f  .buf..V.........
 2f80 19c30a00 00035623 37000000 0391a47f  ......V#7.......
 2f90 18640003 562b8a00 00000391 987f1370  .d..V+.........p
 2fa0 00035808 0e050000 02916813 70310003  ..X.......h.p1..
 2fb0 59080e05 00000291 60137032 0003590e  Y.......`.p2..Y.
 2fc0 0e050000 02915813 75640003 5a048a00  ......X.ud..Z...
 2fd0 00000291 50140003 0000035b 048a0000  ....P......[....
 2fe0 00029148 1a884a10 80ffffff ff3a0000  ...H..J......:..
 2ff0 00000000 00eb0400 00145100 0000036a  ..........Q....j
 3000 058a0000 00029140 001b064b 1080ffff  .......@...K....
 3010 ffff2b00 00000000 00001374 6d700003  ..+........tmp..
 3020 77086d02 00000391 bf7f0000 0f086d02  w.m...........m.
 3030 00001ce2 10000004 d4117a41 1080ffff  ..........zA....
 3040 ffffc901 00000000 0000019c 85050000  ................
 3050 19901000 0004d43a 85050000 0291581a  .......:......X.
 3060 af411080 ffffffff 35000000 00000000  .A......5.......
 3070 64050000 13690004 d9113700 00000291  d....i....7.....
 3080 6c001bac 421080ff ffffff5f 00000000  l...B......_....
 3090 00000013 697a0004 ea167e00 00000291  ....iz....~.....
 30a0 6000000f 08450100 00167710 000004cc  `....E....w.....
 30b0 06f10f00 00394110 80ffffff ff410000  .....9A......A..
 30c0 00000000 00019cbd 05000019 ba0d0000  ................
 30d0 04cc177e 00000002 9168001d 43100000  ...~.....h..C...
 30e0 04be06b3 0f0000f3 050000f5 401080ff  ............@...
 30f0 ffffff44 00000000 00000001 9cf30500  ...D............
 3100 00193a11 000004be 13370000 0002916c  ..:......7.....l
 3110 00020102 a8060000 1e0a1000 0004b406  ................
 3120 0d110000 c3401080 ffffffff 32000000  .....@......2...
 3130 00000000 019c2c06 0000193a 11000004  ......,....:....
 3140 b4123700 00000291 6c001ed5 10000004  ..7.....l.......
 3150 88069b10 0000dc3d 1080ffff ffffe702  .......=........
 3160 00000000 0000019c 6d060000 19651000  ........m....e..
 3170 00048828 85050000 02915813 43525800  ...(......X.CRX.
 3180 04b00e7e 00000002 9168001e 48110000  ...~.....h..H...
 3190 047f0652 10000064 3d1080ff ffffff78  ...R...d=......x
 31a0 00000000 00000001 9cae0600 00187265  ..............re
 31b0 6700047f 157e0000 00029168 197f1000  g....~.....h....
 31c0 00047f26 80030000 02916000 1ec21000  ...&......`.....
 31d0 00044606 fd0f0000 283c1080 ffffffff  ..F.....(<......
 31e0 3c010000 00000000 019cf006 00001b48  <..............H
 31f0 3c1080ff ffffffd1 00000000 00000013  <...............
 3200 69000449 0e370000 0002916c 00001f19  i..I.7.....l....
 3210 11000004 36066a10 00006b3b 1080ffff  ....6.j...k;....
 3220 ffffbd00 00000000 0000019c 164c1000  .............L..
 3230 0003030d 4e110000 da4c1080 ffffffff  ....N....L......
 3240 1b010000 00000000 019ceb07 00001862  ...............b
 3250 75660003 03190e05 00000391 b87f19c3  uf..............
 3260 0a000003 03223700 00000391 b47f1864  ....."7........d
 3270 0003032c 37000000 0391b07f 13700003  ...,7........p..
 3280 05080e05 00000291 68137031 00030608  ........h.p1....
 3290 0e050000 02916013 70320003 060e0e05  ......`.p2......
 32a0 00000291 58137564 00030710 8a000000  ....X.ud........
 32b0 02915014 00030000 03080637 00000002  ..P........7....
 32c0 914c1a3e 4d1080ff ffffff3e 00000000  .L.>M......>....
 32d0 000000c9 07000014 51000000 03170737  ........Q......7
 32e0 00000002 9148001b c54d1080 ffffffff  .....H...M......
 32f0 2b000000 00000000 13746d70 00032408  +........tmp..$.
 3300 6d020000 02914700 00162603 00000207  m.....G...&.....
 3310 2e450100 00154a10 80ffffff ff3a0000  .E....J......:..
 3320 00000000 00019c47 08000018 73000207  .......G....s...
 3330 3d470800 00029158 186e0002 07497e00  =G.....X.n...I~.
 3340 00000291 501b254a 1080ffff ffff2700  ....P.%J......'.
 3350 00000000 00001369 00020813 7e000000  .......i....~...
 3360 02916800 00200821 20100000 01080d25  ..h.. .! ......%
 3370 100000b9 4c1080ff ffffff21 00000000  ....L......!....
 3380 00000001 9c193511 00000108 1b580000  ......5......X..
 3390 0002916c 195f1000 00010829 45000000  ...l._.....)E...
 33a0 02916800 00e30200 000400d1 0d000008  ..h.............
 33b0 01b20100 00044112 0000af02 00008002  ......A.........
 33c0 00000000 00000000 0000531c 00000201  ..........S.....
 33d0 06390100 00020205 70000000 03040569  .9......p......i
 33e0 6e740002 0805e103 000004bc 00000003  nt..............
 33f0 0c185100 00000201 08370100 00047301  ..Q......7....s.
 3400 0000030d 1d640000 00020207 9f010000  .....d..........
 3410 020407a4 09000002 08079f09 0000051e  ................
 3420 12000007 046b0000 00040406 a8000000  .....k..........
 3430 06b00500 00f80306 b5050000 f80206ba  ................
 3440 050000e8 0306bf05 0000e802 00074d12  ..............M.
 3450 00000230 06c01100 00764410 80ffffff  ...0.....vD.....
 3460 ff9e0000 00000000 00019cda 00000008  ................
 3470 35110000 02301e79 00000002 916c0007  5....0.y.....l..
 3480 75110000 0226065c 12000027 441080ff  u....&.\...'D...
 3490 ffffff4f 00000000 00000001 9c190100  ...O............
 34a0 00089f02 00000226 22190100 00029158  .......&"......X
 34b0 09690002 28093700 00000291 6c000a08  .i..(.7.....l...
 34c0 26010000 02010640 0100000b 1f010000  &......@........
 34d0 07841100 00021b06 92110000 c9431080  .............C..
 34e0 ffffffff 5e000000 00000000 019c6a01  ....^.........j.
 34f0 0000089f 02000002 1b211901 00000291  .........!......
 3500 58096900 021d0937 00000002 916c000c  X.i....7.....l..
 3510 b6110000 02100527 12000037 00000076  .......'...7...v
 3520 431080ff ffffff53 00000000 00000001  C......S........
 3530 9cec0100 00083511 00000210 18790000  ......5......y..
 3540 0002915c 089f0200 0002102a ec010000  ...\.......*....
 3550 02915008 f9090000 02103637 00000002  ..P.......67....
 3560 91580de4 11000002 12121901 00000291  .X..............
 3570 600e9043 1080ffff ffff3400 00000000  `..C......4.....
 3580 00000969 0002130e 37000000 02916c00  ...i....7.....l.
 3590 000a08f2 0100000f 07ec1100 00020a06  ................
 35a0 f5110000 43431080 ffffffff 33000000  ....CC......3...
 35b0 00000000 019c3202 00000835 11000002  ......2....5....
 35c0 0a187900 00000291 6c106300 020a231f  ..y.....l.c...#.
 35d0 01000002 91680007 a7110000 02040d0b  .....h..........
 35e0 12000013 4e1080ff ffffff2f 00000000  ....N....../....
 35f0 00000001 9c640200 00083511 00000204  .....d....5.....
 3600 25790000 0002916c 0011696e 62000114  %y.....l..inb...
 3610 10dc1100 00450000 00f54d10 80ffffff  .....E....M.....
 3620 ff1e0000 00000000 00019ca9 02000008  ................
 3630 35110000 01141d58 00000002 915c0972  5......X.....\.r
 3640 65740001 160a4500 00000291 6f001220  et....E.....o.. 
 3650 10000001 080d2510 0000b94c 1080ffff  ......%....L....
 3660 ffff2100 00000000 0000019c 08351100  ..!..........5..
 3670 0001081b 58000000 02916c08 5f100000  ....X.....l._...
 3680 01082945 00000002 91680000 9d000000  ..)E.....h......
 3690 0400fc0e 00000801 b2010000 04921200  ................
 36a0 00af0200 00144510 80ffffff ff0f0000  ......E.........
 36b0 00000000 00c91d00 0002a912 00000102  ................
 36c0 03075200 000003a9 12000002 06058212  ..R.............
 36d0 0000014b 00000004 52000000 00000508  ...K....R.......
 36e0 2d000000 06520000 00073a00 00000103  -....R....:.....
 36f0 016e0000 00007800 000008b6 07000058  .n....x........X
 3700 00000000 095d0000 00721200 00970000  .....]...r......
 3710 00144510 80ffffff ff0f0000 00000000  ..E.............
 3720 00019c0a 6e000000 02916800 00210300  ....n.....h..!..
 3730 0004008c 0f000008 01b20100 0004bf12  ................
 3740 0000af02 0000d002 00000000 00000000  ................
 3750 0000211e 00000201 06390100 00020205  ..!......9......
 3760 70000000 03040569 6e740002 0805e103  p......int......
 3770 000004bc 00000004 0c185100 00000201  ..........Q.....
 3780 08370100 00047301 0000040d 1d640000  .7....s......d..
 3790 00020207 9f010000 020407a4 09000004  ................
 37a0 67000000 040f1b7e 00000002 08079f09  g......~........
 37b0 00000550 49540028 02080732 01000006  ...PIT.(...2....
 37c0 a6020000 02090e72 00000000 061b0300  .......r........
 37d0 00020a0e 72000000 08078200 0000020c  ....r...........
 37e0 0e720000 00100107 d5020000 020d0e72  .r.............r
 37f0 00000018 0107f000 0000020e 09370000  .............7..
 3800 00200108 fe000000 020f0adf 00000001  . ..............
 3810 eb000000 f1000000 09320100 00000805  .........2......
 3820 01000002 100a1e01 00000106 0100000c  ................
 3830 01000009 32010000 000a7468 65000213  ....2.....the...
 3840 11130000 00320100 00010b50 495400da  .....2.....PIT..
 3850 12000001 2b010000 09320100 0000000c  ....+....2......
 3860 08850000 000d3201 00000201 06400100  ......2......@..
 3870 000ee612 00000306 05850000 00090360  ...............`
 3880 f11182ff ffffff0e c4060000 03220670  .............".p
 3890 01000009 0388f111 82ffffff ff020102  ................
 38a0 a8060000 0f0c0100 00032407 66461080  ..........$.fF..
 38b0 ffffffff 0d000000 00000000 019c10d6  ................
 38c0 00000003 1906b301 0000f845 1080ffff  ...........E....
 38d0 ffff6d00 00000000 0000019c c0010000  ..m.............
 38e0 11b60700 00380100 00029168 0010f100  .....8.....h....
 38f0 00000308 06e20100 00244510 80ffffff  .........$E.....
 3900 ffd40000 00000000 00019c19 02000011  ................
 3910 b6070000 38010000 0391b87f 12000300  ....8...........
 3920 00030b0e 58000000 02916e13 6c00030f  ....X.....n.l...
 3930 0d450000 0002916d 13680003 130d4500  .E.....m.h....E.
 3940 00000291 6c00141d 01000002 08072a02  ....l.........*.
 3950 00000234 02000015 b6070000 38010000  ...4........8...
 3960 00161902 0000f112 00005702 00008e4e  ..........W....N
 3970 1080ffff ffff4900 00000000 0000019c  ......I.........
 3980 60020000 172a0200 00029168 0018ba12  `....*.....h....
 3990 00000125 0db11200 00624e10 80ffffff  ...%.....bN.....
 39a0 ff2b0000 00000000 00019ca2 02000019  .+..............
 39b0 6a4e1080 ffffffff 20000000 00000000  jN...... .......
 39c0 13690001 260d3700 00000291 6c00001a  .i..&.7.....l...
 39d0 696e7700 011d11d2 12000058 00000042  inw........X...B
 39e0 4e1080ff ffffff20 00000000 00000001  N...... ........
 39f0 9ce70200 001b3511 0000011d 1e580000  ......5......X..
 3a00 0002915c 13726574 00011f0b 58000000  ...\.ret....X...
 3a10 02916e00 1c201000 0001080d 25100000  ..n.. ......%...
 3a20 b94c1080 ffffffff 21000000 00000000  .L......!.......
 3a30 019c1b35 11000001 081b5800 00000291  ...5......X.....
 3a40 6c1b5f10 00000108 29450000 00029168  l._.....)E.....h
 3a50 00005b00 00000300 73110000 08018046  ..[.....s......F
 3a60 1080ffff ffffd849 1080ffff ffff6b1f  .......I......k.
 3a70 00007372 632f6172 63682f69 6e746572  ..src/arch/inter
 3a80 72757074 5f68616e 646c652e 61736d00  rupt_handle.asm.
 3a90 4e41534d 20322e31 342e3032 00018002  NASM 2.14.02....
 3aa0 80461080 ffffffff 00000000 00000000  .F..............
 3ab0 00520000 0003008e 11000008 01e04910  .R............I.
 3ac0 80ffffff ffec4910 80ffffff ff2c2000  ......I......, .
 3ad0 00737263 2f617263 682f7574 696c6974  .src/arch/utilit
 3ae0 792e6173 6d004e41 534d2032 2e31342e  y.asm.NASM 2.14.
 3af0 30320001 8002e049 1080ffff ffff0000  02.....I........
 3b00 00000000 00000052 00000003 00a91100  .......R........
 3b10 000801f0 491080ff ffffff15 4a1080ff  ....I.......J...
 3b20 ffffff77 20000073 72632f61 7263682f  ...w ..src/arch/
 3b30 6764745f 61736d2e 61736d00 4e41534d  gdt_asm.asm.NASM
 3b40 20322e31 342e3032 00018002 f0491080   2.14.02.....I..
 3b50 ffffffff 00000000 00000000 00        .............   
Contenu de la section .debug_abbrev :
 0000 01110125 0e130b03 0e1b0e55 17110110  ...%.......U....
 0010 17000002 24000b0b 3e0b030e 00000324  ....$...>......$
 0020 000b0b3e 0b030800 00041600 030e3a0b  ...>..........:.
 0030 3b0b390b 49130000 05130103 0e0b0b3a  ;.9.I..........:
 0040 0b3b0b39 0b011300 00060d00 030e3a0b  .;.9..........:.
 0050 3b0b390b 4913380b 00000702 0103080b  ;.9.I.8.........
 0060 0b3a0b3b 0b390b01 13000008 0d00030e  .:.;.9..........
 0070 3a0b3b0b 390b4913 380b320b 0000092e  :.;.9.I.8.2.....
 0080 013f1903 0e3a0b3b 0b390b6e 0e320b3c  .?...:.;.9.n.2.<
 0090 19641301 1300000a 05004913 34190000  .d........I.4...
 00a0 0b2e003f 1903083a 0b3b0b39 0b6e0e49  ...?...:.;.9.n.I
 00b0 13320b3c 1900000c 0f000b0b 49130000  .2.<........I...
 00c0 0d2e013f 19030e3a 0b3b0b39 0b6e0e11  ...?...:.;.9.n..
 00d0 01120740 18974219 01130000 0e2f0003  ...@..B....../..
 00e0 08491300 000f0500 03083a0b 3b0b390b  .I........:.;.9.
 00f0 49130218 00001005 00030e3a 0b3b0b39  I..........:.;.9
 0100 0b491302 18000011 34000308 3a0b3b0b  .I......4...:.;.
 0110 390b4913 02180000 12340003 0e3a0b3b  9.I......4...:.;
 0120 0b390b49 13021800 00130b01 11011207  .9.I............
 0130 01130000 140b0111 01120700 00152e01  ................
 0140 3f19030e 3a0b3b0b 390b6e0e 11011207  ?...:.;.9.n.....
 0150 40189642 19011300 00160101 49130113  @..B........I...
 0160 00001721 0049132f 0b000018 0f000b0b  ...!.I./........
 0170 00000001 1101250e 130b030e 1b0e5517  ......%.......U.
 0180 11011017 00000224 000b0b3e 0b030e00  .......$...>....
 0190 00032400 0b0b3e0b 03080000 04160003  ..$...>.........
 01a0 0e3a0b3b 0b390b49 13000005 13010b0b  .:.;.9.I........
 01b0 3a0b3b0b 390b6e0e 01130000 060d0003  :.;.9.n.........
 01c0 083a0b3b 0b390b49 13380b00 00070d00  .:.;.9.I.8......
 01d0 030e3a0b 3b0b390b 4913380b 00000813  ..:.;.9.I.8.....
 01e0 010b0b3a 0b3b0b39 0b011300 00091301  ...:.;.9........
 01f0 0b0b8801 0b3a0b3b 0b390b6e 0e011300  .....:.;.9.n....
 0200 000a0d00 030e3a0b 3b0b390b 49138801  ......:.;.9.I...
 0210 0b380b00 000b1600 030e3a0b 3b0b390b  .8........:.;.9.
 0220 49138801 0b00000c 3b00030e 00000d34  I.......;......4
 0230 00030e3a 0b3b0b39 0b49133f 19021800  ...:.;.9.I.?....
 0240 000e3400 03083a0b 3b0b390b 49133f19  ..4...:.;.9.I.?.
 0250 02180000 0f010149 13011300 00102100  .......I......!.
 0260 49132f0b 00001121 0049132f 05000012  I./....!.I./....
 0270 3400030e 3a0b3b0b 390b4913 3f198801  4...:.;.9.I.?...
 0280 05021800 00132e01 3f19030e 3a0b3b0b  ........?...:.;.
 0290 390b6e0e 11011207 40189642 19011300  9.n.....@..B....
 02a0 00140500 03083a0b 3b0b390b 49130218  ......:.;.9.I...
 02b0 0000152e 013f1903 0e3a0b3b 0b390b6e  .....?...:.;.9.n
 02c0 0e110112 07401897 42190113 00001605  .....@..B.......
 02d0 00030e3a 0b3b0b39 0b491302 18000017  ...:.;.9.I......
 02e0 3400030e 3a0b3b0b 390b4913 02180000  4...:.;.9.I.....
 02f0 182e0103 0e3a0b3b 0b390b11 01120740  .....:.;.9.....@
 0300 18974219 01130000 190f000b 0b491300  ..B..........I..
 0310 001a2e00 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0320 49131101 12074018 97421900 001b0b01  I.....@..B......
 0330 11011207 00001c34 0003083a 0b3b0b39  .......4...:.;.9
 0340 0b491302 1800001d 0f000b0b 00000001  .I..............
 0350 1101250e 130b030e 1b0e5517 11011017  ..%.......U.....
 0360 00000224 000b0b3e 0b030e00 00032400  ...$...>......$.
 0370 0b0b3e0b 03080000 04160003 0e3a0b3b  ..>..........:.;
 0380 0b390b49 13000005 1301030e 0b0b3a0b  .9.I..........:.
 0390 3b0b390b 01130000 060d0003 0e3a0b3b  ;.9..........:.;
 03a0 0b390b49 13380b00 00070401 030e3e0b  .9.I.8........>.
 03b0 0b0b4913 3a0b3b0b 390b0113 00000828  ..I.:.;.9......(
 03c0 00030e1c 05000009 3400030e 3a0b3b0b  ........4...:.;.
 03d0 390b4913 88010502 1800000a 0f000b0b  9.I.............
 03e0 49130000 0b010149 13011300 000c2100  I......I......!.
 03f0 49132f05 00000d34 00030e3a 0b3b0b39  I./....4...:.;.9
 0400 0b491302 1800000e 3400030e 3a0b3b0b  .I......4...:.;.
 0410 390b4913 3f190218 00000f2e 013f1903  9.I.?........?..
 0420 0e3a0b3b 0b390b11 01120740 18964219  .:.;.9.....@..B.
 0430 01130000 10050003 0e3a0b3b 0b390b49  .........:.;.9.I
 0440 13021800 00113400 03083a0b 3b0b390b  ......4...:.;.9.
 0450 49130218 0000120b 01110112 07000013  I...............
 0460 2e013f19 030e3a0b 3b0b390b 6e0e1101  ..?...:.;.9.n...
 0470 12074018 97421900 00140500 03083a0b  ..@..B........:.
 0480 3b0b390b 49130218 00000001 1101250e  ;.9.I.........%.
 0490 130b030e 1b0e5517 11011017 00000224  ......U........$
 04a0 000b0b3e 0b030e00 00032400 0b0b3e0b  ...>......$...>.
 04b0 03080000 04160003 0e3a0b3b 0b390b49  .........:.;.9.I
 04c0 13000005 1301030e 0b0b3a0b 3b0b390b  ..........:.;.9.
 04d0 01130000 060d0003 083a0b3b 0b390b49  .........:.;.9.I
 04e0 13380b00 00070d00 030e3a0b 3b0b390b  .8........:.;.9.
 04f0 4913380b 00000804 01030e3e 0b0b0b49  I.8........>...I
 0500 133a0b3b 0b390b01 13000009 2800030e  .:.;.9......(...
 0510 1c0b0000 0a130103 0e0b053a 0b3b0b39  ...........:.;.9
 0520 0b011300 000b0d00 030e3a0b 3b0b390b  ..........:.;.9.
 0530 49133805 00000c2e 013f1903 0e6e0e34  I.8......?...n.4
 0540 193c1964 1300000d 05004913 34190000  .<.d......I.4...
 0550 0e010149 13011300 000f2100 49132f05  ...I......!.I./.
 0560 0000100f 000b0b49 13000011 15000000  .......I........
 0570 12340003 0e3a0b3b 0b390b49 13880105  .4...:.;.9.I....
 0580 02180000 13340003 0e3a0b3b 0b390b49  .....4...:.;.9.I
 0590 133f1902 18000014 26004913 0000152e  .?......&.I.....
 05a0 00030e34 19110112 07401896 42190000  ...4.....@..B...
 05b0 162e0103 0e341911 01120740 18964219  .....4.....@..B.
 05c0 01130000 17050003 0e3a0b3b 0b390b49  .........:.;.9.I
 05d0 13021800 00182e01 3f19030e 3a0b3b0b  ........?...:.;.
 05e0 390b1101 12074018 96421901 13000019  9.....@..B......
 05f0 2e003f19 030e3a0b 3b0b390b 49131101  ..?...:.;.9.I...
 0600 12074018 96421900 001a2e00 3f19030e  ..@..B......?...
 0610 3a0b3b0b 390b4913 11011207 40189742  :.;.9.I.....@..B
 0620 1900001b 2e013f19 030e3a0b 3b0b390b  ......?...:.;.9.
 0630 6e0e1101 12074018 96421901 1300001c  n.....@..B......
 0640 05000308 3a0b3b0b 390b4913 02180000  ....:.;.9.I.....
 0650 1d0b0155 17011300 001e3400 03083a0b  ...U......4...:.
 0660 3b0b390b 49130218 00001f0b 01551700  ;.9.I........U..
 0670 00202e01 3f19030e 3a0b3b0b 390b6e0e  . ..?...:.;.9.n.
 0680 49131101 12074018 96421901 13000021  I.....@..B.....!
 0690 0b011101 12070113 0000220b 01110112  ..........".....
 06a0 07000023 2e013f19 030e3a0b 3b0b390b  ...#..?...:.;.9.
 06b0 6e0e1101 12074018 97421901 13000024  n.....@..B.....$
 06c0 3400030e 3a0b3b0b 390b4913 02180000  4...:.;.9.I.....
 06d0 252e003f 19030e3a 0b3b0b39 0b6e0e11  %..?...:.;.9.n..
 06e0 01120740 18964219 0000262e 003f1903  ...@..B...&..?..
 06f0 0e3a0b3b 0b390b6e 0e110112 07401897  .:.;.9.n.....@..
 0700 42190000 272e0147 133a0b3b 0b390b64  B...'..G.:.;.9.d
 0710 13200b01 13000028 0500030e 49133419  . .....(....I.4.
 0720 0000292e 0131136e 0e641311 01120740  ..)..1.n.d.....@
 0730 18974219 00002a05 00311302 18000000  ..B...*..1......
 0740 01110125 0e130b03 0e1b0e55 17110110  ...%.......U....
 0750 17000002 24000b0b 3e0b030e 00000324  ....$...>......$
 0760 000b0b3e 0b030800 00041600 030e3a0b  ...>..........:.
 0770 3b0b390b 49130000 05340003 0e3a0b3b  ;.9.I....4...:.;
 0780 0b390b49 13880105 02180000 060f000b  .9.I............
 0790 0b491300 00071301 030e0b0b 3a0b3b0b  .I..........:.;.
 07a0 390b0113 0000080d 00030e3a 0b3b0b39  9..........:.;.9
 07b0 0b491338 0b000009 3400030e 3a0b3b0b  .I.8....4...:.;.
 07c0 390b4913 02180000 0a2e013f 19030e3a  9.I........?...:
 07d0 0b3b0539 0b491311 01120740 18964219  .;.9.I.....@..B.
 07e0 01130000 0b050003 083a0b3b 05390b49  .........:.;.9.I
 07f0 13021800 000c0500 030e3a0b 3b05390b  ..........:.;.9.
 0800 49130218 00000d34 0003083a 0b3b0539  I......4...:.;.9
 0810 0b491302 1800000e 3400030e 3a0b3b05  .I......4...:.;.
 0820 390b4913 02180000 0f0b0111 01120700  9.I.............
 0830 00100f00 0b0b0000 112e013f 19030e3a  ...........?...:
 0840 0b3b0539 0b110112 07401896 42190113  .;.9.....@..B...
 0850 0000120b 01110112 07011300 00132e01  ................
 0860 3f19030e 3a0b3b0b 390b4913 11011207  ?...:.;.9.I.....
 0870 40189642 19011300 00140500 030e3a0b  @..B..........:.
 0880 3b0b390b 49130218 00001534 0003083a  ;.9.I......4...:
 0890 0b3b0b39 0b491302 18000016 2e01030e  .;.9.I..........
 08a0 3a0b3b0b 390b4913 11011207 40189642  :.;.9.I.....@..B
 08b0 19011300 00172e01 030e3a0b 3b0b390b  ..........:.;.9.
 08c0 49131101 12074018 97421901 13000018  I.....@..B......
 08d0 05000308 3a0b3b0b 390b4913 02180000  ....:.;.9.I.....
 08e0 19260000 001a2e00 3f19030e 3a0b3b0b  .&......?...:.;.
 08f0 390b4913 11011207 40189742 19000000  9.I.....@..B....
 0900 01110125 0e130b03 0e1b0e55 17110110  ...%.......U....
 0910 17000002 24000b0b 3e0b030e 00000324  ....$...>......$
 0920 000b0b3e 0b030800 00041600 030e3a0b  ...>..........:.
 0930 3b0b390b 49130000 05130103 0e0b0b3a  ;.9.I..........:
 0940 0b3b0b39 0b011300 00060d00 030e3a0b  .;.9..........:.
 0950 3b0b390b 4913380b 00000734 00030e3a  ;.9.I.8....4...:
 0960 0b3b0b39 0b491388 01050218 0000080f  .;.9.I..........
 0970 000b0b49 13000009 3400030e 3a0b3b0b  ...I....4...:.;.
 0980 390b4913 3f190218 00000a01 01491301  9.I.?........I..
 0990 1300000b 21004913 2f060000 0c210049  ....!.I./....!.I
 09a0 132f0b00 000d2e01 3f19030e 3a0b3b0b  ./......?...:.;.
 09b0 390b6e0e 11011207 40189742 19011300  9.n.....@..B....
 09c0 000e2f00 03084913 00000f05 0003083a  ../...I........:
 09d0 0b3b0b39 0b491302 18000010 0500030e  .;.9.I..........
 09e0 3a0b3b0b 390b4913 02180000 11340003  :.;.9.I......4..
 09f0 083a0b3b 0b390b49 13021800 00123400  .:.;.9.I......4.
 0a00 030e3a0b 3b0b390b 49130218 0000130b  ..:.;.9.I.......
 0a10 01110112 07011300 00140b01 11011207  ................
 0a20 0000152e 013f1903 0e3a0b3b 05390b6e  .....?...:.;.9.n
 0a30 0e110112 07401896 42190113 00001605  .....@..B.......
 0a40 00030e3a 0b3b0539 0b491302 18000017  ...:.;.9.I......
 0a50 3400030e 3a0b3b05 390b4913 02180000  4...:.;.9.I.....
 0a60 18340003 083a0b3b 05390b49 13021800  .4...:.;.9.I....
 0a70 00192e01 3f19030e 3a0b3b05 390b6e0e  ....?...:.;.9.n.
 0a80 49131101 12074018 96421901 1300001a  I.....@..B......
 0a90 0f000b0b 00001b2e 013f1903 0e3a0b3b  .........?...:.;
 0aa0 0b390b6e 0e491311 01120740 18964219  .9.n.I.....@..B.
 0ab0 01130000 1c1d0131 13110112 07580b59  .......1.....X.Y
 0ac0 0b570b00 001d0500 31130218 00001e34  .W......1......4
 0ad0 00311302 1800001f 0b013113 11011207  .1........1.....
 0ae0 0000201d 01311311 01120758 0b590557  .. ..1.....X.Y.W
 0af0 0b000021 2e013f19 030e3a0b 3b0b390b  ...!..?...:.;.9.
 0b00 6e0e1101 12074018 96421901 13000022  n.....@..B....."
 0b10 2e013f19 030e3a0b 3b0b390b 6e0e4913  ..?...:.;.9.n.I.
 0b20 11011207 40189742 19011300 00231d01  ....@..B.....#..
 0b30 31135201 5517580b 590b570b 0000240b  1.R.U.X.Y.W...$.
 0b40 01551700 00252e01 030e3a0b 3b0b390b  .U...%....:.;.9.
 0b50 200b0113 00002605 0003083a 0b3b0b39   .....&....:.;.9
 0b60 0b491300 00270500 030e3a0b 3b0b390b  .I...'....:.;.9.
 0b70 49130000 28340003 083a0b3b 0b390b49  I...(4...:.;.9.I
 0b80 13000029 0b010000 2a2e013f 19030e3a  ...)....*..?...:
 0b90 0b3b0b39 0b6e0e11 01120740 18974219  .;.9.n.....@..B.
 0ba0 00000001 1101250e 130b030e 1b0e5517  ......%.......U.
 0bb0 11011017 00000224 000b0b3e 0b030e00  .......$...>....
 0bc0 00032400 0b0b3e0b 03080000 04160003  ..$...>.........
 0bd0 0e3a0b3b 0b390b49 13000005 13010b0b  .:.;.9.I........
 0be0 3a0b3b0b 390b6e0e 01130000 060d0003  :.;.9.n.........
 0bf0 0e3a0b3b 0b390b49 13380b00 00070d00  .:.;.9.I.8......
 0c00 03083a0b 3b0b390b 4913380b 00000813  ..:.;.9.I.8.....
 0c10 01030e0b 0b3a0b3b 0b390b01 13000009  .....:.;.9......
 0c20 26004913 00000a02 0103080b 0b3a0b3b  &.I..........:.;
 0c30 0b390b01 1300000b 0d00030e 3a0b3b0b  .9..........:.;.
 0c40 390b4913 380b320b 00000c2e 013f1903  9.I.8.2......?..
 0c50 0e3a0b3b 0b390b6e 0e320b3c 19641301  .:.;.9.n.2.<.d..
 0c60 1300000d 05004913 34190000 0e2e003f  ......I.4......?
 0c70 1903083a 0b3b0b39 0b6e0e49 13320b3c  ...:.;.9.n.I.2.<
 0c80 1900000f 0f000b0b 49130000 10010149  ........I......I
 0c90 13011300 00112100 49132f0b 00001234  ......!.I./....4
 0ca0 00030e3a 0b3b0b39 0b49133f 193c1900  ...:.;.9.I.?.<..
 0cb0 00133400 03083a0b 3b0b390b 49130218  ..4...:.;.9.I...
 0cc0 00001434 00030e3a 0b3b0b39 0b491302  ...4...:.;.9.I..
 0cd0 18000015 3400030e 3a0b3b0b 390b4913  ....4...:.;.9.I.
 0ce0 3f190218 0000162e 013f1903 0e3a0b3b  ?........?...:.;
 0cf0 0b390b6e 0e110112 07401897 42190113  .9.n.....@..B...
 0d00 0000172f 00030849 13000018 05000308  .../...I........
 0d10 3a0b3b0b 390b4913 02180000 19050003  :.;.9.I.........
 0d20 0e3a0b3b 0b390b49 13021800 001a0b01  .:.;.9.I........
 0d30 11011207 01130000 1b0b0111 01120700  ................
 0d40 001c2e01 3f19030e 3a0b3b0b 390b1101  ....?...:.;.9...
 0d50 12074018 96421901 1300001d 2e013f19  ..@..B........?.
 0d60 030e3a0b 3b0b390b 6e0e4913 11011207  ..:.;.9.n.I.....
 0d70 40189742 19011300 001e2e01 3f19030e  @..B........?...
 0d80 3a0b3b0b 390b6e0e 11011207 40189642  :.;.9.n.....@..B
 0d90 19011300 001f2e00 3f19030e 3a0b3b0b  ........?...:.;.
 0da0 390b6e0e 11011207 40189642 19000020  9.n.....@..B... 
 0db0 0f000b0b 0000212e 013f1903 0e3a0b3b  ......!..?...:.;
 0dc0 0b390b6e 0e110112 07401897 42190000  .9.n.....@..B...
 0dd0 00011101 250e130b 030e1b0e 55171101  ....%.......U...
 0de0 10170000 0224000b 0b3e0b03 0e000003  .....$...>......
 0df0 24000b0b 3e0b0308 00000416 00030e3a  $...>..........:
 0e00 0b3b0b39 0b491300 00050401 030e3e0b  .;.9.I........>.
 0e10 0b0b4913 3a0b3b0b 390b0113 00000628  ..I.:.;.9......(
 0e20 00030e1c 05000007 2e013f19 030e3a0b  ..........?...:.
 0e30 3b0b390b 6e0e1101 12074018 96421901  ;.9.n.....@..B..
 0e40 13000008 0500030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0e50 02180000 09340003 083a0b3b 0b390b49  .....4...:.;.9.I
 0e60 13021800 000a0f00 0b0b4913 00000b26  ..........I....&
 0e70 00491300 000c2e01 3f19030e 3a0b3b0b  .I......?...:.;.
 0e80 390b6e0e 49131101 12074018 96421901  9.n.I.....@..B..
 0e90 1300000d 3400030e 3a0b3b0b 390b4913  ....4...:.;.9.I.
 0ea0 02180000 0e0b0111 01120700 000f2600  ..............&.
 0eb0 00001005 0003083a 0b3b0b39 0b491302  .......:.;.9.I..
 0ec0 18000011 2e013f19 03083a0b 3b0b390b  ......?...:.;.9.
 0ed0 6e0e4913 11011207 40189742 19011300  n.I.....@..B....
 0ee0 00122e01 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0ef0 11011207 40189742 19000000 01110125  ....@..B.......%
 0f00 0e130b03 0e1b0e11 01120710 17000002  ................
 0f10 0201030e 0b0b3a0b 3b0b390b 01130000  ......:.;.9.....
 0f20 032e013f 19030e3a 0b3b0b39 0b6e0e32  ...?...:.;.9.n.2
 0f30 0b3c1964 13000004 05004913 34190000  .<.d......I.4...
 0f40 050f000b 0b491300 00062600 49130000  .....I....&.I...
 0f50 072e0147 133a0b3b 0b390b64 13200b01  ...G.:.;.9.d. ..
 0f60 13000008 0500030e 49133419 0000092e  ........I.4.....
 0f70 0131136e 0e641311 01120740 18974219  .1.n.d.....@..B.
 0f80 00000a05 00311302 18000000 01110125  .....1.........%
 0f90 0e130b03 0e1b0e55 17110110 17000002  .......U........
 0fa0 24000b0b 3e0b030e 00000324 000b0b3e  $...>......$...>
 0fb0 0b030800 00041600 030e3a0b 3b0b390b  ..........:.;.9.
 0fc0 49130000 05020103 080b0b3a 0b3b0b39  I..........:.;.9
 0fd0 0b011300 00060d00 030e3a0b 3b0b390b  ..........:.;.9.
 0fe0 4913380b 0000070d 00030e3a 0b3b0b39  I.8........:.;.9
 0ff0 0b491338 0b320b00 00082e01 3f19030e  .I.8.2......?...
 1000 3a0b3b0b 390b6e0e 320b3c19 64130113  :.;.9.n.2.<.d...
 1010 00000905 00491334 1900000a 2e003f19  .....I.4......?.
 1020 03083a0b 3b0b390b 6e0e4913 320b3c19  ..:.;.9.n.I.2.<.
 1030 00000b2e 013f1903 086e0e34 19320b3c  .....?...n.4.2.<
 1040 19641300 000c0f00 0b0b4913 00000d26  .d........I....&
 1050 00491300 000e3400 030e3a0b 3b0b390b  .I....4...:.;.9.
 1060 49133f19 02180000 0f2e0047 133a0b3b  I.?........G.:.;
 1070 0b390b11 01120740 18974219 0000102e  .9.....@..B.....
 1080 0147133a 0b3b0b39 0b641311 01120740  .G.:.;.9.d.....@
 1090 18964219 01130000 11050003 0e491334  ..B..........I.4
 10a0 19021800 00123400 030e3a0b 3b0b390b  ......4...:.;.9.
 10b0 49130218 00001334 0003083a 0b3b0b39  I......4...:.;.9
 10c0 0b491302 18000014 2e014713 3a0b3b0b  .I........G.:.;.
 10d0 390b6413 200b0113 00001505 00030e49  9.d. ..........I
 10e0 13341900 00162e01 31136e0e 64131101  .4......1.n.d...
 10f0 12074018 97421901 13000017 05003113  ..@..B........1.
 1100 02180000 182e013f 19030e3a 0b3b0b39  .......?...:.;.9
 1110 0b6e0e11 01120740 18964219 01130000  .n.....@..B.....
 1120 190b0111 01120700 001a2e01 3f190308  ............?...
 1130 3a0b3b0b 390b6e0e 49131101 12074018  :.;.9.n.I.....@.
 1140 97421901 1300001b 0500030e 3a0b3b0b  .B..........:.;.
 1150 390b4913 02180000 1c2e013f 19030e3a  9.I........?...:
 1160 0b3b0b39 0b6e0e11 01120740 18974219  .;.9.n.....@..B.
 1170 00000001 11011101 12011006 03082508  ..............%.
 1180 13050000 022e0011 01400600 00000111  .........@......
 1190 01110112 01100603 08250813 05000002  .........%......
 11a0 2e001101 40060000 00011101 11011201  ....@...........
 11b0 10060308 25081305 0000022e 00110140  ....%..........@
 11c0 06000000                             ....            
Contenu de la section .debug_aranges :
 0000 4c000000 02000000 00000800 00000000  L...............
 0010 00101080 ffffffff 07010000 00000000  ................
 0020 154a1080 ffffffff 3a000000 00000000  .J......:.......
 0030 4f4a1080 ffffffff e7000000 00000000  OJ..............
 0040 00000000 00000000 00000000 00000000  ................
 0050 3c000000 0200fe03 00000800 00000000  <...............
 0060 07111080 ffffffff b5020000 00000000  ................
 0070 154a1080 ffffffff 3a000000 00000000  .J......:.......
 0080 00000000 00000000 00000000 00000000  ................
 0090 3c000000 02008109 00000800 00000000  <...............
 00a0 bc131080 ffffffff 6d010000 00000000  ........m.......
 00b0 364b1080 ffffffff 16000000 00000000  6K..............
 00c0 00000000 00000000 00000000 00000000  ................
 00d0 3c000000 0200560c 00000800 00000000  <.....V.........
 00e0 29151080 ffffffff d6060000 00000000  )...............
 00f0 4c4b1080 ffffffff 35000000 00000000  LK......5.......
 0100 00000000 00000000 00000000 00000000  ................
 0110 6c000000 02000c13 00000800 00000000  l...............
 0120 ff1b1080 ffffffff bb0d0000 00000000  ................
 0130 814b1080 ffffffff 0b000000 00000000  .K..............
 0140 8c4b1080 ffffffff 0b000000 00000000  .K..............
 0150 974b1080 ffffffff 1f000000 00000000  .K..............
 0160 b64b1080 ffffffff 2b000000 00000000  .K......+.......
 0170 00000000 00000000 00000000 00000000  ................
 0180 6c000000 02002b1a 00000800 00000000  l.....+.........
 0190 ba291080 ffffffff b1110000 00000000  .)..............
 01a0 364b1080 ffffffff 16000000 00000000  6K..............
 01b0 154a1080 ffffffff 3a000000 00000000  .J......:.......
 01c0 4f4a1080 ffffffff e7000000 00000000  OJ..............
 01d0 e14b1080 ffffffff d8000000 00000000  .K..............
 01e0 00000000 00000000 00000000 00000000  ................
 01f0 6c000000 02001e2b 00000800 00000000  l......+........
 0200 6b3b1080 ffffffff d8070000 00000000  k;..............
 0210 b94c1080 ffffffff 21000000 00000000  .L......!.......
 0220 154a1080 ffffffff 3a000000 00000000  .J......:.......
 0230 da4c1080 ffffffff 1b010000 00000000  .L..............
 0240 4f4a1080 ffffffff e7000000 00000000  OJ..............
 0250 00000000 00000000 00000000 00000000  ................
 0260 5c000000 0200a533 00000800 00000000  \......3........
 0270 43431080 ffffffff d1010000 00000000  CC..............
 0280 b94c1080 ffffffff 21000000 00000000  .L......!.......
 0290 f54d1080 ffffffff 1e000000 00000000  .M..............
 02a0 134e1080 ffffffff 2f000000 00000000  .N....../.......
 02b0 00000000 00000000 00000000 00000000  ................
 02c0 2c000000 02008c36 00000800 00000000  ,......6........
 02d0 14451080 ffffffff 0f000000 00000000  .E..............
 02e0 00000000 00000000 00000000 00000000  ................
 02f0 6c000000 02002d37 00000800 00000000  l.....-7........
 0300 24451080 ffffffff 4f010000 00000000  $E......O.......
 0310 b94c1080 ffffffff 21000000 00000000  .L......!.......
 0320 424e1080 ffffffff 20000000 00000000  BN...... .......
 0330 624e1080 ffffffff 2b000000 00000000  bN......+.......
 0340 8e4e1080 ffffffff 49000000 00000000  .N......I.......
 0350 00000000 00000000 00000000 00000000  ................
 0360 2c000000 0300523a 00000800 00000000  ,.....R:........
 0370 80461080 ffffffff 58030000 00000000  .F......X.......
 0380 00000000 00000000 00000000 00000000  ................
 0390 2c000000 0300b13a 00000800 00000000  ,......:........
 03a0 e0491080 ffffffff 0c000000 00000000  .I..............
 03b0 00000000 00000000 00000000 00000000  ................
 03c0 2c000000 0300073b 00000800 00000000  ,......;........
 03d0 f0491080 ffffffff 25000000 00000000  .I......%.......
 03e0 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_ranges :
 0000 00101080 ffffffff 07111080 ffffffff  ................
 0010 154a1080 ffffffff 4f4a1080 ffffffff  .J......OJ......
 0020 4f4a1080 ffffffff 364b1080 ffffffff  OJ......6K......
 0030 00000000 00000000 00000000 00000000  ................
 0040 07111080 ffffffff bc131080 ffffffff  ................
 0050 154a1080 ffffffff 4f4a1080 ffffffff  .J......OJ......
 0060 00000000 00000000 00000000 00000000  ................
 0070 bc131080 ffffffff 29151080 ffffffff  ........).......
 0080 364b1080 ffffffff 4c4b1080 ffffffff  6K......LK......
 0090 00000000 00000000 00000000 00000000  ................
 00a0 b41a1080 ffffffff dc1a1080 ffffffff  ................
 00b0 141b1080 ffffffff 171b1080 ffffffff  ................
 00c0 00000000 00000000 00000000 00000000  ................
 00d0 de1a1080 ffffffff 111b1080 ffffffff  ................
 00e0 171b1080 ffffffff 181b1080 ffffffff  ................
 00f0 00000000 00000000 00000000 00000000  ................
 0100 29151080 ffffffff ff1b1080 ffffffff  )...............
 0110 4c4b1080 ffffffff 814b1080 ffffffff  LK.......K......
 0120 00000000 00000000 00000000 00000000  ................
 0130 ff1b1080 ffffffff ba291080 ffffffff  .........)......
 0140 814b1080 ffffffff 8c4b1080 ffffffff  .K.......K......
 0150 8c4b1080 ffffffff 974b1080 ffffffff  .K.......K......
 0160 974b1080 ffffffff b64b1080 ffffffff  .K.......K......
 0170 b64b1080 ffffffff e14b1080 ffffffff  .K.......K......
 0180 00000000 00000000 00000000 00000000  ................
 0190 9d2f1080 ffffffff eb2f1080 ffffffff  ./......./......
 01a0 ee2f1080 ffffffff ef2f1080 ffffffff  ./......./......
 01b0 00000000 00000000 00000000 00000000  ................
 01c0 ba291080 ffffffff 6b3b1080 ffffffff  .)......k;......
 01d0 364b1080 ffffffff 4c4b1080 ffffffff  6K......LK......
 01e0 154a1080 ffffffff 4f4a1080 ffffffff  .J......OJ......
 01f0 4f4a1080 ffffffff 364b1080 ffffffff  OJ......6K......
 0200 e14b1080 ffffffff b94c1080 ffffffff  .K.......L......
 0210 00000000 00000000 00000000 00000000  ................
 0220 6b3b1080 ffffffff 43431080 ffffffff  k;......CC......
 0230 b94c1080 ffffffff da4c1080 ffffffff  .L.......L......
 0240 154a1080 ffffffff 4f4a1080 ffffffff  .J......OJ......
 0250 da4c1080 ffffffff f54d1080 ffffffff  .L.......M......
 0260 4f4a1080 ffffffff 364b1080 ffffffff  OJ......6K......
 0270 00000000 00000000 00000000 00000000  ................
 0280 43431080 ffffffff 14451080 ffffffff  CC.......E......
 0290 b94c1080 ffffffff da4c1080 ffffffff  .L.......L......
 02a0 f54d1080 ffffffff 134e1080 ffffffff  .M.......N......
 02b0 134e1080 ffffffff 424e1080 ffffffff  .N......BN......
 02c0 00000000 00000000 00000000 00000000  ................
 02d0 24451080 ffffffff 73461080 ffffffff  $E......sF......
 02e0 b94c1080 ffffffff da4c1080 ffffffff  .L.......L......
 02f0 424e1080 ffffffff 624e1080 ffffffff  BN......bN......
 0300 624e1080 ffffffff 8d4e1080 ffffffff  bN.......N......
 0310 8e4e1080 ffffffff d74e1080 ffffffff  .N.......N......
 0320 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_line :
 0000 ae010000 03006e00 00000101 fb0e0d00  ......n.........
 0010 01010101 00000001 00000173 72630073  ...........src.s
 0020 72632f64 65766963 6500006b 65726e65  rc/device..kerne
 0030 6c2e6800 0100006b 65726e65 6c2e6370  l.h....kernel.cp
 0040 70000100 00757469 6c697479 2e680001  p....utility.h..
 0050 0000696e 745f7661 6c75652e 68000100  ..int_value.h...
 0060 00737469 76616c65 2e680001 00007069  .stivale.h....pi
 0070 742e6800 02000000 054c0009 02154a10  t.h......L....J.
 0080 80ffffff ff180513 f3051c00 02040382  ................
 0090 05180002 0402a005 1a000204 02ac0505  ................
 00a0 00020402 3a050178 02030001 01040205  ....:..x........
 00b0 2f000902 00101080 ffffffff 030b0105  /...............
 00c0 05bc0519 21050ec9 83051e77 050f8105  ....!......w....
 00d0 0e4c8305 13830516 5a053200 02040382  .L......Z.2.....
 00e0 05570002 0403ac05 44000204 03ac051f  .W......D.......
 00f0 00020403 58051100 02040268 05130002  ....X......h....
 0100 0402082e 05090002 04025605 14785905  ..........V..xY.
 0110 18580523 4a050974 05234b05 19580514  .X.#J..t.#K..X..
 0120 83051d08 14051b08 4b051abb 0519bb05  ........K.......
 0130 0a880505 4c020500 01010403 050d0009  ....L...........
 0140 024f4a10 80ffffff ff03d500 01050808  .OJ.............
 0150 30050484 83050703 0982050b 67050587  0...........g...
 0160 05080814 05270002 04017405 08000204  .....'....t.....
 0170 0174053f 00020402 4a050800 02040274  .t.?....J......t
 0180 00020404 062e050e 00020404 06d70502  ................
 0190 08b50505 36778305 0cbb0508 a005079f  ....6w..........
 01a0 c905039f 59050203 7a580501 36020300  ....Y...zX..6...
 01b0 0101a801 00000300 aa000000 0101fb0e  ................
 01c0 0d000101 01010000 00010000 01737263  .............src
 01d0 00737263 2f617263 68002f68 6f6d652f  .src/arch./home/
 01e0 6379702f 6f746865 725f6f73 2f716c6f  cyp/other_os/qlo
 01f0 61646572 322d6261 7265626f 6e65732f  ader2-barebones/
 0200 63726f73 735f636f 6d70696c 65722f6c  cross_compiler/l
 0210 69622f67 63632f78 38365f36 342d7063  ib/gcc/x86_64-pc
 0220 2d656c66 2f31302e 312e302f 696e636c  -elf/10.1.0/incl
 0230 75646500 006b6572 6e656c2e 68000100  ude..kernel.h...
 0240 00676474 2e637070 00020000 73746469  .gdt.cpp....stdi
 0250 6e742d67 63632e68 00030000 6764742e  nt-gcc.h....gdt.
 0260 68000200 0000054c 00090215 4a1080ff  h......L....J...
 0270 ffffff18 0513f305 1c000204 03820518  ................
 0280 00020402 a0051a00 020402ac 05050002  ................
 0290 04023a05 01780203 00010104 02051100  ..:..x..........
 02a0 09020711 1080ffff ffff0313 01050d4b  ...............K
 02b0 05017532 055108e5 0515acad 051ead05  ..u2.Q..........
 02c0 234a0529 3c051b58 05197505 01913f05  #J.)<..X..u...?.
 02d0 69022813 0516ac05 19ad0527 ad053790  i.(........'..7.
 02e0 053e8205 2d3c051f 2e051d75 051cc905  .>..-<.....u....
 02f0 25d7051c 82052691 051d8205 2891051f  %.....&.....(...
 0300 82051d91 0501ad40 05128305 0cbc8305  .......@........
 0310 10bc050a bc051008 140515bb 089f089f  ................
 0320 089f0516 089f050d 02291505 0cd7050f  .........)......
 0330 91050108 5b44050a be051208 13050e91  ....[D..........
 0340 0505b005 01753f05 0cbe0503 ae050175  .....u?........u
 0350 05213c05 0ebb0501 59020300 01016001  .!<.....Y.....`.
 0360 00000300 c6000000 0101fb0e 0d000101  ................
 0370 01010000 00010000 01737263 2f617263  .........src/arc
 0380 682f6d65 6d007372 632f6172 6368002f  h/mem.src/arch./
 0390 686f6d65 2f637970 2f6f7468 65725f6f  home/cyp/other_o
 03a0 732f716c 6f616465 72322d62 61726562  s/qloader2-bareb
 03b0 6f6e6573 2f63726f 73735f63 6f6d7069  ones/cross_compi
 03c0 6c65722f 6c69622f 6763632f 7838365f  ler/lib/gcc/x86_
 03d0 36342d70 632d656c 662f3130 2e312e30  64-pc-elf/10.1.0
 03e0 2f696e63 6c756465 00737263 00007669  /include.src..vi
 03f0 72747561 6c2e6800 01000061 7263682e  rtual.h....arch.
 0400 63707000 02000073 7464696e 742d6763  cpp....stdint-gc
 0410 632e6800 03000073 74697661 6c652e68  c.h....stivale.h
 0420 00040000 636f6d2e 68000400 00000528  ....com.h......(
 0430 00090236 4b1080ff ffffff03 1d010505  ...6K...........
 0440 bc050176 02030001 01040205 3e000902  ...v........>...
 0450 bc131080 ffffffff 03150105 05bc0513  ................
 0460 4b0512a0 bb050ebb 0512084b bb050dbc  K..........K....
 0470 051259bc 050dbb05 12084bbb 0518bb05  ..Y.......K.....
 0480 12bbbd05 13bb0512 e5bd0517 bb05125a  ...............Z
 0490 bb0523bb 0512d7bb 051b0002 04038205  ..#.............
 04a0 0c000204 0275050e 00020402 ac050500  .....u..........
 04b0 02040265 05127705 0bbe0501 bb020300  ...e..w.........
 04c0 01017503 00000300 70000000 0101fb0e  ..u.....p.......
 04d0 0d000101 01010000 00010000 01737263  .............src
 04e0 2f617263 68007372 63007372 632f6172  /arch.src.src/ar
 04f0 63682f6d 656d0000 70726f63 6573732e  ch/mem..process.
 0500 68000100 0070726f 63657373 2e637070  h....process.cpp
 0510 00010000 696e745f 76616c75 652e6800  ....int_value.h.
 0520 02000036 34626974 2e680001 00007669  ...64bit.h....vi
 0530 72747561 6c2e6800 03000000 05080009  rtual.h.........
 0540 024c4b10 80ffffff ff030b01 ba022900  .LK...........).
 0550 01010402 05140009 02291510 80ffffff  .........)......
 0560 ff030c01 4b050175 05163d05 144b0501  ....K..u..=..K..
 0570 7505163d 00020401 4cd90002 04014c05  u..=....L.....L.
 0580 1ada0512 830525bb 05139e05 1275050e  ......%......u..
 0590 bb051700 02040174 051b6705 1a74051b  .......t..g..t..
 05a0 5805239e 05215805 1d4b051c 74051d58  X.#..!X..K..t..X
 05b0 05359e05 1475051d 00020403 74051f00  .5...u......t...
 05c0 02040291 051e0002 04027405 1f000204  ..........t.....
 05d0 0258052a 00020402 9e050c00 0204029d  .X.*............
 05e0 05050002 04026305 126d0511 bb0512bb  ......c..m......
 05f0 0511bb05 14bb0505 77050159 05283e05  ........w..Y.(>.
 0600 0ebc0517 00020401 74051ba0 051a7405  ........t.....t.
 0610 1b58051d 9e05093c 051c8305 1b74051c  .X.....<.....t..
 0620 5805349e 051c7505 1b74051c 58052a9e  X.4...u..t..X.*.
 0630 053ead05 3d74053e 5805409e 05474a05  .>..=t.>X.@..GJ.
 0640 1c3c051b 74051c58 05479e05 22740537  .<..t..X.G.."t.7
 0650 3e053674 05375805 399e0517 3c05104b  >.6t.7X.9...<..K
 0660 05165905 12830515 ba750512 4a0515ba  ..Y......u..J...
 0670 05123d05 15ba0512 750515ba 7505124a  ..=.....u...u..J
 0680 0515ba05 113d0514 ba051175 0514ba05  .....=.....u....
 0690 11750514 ba051175 0514ba05 11750514  .u.....u.....u..
 06a0 ba051175 0514ba05 11750514 ba051175  ...u.....u.....u
 06b0 0514ba05 11750514 ba051175 0514ba05  .....u.....u....
 06c0 11750514 ba051175 0514ba05 11750514  .u.....u.....u..
 06d0 ba051175 0514ba05 1275051c ad051b74  ...u.....u.....t
 06e0 051c5805 229e0520 75050d74 05235905  ..X.".. u..t.#Y.
 06f0 32740533 58052374 05213c05 14760523  2t.3X.#t.!<..v.#
 0700 74052458 05050002 0402035e ba051203  t.$X.......^....
 0710 2590050c bb050159 05453205 05f30519  %......Y.E2.....
 0720 77050674 05345905 16740525 4b0519ad  w..t.4Y..t.%K...
 0730 051aca05 3074051a 75052d74 051eac05  ....0t..u.-t....
 0740 333e0515 7405254b 0519ad05 090374c8  3>..t.%K......t.
 0750 0501030e 20052f30 0512bb05 24000204  .... ./0....$...
 0760 0182051b 75051d08 4a05093c 05214c05  ....u...J..<.!L.
 0770 23084a05 0f3c0514 59052474 05050002  #.J..<..Y.$t....
 0780 0402ee05 0d760513 24051c00 02040182  .....v..$.......
 0790 051b9f05 1d084a05 093c0514 59052474  ......J..<..Y.$t
 07a0 05060002 0402f005 1279050c bb050159  .........y.....Y
 07b0 05353005 05bb0518 af050574 05265905  .50........t.&Y.
 07c0 09d70516 77052608 4c050908 67051677  ....w.&.L...g..w
 07d0 05090373 084a050d 41420501 24052630  ...s.J..AB..$.&0
 07e0 05184c05 05740523 59052574 052b8405  ..L..t.#Y.%t.+..
 07f0 01a00524 2e05184b 05057405 2b5a0530  ...$...K..t.+Z.0
 0800 9e052b5b 0543082e 05013f05 322f0511  ..+[.C....?.2/..
 0810 bb0516e5 052c7405 15750521 ad0501ad  .....,t..u.!....
 0820 3cd60002 04010666 05090603 de7e9005  <......f.....~..
 0830 0103a201 ba3c4a08 000101dc 06000003  .....<J.........
 0840 00b50000 000101fb 0e0d0001 01010100  ................
 0850 00000100 00017372 632f6172 63682f6d  ......src/arch/m
 0860 656d002f 686f6d65 2f637970 2f6f7468  em./home/cyp/oth
 0870 65725f6f 732f716c 6f616465 72322d62  er_os/qloader2-b
 0880 61726562 6f6e6573 2f63726f 73735f63  arebones/cross_c
 0890 6f6d7069 6c65722f 6c69622f 6763632f  ompiler/lib/gcc/
 08a0 7838365f 36342d70 632d656c 662f3130  x86_64-pc-elf/10
 08b0 2e312e30 2f696e63 6c756465 00006c69  .1.0/include..li
 08c0 62616c6c 6f632e68 00010000 6c696261  balloc.h....liba
 08d0 6c6c6f63 2e637070 00010000 73746469  lloc.cpp....stdi
 08e0 6e742d67 63632e68 00020000 76697274  nt-gcc.h....virt
 08f0 75616c2e 68000100 0000051b 00090281  ual.h...........
 0900 4b1080ff ffffff03 2301050c 4c050159  K.......#...L..Y
 0910 02020001 01051d00 09028c4b 1080ffff  ...........K....
 0920 ffff032e 01050c4d 05015902 02000101  .......M..Y.....
 0930 05230009 02974b10 80ffffff ff033b01  .#....K.......;.
 0940 0520ae05 01082102 02000101 052b0009  . ....!......+..
 0950 02b64b10 80ffffff ff03c800 01050de5  ..K.............
 0960 050c084b 05015902 02000101 04020501  ...K..Y.........
 0970 000902ff 1b1080ff ffffff03 ec000105  ................
 0980 0a083005 0f000204 03740511 00020403  ..0......t......
 0990 3c050e00 02040267 050f0002 04023c05  <......g......<.
 09a0 11000204 02740502 00020402 57050969  .....t......W..i
 09b0 05014b30 0511083f 83050b84 050d4a05  ..K0...?......J.
 09c0 17680512 ba050d2e 0510ba05 062f0503  .h.........../..
 09d0 b7050934 83050d84 05177605 12ba050d  ...4......v.....
 09e0 3c0510ba 05062f05 0355050a 3405014b  <...../..U..4..K
 09f0 03302e05 07b10506 91050c4d 05030820  .0.........M... 
 0a00 050d4b05 0866050d e60508f2 050b6b05  ..K..f........k.
 0a10 0366051e 00020401 58052f92 0503d805  .f......X./.....
 0a20 1376050b 0825050e 77ad050f bb05139f  .v...%..w.......
 0a30 050eba05 0f75ad05 17bc050f 90050e03  .....u..........
 0a40 0a081205 014b3505 06bb0515 75050883  .....K5.....u...
 0a50 05108705 0887050f 5d05025a 05127608  ........]..Z..v.
 0a60 26051859 051a9e05 115c0502 74052003  &..Y.....\..t. .
 0a70 0b58050d ac051275 05037405 145a050c  .X.....u..t..Z..
 0a80 5d050603 139e050d ad051177 05027405  ]..........w..t.
 0a90 195a052b 9e051e9e 050c4a05 19680503  .Z.+......J..h..
 0aa0 82050868 050fad05 0e780510 ae051c74  ...h.....x.....t
 0ab0 05157405 094a0503 69050ea1 050dad05  ..t..J..i.......
 0ac0 15890503 82050e6e 05048205 09000204  .......n........
 0ad0 015a0505 00020401 bb05045b 05090002  .Z.........[....
 0ae0 04016805 10000204 01ad0505 00020401  ..h.............
 0af0 7505215c 050eac83 05048205 09910514  u.!\............
 0b00 82050875 050d030a ba050382 05399205  ...u.........9..
 0b10 0f820509 af051882 05097505 17820509  ..........u.....
 0b20 75051782 05098305 18820509 83051782  u...............
 0b30 05097505 1a820510 75050c08 69052108  ..u.....u...i.!.
 0b40 4d052882 05064a05 044c0002 04010608  M.(...J..L......
 0b50 c8000204 0308ac05 13000204 03060818  ................
 0b60 050b0002 04035905 1c980508 824b8305  ......Y......K..
 0b70 165a0503 82053fa1 05098205 15820509  .Z....?.........
 0b80 3d051082 05223c05 1b820516 4b051d82  =...."<.....K...
 0b90 050f3c05 09840517 82050975 05168205  ..<........u....
 0ba0 09750517 82050983 05168205 0975051a  .u...........u..
 0bb0 82051275 050c0868 0521084c 05288205  ...u...h.!.L.(..
 0bc0 064a0504 4b000204 010608c8 00020403  .J..K...........
 0bd0 08ac0513 00020403 06081805 0b000204  ................
 0be0 03590507 03099005 0fbdaf05 05820525  .Y.............%
 0bf0 93051e90 050b4a75 83051359 050b9005  ......Ju...Y....
 0c00 194d0506 820564a1 055d9005 11ac050c  .M....d..]......
 0c10 ad051782 050b7505 11bb0512 bbad0511  ......u.........
 0c20 bb0515c9 0512c905 0f086805 22084c05  ..........h.".L.
 0c30 09820507 4b000204 010608c8 00020403  ....K...........
 0c40 08ac0516 00020403 06081805 0e000204  ................
 0c50 0359050f 97050582 051f9305 0c82050b  .Y..............
 0c60 4b830513 59050b90 05194d05 06820562  K...Y.....M....b
 0c70 a1055b90 050fac05 164c051c ad051582  ..[......L......
 0c80 83ad0519 c90516c9 050cbb05 17820511  ................
 0c90 750512bb 050f0868 0526084c 05098205  u......h.&.L....
 0ca0 074b0002 04010608 c8000204 0308ac05  .K..............
 0cb0 16000204 0306081a 050e0002 04035905  ..............Y.
 0cc0 09940503 03ae7fba 050d03db 00580503  .............X..
 0cd0 8205045f 05090002 04016805 10000204  ..._......h.....
 0ce0 01ad0505 00020401 75052132 050eac83  ........u.!2....
 0cf0 05048205 09590514 8205077a 05020391  .....Y.....z....
 0d00 7eba051d 03275803 c1013c05 11030c20  ~....'X...<.... 
 0d10 0509030b 58050159 030b2e05 02be0512  ....X..Y........
 0d20 76050308 2605025b 00020401 06089005  v...&..[........
 0d30 0f06bc05 305b0506 82050c4d 05027405  ....0[.....M..t.
 0d40 10ae050b 08240511 74050357 050b7605  .....$..t..W..v.
 0d50 1174053d 3b050b76 05117405 393b0517  .t.=;..v..t.9;..
 0d60 78051a08 21050d03 0aba0503 74051a76  x...!.......t..v
 0d70 030ad605 12030aba 05035905 07030b58  ..........Y....X
 0d80 050bbc05 1374050b 90050eca 05177405  .....t........t.
 0d90 0e74050f d7050dae 05038205 21000204  .t..........!...
 0da0 01580533 00020401 82052c00 02040174  .X.3......,....t
 0db0 050d3d05 03740521 00020401 58053300  ..=..t.!....X.3.
 0dc0 02040174 052c0002 04018205 0d4c0503  ...t.,.......L..
 0dd0 74052e00 02040158 05270002 04018205  t......X.'......
 0de0 0c890502 82051292 05037405 2c000204  ..........t.,...
 0df0 01660525 00020401 82051275 05037405  .f.%.......u..t.
 0e00 25000204 0166050d ad050374 05210002  %....f.....t.!..
 0e10 04015805 33000204 0174052c 00020401  ..X.3....t.,....
 0e20 82050d4b 05038205 21000204 01580533  ...K....!....X.3
 0e30 00020401 82052c00 02040174 050f3d05  ......,....t..=.
 0e40 1774050f 90051cca 05107405 12082405  .t........t...$.
 0e50 0374051e 5a05319e 05249e05 084a0517  .t..Z.1..$...J..
 0e60 3d052374 051c7405 084a0504 3e052800  =.#t..t..J..>.(.
 0e70 02040182 0511030b ac050159 350512f6  ...........Y5...
 0e80 051af405 17081405 0f086805 014b3305  ..........h..K3.
 0e90 02f8050f 76050abb 0502a205 28000204  ....v.......(...
 0ea0 0174052f 00020401 ba05065b 05028300  .t./.......[....
 0eb0 02040106 0890050f 06bc0531 5a050782  ...........1Z...
 0ec0 050d4d05 03740511 76050c08 24051274  ..M..t..v...$..t
 0ed0 05045705 0c760512 74053e3b 050c7605  ..W..v..t.>;..v.
 0ee0 1274053a 3b051878 0513031e 0820050b  .t.:;..x..... ..
 0ef0 59050d79 0508a005 033c0512 680513c9  Y..y.....<..h...
 0f00 050b5905 11690516 5b0511f3 050e0859  ..Y..i..[......Y
 0f10 0509bc05 014b0202 00010195 08000003  .....K..........
 0f20 00de0000 000101fb 0e0d0001 01010100  ................
 0f30 00000100 00017372 632f6172 63682f6d  ......src/arch/m
 0f40 656d0073 7263002f 686f6d65 2f637970  em.src./home/cyp
 0f50 2f6f7468 65725f6f 732f716c 6f616465  /other_os/qloade
 0f60 72322d62 61726562 6f6e6573 2f63726f  r2-barebones/cro
 0f70 73735f63 6f6d7069 6c65722f 6c69622f  ss_compiler/lib/
 0f80 6763632f 7838365f 36342d70 632d656c  gcc/x86_64-pc-el
 0f90 662f3130 2e312e30 2f696e63 6c756465  f/10.1.0/include
 0fa0 00007669 72747561 6c2e6800 0100006b  ..virtual.h....k
 0fb0 65726e65 6c2e6800 02000076 69727475  ernel.h....virtu
 0fc0 616c2e63 70700001 00007574 696c6974  al.cpp....utilit
 0fd0 792e6800 02000073 7464696e 742d6763  y.h....stdint-gc
 0fe0 632e6800 03000073 74697661 6c652e68  c.h....stivale.h
 0ff0 00020000 6c696261 6c6c6f63 2e680001  ....liballoc.h..
 1000 00000005 28000902 364b1080 ffffffff  ....(...6K......
 1010 031d0105 05bc0501 76020300 01010402  ........v.......
 1020 054c0009 02154a10 80ffffff ff180513  .L....J.........
 1030 f3051c00 02040382 05180002 0402a005  ................
 1040 1a000204 02ac0505 00020402 3a050178  ............:..x
 1050 02030001 01040305 35000902 ba291080  ........5....)..
 1060 ffffffff 03190105 10f3051b ac05204a  .............. J
 1070 052e9005 01590521 310511bc 050f83bd  .....Y.!1.......
 1080 bc0512ad 051a083c 05120812 05010859  .......<.......Y
 1090 05243e05 09bb0505 75050b08 7a05013d  .$>.....u...z..=
 10a0 05232f05 09bc0505 75050b08 7a05013d  .#/.....u...z..=
 10b0 05252f05 09bb0505 75050c08 7a050159  .%/.....u...z..Y
 10c0 052d0310 2e0524f4 050e4a05 07037808  .-....$...J...x.
 10d0 74051283 050cac05 114b051a 8205189f  t........K......
 10e0 0505b905 01762805 253d0513 bb050108  .....v(.%=......
 10f0 1305272e 0513bb05 01081305 262f0513  ..'.........&/..
 1100 bb05019f 05282e05 13bb0501 bb052331  .....(........#1
 1110 050fbcbd bc0512ad 051b083c 0515e405  ...........<....
 1120 124a0501 0859052e 3f050cbb bbbb0515  .J...Y..?.......
 1130 ad051e08 3c0517e4 05252e05 012f053d  ....<....%.../.=
 1140 31051208 830514bb 050cad05 3cad0516  1...........<...
 1150 e4053175 0516e405 1375051c 00020403  ..1u.....u......
 1160 82051e00 0204029f 05200002 04020820  ......... ..... 
 1170 05050002 04026505 13770515 d8053aae  ......e..w....:.
 1180 0514ac05 114b0528 00020401 82051800  .....K.(........
 1190 020401ac 051a0002 04014a05 2a92052b  ..........J.*..+
 11a0 4a0518f2 0515af05 1a74050a 58054359  J........t..X.CY
 11b0 052c7405 1e66bc05 2aaf0511 8205169f  .,t..f..*.......
 11c0 051b7405 0a580528 00020401 58052575  ..t..X.(....X.%u
 11d0 05168605 1f000204 0182052b 00020401  ...........+....
 11e0 82052f9f 0517ac05 21ad0515 82050e4b  ../.....!......K
 11f0 0527d805 0e081205 51a10557 ac056b4a  .'......Q..W..kJ
 1200 05254a4b 0555bc05 2f081205 4a76052f  .%JK.U../...Jv./
 1210 e4052c77 05418305 4e820525 4a054068  ..,w.A..N..%J.@h
 1220 05340820 05400820 05362e05 1e2b054a  .4. .@. .6...+.J
 1230 7a052c82 05418305 4e820525 4a053468  z.,..A..N..%J.4h
 1240 05360820 051e6305 2d79054f 083d0561  .6. ..c.-y.O.=.a
 1250 e405254b 0526d705 1c083105 11740530  ..%K.&....1..t.0
 1260 5a050703 917ff205 1283050c ac051175  Z..............u
 1270 051aac05 18f30505 e3051e03 ce009e05  ................
 1280 0103b47f 3c050a00 02040203 c8002005  ....<......... .
 1290 06000204 02036f9e 0512033b 9e0501bb  ......o....;....
 12a0 051d3f05 0a840511 00020401 82ca0505  ..?.............
 12b0 083c050e 5b051500 02040182 051f7505  .<..[.........u.
 12c0 12e40517 3d051908 3c05093c 05154b05  ....=...<..<..K.
 12d0 18ac0507 00020402 8d050300 0204026f  ...............o
 12e0 050a030d 9e050159 051f3105 0ebb0501  .......Y..1.....
 12f0 bb05153e 05248305 03910512 75050cbb  ...>.$......u...
 1300 760518f3 05018305 3c2f0505 0813051d  v.......</......
 1310 9f050974 051e5905 10ae0512 83051183  ...t..Y.........
 1320 05180002 04018205 32081305 23d6050e  ........2...#...
 1330 74052959 051fad05 33860520 08200511  t.)Y....3.. . ..
 1340 d6050d58 05154b05 11c80525 4b050903  ...X..K....%K...
 1350 cf7e0866 05128305 0cac0511 4b051a82  .~.f........K...
 1360 05169f05 05b90501 76053603 ae012005  ........v.6... .
 1370 3eac0548 4a05185b 050a0373 82051703  >..HJ..[...s....
 1380 1158050c bc050e83 050d8305 2b000204  .X..........+...
 1390 0182051e 00020401 c805219f 051cba05  ..........!.....
 13a0 0dd60509 5805114b 050dc805 214b0509  ....X..K....!K..
 13b0 03c07e08 3c051283 050cac05 114b051a  ..~.<........K..
 13c0 8205169f 0505b905 01760523 03bd0120  .........v.#... 
 13d0 052b8205 354a0514 31050603 79820512  .+..5J..1...y...
 13e0 030b5805 0cbb0501 5a05402f 05230813  ..X.....Z.@/.#..
 13f0 0530085a 053eba05 124c0524 00020403  .0.Z.>...L.$....
 1400 82053100 02040382 051b0002 04034a05  ..1...........J.
 1410 10000204 02680512 00020402 082e0505  .....h..........
 1420 00020402 72050c78 05014b05 2e030f2e  ....r..x..K.....
 1430 0512bc05 4ebb052a e4050f82 05137505  ....N..*......u.
 1440 1c000204 03820513 00020402 9f051200  ................
 1450 020402bb 00020402 08750002 04020223  .........u.....#
 1460 13050500 02040202 230e0512 7b0513bb  ........#...{...
 1470 052e0868 054eac05 40ac056f 3c0561ac  ...h.N..@..o<.a.
 1480 050e3c05 24670513 82056b00 02040382  ..<.$g....k.....
 1490 055d0002 04038205 7d000204 0374058a  .]......}....t..
 14a0 01000204 034a0546 00020403 4a051200  .....J.F....J...
 14b0 02040267 05110002 0402bc05 05000204  ...g............
 14c0 0202230f 05127a05 39bb0513 8205124b  ..#...z.9......K
 14d0 05290002 04018205 1b000204 0182052a  .).............*
 14e0 a0051708 3c0537ad 05127405 2b9f0514  ....<.7...t.+...
 14f0 08840519 74050958 051c5905 1584051e  ....t..X..Y.....
 1500 00020401 82052a00 02040182 05306705  ......*......0g.
 1510 2cac0518 7405114d 0519af05 18022510  ,...t..M......%.
 1520 05090002 04021b05 05000204 02037774  ..............wt
 1530 05130314 9e0512e5 0501bc05 353d0539  ............5=.9
 1540 bb051382 050c4c05 0e081305 15000204  ......L.........
 1550 01740525 00020401 66051700 02040182  .t.%....f.......
 1560 05169205 1abc051b 66051d08 6605093c  ........f...f..<
 1570 050d0309 ba051a03 7a58050d bb051a30  ........zX.....0
 1580 050dbb05 1d25051e 66052008 6605114a  .....%..f. .f..J
 1590 05300813 05316605 19086605 16083dbb  .0...1f...f...=.
 15a0 0510bb05 31081305 32660534 08660546  ....1...2f.4.f.F
 15b0 4a054766 05490866 051a3c05 16084bbb  J.Gf.I.f..<...K.
 15c0 0510bb05 30081305 31660519 08660516  ....0...1f...f..
 15d0 084bbb05 10bb0530 08130531 66051908  .K.....0...1f...
 15e0 66051608 3dbb0510 bb050500 02040203  f...=...........
 15f0 60081205 0c032390 05150813 0512023b  `.....#........;
 1600 13bbbd05 0fbb0512 085c0510 bb0501bd  .........\......
 1610 05453f05 1b083e05 0b82051b 91050b82  .E?...>.........
 1620 051a9105 0b82051b 91050e82 050f9205  ................
 1630 1f830521 084a0505 3c05425a 0529084a  ...!.J..<.BZ.).J
 1640 050ed605 4b680527 e4050e82 053c4b05  ....Kh.'.....<K.
 1650 20ba054e 08200522 4a050f40 05198305   ..N. ."J..@....
 1660 1b085805 053c053a 59052708 58050cd6  ..X..<.:Y.'.X...
 1670 05496905 25e4050c 8205364b 051aba05  .Ii.%.....6K....
 1680 46082e05 1c4a050f 3f051783 05190858  F....J..?......X
 1690 05053c05 36590527 0858050c d6054969  ..<.6Y.'.X....Ii
 16a0 0525e405 0c820532 4b0516ba 0542082e  .%.....2K....B..
 16b0 05184a05 123e052a 082e0514 8205013e  ..J..>.*.......>
 16c0 02030001 01040405 0d000902 4f4a1080  ............OJ..
 16d0 ffffffff 03d50001 05080830 05048483  ...........0....
 16e0 05070309 82050b67 05058705 08081405  .......g........
 16f0 27000204 01740508 00020401 74053f00  '....t......t.?.
 1700 0204024a 05080002 04027400 02040406  ...J......t.....
 1710 2e050e00 02040406 d7050208 b5050536  ...............6
 1720 7783050c bb0508a0 05079fc9 05039f59  w..............Y
 1730 0502037a 58050136 02030001 01040405  ...zX..6........
 1740 0d000902 e14b1080 ffffffff 03d50001  .....K..........
 1750 05080822 05048467 05070309 74050b67  ..."...g....t..g
 1760 05057905 08d80527 00020401 66050800  ..y....'....f...
 1770 02040166 053f0002 04024a05 08000204  ...f.?....J.....
 1780 02660002 0404062e 050e0002 040406d7  .f..............
 1790 0502087d 05053677 83050cbb 0508a005  ...}..6w........
 17a0 079fc905 039f5905 02037a58 05013602  ......Y...zX..6.
 17b0 03000101 9b040000 0300ec00 00000101  ................
 17c0 fb0e0d00 01010101 00000001 00000173  ...............s
 17d0 72632f61 72636800 73726300 2f686f6d  rc/arch.src./hom
 17e0 652f6379 702f6f74 6865725f 6f732f71  e/cyp/other_os/q
 17f0 6c6f6164 6572322d 62617265 626f6e65  loader2-barebone
 1800 732f6372 6f73735f 636f6d70 696c6572  s/cross_compiler
 1810 2f6c6962 2f676363 2f783836 5f36342d  /lib/gcc/x86_64-
 1820 70632d65 6c662f31 302e312e 302f696e  pc-elf/10.1.0/in
 1830 636c7564 65007372 632f6465 76696365  clude.src/device
 1840 00006172 63682e68 00010000 6b65726e  ..arch.h....kern
 1850 656c2e68 00020000 7574696c 6974792e  el.h....utility.
 1860 68000200 00696e74 65727275 70742e63  h....interrupt.c
 1870 70700001 00007374 64696e74 2d676363  pp....stdint-gcc
 1880 2e680003 0000696e 74657272 7570742e  .h....interrupt.
 1890 68000100 00363462 69742e68 00010000  h....64bit.h....
 18a0 7069742e 68000400 00000501 000902b9  pit.h...........
 18b0 4c1080ff ffffff1a 0502084b 05019102  L..........K....
 18c0 03000101 0402054c 00090215 4a1080ff  .......L....J...
 18d0 ffffff18 0513f305 1c000204 03820518  ................
 18e0 00020402 a0051a00 020402ac 05050002  ................
 18f0 04023a05 01780203 00010104 03050100  ..:..x..........
 1900 0902da4c 1080ffff ffff1505 08082105  ...L..........!.
 1910 10840506 91050277 05120002 04016605  .......w......f.
 1920 05680508 ba05063d 05085905 06580507  .h.....=..Y..X..
 1930 84050b67 05187905 16660507 e405083e  ...g..y..f.....>
 1940 05270002 04016605 08000204 0166053f  .'....f......f.?
 1950 00020402 4a050800 02040266 05050002  ....J......f....
 1960 04042e05 08000204 04ba0511 00020404  ................
 1970 2f050e00 02040466 050208a7 05053677  /......f......6w
 1980 83050cbb 0508a005 099f0507 74670505  ............tg..
 1990 9f590502 037a5805 01360203 00010104  .Y...zX..6......
 19a0 04051000 09026b3b 1080ffff ffff0335  ......k;.......5
 19b0 0105094b 052ee405 064b052b e405064c  ...K.....K.+...L
 19c0 0520e405 064b0520 e405064c 0519e405  . ...K. ...L....
 19d0 064b0519 e405064c 0519e405 064b0519  .K.....L.....K..
 19e0 e405064c e50501e5 05103d05 1283bb05  ...L......=.....
 19f0 0ebb0517 00020403 74051200 020402a0  ........t.......
 1a00 05100002 0402c805 12000204 022e0510  ................
 1a10 00020402 08120512 00020402 2e051000  ................
 1a20 02040208 12050500 02040202 84011005  ................
 1a30 12950506 bb051275 050dbb05 1259bbbc  .......u.....Y..
 1a40 0501bb05 2b03293c 050df305 19081305  ....+.)<........
 1a50 170875bb bbbbbb05 01bb052d 3d0512bc  ..u........-=...
 1a60 bb050abb 08910512 0891bb05 0abb0867  ...............g
 1a70 08670512 0867050a bb086708 67051208  .g...g....g.g...
 1a80 67050abb 08670512 0859bb05 0abb0891  g....g...Y......
 1a90 08670512 0867050a bb086708 67051208  .g...g....g.g...
 1aa0 67050abb 08670512 0867bb05 11bb050a  g....g...g......
 1ab0 74051108 13050a74 05120813 050abb08  t......t........
 1ac0 91051208 91bb0505 bd050a75 0501082f  ...........u.../
 1ad0 3e0502ad 05076805 06e70501 e505193e  >.....h........>
 1ae0 0505ad05 10680505 77051400 02040166  .....h..w......f
 1af0 05230002 04026605 33000204 03660543  .#....f.3....f.C
 1b00 00020405 66051068 050c7605 0159051c  ....f..h..v..Y..
 1b10 31051ebb 051a4a05 1ee40514 9f050566  1.....J........f
 1b20 05145905 01a00545 3f050cbc 051e082f  ..Y....E?....../
 1b30 05117405 05740511 84052800 02040374  ..t..t....(....t
 1b40 052f0002 04037405 18000204 03ba051a  ./....t.........
 1b50 00020403 3c052200 0204024b 05150002  ....<."....K....
 1b60 04027405 09000204 02730510 6a052608  ..t......s..j.&.
 1b70 13050e74 05160830 bbbb0536 bb051674  ...t...0...6...t
 1b80 05150821 0510bb05 19081305 1608d7bb  ...!............
 1b90 bbbb0521 00020403 82051400 02040276  ...!...........v
 1ba0 051d0002 04020813 051a0002 040208e5  ................
 1bb0 00020402 bb050900 020402b5 00020401  ................
 1bc0 7b051432 05057405 1b59051e c90519be  {..2..t..Y......
 1bd0 050c7405 01750203 00010104 03050d00  ..t..u..........
 1be0 09024f4a 1080ffff ffff03d5 00010508  ..OJ............
 1bf0 08300504 84830507 03098205 0b670505  .0...........g..
 1c00 87050808 14052700 02040174 05080002  ......'....t....
 1c10 04017405 3f000204 024a0508 00020402  ..t.?....J......
 1c20 74000204 04062e05 0e000204 0406d705  t...............
 1c30 0208b505 05367783 050cbb05 08a00507  .....6w.........
 1c40 9fc90503 9f590502 037a5805 01360203  .....Y...zX..6..
 1c50 00010172 01000003 004d0000 000101fb  ...r.....M......
 1c60 0e0d0001 01010100 00000100 00017372  ..............sr
 1c70 632f6172 63680073 72630000 61726368  c/arch.src..arch
 1c80 2e680001 0000636f 6d2e6370 70000200  .h....com.cpp...
 1c90 00696e74 5f76616c 75652e68 00020000  .int_value.h....
 1ca0 636f6d2e 68000200 00000501 000902b9  com.h...........
 1cb0 4c1080ff ffffff1a 0502084b 05019102  L..........K....
 1cc0 03000101 05010009 02f54d10 80ffffff  ..........M.....
 1cd0 ff031401 0502d805 09a20501 4b020200  ............K...
 1ce0 01010402 05010009 02134e10 80ffffff  ..........N.....
 1cf0 ff160516 ad051066 051b9e05 23660505  .......f....#f..
 1d00 90050131 02030001 01040205 01000902  ...1............
 1d10 43431080 ffffffff 030a0105 13f30510  CC..............
 1d20 9f05094a 05010821 3f051208 21050e83  ...J...!?...!...
 1d30 05170002 04037405 22000204 02840523  ......t."......#
 1d40 00020402 66051100 0204029e 05050002  ....f...........
 1d50 0402e205 0c6c0501 3d300509 bb051375  .....l..=0.....u
 1d60 05146605 169e0528 4c052966 05119e05  ..f....(L.)f....
 1d70 0ae50505 47050d34 0501e53e 0509bb05  ....G..4...>....
 1d80 13750514 6605169e 05284c05 29660511  .u..f....(L.)f..
 1d90 9e050ae5 05054705 01343e05 0fad0509  ......G..4>.....
 1da0 66050fe5 050966e5 050f0821 05096605  f.....f....!..f.
 1db0 0fe50509 66050be5 05056605 0be50505  ....f.....f.....
 1dc0 660501e5 02030001 01540000 0003003a  f........T.....:
 1dd0 00000001 01fb0e0d 00010101 01000000  ................
 1de0 01000001 7372632f 64657669 63650000  ....src/device..
 1df0 67726170 6869632e 63707000 01000067  graphic.cpp....g
 1e00 72617068 69632e68 00010000 00050100  raphic.h........
 1e10 09021445 1080ffff ffff14bd 02030001  ...E............
 1e20 01460100 00030058 00000001 01fb0e0d  .F.....X........
 1e30 00010101 01000000 01000001 7372632f  ............src/
 1e40 61726368 00737263 2f646576 69636500  arch.src/device.
 1e50 73726300 00617263 682e6800 01000070  src..arch.h....p
 1e60 69742e68 00020000 7069742e 63707000  it.h....pit.cpp.
 1e70 02000069 6e745f76 616c7565 2e680003  ...int_value.h..
 1e80 00000005 01000902 b94c1080 ffffffff  .........L......
 1e90 1a050208 4b050191 02030001 01050100  ....K...........
 1ea0 0902424e 1080ffff ffff031d 010502d8  ..BN............
 1eb0 0509bd05 014b0202 00010105 13000902  .....K..........
 1ec0 624e1080 ffffffff 03240105 0d830516  bN.......$......
 1ed0 00020403 74050c00 02040267 05050002  ....t......g....
 1ee0 0402c705 01690203 00010104 02050700  .....i..........
 1ef0 09028e4e 1080ffff ffff19ba 023d0001  ...N.........=..
 1f00 01040305 15000902 24451080 ffffffff  ........$E......
 1f10 190511bb 050b0233 12051202 2913050e  .......3....)...
 1f20 bb050968 050de605 097559f3 05245905  ...h.....uY..$Y.
 1f30 0d820509 3d0512f3 0501bc05 133e0505  ....=........>..
 1f40 bb051182 0505bb05 13740508 9f050574  .........t.....t
 1f50 05167505 17bb0514 ad050108 3e05114d  ..u.........>..M
 1f60 050d4b05 01750202 000101bd 00000003  ..K..u..........
 1f70 00340000 000101fb 0e0d0001 01010100  .4..............
 1f80 00000100 00010073 72632f61 7263682f  .......src/arch/
 1f90 696e7465 72727570 745f6861 6e646c65  interrupt_handle
 1fa0 2e61736d 00000000 00000902 80461080  .asm.........F..
 1fb0 ffffffff 17593d03 c5000201 01212103  .....Y=......!!.
 1fc0 03021701 3e5a0302 0217014b 2131bbbb  ....>Z.....K!1..
 1fd0 bbbbbbe5 e5e5c9e5 c9c9c9c9 c9e5e5e5  ................
 1fe0 e5e5e5e5 e5e5e5e5 e5e5e5e5 c9eb2221  .............."!
 1ff0 21212121 21212f2f 2f2f2f2f 2f2f5a3e  !!!!!!////////Z>
 2000 5b3e3e5b 2f302f2f 2f2f2f2f 2f2f2121  [>>[/0////////!!
 2010 21212121 21212fe5 e5e5e5e5 e5e5e5e5  !!!!!!/.........
 2020 e5e5e5e5 e5e6e502 0f000101 47000000  ............G...
 2030 03002b00 00000101 fb0e0d00 01010101  ..+.............
 2040 00000001 00000100 7372632f 61726368  ........src/arch
 2050 2f757469 6c697479 2e61736d 00000000  /utility.asm....
 2060 00000902 e0491080 ffffffff 14213d3d  .....I.......!==
 2070 3d210201 00010150 00000003 002b0000  =!.....P.....+..
 2080 000101fb 0e0d0001 01010100 00000100  ................
 2090 00010073 72632f61 7263682f 6764745f  ...src/arch/gdt_
 20a0 61736d2e 61736d00 00000000 000902f0  asm.asm.........
 20b0 491080ff ffffff16 213d3d4b 2f2f2f2f  I.......!==K////
 20c0 2f9f2121 30210201 000101             /.!!0!.....     
Contenu de la section .debug_str :
 0000 5f5a366b 69746f61 54496d45 76506369  _Z6kitoaTImEvPci
 0010 545f005f 5a4e3350 49543374 68654576  T_._ZN3PIT3theEv
 0020 00667261 6d656275 66666572 5f616464  .framebuffer_add
 0030 7200626f 6f746c6f 61646572 5f646174  r.bootloader_dat
 0040 61007372 632f6b65 726e656c 2e637070  a.src/kernel.cpp
 0050 0072656d 61696e64 65720075 70646174  .remainder.updat
 0060 655f7469 636b0075 696e7436 345f7400  e_tick.uint64_t.
 0070 73686f72 7420696e 7400636d 646c696e  short int.cmdlin
 0080 65007061 73736564 5f736563 006d6f64  e.passed_sec.mod
 0090 756c655f 636f756e 74006d6f 64756c65  ule_count.module
 00a0 73006b69 746f6154 3c6c6f6e 6720756e  s.kitoaT<long un
 00b0 7369676e 65642069 6e743e00 75696e74  signed int>.uint
 00c0 385f7400 5f5a365f 73746172 74503134  8_t._Z6_startP14
 00d0 73746976 616c655f 73747275 6374005f  stivale_struct._
 00e0 5a4e3350 49543675 70646174 65457600  ZN3PIT6updateEv.
 00f0 63757272 656e745f 636f756e 74007570  current_count.up
 0100 64617465 00696e69 745f5049 54006672  date.init_PIT.fr
 0110 616d6562 75666665 725f6270 70005f5a  amebuffer_bpp._Z
 0120 4e335049 5438696e 69745f50 49544576  N3PIT8init_PITEv
 0130 0065706f 63680075 6e736967 6e656420  .epoch.unsigned 
 0140 63686172 005f5a37 6d656d7a 65726f50  char._Z7memzeroP
 0150 766d0066 72616d65 62756666 65725f77  vm.framebuffer_w
 0160 69647468 0075696e 7433325f 74007273  idth.uint32_t.rs
 0170 64700075 696e7431 365f7400 6d656d6f  dp.uint16_t.memo
 0180 72795f6d 61705f61 64647200 63757272  ry_map_addr.curr
 0190 656e745f 73637265 656e5f70 6f730073  ent_screen_pos.s
 01a0 686f7274 20756e73 69676e65 6420696e  hort unsigned in
 01b0 7400474e 5520432b 2b313720 31302e31  t.GNU C++17 10.1
 01c0 2e30202d 6d61736d 3d696e74 656c202d  .0 -masm=intel -
 01d0 6d6e6f2d 73736520 2d6d3634 202d6d6e  mno-sse -m64 -mn
 01e0 6f2d7373 6532202d 6d6e6f2d 6d6d7820  o-sse2 -mno-mmx 
 01f0 2d6d636d 6f64656c 3d6b6572 6e656c20  -mcmodel=kernel 
 0200 2d6d6e6f 2d383033 3837202d 6d6e6f2d  -mno-80387 -mno-
 0210 7265642d 7a6f6e65 202d6d74 756e653d  red-zone -mtune=
 0220 67656e65 72696320 2d6d6172 63683d78  generic -march=x
 0230 38362d36 34202d67 202d4f30 202d7374  86-64 -g -O0 -st
 0240 643d632b 2b326120 2d666e6f 2d706963  d=c++2a -fno-pic
 0250 202d6666 72656573 74616e64 696e6720   -ffreestanding 
 0260 2d666e6f 2d737461 636b2d70 726f7465  -fno-stack-prote
 0270 63746f72 202d666e 6f2d6f6d 69742d66  ctor -fno-omit-f
 0280 72616d65 2d706f69 6e746572 00667261  rame-pointer.fra
 0290 6d656275 66666572 5f706974 63680062  mebuffer_pitch.b
 02a0 75666665 72007061 73736564 5f68002f  uffer.passed_h./
 02b0 686f6d65 2f637970 2f6f7468 65725f6f  home/cyp/other_o
 02c0 732f716c 6f616465 72322d62 61726562  s/qloader2-bareb
 02d0 6f6e6573 00746f74 616c5f63 6f756e74  ones.total_count
 02e0 00737461 72746564 5f736563 00667261  .started_sec.fra
 02f0 6d656275 66666572 5f686569 67687400  mebuffer_height.
 0300 64697669 736f7200 6d656d6f 72795f6d  divisor.memory_m
 0310 61705f65 6e747269 65730070 61737365  ap_entries.passe
 0320 645f6d69 6e006d65 6d7a6572 6f006772  d_min.memzero.gr
 0330 616e0064 65636c74 79706528 6e756c6c  an.decltype(null
 0340 70747229 00626173 655f6d69 64006772  ptr).base_mid.gr
 0350 616e756c 61726974 79006764 74720067  anularity.gdtr.g
 0360 65745f74 7373005f 5a313274 73735f73  et_tss._Z12tss_s
 0370 65745f72 7370306d 00736574 75705f67  et_rsp0m.setup_g
 0380 6474005f 5a376765 745f7473 73760069  dt._Z7get_tssv.i
 0390 64745f73 7461636b 32006964 745f7374  dt_stack2.idt_st
 03a0 61636b33 00747373 5f6c696d 6974005f  ack3.tss_limit._
 03b0 5a397365 7475705f 6764746d 00696f6d  Z9setup_gdtm.iom
 03c0 61705f62 61736500 6764745f 7365745f  ap_base.gdt_set_
 03d0 78646573 63726970 746f7200 6c6f6e67  xdescriptor.long
 03e0 206c6f6e 6720696e 74003136 6764745f   long int.16gdt_
 03f0 64657363 72697074 6f725f74 00747373  descriptor_t.tss
 0400 5f626173 65007265 73657276 65643100  _base.reserved1.
 0410 6c696d69 745f6c6f 77006764 745f6465  limit_low.gdt_de
 0420 73637269 70746f72 73007473 735f696e  scriptors.tss_in
 0430 69740035 7473735f 74006c6f 6e672064  it.5tss_t.long d
 0440 6f75626c 65007273 70310072 73703200  ouble.rsp1.rsp2.
 0450 72657365 72766564 00626173 655f7868  reserved.base_xh
 0460 69676800 31376764 745f7864 65736372  igh.17gdt_xdescr
 0470 6970746f 725f7400 72657365 72766564  iptor_t.reserved
 0480 30007265 73657276 65643200 62617365  0.reserved2.base
 0490 5f686967 68006973 74320069 73743300  _high.ist2.ist3.
 04a0 69737434 00697374 35006973 7437005f  ist4.ist5.ist7._
 04b0 5a397267 64745f69 6e697476 00737263  Z9rgdt_initv.src
 04c0 2f617263 682f6764 742e6370 70006261  /arch/gdt.cpp.ba
 04d0 73655f6c 6f770072 6764745f 696e6974  se_low.rgdt_init
 04e0 00366764 74725f74 00726573 65727665  .6gdtr_t.reserve
 04f0 64330074 73735f73 65745f72 73703000  d3.tss_set_rsp0.
 0500 69737431 005f5a38 7473735f 696e6974  ist1._Z8tss_init
 0510 6d006764 745f7365 745f6465 73637269  m.gdt_set_descri
 0520 70746f72 00697374 36006964 745f7374  ptor.ist6.idt_st
 0530 61636b00 6b65726e 656c5f73 74617274  ack.kernel_start
 0540 0075696e 74707472 5f740073 74697661  .uintptr_t.stiva
 0550 6c655f68 65616465 72005f5a 31347365  le_header._Z14se
 0560 745f7061 67696e67 5f646972 6d007365  t_paging_dirm.se
 0570 745f7061 67696e67 5f646972 00737263  t_paging_dir.src
 0580 2f617263 682f6172 63682e63 70700070  /arch/arch.cpp.p
 0590 6c345f74 61626c65 00706c34 5f706167  l4_table.pl4_pag
 05a0 696e6700 656e7472 795f706f 696e7400  ing.entry_point.
 05b0 434f4d31 00434f4d 3200434f 4d330043  COM1.COM2.COM3.C
 05c0 4f4d3400 70726f63 6573735f 6c6f636b  OM4.process_lock
 05d0 65640067 65745f63 75727265 6e745f65  ed.get_current_e
 05e0 7370005f 5a323169 72715f30 5f70726f  sp._Z21irq_0_pro
 05f0 63657373 5f68616e 646c6572 50313949  cess_handlerP19I
 0600 6e746572 72757074 53746163 6b467261  nterruptStackFra
 0610 6d650050 524f4345 53535f52 554e4e49  me.PROCESS_RUNNI
 0620 4e47006d 61696e5f 70726f63 6573735f  NG.main_process_
 0630 32005052 4f434553 535f4352 41534800  2.PROCESS_CRASH.
 0640 5f474c4f 42414c5f 5f737562 5f495f70  _GLOBAL__sub_I_p
 0650 726f6365 73735f61 72726179 005f5a31  rocess_array._Z1
 0660 34756e6c 6f636b5f 70726f63 65737376  4unlock_processv
 0670 00657272 6f725f63 6f646500 7372632f  .error_code.src/
 0680 61726368 2f70726f 63657373 2e637070  arch/process.cpp
 0690 005f5a31 326c6f63 6b5f7072 6f636573  ._Z12lock_proces
 06a0 73760063 72737000 626f6f6c 00756e6c  sv.crsp.bool.unl
 06b0 6f636b5f 70726f63 65737300 70726f63  ock_process.proc
 06c0 6573735f 6c6f6164 65640069 72715f30  ess_loaded.irq_0
 06d0 5f70726f 63657373 5f68616e 646c6572  _process_handler
 06e0 0066756e 63006375 7272656e 745f4973  .func.current_Is
 06f0 66006b65 726e656c 5f70726f 63657373  f.kernel_process
 0700 006d6169 6e5f7072 6f636573 735f3100  .main_process_1.
 0710 74656d70 5f657370 005f5f69 6e697469  temp_esp.__initi
 0720 616c697a 655f7000 63757272 656e745f  alize_p.current_
 0730 70726f63 65737300 72666c61 6773005f  process.rflags._
 0740 5a313269 6e69745f 70726f63 65737350  Z12init_processP
 0750 46767645 00637572 72656e74 5f696400  FvvE.current_id.
 0760 6765745f 6e657874 5f70726f 63657373  get_next_process
 0770 005f5a4e 3770726f 63657373 43344576  ._ZN7processC4Ev
 0780 005f5f73 74617469 635f696e 69746961  .__static_initia
 0790 6c697a61 74696f6e 5f616e64 5f646573  lization_and_des
 07a0 74727563 74696f6e 5f30005f 5f707269  truction_0.__pri
 07b0 6f726974 79007468 69730050 524f4345  ority.this.PROCE
 07c0 53535f57 41495449 4e470074 61736b5f  SS_WAITING.task_
 07d0 75706461 74655f73 77697463 68007377  update_switch.sw
 07e0 69746368 5f636f6e 74657874 00696e74  itch_context.int
 07f0 5f6e6f00 696e6974 5f6d756c 74695f70  _no.init_multi_p
 0800 726f6365 73730069 6e69745f 70726f63  rocess.init_proc
 0810 65737300 5f5a3134 6d61696e 5f70726f  ess._Z14main_pro
 0820 63657373 5f317600 63757272 656e745f  cess_1v.current_
 0830 70726f63 6573735f 73746174 65005f5a  process_state._Z
 0840 31366765 745f6e65 78745f70 726f6365  16get_next_proce
 0850 73736d00 5f5a4e37 70726f63 65737343  ssm._ZN7processC
 0860 32457600 50524f43 4553535f 41564149  2Ev.PROCESS_AVAI
 0870 4c41424c 45006765 745f6e65 78745f65  LABLE.get_next_e
 0880 7370005f 5a313869 6e69745f 6d756c74  sp._Z18init_mult
 0890 695f7072 6f636573 7376005f 5a313473  i_processv._Z14s
 08a0 77697463 685f636f 6e746578 74503139  witch_contextP19
 08b0 496e7465 72727570 74537461 636b4672  InterruptStackFr
 08c0 616d6550 3770726f 63657373 006e6578  ameP7process.nex
 08d0 74005f5a 31346d61 696e5f70 726f6365  t._Z14main_proce
 08e0 73735f32 76007573 61676500 64696666  ss_2v.usage.diff
 08f0 00737461 72746564 42657400 73697a65  .startedBet.size
 0900 5f74006d 616c6c6f 63006c69 62616c6c  _t.malloc.liball
 0910 6f635f6d 696e6f72 00636465 7374006c  oc_minor.cdest.l
 0920 73726300 6e65775f 6d696e00 6c696261  src.new_min.liba
 0930 6c6c6f63 5f756e6c 6f636b00 6c5f706f  lloc_unlock.l_po
 0940 73736962 6c654f76 65727275 6e73006c  ssibleOverruns.l
 0950 64657374 006c5f6d 656d526f 6f74006c  dest.l_memRoot.l
 0960 6962616c 6c6f635f 6d656d63 7079006c  iballoc_memcpy.l
 0970 5f696e75 73650062 6c6f636b 006c6962  _inuse.block.lib
 0980 616c6c6f 635f6672 6565006c 6962616c  alloc_free.libal
 0990 6c6f635f 6d616a6f 72006c6f 6e67206c  loc_major.long l
 09a0 6f6e6720 756e7369 676e6564 20696e74  ong unsigned int
 09b0 006c6962 616c6c6f 635f6d65 6d736574  .liballoc_memset
 09c0 006c5f61 6c6c6f63 61746564 006c5f65  .l_allocated.l_e
 09d0 72726f72 436f756e 74006361 6c6c6f63  rrorCount.calloc
 09e0 006c5f70 61676553 697a6500 7265616c  .l_pageSize.real
 09f0 6c6f6300 7265616c 5f73697a 65006c5f  loc.real_size.l_
 0a00 62657374 42657400 616c6c6f 63617465  bestBet.allocate
 0a10 5f6e6577 5f706167 65007265 715f7369  _new_page.req_si
 0a20 7a650073 72632f61 7263682f 6d656d2f  ze.src/arch/mem/
 0a30 6c696261 6c6c6f63 2e637070 00637372  liballoc.cpp.csr
 0a40 63006c5f 7761726e 696e6743 6f756e74  c.l_warningCount
 0a50 006c6962 616c6c6f 635f616c 6c6f6300  .liballoc_alloc.
 0a60 62657374 53697a65 006c6962 616c6c6f  bestSize.liballo
 0a70 635f6c6f 636b006d 61676963 006e6f62  c_lock.magic.nob
 0a80 6a007072 6576006c 5f706167 65436f75  j.prev.l_pageCou
 0a90 6e74006d 616a5369 7a650070 64707400  nt.majSize.pdpt.
 0aa0 706d6d5f 66726565 00626173 655f616c  pmm_free.base_al
 0ab0 69676e65 64007479 70650061 6c69676e  igned.type.align
 0ac0 65645f62 61736500 5f5a3870 6d6d5f66  ed_base._Z8pmm_f
 0ad0 72656550 766d005f 5a313161 6c6c6f63  reePvm._Z11alloc
 0ae0 5f667261 6d657600 5f5a3136 6672616d  _framev._Z16fram
 0af0 655f6669 6e645f66 69727374 76007465  e_find_firstv.te
 0b00 6d705f61 6c6c6f63 5f707472 0070675f  mp_alloc_ptr.pg_
 0b10 636f756e 74006b69 746f6154 3c756e73  count.kitoaT<uns
 0b20 69676e65 6420696e 743e005f 5a313066  igned int>._Z10f
 0b30 7265655f 6672616d 656d0061 6c6c6f63  ree_framem.alloc
 0b40 5f6d756c 7469706c 655f6672 616d655f  _multiple_frame_
 0b50 7a65726f 00757365 5f666173 74005f5a  zero.use_fast._Z
 0b60 3235616c 6c6f635f 6d756c74 69706c65  25alloc_multiple
 0b70 5f667261 6d655f7a 65726f6d 62006c65  _frame_zeromb.le
 0b80 6e676874 5f616c69 676e6564 005f5a31  nght_aligned._Z1
 0b90 35726573 65745f66 72616d65 5f626974  5reset_frame_bit
 0ba0 6d006765 745f726b 65726e5f 61646472  m.get_rkern_addr
 0bb0 005f5a38 616c6967 6e5f7570 6d6d006e  ._Z8align_upmm.n
 0bc0 65775f62 69746d61 705f7369 7a655f69  ew_bitmap_size_i
 0bd0 6e5f7061 67657300 5f5a3133 6765745f  n_pages._Z13get_
 0be0 726d656d 5f616464 726d005f 5a313969  rmem_addrm._Z19i
 0bf0 6e69745f 76697274 75616c5f 6d656d6f  nit_virtual_memo
 0c00 72795031 34737469 76616c65 5f737472  ryP14stivale_str
 0c10 75637400 5f5a3134 6765745f 726b6572  uct._Z14get_rker
 0c20 6e5f6164 64726d00 5f5a3131 6672616d  n_addrm._Z11fram
 0c30 655f636c 6561726d 005f5a38 76697274  e_clearm._Z8virt
 0c40 5f6d6170 6d6d6d00 6d6d755f 6672616d  _mapmmm.mmu_fram
 0c50 655f7465 7374006d 756c7469 706c6500  e_test.multiple.
 0c60 74656d70 5f616c6c 6f635f63 75727265  temp_alloc_curre
 0c70 6e745f63 7572736f 72005f5a 31346d6d  nt_cursor._Z14mm
 0c80 755f6672 616d655f 74657374 6d006538  u_frame_testm.e8
 0c90 32305f65 6e747279 5f740070 675f636e  20_entry_t.pg_cn
 0ca0 74005f70 6d6c3465 5f6f6666 73657400  t._pml4e_offset.
 0cb0 74656d70 5f667261 6d655f74 61626c65  temp_frame_table
 0cc0 00616c6c 6f635f66 72616d65 00766572  .alloc_frame.ver
 0cd0 795f696e 69746961 6c5f6672 616d655f  y_initial_frame_
 0ce0 7461626c 65007374 695f7374 72756374  table.sti_struct
 0cf0 00667261 6d656275 66666572 5f6c656e  .framebuffer_len
 0d00 67687400 74657374 5f667261 6d655f62  ght.test_frame_b
 0d10 69740075 6e757365 64005f5a 31336765  it.unused._Z13ge
 0d20 745f6b65 726e5f61 6464726d 00667261  t_kern_addrm.fra
 0d30 6d655f66 696e645f 66697273 74006765  me_find_first.ge
 0d40 745f726d 656d5f61 64647200 5f5a3134  t_rmem_addr._Z14
 0d50 74657374 5f667261 6d655f62 69746d00  test_frame_bitm.
 0d60 66726565 5f667261 6d650066 72616d65  free_frame.frame
 0d70 735f636f 756e7465 72005f5a 31326765  s_counter._Z12ge
 0d80 745f6d65 6d5f6164 64726d00 68656170  t_mem_addrm.heap
 0d90 5f656e64 00706167 696e675f 69735f69  _end.paging_is_i
 0da0 6e697469 616c697a 65640061 6c69676e  nitialized.align
 0db0 5f757000 6672616d 655f6164 64720066  _up.frame_addr.f
 0dc0 72616d65 5f656e64 005f7064 70745f6f  rame_end._pdpt_o
 0dd0 66667365 74006d65 6d656e74 72790066  ffset.mementry.f
 0de0 72616d65 5f636c65 61720075 6e736574  rame_clear.unset
 0df0 5f667261 6d655f72 6567696f 6e006765  _frame_region.ge
 0e00 745f6d65 6d5f6164 64720061 6c69676e  t_mem_addr.align
 0e10 65645f6c 656e6774 68006d61 785f6d65  ed_length.max_me
 0e20 6d007372 632f6172 63682f6d 656d2f76  m.src/arch/mem/v
 0e30 69727475 616c2e63 7070005f 70745f6f  irtual.cpp._pt_o
 0e40 66667365 7400616c 6c6f635f 6d756c74  ffset.alloc_mult
 0e50 69706c65 5f667261 6d650074 6f546573  iple_frame.toTes
 0e60 74005f5a 3230616c 6c6f635f 6d756c74  t._Z20alloc_mult
 0e70 69706c65 5f667261 6d656d62 00676574  iple_framemb.get
 0e80 5f6b6572 6e5f6164 64720069 6e69745f  _kern_addr.init_
 0e90 70616769 6e67005f 5a366b69 746f6154  paging._Z6kitoaT
 0ea0 496a4576 50636954 5f005f5a 31337365  IjEvPciT_._Z13se
 0eb0 745f6672 616d655f 6269746d 00696e69  t_frame_bitm.ini
 0ec0 745f6672 616d6500 76616464 72657373  t_frame.vaddress
 0ed0 00706164 64726573 73006672 616d655f  .paddress.frame_
 0ee0 63757273 6f725f70 6f73005f 5a313169  cursor_pos._Z11i
 0ef0 6e69745f 70616769 6e675031 34737469  nit_pagingP14sti
 0f00 76616c65 5f737472 75637400 6375725f  vale_struct.cur_
 0f10 6269746d 61705f73 697a655f 696e5f70  bitmap_size_in_p
 0f20 61676573 005f5a31 30696e69 745f6672  ages._Z10init_fr
 0f30 616d656d 50313473 74697661 6c655f73  amemP14stivale_s
 0f40 74727563 74006f6c 645f6269 746d6170  truct.old_bitmap
 0f50 00667261 6d655f73 6574005f 5a396672  .frame_set._Z9fr
 0f60 616d655f 7365746d 00686561 705f7374  ame_setm.heap_st
 0f70 61727400 5f70645f 6f666673 65740072  art._pd_offset.r
 0f80 65736574 5f667261 6d655f62 69740076  eset_frame_bit.v
 0f90 6972745f 6d617000 6672616d 65730069  irt_map.frames.i
 0fa0 6e69745f 76697274 75616c5f 6d656d6f  nit_virtual_memo
 0fb0 7279005f 5a386973 5f657272 6f726900  ry._Z8is_errori.
 0fc0 6964745f 64657363 72697074 6f720061  idt_descriptor.a
 0fd0 74747269 62757465 73007372 632f6172  ttributes.src/ar
 0fe0 63682f69 6e746572 72757074 2e637070  ch/interrupt.cpp
 0ff0 005f5a37 6164645f 7269706d 005f5a38  ._Z7add_ripm._Z8
 1000 696e6974 5f696474 76007069 635f6163  init_idtv.pic_ac
 1010 6b006f66 66736574 5f686967 68333200  k.offset_high32.
 1020 6f757462 005f5a34 6f757462 74680062  outb._Z4outbth.b
 1030 75666632 00313169 64745f65 6e747279  uff2.11idt_entry
 1040 5f740069 735f6572 726f7200 6b69746f  _t.is_error.kito
 1050 61005f5a 3564756d 70316d50 4b630076  a._Z5dump1mPKc.v
 1060 616c7565 00737463 6b005f5a 38706963  alue.stck._Z8pic
 1070 5f696e69 74760061 64645f72 6970006e  _initv.add_rip.n
 1080 616d6500 7269705f 636f756e 74657200  ame.rip_counter.
 1090 73746163 6b667261 6d65005f 5a313264  stackframe._Z12d
 10a0 756d7072 65676973 74657250 3139496e  umpregisterP19In
 10b0 74657272 75707453 7461636b 4672616d  terruptStackFram
 10c0 6500696e 69745f69 64740072 69705f63  e.init_idt.rip_c
 10d0 6f756e74 0064756d 70726567 69737465  ount.dumpregiste
 10e0 7200696e 74657272 75707473 5f68616e  r.interrupts_han
 10f0 646c6572 00627566 66005f5f 696e7465  dler.buff.__inte
 1100 72727570 745f7665 63746f72 005f5a37  rrupt_vector._Z7
 1110 7069635f 61636b69 00706963 5f696e69  pic_acki.pic_ini
 1120 74006578 63657074 696f6e5f 6d657373  t.exception_mess
 1130 61676573 00706f72 7400696e 746e6f00  ages.port.intno.
 1140 36696474 725f7400 64756d70 31005f5a  6idtr_t.dump1._Z
 1150 356b6974 6f615063 6969006f 66667365  5kitoaPcii.offse
 1160 745f6d69 64313600 6f666673 65745f6c  t_mid16.offset_l
 1170 6f773136 00636f6d 5f777269 74655f73  ow16.com_write_s
 1180 74726c00 636f6d5f 77726974 655f7374  trl.com_write_st
 1190 72005f5a 3133636f 6d5f7772 6974655f  r._Z13com_write_
 11a0 73747250 4b630063 6f6d5f77 6169745f  strPKc.com_wait_
 11b0 77726974 6500636f 6d5f7772 69746500  write.com_write.
 11c0 5f5a3134 636f6d5f 696e6974 69616c69  _Z14com_initiali
 11d0 7a653843 4f4d5f50 4f525400 5f5a3369  ze8COM_PORT._Z3i
 11e0 6e627400 62756661 64647200 636f6d5f  nbt.bufaddr.com_
 11f0 70757463 005f5a38 636f6d5f 70757463  putc._Z8com_putc
 1200 38434f4d 5f504f52 5463005f 5a313463  8COM_PORTc._Z14c
 1210 6f6d5f77 6169745f 77726974 6538434f  om_wait_write8CO
 1220 4d5f504f 5254005f 5a39636f 6d5f7772  M_PORT._Z9com_wr
 1230 69746538 434f4d5f 504f5254 504b7669  ite8COM_PORTPKvi
 1240 00737263 2f636f6d 2e637070 00636f6d  .src/com.cpp.com
 1250 5f696e69 7469616c 697a6500 5f5a3134  _initialize._Z14
 1260 636f6d5f 77726974 655f7374 726c504b  com_write_strlPK
 1270 63005f5a 4e376772 61706869 63433245  c._ZN7graphicC2E
 1280 76005f5a 4e376772 61706869 63433445  v._ZN7graphicC4E
 1290 76007372 632f6465 76696365 2f677261  v.src/device/gra
 12a0 70686963 2e637070 00677261 70686963  phic.cpp.graphic
 12b0 005f5a34 77616974 76007761 69740073  ._Z4waitv.wait.s
 12c0 72632f64 65766963 652f7069 742e6370  rc/device/pit.cp
 12d0 70005f5a 33696e77 74005f5a 4e335049  p._Z3inwt._ZN3PI
 12e0 54433445 7600676c 6f62616c 5f504954  TC4Ev.global_PIT
 12f0 005f5a4e 33504954 43324576 00        ._ZN3PITC2Ev.   
Contenu de la section .comment :
 0000 4743433a 2028474e 55292031 302e312e  GCC: (GNU) 10.1.
 0010 3000                                 0.              
Contenu de la section .debug_pubnames :
 0000 0e000000 03000000 00000000 00000000  ................
 0010 00000e00 00000300 00000000 00000000  ................
 0020 00000000 0e000000 03000000 00000000  ................
 0030 00000000 0000                        ......          
Contenu de la section .debug_frame :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000                             ....            
Contenu de la section .debug_loc :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000 00000000 00000000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................

Déassemblage de la section .text :

ffffffff80101000 <_Z6_startP14stivale_struct>:
#include <arch/process.h>
/*
    pour le moment tout ce qui est ici est un test
    for the moment everything here is for test
*/
void _start( stivale_struct *bootloader_data) {
ffffffff80101000:	55                   	push   %rbp
ffffffff80101001:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101004:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80101008:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)

    asm volatile("sti");
ffffffff8010100c:	fb                   	sti    
    PIT::the()->init_PIT();
ffffffff8010100d:	e8 54 36 00 00       	callq  ffffffff80104666 <_ZN3PIT3theEv>
ffffffff80101012:	48 89 c7             	mov    %rax,%rdi
ffffffff80101015:	e8 0a 35 00 00       	callq  ffffffff80104524 <_ZN3PIT8init_PITEv>
    uint64_t current_screen_pos = 0;
ffffffff8010101a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80101021:	00 
    uint32_t d = 100;
ffffffff80101022:	c7 45 fc 64 00 00 00 	movl   $0x64,-0x4(%rbp)
    char buffer[32]; // counter
    uint32_t* dd = (uint32_t*)
            bootloader_data->framebuffer_addr;
ffffffff80101029:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8010102d:	48 8b 40 18          	mov    0x18(%rax),%rax
    uint32_t* dd = (uint32_t*)
ffffffff80101031:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    uint64_t update_tick = 0;
ffffffff80101035:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8010103c:	00 
    uint64_t started_sec = 0;
ffffffff8010103d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80101044:	00 
    unlock_process();
ffffffff80101045:	e8 ed 04 00 00       	callq  ffffffff80101537 <_Z14unlock_processv>
    while(true){
        for(uint64_t i = 0; i < bootloader_data->framebuffer_width * bootloader_data->framebuffer_height; i++){
ffffffff8010104a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80101051:	00 
ffffffff80101052:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80101056:	0f b7 40 22          	movzwl 0x22(%rax),%eax
ffffffff8010105a:	0f b7 d0             	movzwl %ax,%edx
ffffffff8010105d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80101061:	0f b7 40 24          	movzwl 0x24(%rax),%eax
ffffffff80101065:	0f b7 c0             	movzwl %ax,%eax
ffffffff80101068:	0f af c2             	imul   %edx,%eax
ffffffff8010106b:	48 98                	cltq   
ffffffff8010106d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80101071:	73 1f                	jae    ffffffff80101092 <_Z6_startP14stivale_struct+0x92>

            dd[i] = d;
ffffffff80101073:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101077:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff8010107e:	00 
ffffffff8010107f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80101083:	48 01 c2             	add    %rax,%rdx
ffffffff80101086:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101089:	89 02                	mov    %eax,(%rdx)
        for(uint64_t i = 0; i < bootloader_data->framebuffer_width * bootloader_data->framebuffer_height; i++){
ffffffff8010108b:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff80101090:	eb c0                	jmp    ffffffff80101052 <_Z6_startP14stivale_struct+0x52>
        }
        update_tick++;
ffffffff80101092:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
        if(PIT::the()->passed_sec != started_sec){
ffffffff80101097:	e8 ca 35 00 00       	callq  ffffffff80104666 <_ZN3PIT3theEv>
ffffffff8010109c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff801010a0:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff801010a4:	0f 95 c0             	setne  %al
ffffffff801010a7:	84 c0                	test   %al,%al
ffffffff801010a9:	74 53                	je     ffffffff801010fe <_Z6_startP14stivale_struct+0xfe>
            started_sec = PIT::the()->passed_sec;
ffffffff801010ab:	e8 b6 35 00 00       	callq  ffffffff80104666 <_ZN3PIT3theEv>
ffffffff801010b0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff801010b4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            memzero(buffer, 32);
ffffffff801010b8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801010bc:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801010c1:	48 89 c7             	mov    %rax,%rdi
ffffffff801010c4:	e8 4c 39 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>

            kitoaT<uint64_t>(buffer, 'd',update_tick);
ffffffff801010c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801010cd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801010d1:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff801010d6:	48 89 c7             	mov    %rax,%rdi
ffffffff801010d9:	e8 71 39 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
            com_write_strl("fps  : ");
ffffffff801010de:	48 c7 c7 00 50 10 80 	mov    $0xffffffff80105000,%rdi
ffffffff801010e5:	e8 3d 33 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
            com_write_str(buffer);
ffffffff801010ea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801010ee:	48 89 c7             	mov    %rax,%rdi
ffffffff801010f1:	e8 d3 32 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
            update_tick = 0;
ffffffff801010f6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801010fd:	00 
        }




        d++;
ffffffff801010fe:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)

    }
ffffffff80101102:	e9 43 ff ff ff       	jmpq   ffffffff8010104a <_Z6_startP14stivale_struct+0x4a>

ffffffff80101107 <_Z7get_tssv>:
#define GDT_LM       0x2
gdtr_t gdtr;

 tss_t tss  ;

tss_t* get_tss(){
ffffffff80101107:	55                   	push   %rbp
ffffffff80101108:	48 89 e5             	mov    %rsp,%rbp
    return &tss;
ffffffff8010110b:	48 c7 c0 20 80 10 80 	mov    $0xffffffff80108020,%rax
}
ffffffff80101112:	5d                   	pop    %rbp
ffffffff80101113:	c3                   	retq   

ffffffff80101114 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>:

 gdt_descriptor_t gdt_descriptors[64];
static void gdt_set_descriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran)
{
ffffffff80101114:	55                   	push   %rbp
ffffffff80101115:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101118:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8010111c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80101120:	89 f0                	mov    %esi,%eax
ffffffff80101122:	89 d6                	mov    %edx,%esi
ffffffff80101124:	89 ca                	mov    %ecx,%edx
ffffffff80101126:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff8010112a:	89 f0                	mov    %esi,%eax
ffffffff8010112c:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff8010112f:	89 d0                	mov    %edx,%eax
ffffffff80101131:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_descriptor_t *descriptor = &gdt_descriptors[sel / sizeof(*gdt_descriptors)];
ffffffff80101134:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80101138:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff8010113c:	48 89 c2             	mov    %rax,%rdx
ffffffff8010113f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101143:	48 01 d0             	add    %rdx,%rax
ffffffff80101146:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->flags = flags;
ffffffff8010114a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010114e:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff80101152:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->granularity = (gran << 4) | 0x0F;
ffffffff80101155:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff80101159:	c1 e0 04             	shl    $0x4,%eax
ffffffff8010115c:	83 c8 0f             	or     $0xf,%eax
ffffffff8010115f:	89 c2                	mov    %eax,%edx
ffffffff80101161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101165:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->limit_low = 0xFFFF;
ffffffff80101168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010116c:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
}
ffffffff80101171:	90                   	nop
ffffffff80101172:	c9                   	leaveq 
ffffffff80101173:	c3                   	retq   

ffffffff80101174 <_ZL19gdt_set_xdescriptorP16gdt_descriptor_tthhmm>:

static void gdt_set_xdescriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran, uint64_t base, uint64_t limit)
{
ffffffff80101174:	55                   	push   %rbp
ffffffff80101175:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101178:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8010117c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80101180:	89 f0                	mov    %esi,%eax
ffffffff80101182:	89 d6                	mov    %edx,%esi
ffffffff80101184:	89 ca                	mov    %ecx,%edx
ffffffff80101186:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
ffffffff8010118a:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
ffffffff8010118e:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff80101192:	89 f0                	mov    %esi,%eax
ffffffff80101194:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff80101197:	89 d0                	mov    %edx,%eax
ffffffff80101199:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_xdescriptor_t *descriptor = (gdt_xdescriptor_t *) (&gdt_descriptors[sel / sizeof(*gdt_descriptors)]);
ffffffff8010119c:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff801011a0:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff801011a4:	48 89 c2             	mov    %rax,%rdx
ffffffff801011a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801011ab:	48 01 d0             	add    %rdx,%rax
ffffffff801011ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->low.flags = flags;
ffffffff801011b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801011b6:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff801011ba:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->low.granularity = (gran << 4) | ((limit >> 16) & 0x0F);
ffffffff801011bd:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff801011c1:	c1 e0 04             	shl    $0x4,%eax
ffffffff801011c4:	89 c2                	mov    %eax,%edx
ffffffff801011c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801011ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801011ce:	83 e0 0f             	and    $0xf,%eax
ffffffff801011d1:	09 c2                	or     %eax,%edx
ffffffff801011d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801011d7:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->low.limit_low = limit & 0xFFFF;
ffffffff801011da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801011de:	89 c2                	mov    %eax,%edx
ffffffff801011e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801011e4:	66 89 10             	mov    %dx,(%rax)
  descriptor->low.base_low = base & 0xFFFF;
ffffffff801011e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801011eb:	89 c2                	mov    %eax,%edx
ffffffff801011ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801011f1:	66 89 50 02          	mov    %dx,0x2(%rax)
  descriptor->low.base_mid = ((base >> 16) & 0xFF);
ffffffff801011f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801011f9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801011fd:	89 c2                	mov    %eax,%edx
ffffffff801011ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101203:	88 50 04             	mov    %dl,0x4(%rax)
  descriptor->low.base_high = ((base >> 24) & 0xFF);
ffffffff80101206:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010120a:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff8010120e:	89 c2                	mov    %eax,%edx
ffffffff80101210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101214:	88 50 07             	mov    %dl,0x7(%rax)
  descriptor->high.base_xhigh = ((base >> 32) & 0xFFFFFFFF);
ffffffff80101217:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010121b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8010121f:	89 c2                	mov    %eax,%edx
ffffffff80101221:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101225:	89 50 08             	mov    %edx,0x8(%rax)
  descriptor->high.reserved = 0;
ffffffff80101228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010122c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
}
ffffffff80101233:	90                   	nop
ffffffff80101234:	c9                   	leaveq 
ffffffff80101235:	c3                   	retq   

ffffffff80101236 <_Z9rgdt_initv>:

extern "C" void gdtr_install(gdtr_t*, unsigned short, unsigned short);
void __attribute__((optimize("O0"))) rgdt_init(void)
{
ffffffff80101236:	55                   	push   %rbp
ffffffff80101237:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010123a:	48 83 ec 10          	sub    $0x10,%rsp
    com_write_str("rgdt_init");
ffffffff8010123e:	48 c7 c7 08 50 10 80 	mov    $0xffffffff80105008,%rdi
ffffffff80101245:	e8 7f 31 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

  uint64_t tss_base = (uint64_t) &tss;
ffffffff8010124a:	48 c7 45 f8 20 80 10 	movq   $0xffffffff80108020,-0x8(%rbp)
ffffffff80101251:	80 
  uint64_t tss_limit =tss_base+ sizeof(tss)-1;
ffffffff80101252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101256:	48 83 c0 6f          	add    $0x6f,%rax
ffffffff8010125a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

  com_write_str("reset gdt");
ffffffff8010125e:	48 c7 c7 12 50 10 80 	mov    $0xffffffff80105012,%rdi
ffffffff80101265:	e8 5f 31 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

  memzero(&gdt_descriptors,sizeof(gdt_descriptors) * 64);
ffffffff8010126a:	be 00 80 00 00       	mov    $0x8000,%esi
ffffffff8010126f:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff80101276:	e8 9a 37 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>

  com_write_str("set gdt entries");
ffffffff8010127b:	48 c7 c7 1c 50 10 80 	mov    $0xffffffff8010501c,%rdi
ffffffff80101282:	e8 42 31 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_CODE, GDT_PRESENT | GDT_CS,                           GDT_LM);
ffffffff80101287:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8010128c:	ba 98 00 00 00       	mov    $0x98,%edx
ffffffff80101291:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80101296:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff8010129d:	e8 72 fe ff ff       	callq  ffffffff80101114 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_DATA, GDT_PRESENT | GDT_DS | GDT_WRITABLE,            0);
ffffffff801012a2:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff801012a7:	ba 92 00 00 00       	mov    $0x92,%edx
ffffffff801012ac:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff801012b1:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff801012b8:	e8 57 fe ff ff       	callq  ffffffff80101114 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_DATA,   GDT_PRESENT | GDT_DS | GDT_USER | GDT_WRITABLE, 0);
ffffffff801012bd:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff801012c2:	ba f2 00 00 00       	mov    $0xf2,%edx
ffffffff801012c7:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff801012cc:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff801012d3:	e8 3c fe ff ff       	callq  ffffffff80101114 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_CODE,   GDT_PRESENT | GDT_CS | GDT_USER,                GDT_LM);
ffffffff801012d8:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff801012dd:	ba f8 00 00 00       	mov    $0xf8,%edx
ffffffff801012e2:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801012e7:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff801012ee:	e8 21 fe ff ff       	callq  ffffffff80101114 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_xdescriptor(gdt_descriptors, SLTR_TSS,         GDT_PRESENT | GDT_TSS,                          0, tss_base, tss_limit);
ffffffff801012f3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801012f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801012fb:	49 89 d1             	mov    %rdx,%r9
ffffffff801012fe:	49 89 c0             	mov    %rax,%r8
ffffffff80101301:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80101306:	ba 89 00 00 00       	mov    $0x89,%edx
ffffffff8010130b:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80101310:	48 c7 c7 a0 80 10 80 	mov    $0xffffffff801080a0,%rdi
ffffffff80101317:	e8 58 fe ff ff       	callq  ffffffff80101174 <_ZL19gdt_set_xdescriptorP16gdt_descriptor_tthhmm>


  gdtr.addr = (uint64_t) &gdt_descriptors;
ffffffff8010131c:	48 c7 c0 a0 80 10 80 	mov    $0xffffffff801080a0,%rax
ffffffff80101323:	48 89 05 d8 6c 00 00 	mov    %rax,0x6cd8(%rip)        # ffffffff80108002 <gdtr+0x2>
  gdtr.len = sizeof(gdt_descriptors) * GDT_DESCRIPTORS - 1;
ffffffff8010132a:	66 c7 05 cd 6c 00 00 	movw   $0xdff,0x6ccd(%rip)        # ffffffff80108000 <gdtr>
ffffffff80101331:	ff 0d 
  gdtr_install(&gdtr, SLTR_KERNEL_CODE, SLTR_KERNEL_DATA);
ffffffff80101333:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80101338:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8010133d:	48 c7 c7 00 80 10 80 	mov    $0xffffffff80108000,%rdi
ffffffff80101344:	e8 a7 36 00 00       	callq  ffffffff801049f0 <gdtr_install>

 
}
ffffffff80101349:	90                   	nop
ffffffff8010134a:	c9                   	leaveq 
ffffffff8010134b:	c3                   	retq   

ffffffff8010134c <_Z8tss_initm>:

uint8_t idt_stack[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack2[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack3[4096*4]__attribute__((aligned(4096)));
void tss_init(uint64_t i)
{
ffffffff8010134c:	55                   	push   %rbp
ffffffff8010134d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101350:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80101354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* reset all the fields */
  memzero(&tss, sizeof(tss));
ffffffff80101358:	be 70 00 00 00       	mov    $0x70,%esi
ffffffff8010135d:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff80101364:	e8 ac 36 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
  tss.iomap_base = sizeof(tss)-1;
ffffffff80101369:	66 c7 05 14 6d 00 00 	movw   $0x6f,0x6d14(%rip)        # ffffffff80108086 <tss+0x66>
ffffffff80101370:	6f 00 
    tss.rsp0 =  (uint64_t)i;
ffffffff80101372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101376:	48 89 05 a7 6c 00 00 	mov    %rax,0x6ca7(%rip)        # ffffffff80108024 <tss+0x4>
    
  /* install it using the LTR instruction */

    asm volatile("mov ax, %0 \n ltr ax" : : "i" (SLTR_TSS) : "rax");
ffffffff8010137d:	66 b8 28 00          	mov    $0x28,%ax
ffffffff80101381:	0f 00 d8             	ltr    %ax
}
ffffffff80101384:	90                   	nop
ffffffff80101385:	c9                   	leaveq 
ffffffff80101386:	c3                   	retq   

ffffffff80101387 <_Z12tss_set_rsp0m>:

void tss_set_rsp0(uint64_t rsp0)
{
ffffffff80101387:	55                   	push   %rbp
ffffffff80101388:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010138b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8010138f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* set the stack pointer for this CPU */
  tss.rsp0 = rsp0;
ffffffff80101393:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101397:	48 89 05 86 6c 00 00 	mov    %rax,0x6c86(%rip)        # ffffffff80108024 <tss+0x4>

  asm volatile("mov ax, %0 \n ltr ax" : : "i" (SLTR_TSS) : "rax");
ffffffff8010139e:	66 b8 28 00          	mov    $0x28,%ax
ffffffff801013a2:	0f 00 d8             	ltr    %ax
}void setup_gdt(unsigned long i){
ffffffff801013a5:	90                   	nop
ffffffff801013a6:	c9                   	leaveq 
ffffffff801013a7:	c3                   	retq   

ffffffff801013a8 <_Z9setup_gdtm>:
ffffffff801013a8:	55                   	push   %rbp
ffffffff801013a9:	48 89 e5             	mov    %rsp,%rbp
ffffffff801013ac:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801013b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    rgdt_init();
ffffffff801013b4:	e8 7d fe ff ff       	callq  ffffffff80101236 <_Z9rgdt_initv>
}
ffffffff801013b9:	90                   	nop
ffffffff801013ba:	c9                   	leaveq 
ffffffff801013bb:	c3                   	retq   

ffffffff801013bc <kernel_start>:
    .framebuffer_height = 1200,
    .framebuffer_bpp = 32,
    .entry_point = 0
};

extern "C" void kernel_start(stivale_struct *bootloader_data){
ffffffff801013bc:	55                   	push   %rbp
ffffffff801013bd:	48 89 e5             	mov    %rsp,%rbp
ffffffff801013c0:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801013c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    asm volatile("and rsp, -16");
ffffffff801013c8:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    com_initialize(COM_PORT::COM1);
ffffffff801013cc:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff801013d1:	e8 a0 30 00 00       	callq  ffffffff80104476 <_Z14com_initialize8COM_PORT>
   
    com_write_str("hello world");
ffffffff801013d6:	48 c7 c7 2c 50 10 80 	mov    $0xffffffff8010502c,%rdi
ffffffff801013dd:	e8 e7 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("init gdt");
ffffffff801013e2:	48 c7 c7 38 50 10 80 	mov    $0xffffffff80105038,%rdi
ffffffff801013e9:	e8 db 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    setup_gdt((uint64_t)stack + (sizeof(char)*4096));
ffffffff801013ee:	48 c7 c0 20 50 11 80 	mov    $0xffffffff80115020,%rax
ffffffff801013f5:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff801013fb:	48 89 c7             	mov    %rax,%rdi
ffffffff801013fe:	e8 a5 ff ff ff       	callq  ffffffff801013a8 <_Z9setup_gdtm>
    com_write_str("init gdt : ✅");
ffffffff80101403:	48 c7 c7 41 50 10 80 	mov    $0xffffffff80105041,%rdi
ffffffff8010140a:	e8 ba 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("init idt");
ffffffff8010140f:	48 c7 c7 50 50 10 80 	mov    $0xffffffff80105050,%rdi
ffffffff80101416:	e8 ae 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    
    init_idt();
ffffffff8010141b:	e8 08 28 00 00       	callq  ffffffff80103c28 <_Z8init_idtv>
    com_write_str("init idt : ✅");
ffffffff80101420:	48 c7 c7 59 50 10 80 	mov    $0xffffffff80105059,%rdi
ffffffff80101427:	e8 9d 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

    com_write_str("init tss");
ffffffff8010142c:	48 c7 c7 68 50 10 80 	mov    $0xffffffff80105068,%rdi
ffffffff80101433:	e8 91 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    tss_init((uintptr_t)stack + sizeof(char)*4096);
ffffffff80101438:	48 c7 c0 20 50 11 80 	mov    $0xffffffff80115020,%rax
ffffffff8010143f:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80101445:	48 89 c7             	mov    %rax,%rdi
ffffffff80101448:	e8 ff fe ff ff       	callq  ffffffff8010134c <_Z8tss_initm>
    com_write_str("init tss : OK");
ffffffff8010144d:	48 c7 c7 71 50 10 80 	mov    $0xffffffff80105071,%rdi
ffffffff80101454:	e8 70 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("init paging");
ffffffff80101459:	48 c7 c7 7f 50 10 80 	mov    $0xffffffff8010507f,%rdi
ffffffff80101460:	e8 64 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_virtual_memory(bootloader_data);
ffffffff80101465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101469:	48 89 c7             	mov    %rax,%rdi
ffffffff8010146c:	e8 c8 21 00 00       	callq  ffffffff80103639 <_Z19init_virtual_memoryP14stivale_struct>
    com_write_str("init paging : OK");
ffffffff80101471:	48 c7 c7 8b 50 10 80 	mov    $0xffffffff8010508b,%rdi
ffffffff80101478:	e8 4c 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>


    com_write_str("mapping");
ffffffff8010147d:	48 c7 c7 9c 50 10 80 	mov    $0xffffffff8010509c,%rdi
ffffffff80101484:	e8 40 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    set_paging_dir((uint64_t)pl4_table);
ffffffff80101489:	48 8b 05 70 3b 01 00 	mov    0x13b70(%rip),%rax        # ffffffff80115000 <_ZL9pl4_table>
ffffffff80101490:	48 89 c7             	mov    %rax,%rdi
ffffffff80101493:	e8 9e 36 00 00       	callq  ffffffff80104b36 <_Z14set_paging_dirm>
    com_write_str("mapping ok");
ffffffff80101498:	48 c7 c7 a4 50 10 80 	mov    $0xffffffff801050a4,%rdi
ffffffff8010149f:	e8 25 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>


    com_write_str("init process");
ffffffff801014a4:	48 c7 c7 af 50 10 80 	mov    $0xffffffff801050af,%rdi
ffffffff801014ab:	e8 19 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_multi_process();
ffffffff801014b0:	e8 b4 00 00 00       	callq  ffffffff80101569 <_Z18init_multi_processv>

    com_write_str("init process OK");
ffffffff801014b5:	48 c7 c7 bc 50 10 80 	mov    $0xffffffff801050bc,%rdi
ffffffff801014bc:	e8 08 2f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("testing with memory");
ffffffff801014c1:	48 c7 c7 cc 50 10 80 	mov    $0xffffffff801050cc,%rdi
ffffffff801014c8:	e8 fc 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    uint8_t* m = ( uint8_t*)malloc(sizeof (uint8_t)* 128);
ffffffff801014cd:	bf 80 00 00 00       	mov    $0x80,%edi
ffffffff801014d2:	e8 05 09 00 00       	callq  ffffffff80101ddc <malloc>
ffffffff801014d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    com_write_str("testing with memory 2 ");
ffffffff801014db:	48 c7 c7 e0 50 10 80 	mov    $0xffffffff801050e0,%rdi
ffffffff801014e2:	e8 e2 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    for(uint64_t i = 0; i < 128; i++){
ffffffff801014e7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff801014ee:	00 
ffffffff801014ef:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
ffffffff801014f4:	77 18                	ja     ffffffff8010150e <kernel_start+0x152>
        m[i] = i;
ffffffff801014f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801014fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801014fe:	48 01 d0             	add    %rdx,%rax
ffffffff80101501:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80101505:	88 10                	mov    %dl,(%rax)
    for(uint64_t i = 0; i < 128; i++){
ffffffff80101507:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8010150c:	eb e1                	jmp    ffffffff801014ef <kernel_start+0x133>
    }
    com_write_str("testing with memory 3 ");
ffffffff8010150e:	48 c7 c7 f7 50 10 80 	mov    $0xffffffff801050f7,%rdi
ffffffff80101515:	e8 af 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>



    _start(bootloader_data);
ffffffff8010151a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010151e:	48 89 c7             	mov    %rax,%rdi
ffffffff80101521:	e8 da fa ff ff       	callq  ffffffff80101000 <_Z6_startP14stivale_struct>
}
ffffffff80101526:	90                   	nop
ffffffff80101527:	c9                   	leaveq 
ffffffff80101528:	c3                   	retq   

ffffffff80101529 <_Z12lock_processv>:
process* process_array;
process kernel_process;
process* current_process = 0x0;
bool process_locked = true;
bool process_loaded = false;
void lock_process(){
ffffffff80101529:	55                   	push   %rbp
ffffffff8010152a:	48 89 e5             	mov    %rsp,%rbp
    process_locked = true;
ffffffff8010152d:	c6 05 cc 5a 00 00 01 	movb   $0x1,0x5acc(%rip)        # ffffffff80107000 <process_locked>
}
ffffffff80101534:	90                   	nop
ffffffff80101535:	5d                   	pop    %rbp
ffffffff80101536:	c3                   	retq   

ffffffff80101537 <_Z14unlock_processv>:
void unlock_process(){
ffffffff80101537:	55                   	push   %rbp
ffffffff80101538:	48 89 e5             	mov    %rsp,%rbp
    process_locked = false;
ffffffff8010153b:	c6 05 be 5a 00 00 00 	movb   $0x0,0x5abe(%rip)        # ffffffff80107000 <process_locked>
}
ffffffff80101542:	90                   	nop
ffffffff80101543:	5d                   	pop    %rbp
ffffffff80101544:	c3                   	retq   

ffffffff80101545 <_Z14main_process_1v>:
void main_process_1(){
ffffffff80101545:	55                   	push   %rbp
ffffffff80101546:	48 89 e5             	mov    %rsp,%rbp
    while(true){
        com_write_str("hello 1");
ffffffff80101549:	48 c7 c7 0e 51 10 80 	mov    $0xffffffff8010510e,%rdi
ffffffff80101550:	e8 74 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
ffffffff80101555:	eb f2                	jmp    ffffffff80101549 <_Z14main_process_1v+0x4>

ffffffff80101557 <_Z14main_process_2v>:
    }
}
void main_process_2(){
ffffffff80101557:	55                   	push   %rbp
ffffffff80101558:	48 89 e5             	mov    %rsp,%rbp
    while(true){
        com_write_str("hello 2");
ffffffff8010155b:	48 c7 c7 16 51 10 80 	mov    $0xffffffff80105116,%rdi
ffffffff80101562:	e8 62 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
ffffffff80101567:	eb f2                	jmp    ffffffff8010155b <_Z14main_process_2v+0x4>

ffffffff80101569 <_Z18init_multi_processv>:
    }
}

void init_multi_process(){
ffffffff80101569:	55                   	push   %rbp
ffffffff8010156a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010156d:	48 83 ec 10          	sub    $0x10,%rsp
    com_write_str("loading process");
ffffffff80101571:	48 c7 c7 1e 51 10 80 	mov    $0xffffffff8010511e,%rdi
ffffffff80101578:	e8 4c 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    process_array = (process*)malloc(sizeof (process)* MAX_PROCESS);
ffffffff8010157d:	bf 00 0e 08 00       	mov    $0x80e00,%edi
ffffffff80101582:	e8 55 08 00 00       	callq  ffffffff80101ddc <malloc>
ffffffff80101587:	48 89 05 72 5a 01 00 	mov    %rax,0x15a72(%rip)        # ffffffff80117000 <process_array>
    com_write_str("loading process 0 ");
ffffffff8010158e:	48 c7 c7 2e 51 10 80 	mov    $0xffffffff8010512e,%rdi
ffffffff80101595:	e8 2f 2e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    for (int i = 0; i < MAX_PROCESS; i++){
ffffffff8010159a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff801015a1:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
ffffffff801015a5:	7f 78                	jg     ffffffff8010161f <_Z18init_multi_processv+0xb6>
           process_array[i].pid = i;
ffffffff801015a7:	48 8b 15 52 5a 01 00 	mov    0x15a52(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801015ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801015b1:	48 98                	cltq   
ffffffff801015b3:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801015ba:	48 01 c2             	add    %rax,%rdx
ffffffff801015bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801015c0:	48 98                	cltq   
ffffffff801015c2:	48 89 42 0c          	mov    %rax,0xc(%rdx)
             process_array[i].current_process_state = process_state::PROCESS_AVAILABLE;
ffffffff801015c6:	48 8b 15 33 5a 01 00 	mov    0x15a33(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801015cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801015d0:	48 98                	cltq   
ffffffff801015d2:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801015d9:	48 01 d0             	add    %rdx,%rax
ffffffff801015dc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
           for(int j = 0; j < PROCESS_STACK_SIZE; j++){
ffffffff801015e3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff801015ea:	81 7d f8 ff 0f 00 00 	cmpl   $0xfff,-0x8(%rbp)
ffffffff801015f1:	7f 26                	jg     ffffffff80101619 <_Z18init_multi_processv+0xb0>
               process_array[i].stack[j] = 0;
ffffffff801015f3:	48 8b 15 06 5a 01 00 	mov    0x15a06(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801015fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801015fd:	48 98                	cltq   
ffffffff801015ff:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff80101606:	48 01 c2             	add    %rax,%rdx
ffffffff80101609:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8010160c:	48 98                	cltq   
ffffffff8010160e:	c6 44 02 14 00       	movb   $0x0,0x14(%rdx,%rax,1)
           for(int j = 0; j < PROCESS_STACK_SIZE; j++){
ffffffff80101613:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
ffffffff80101617:	eb d1                	jmp    ffffffff801015ea <_Z18init_multi_processv+0x81>
    for (int i = 0; i < MAX_PROCESS; i++){
ffffffff80101619:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff8010161d:	eb 82                	jmp    ffffffff801015a1 <_Z18init_multi_processv+0x38>
           }
    }
    com_write_str("loading process 1");
ffffffff8010161f:	48 c7 c7 41 51 10 80 	mov    $0xffffffff80105141,%rdi
ffffffff80101626:	e8 9e 2d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_process(main_process_1);
ffffffff8010162b:	48 c7 c7 45 15 10 80 	mov    $0xffffffff80101545,%rdi
ffffffff80101632:	e8 27 00 00 00       	callq  ffffffff8010165e <_Z12init_processPFvvE>
    com_write_str("loading process 2");
ffffffff80101637:	48 c7 c7 53 51 10 80 	mov    $0xffffffff80105153,%rdi
ffffffff8010163e:	e8 86 2d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_process(main_process_2);
ffffffff80101643:	48 c7 c7 57 15 10 80 	mov    $0xffffffff80101557,%rdi
ffffffff8010164a:	e8 0f 00 00 00       	callq  ffffffff8010165e <_Z12init_processPFvvE>
    process_loaded = true;
ffffffff8010164f:	c6 05 f2 69 01 00 01 	movb   $0x1,0x169f2(%rip)        # ffffffff80118048 <process_loaded>


    asm volatile("jmp irq0_first_jump");
ffffffff80101656:	e9 50 32 00 00       	jmpq   ffffffff801048ab <irq0_first_jump>
}
ffffffff8010165b:	90                   	nop
ffffffff8010165c:	c9                   	leaveq 
ffffffff8010165d:	c3                   	retq   

ffffffff8010165e <_Z12init_processPFvvE>:

process* init_process(func entry_point){
ffffffff8010165e:	55                   	push   %rbp
ffffffff8010165f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101662:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80101666:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

    for (int i = 0; i < MAX_PROCESS; i++){
ffffffff8010166a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80101671:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)
ffffffff80101675:	0f 8f a1 02 00 00    	jg     ffffffff8010191c <_Z12init_processPFvvE+0x2be>

        if(process_array[i].current_process_state == process_state::PROCESS_AVAILABLE){
ffffffff8010167b:	48 8b 15 7e 59 01 00 	mov    0x1597e(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff80101682:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101685:	48 98                	cltq   
ffffffff80101687:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff8010168e:	48 01 d0             	add    %rdx,%rax
ffffffff80101691:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80101694:	85 c0                	test   %eax,%eax
ffffffff80101696:	0f 85 77 02 00 00    	jne    ffffffff80101913 <_Z12init_processPFvvE+0x2b5>
            process_array[i].current_process_state = process_state::PROCESS_WAITING;
ffffffff8010169c:	48 8b 15 5d 59 01 00 	mov    0x1595d(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801016a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801016a6:	48 98                	cltq   
ffffffff801016a8:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801016af:	48 01 d0             	add    %rdx,%rax
ffffffff801016b2:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
            process_array[i].entry_point = (uint64_t)entry_point;
ffffffff801016b9:	48 8b 15 40 59 01 00 	mov    0x15940(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801016c0:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801016c3:	48 98                	cltq   
ffffffff801016c5:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801016cc:	48 01 c2             	add    %rax,%rdx
ffffffff801016cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801016d3:	48 89 82 14 10 00 00 	mov    %rax,0x1014(%rdx)
            process_array[i].rsp = ((uint64_t)process_array[i].stack) + PROCESS_STACK_SIZE ;
ffffffff801016da:	48 8b 15 1f 59 01 00 	mov    0x1591f(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801016e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801016e4:	48 98                	cltq   
ffffffff801016e6:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801016ed:	48 01 d0             	add    %rdx,%rax
ffffffff801016f0:	48 83 c0 14          	add    $0x14,%rax
ffffffff801016f4:	48 89 c1             	mov    %rax,%rcx
ffffffff801016f7:	48 8b 15 02 59 01 00 	mov    0x15902(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801016fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101701:	48 98                	cltq   
ffffffff80101703:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff8010170a:	48 01 d0             	add    %rdx,%rax
ffffffff8010170d:	48 8d 91 00 10 00 00 	lea    0x1000(%rcx),%rdx
ffffffff80101714:	48 89 10             	mov    %rdx,(%rax)

            uint64_t* rsp =(uint64_t*) process_array[i].rsp;
ffffffff80101717:	48 8b 15 e2 58 01 00 	mov    0x158e2(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff8010171e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101721:	48 98                	cltq   
ffffffff80101723:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff8010172a:	48 01 d0             	add    %rdx,%rax
ffffffff8010172d:	48 8b 00             	mov    (%rax),%rax
ffffffff80101730:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            rsp--;
ffffffff80101734:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)
            uint64_t crsp = (uint64_t)rsp;
ffffffff80101739:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010173d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
             *rsp-- = SLTR_KERNEL_DATA;  // SS
ffffffff80101741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101745:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101749:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010174d:	48 c7 00 10 00 00 00 	movq   $0x10,(%rax)
             *rsp-- = crsp;       // RSP
ffffffff80101754:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80101758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010175c:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
ffffffff80101760:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80101764:	48 89 10             	mov    %rdx,(%rax)
             *rsp-- = 0x286;              // RFLAGS
ffffffff80101767:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010176b:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff8010176f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101773:	48 c7 00 86 02 00 00 	movq   $0x286,(%rax)
             *rsp-- = SLTR_KERNEL_CODE;  // CS
ffffffff8010177a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010177e:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101782:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101786:	48 c7 00 08 00 00 00 	movq   $0x8,(%rax)
             *rsp-- = (uint64_t)entry_point;        // RIP
ffffffff8010178d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80101791:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101795:	48 8d 48 f8          	lea    -0x8(%rax),%rcx
ffffffff80101799:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff8010179d:	48 89 10             	mov    %rdx,(%rax)
            *rsp-- = 0;
ffffffff801017a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801017a4:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff801017a8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801017ac:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff801017b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801017b7:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff801017bb:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801017bf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff801017c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801017ca:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff801017ce:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801017d2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff801017d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801017dd:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff801017e1:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801017e5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff801017ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801017f0:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff801017f4:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801017f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff801017ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101803:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101807:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010180b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101812:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101816:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff8010181a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010181e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101825:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101829:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff8010182d:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101831:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101838:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010183c:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101840:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101844:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff8010184b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010184f:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101853:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101857:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff8010185e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101862:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101866:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010186a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101875:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff80101879:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010187d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101888:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff8010188c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101890:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp-- = 0;
ffffffff80101897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010189b:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
ffffffff8010189f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff801018a3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            *rsp = 0;
ffffffff801018aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801018ae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            process_array[i].rsp = (uint64_t)rsp;
ffffffff801018b5:	48 8b 15 44 57 01 00 	mov    0x15744(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801018bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801018bf:	48 98                	cltq   
ffffffff801018c1:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801018c8:	48 01 c2             	add    %rax,%rdx
ffffffff801018cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801018cf:	48 89 02             	mov    %rax,(%rdx)
            if(current_process == 0x0){
ffffffff801018d2:	48 8b 05 67 67 01 00 	mov    0x16767(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff801018d9:	48 85 c0             	test   %rax,%rax
ffffffff801018dc:	75 1d                	jne    ffffffff801018fb <_Z12init_processPFvvE+0x29d>
                current_process = &process_array[i];
ffffffff801018de:	48 8b 15 1b 57 01 00 	mov    0x1571b(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801018e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801018e8:	48 98                	cltq   
ffffffff801018ea:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801018f1:	48 01 d0             	add    %rdx,%rax
ffffffff801018f4:	48 89 05 45 67 01 00 	mov    %rax,0x16745(%rip)        # ffffffff80118040 <current_process>
            }
            return &process_array[i];
ffffffff801018fb:	48 8b 15 fe 56 01 00 	mov    0x156fe(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff80101902:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101905:	48 98                	cltq   
ffffffff80101907:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff8010190e:	48 01 d0             	add    %rdx,%rax
ffffffff80101911:	eb 1a                	jmp    ffffffff8010192d <_Z12init_processPFvvE+0x2cf>
    for (int i = 0; i < MAX_PROCESS; i++){
ffffffff80101913:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80101917:	e9 55 fd ff ff       	jmpq   ffffffff80101671 <_Z12init_processPFvvE+0x13>
        }
    }
    com_write_str("no free process found");
ffffffff8010191c:	48 c7 c7 65 51 10 80 	mov    $0xffffffff80105165,%rdi
ffffffff80101923:	e8 a1 2a 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    return 0x0;
ffffffff80101928:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8010192d:	c9                   	leaveq 
ffffffff8010192e:	c3                   	retq   

ffffffff8010192f <_Z14switch_contextP19InterruptStackFrameP7process>:



void switch_context(InterruptStackFrame* current_Isf, process* next){
ffffffff8010192f:	55                   	push   %rbp
ffffffff80101930:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101933:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80101937:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8010193b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(next == 0){
ffffffff8010193f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80101944:	74 75                	je     ffffffff801019bb <_Z14switch_contextP19InterruptStackFrameP7process+0x8c>
        return ; // early return
     }
     if(current_process == 0x0){
ffffffff80101946:	48 8b 05 f3 66 01 00 	mov    0x166f3(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff8010194d:	48 85 c0             	test   %rax,%rax
ffffffff80101950:	75 23                	jne    ffffffff80101975 <_Z14switch_contextP19InterruptStackFrameP7process+0x46>
         current_Isf = (InterruptStackFrame*)next->rsp;
ffffffff80101952:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101956:	48 8b 00             	mov    (%rax),%rax
ffffffff80101959:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        next->current_process_state = process_state::PROCESS_RUNNING;
ffffffff8010195d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101961:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
        current_process = next;
ffffffff80101968:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010196c:	48 89 05 cd 66 01 00 	mov    %rax,0x166cd(%rip)        # ffffffff80118040 <current_process>
ffffffff80101973:	eb 47                	jmp    ffffffff801019bc <_Z14switch_contextP19InterruptStackFrameP7process+0x8d>
     }else{
        current_process->current_process_state = PROCESS_WAITING;
ffffffff80101975:	48 8b 05 c4 66 01 00 	mov    0x166c4(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff8010197c:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
        current_process->rsp = current_Isf->rsp;
ffffffff80101983:	48 8b 05 b6 66 01 00 	mov    0x166b6(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff8010198a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8010198e:	48 8b 92 98 00 00 00 	mov    0x98(%rdx),%rdx
ffffffff80101995:	48 89 10             	mov    %rdx,(%rax)

        current_Isf = (InterruptStackFrame*)next->rsp;
ffffffff80101998:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010199c:	48 8b 00             	mov    (%rax),%rax
ffffffff8010199f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        next->current_process_state = process_state::PROCESS_RUNNING;
ffffffff801019a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801019a7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
        current_process = next;
ffffffff801019ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801019b2:	48 89 05 87 66 01 00 	mov    %rax,0x16687(%rip)        # ffffffff80118040 <current_process>
ffffffff801019b9:	eb 01                	jmp    ffffffff801019bc <_Z14switch_contextP19InterruptStackFrameP7process+0x8d>
        return ; // early return
ffffffff801019bb:	90                   	nop
     }
}
ffffffff801019bc:	c9                   	leaveq 
ffffffff801019bd:	c3                   	retq   

ffffffff801019be <_Z16get_next_processm>:

process* get_next_process(uint64_t current_id){
ffffffff801019be:	55                   	push   %rbp
ffffffff801019bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff801019c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801019c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    for(uint64_t i = current_id; i < MAX_PROCESS; i ++){
ffffffff801019ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801019ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff801019d2:	48 83 7d f8 7f       	cmpq   $0x7f,-0x8(%rbp)
ffffffff801019d7:	77 58                	ja     ffffffff80101a31 <_Z16get_next_processm+0x73>
        if(process_array[i].current_process_state == process_state::PROCESS_AVAILABLE){
ffffffff801019d9:	48 8b 15 20 56 01 00 	mov    0x15620(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801019e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801019e4:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff801019eb:	48 01 d0             	add    %rdx,%rax
ffffffff801019ee:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff801019f1:	85 c0                	test   %eax,%eax
ffffffff801019f3:	74 3b                	je     ffffffff80101a30 <_Z16get_next_processm+0x72>
            break;
        }else if(process_array[i].current_process_state == process_state::PROCESS_WAITING){
ffffffff801019f5:	48 8b 15 04 56 01 00 	mov    0x15604(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff801019fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101a00:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff80101a07:	48 01 d0             	add    %rdx,%rax
ffffffff80101a0a:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80101a0d:	83 f8 02             	cmp    $0x2,%eax
ffffffff80101a10:	75 17                	jne    ffffffff80101a29 <_Z16get_next_processm+0x6b>
            return &process_array[i];
ffffffff80101a12:	48 8b 15 e7 55 01 00 	mov    0x155e7(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff80101a19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101a1d:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff80101a24:	48 01 d0             	add    %rdx,%rax
ffffffff80101a27:	eb 66                	jmp    ffffffff80101a8f <_Z16get_next_processm+0xd1>
    for(uint64_t i = current_id; i < MAX_PROCESS; i ++){
ffffffff80101a29:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80101a2e:	eb a2                	jmp    ffffffff801019d2 <_Z16get_next_processm+0x14>
            break;
ffffffff80101a30:	90                   	nop
        }
    }for(uint64_t i = 0; i < current_id; i ++){ // we do a loop
ffffffff80101a31:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80101a38:	00 
ffffffff80101a39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101a3d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80101a41:	73 3b                	jae    ffffffff80101a7e <_Z16get_next_processm+0xc0>
        if(process_array[i].current_process_state == process_state::PROCESS_WAITING){
ffffffff80101a43:	48 8b 15 b6 55 01 00 	mov    0x155b6(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff80101a4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101a4e:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff80101a55:	48 01 d0             	add    %rdx,%rax
ffffffff80101a58:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80101a5b:	83 f8 02             	cmp    $0x2,%eax
ffffffff80101a5e:	75 17                	jne    ffffffff80101a77 <_Z16get_next_processm+0xb9>
            return &process_array[i];
ffffffff80101a60:	48 8b 15 99 55 01 00 	mov    0x15599(%rip),%rdx        # ffffffff80117000 <process_array>
ffffffff80101a67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101a6b:	48 69 c0 1c 10 00 00 	imul   $0x101c,%rax,%rax
ffffffff80101a72:	48 01 d0             	add    %rdx,%rax
ffffffff80101a75:	eb 18                	jmp    ffffffff80101a8f <_Z16get_next_processm+0xd1>
    }for(uint64_t i = 0; i < current_id; i ++){ // we do a loop
ffffffff80101a77:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80101a7c:	eb bb                	jmp    ffffffff80101a39 <_Z16get_next_processm+0x7b>
        }
    }
    com_write_str("no process found");
ffffffff80101a7e:	48 c7 c7 7b 51 10 80 	mov    $0xffffffff8010517b,%rdi
ffffffff80101a85:	e8 3f 29 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    return 0x0;
ffffffff80101a8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80101a8f:	c9                   	leaveq 
ffffffff80101a90:	c3                   	retq   

ffffffff80101a91 <_Z21irq_0_process_handlerP19InterruptStackFrame>:

void irq_0_process_handler(InterruptStackFrame* isf){
ffffffff80101a91:	55                   	push   %rbp
ffffffff80101a92:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101a95:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80101a99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(process_locked){
ffffffff80101a9d:	0f b6 05 5c 55 00 00 	movzbl 0x555c(%rip),%eax        # ffffffff80107000 <process_locked>
ffffffff80101aa4:	84 c0                	test   %al,%al
ffffffff80101aa6:	75 69                	jne    ffffffff80101b11 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x80>
        return;
    }
    if(current_process == 0x0){
ffffffff80101aa8:	48 8b 05 91 65 01 00 	mov    0x16591(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101aaf:	48 85 c0             	test   %rax,%rax
ffffffff80101ab2:	75 2a                	jne    ffffffff80101ade <_Z21irq_0_process_handlerP19InterruptStackFrame+0x4d>
        process* i = get_next_process(0);
ffffffff80101ab4:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80101ab9:	e8 00 ff ff ff       	callq  ffffffff801019be <_Z16get_next_processm>
ffffffff80101abe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(i == 0){
ffffffff80101ac2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80101ac7:	74 4b                	je     ffffffff80101b14 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x83>
            return;
        }
       switch_context(isf, i);
ffffffff80101ac9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80101acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101ad1:	48 89 d6             	mov    %rdx,%rsi
ffffffff80101ad4:	48 89 c7             	mov    %rax,%rdi
ffffffff80101ad7:	e8 53 fe ff ff       	callq  ffffffff8010192f <_Z14switch_contextP19InterruptStackFrameP7process>
ffffffff80101adc:	eb 3a                	jmp    ffffffff80101b18 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x87>
    }else{
        process* i = get_next_process(current_process->pid);
ffffffff80101ade:	48 8b 05 5b 65 01 00 	mov    0x1655b(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101ae5:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff80101ae9:	48 89 c7             	mov    %rax,%rdi
ffffffff80101aec:	e8 cd fe ff ff       	callq  ffffffff801019be <_Z16get_next_processm>
ffffffff80101af1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(i == 0){
ffffffff80101af5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80101afa:	74 1b                	je     ffffffff80101b17 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x86>
            return;
        }
       switch_context(isf, i);
ffffffff80101afc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80101b00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101b04:	48 89 d6             	mov    %rdx,%rsi
ffffffff80101b07:	48 89 c7             	mov    %rax,%rdi
ffffffff80101b0a:	e8 20 fe ff ff       	callq  ffffffff8010192f <_Z14switch_contextP19InterruptStackFrameP7process>
ffffffff80101b0f:	eb 07                	jmp    ffffffff80101b18 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x87>
        return;
ffffffff80101b11:	90                   	nop
ffffffff80101b12:	eb 04                	jmp    ffffffff80101b18 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x87>
            return;
ffffffff80101b14:	90                   	nop
ffffffff80101b15:	eb 01                	jmp    ffffffff80101b18 <_Z21irq_0_process_handlerP19InterruptStackFrame+0x87>
            return;
ffffffff80101b17:	90                   	nop
    }
}
ffffffff80101b18:	c9                   	leaveq 
ffffffff80101b19:	c3                   	retq   

ffffffff80101b1a <get_current_esp>:
char temp_esp[8192];
extern "C" uint64_t get_current_esp(){
ffffffff80101b1a:	55                   	push   %rbp
ffffffff80101b1b:	48 89 e5             	mov    %rsp,%rbp

    if(current_process == 0x0){
ffffffff80101b1e:	48 8b 05 1b 65 01 00 	mov    0x1651b(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101b25:	48 85 c0             	test   %rax,%rax
ffffffff80101b28:	75 0f                	jne    ffffffff80101b39 <get_current_esp+0x1f>
        return (uint64_t)temp_esp + 4096;
ffffffff80101b2a:	48 c7 c0 60 80 11 80 	mov    $0xffffffff80118060,%rax
ffffffff80101b31:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80101b37:	eb 0a                	jmp    ffffffff80101b43 <get_current_esp+0x29>
    }else{
        return (uint64_t)current_process->rsp;
ffffffff80101b39:	48 8b 05 00 65 01 00 	mov    0x16500(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101b40:	48 8b 00             	mov    (%rax),%rax
    }
}extern "C" uint64_t get_next_esp(){
ffffffff80101b43:	5d                   	pop    %rbp
ffffffff80101b44:	c3                   	retq   

ffffffff80101b45 <get_next_esp>:
ffffffff80101b45:	55                   	push   %rbp
ffffffff80101b46:	48 89 e5             	mov    %rsp,%rbp
    if(current_process == 0){
ffffffff80101b49:	48 8b 05 f0 64 01 00 	mov    0x164f0(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101b50:	48 85 c0             	test   %rax,%rax
ffffffff80101b53:	75 0f                	jne    ffffffff80101b64 <get_next_esp+0x1f>
        return
              (uint64_t)  get_next_process(0)->rsp;
ffffffff80101b55:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80101b5a:	e8 5f fe ff ff       	callq  ffffffff801019be <_Z16get_next_processm>
ffffffff80101b5f:	48 8b 00             	mov    (%rax),%rax
ffffffff80101b62:	eb 16                	jmp    ffffffff80101b7a <get_next_esp+0x35>
    }else{
        return
               (uint64_t) get_next_process(current_process->pid)->rsp;
ffffffff80101b64:	48 8b 05 d5 64 01 00 	mov    0x164d5(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101b6b:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff80101b6f:	48 89 c7             	mov    %rax,%rdi
ffffffff80101b72:	e8 47 fe ff ff       	callq  ffffffff801019be <_Z16get_next_processm>
ffffffff80101b77:	48 8b 00             	mov    (%rax),%rax

    }
}
ffffffff80101b7a:	5d                   	pop    %rbp
ffffffff80101b7b:	c3                   	retq   

ffffffff80101b7c <task_update_switch>:
extern "C" void task_update_switch(process* next){
ffffffff80101b7c:	55                   	push   %rbp
ffffffff80101b7d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101b80:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80101b84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    tss_set_rsp0(next->rsp);
ffffffff80101b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101b8c:	48 8b 00             	mov    (%rax),%rax
ffffffff80101b8f:	48 89 c7             	mov    %rax,%rdi
ffffffff80101b92:	e8 f0 f7 ff ff       	callq  ffffffff80101387 <_Z12tss_set_rsp0m>
    current_process->current_process_state = process_state::PROCESS_WAITING;
ffffffff80101b97:	48 8b 05 a2 64 01 00 	mov    0x164a2(%rip),%rax        # ffffffff80118040 <current_process>
ffffffff80101b9e:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
    current_process = next;
ffffffff80101ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101ba9:	48 89 05 90 64 01 00 	mov    %rax,0x16490(%rip)        # ffffffff80118040 <current_process>
    next->current_process_state = process_state::PROCESS_RUNNING;
ffffffff80101bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101bb4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
}
ffffffff80101bbb:	90                   	nop
ffffffff80101bbc:	c9                   	leaveq 
ffffffff80101bbd:	c3                   	retq   

ffffffff80101bbe <_Z41__static_initialization_and_destruction_0ii>:
ffffffff80101bbe:	55                   	push   %rbp
ffffffff80101bbf:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101bc2:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80101bc6:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff80101bc9:	89 75 f8             	mov    %esi,-0x8(%rbp)
ffffffff80101bcc:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff80101bd0:	75 15                	jne    ffffffff80101be7 <_Z41__static_initialization_and_destruction_0ii+0x29>
ffffffff80101bd2:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
ffffffff80101bd9:	75 0c                	jne    ffffffff80101be7 <_Z41__static_initialization_and_destruction_0ii+0x29>
process kernel_process;
ffffffff80101bdb:	48 c7 c7 20 70 11 80 	mov    $0xffffffff80117020,%rdi
ffffffff80101be2:	e8 65 2f 00 00       	callq  ffffffff80104b4c <_ZN7processC1Ev>
}
ffffffff80101be7:	90                   	nop
ffffffff80101be8:	c9                   	leaveq 
ffffffff80101be9:	c3                   	retq   

ffffffff80101bea <_GLOBAL__sub_I_process_array>:
ffffffff80101bea:	55                   	push   %rbp
ffffffff80101beb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101bee:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff80101bf3:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80101bf8:	e8 c1 ff ff ff       	callq  ffffffff80101bbe <_Z41__static_initialization_and_destruction_0ii>
ffffffff80101bfd:	5d                   	pop    %rbp
ffffffff80101bfe:	c3                   	retq   

ffffffff80101bff <_ZL15liballoc_memsetPvil>:


// ***********   HELPER FUNCTIONS  *******************************

static void *liballoc_memset(void* s, int c, size_t n)
{
ffffffff80101bff:	55                   	push   %rbp
ffffffff80101c00:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101c03:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80101c07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80101c0b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff80101c0e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	unsigned int i;
	for ( i = 0; i < n ; i++)
ffffffff80101c12:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80101c19:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101c1c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80101c20:	7e 15                	jle    ffffffff80101c37 <_ZL15liballoc_memsetPvil+0x38>
		((char*)s)[i] = c;
ffffffff80101c22:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80101c25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101c29:	48 01 d0             	add    %rdx,%rax
ffffffff80101c2c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff80101c2f:	88 10                	mov    %dl,(%rax)
	for ( i = 0; i < n ; i++)
ffffffff80101c31:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80101c35:	eb e2                	jmp    ffffffff80101c19 <_ZL15liballoc_memsetPvil+0x1a>
	
	return s;
ffffffff80101c37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff80101c3b:	c9                   	leaveq 
ffffffff80101c3c:	c3                   	retq   

ffffffff80101c3d <_ZL15liballoc_memcpyPvPKvl>:
static void* liballoc_memcpy(void* s1, const void* s2, size_t n)
{
ffffffff80101c3d:	55                   	push   %rbp
ffffffff80101c3e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101c41:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80101c45:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80101c49:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80101c4d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  char *cdest;
  char *csrc;
  unsigned int *ldest = (unsigned int*)s1;
ffffffff80101c51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80101c55:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  unsigned int *lsrc  = (unsigned int*)s2;
ffffffff80101c59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80101c5d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

  while ( n >= sizeof(unsigned int) )
ffffffff80101c61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80101c65:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80101c69:	76 2a                	jbe    ffffffff80101c95 <_ZL15liballoc_memcpyPvPKvl+0x58>
  {
      *ldest++ = *lsrc++;
ffffffff80101c6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101c6f:	48 8d 50 04          	lea    0x4(%rax),%rdx
ffffffff80101c73:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80101c77:	8b 10                	mov    (%rax),%edx
ffffffff80101c79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101c7d:	48 8d 48 04          	lea    0x4(%rax),%rcx
ffffffff80101c81:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80101c85:	89 10                	mov    %edx,(%rax)
	  n -= sizeof(unsigned int);
ffffffff80101c87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80101c8b:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80101c8f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  while ( n >= sizeof(unsigned int) )
ffffffff80101c93:	eb cc                	jmp    ffffffff80101c61 <_ZL15liballoc_memcpyPvPKvl+0x24>
  }

  cdest = (char*)ldest;
ffffffff80101c95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80101c99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  csrc  = (char*)lsrc;
ffffffff80101c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101ca1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  
  while ( n > 0 )
ffffffff80101ca5:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80101caa:	7e 24                	jle    ffffffff80101cd0 <_ZL15liballoc_memcpyPvPKvl+0x93>
  {
      *cdest++ = *csrc++;
ffffffff80101cac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101cb0:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80101cb4:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80101cb8:	0f b6 10             	movzbl (%rax),%edx
ffffffff80101cbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101cbf:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80101cc3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80101cc7:	88 10                	mov    %dl,(%rax)
	  n -= 1;
ffffffff80101cc9:	48 83 6d c8 01       	subq   $0x1,-0x38(%rbp)
  while ( n > 0 )
ffffffff80101cce:	eb d5                	jmp    ffffffff80101ca5 <_ZL15liballoc_memcpyPvPKvl+0x68>
  }
  
  return s1;
ffffffff80101cd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
ffffffff80101cd4:	c9                   	leaveq 
ffffffff80101cd5:	c3                   	retq   

ffffffff80101cd6 <_ZL17allocate_new_pagej>:


// ***************************************************************

static struct liballoc_major *allocate_new_page( unsigned int size )
{
ffffffff80101cd6:	55                   	push   %rbp
ffffffff80101cd7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101cda:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80101cde:	89 7d ec             	mov    %edi,-0x14(%rbp)
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
ffffffff80101ce1:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80101ce4:	83 c0 28             	add    $0x28,%eax
ffffffff80101ce7:	89 45 fc             	mov    %eax,-0x4(%rbp)
		st += sizeof(struct liballoc_minor);
ffffffff80101cea:	83 45 fc 28          	addl   $0x28,-0x4(%rbp)

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80101cee:	8b 0d 10 53 00 00    	mov    0x5310(%rip),%ecx        # ffffffff80107004 <_ZL10l_pageSize>
ffffffff80101cf4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101cf7:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80101cfc:	f7 f1                	div    %ecx
ffffffff80101cfe:	89 d0                	mov    %edx,%eax
ffffffff80101d00:	85 c0                	test   %eax,%eax
ffffffff80101d02:	75 15                	jne    ffffffff80101d19 <_ZL17allocate_new_pagej+0x43>
			st  = st / (l_pageSize);
ffffffff80101d04:	8b 35 fa 52 00 00    	mov    0x52fa(%rip),%esi        # ffffffff80107004 <_ZL10l_pageSize>
ffffffff80101d0a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101d0d:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80101d12:	f7 f6                	div    %esi
ffffffff80101d14:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80101d17:	eb 16                	jmp    ffffffff80101d2f <_ZL17allocate_new_pagej+0x59>
		else
			st  = st / (l_pageSize) + 1;
ffffffff80101d19:	8b 0d e5 52 00 00    	mov    0x52e5(%rip),%ecx        # ffffffff80107004 <_ZL10l_pageSize>
ffffffff80101d1f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101d22:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80101d27:	f7 f1                	div    %ecx
ffffffff80101d29:	83 c0 01             	add    $0x1,%eax
ffffffff80101d2c:	89 45 fc             	mov    %eax,-0x4(%rbp)
							// No, add the buffer. 

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
ffffffff80101d2f:	8b 05 d3 52 00 00    	mov    0x52d3(%rip),%eax        # ffffffff80107008 <_ZL11l_pageCount>
ffffffff80101d35:	39 45 fc             	cmp    %eax,-0x4(%rbp)
ffffffff80101d38:	73 09                	jae    ffffffff80101d43 <_ZL17allocate_new_pagej+0x6d>
ffffffff80101d3a:	8b 05 c8 52 00 00    	mov    0x52c8(%rip),%eax        # ffffffff80107008 <_ZL11l_pageCount>
ffffffff80101d40:	89 45 fc             	mov    %eax,-0x4(%rbp)
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80101d43:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80101d46:	89 c7                	mov    %eax,%edi
ffffffff80101d48:	e8 4a 2e 00 00       	callq  ffffffff80104b97 <liballoc_alloc>
ffffffff80101d4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( maj == NULL ) 
ffffffff80101d51:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80101d56:	75 19                	jne    ffffffff80101d71 <_ZL17allocate_new_pagej+0x9b>
		{
			l_warningCount += 1;
ffffffff80101d58:	48 8b 05 c9 a2 01 00 	mov    0x1a2c9(%rip),%rax        # ffffffff8011c028 <_ZL14l_warningCount>
ffffffff80101d5f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80101d63:	48 89 05 be a2 01 00 	mov    %rax,0x1a2be(%rip)        # ffffffff8011c028 <_ZL14l_warningCount>
			#if defined DEBUG || defined INFO
			printf( "liballoc: WARNING: liballoc_alloc( %i ) return NULL\n", st );
			FLUSH();
			#endif
			return NULL;	// uh oh, we ran out of memory.
ffffffff80101d6a:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80101d6f:	eb 69                	jmp    ffffffff80101dda <_ZL17allocate_new_pagej+0x104>
		}
		
		maj->prev 	= NULL;
ffffffff80101d71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101d75:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80101d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101d80:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80101d87:	00 
		maj->pages 	= st;
ffffffff80101d88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101d8c:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80101d8f:	89 50 10             	mov    %edx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80101d92:	8b 05 6c 52 00 00    	mov    0x526c(%rip),%eax        # ffffffff80107004 <_ZL10l_pageSize>
ffffffff80101d98:	0f af 45 fc          	imul   -0x4(%rbp),%eax
ffffffff80101d9c:	89 c2                	mov    %eax,%edx
ffffffff80101d9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101da2:	89 50 14             	mov    %edx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80101da5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101da9:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80101db0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101db4:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80101dbb:	00 

		l_allocated += maj->size;
ffffffff80101dbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101dc0:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80101dc3:	89 c2                	mov    %eax,%edx
ffffffff80101dc5:	48 8b 05 4c a2 01 00 	mov    0x1a24c(%rip),%rax        # ffffffff8011c018 <_ZL11l_allocated>
ffffffff80101dcc:	48 01 d0             	add    %rdx,%rax
ffffffff80101dcf:	48 89 05 42 a2 01 00 	mov    %rax,0x1a242(%rip)        # ffffffff8011c018 <_ZL11l_allocated>
		printf( "liballoc: Total memory usage = %i KB\n",  (int)((l_allocated / (1024))) );
		FLUSH();
		#endif
	
		
      return maj;
ffffffff80101dd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff80101dda:	c9                   	leaveq 
ffffffff80101ddb:	c3                   	retq   

ffffffff80101ddc <malloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80101ddc:	55                   	push   %rbp
ffffffff80101ddd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101de0:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80101de4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	int startedBet = 0;
ffffffff80101de8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	unsigned long long bestSize = 0;
ffffffff80101def:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80101df6:	00 
	void *p = NULL;
ffffffff80101df7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80101dfe:	00 
	uintptr_t diff;
	struct liballoc_major *maj;
	struct liballoc_minor *min;
	struct liballoc_minor *new_min;
	unsigned long size = req_size;
ffffffff80101dff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80101e03:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

	// For alignment, we adjust size so there's enough space to align.
	if ( ALIGNMENT > 1 )
	{
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80101e07:	48 83 45 b0 20       	addq   $0x20,-0x50(%rbp)
	}
				// So, ideally, we really want an alignment of 0 or 1 in order
				// to save space.
	
	liballoc_lock();
ffffffff80101e0c:	e8 70 2d 00 00       	callq  ffffffff80104b81 <liballoc_lock>

	if ( size == 0 )
ffffffff80101e11:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80101e16:	75 26                	jne    ffffffff80101e3e <malloc+0x62>
	{
		l_warningCount += 1;
ffffffff80101e18:	48 8b 05 09 a2 01 00 	mov    0x1a209(%rip),%rax        # ffffffff8011c028 <_ZL14l_warningCount>
ffffffff80101e1f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80101e23:	48 89 05 fe a1 01 00 	mov    %rax,0x1a1fe(%rip)        # ffffffff8011c028 <_ZL14l_warningCount>
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80101e2a:	e8 5d 2d 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
		return PREFIX(malloc)(1);
ffffffff80101e2f:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80101e34:	e8 a3 ff ff ff       	callq  ffffffff80101ddc <malloc>
ffffffff80101e39:	e9 0a 07 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>
	}
	

	if ( l_memRoot == NULL )
ffffffff80101e3e:	48 8b 05 c3 a1 01 00 	mov    0x1a1c3(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff80101e45:	48 85 c0             	test   %rax,%rax
ffffffff80101e48:	75 2d                	jne    ffffffff80101e77 <malloc+0x9b>
		atexit( liballoc_dump );
		FLUSH();
		#endif
			
		// This is the first time we are being used.
		l_memRoot = allocate_new_page( size );
ffffffff80101e4a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80101e4e:	89 c7                	mov    %eax,%edi
ffffffff80101e50:	e8 81 fe ff ff       	callq  ffffffff80101cd6 <_ZL17allocate_new_pagej>
ffffffff80101e55:	48 89 05 ac a1 01 00 	mov    %rax,0x1a1ac(%rip)        # ffffffff8011c008 <_ZL9l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80101e5c:	48 8b 05 a5 a1 01 00 	mov    0x1a1a5(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff80101e63:	48 85 c0             	test   %rax,%rax
ffffffff80101e66:	75 0f                	jne    ffffffff80101e77 <malloc+0x9b>
		{
		  liballoc_unlock();
ffffffff80101e68:	e8 1f 2d 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
		  #ifdef DEBUG
		  printf( "liballoc: initial l_memRoot initialization failed\n", p); 
		  FLUSH();
		  #endif
		  return NULL;
ffffffff80101e6d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80101e72:	e9 d1 06 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>
	FLUSH();
	#endif

	// Now we need to bounce through every major and find enough space....

	maj = l_memRoot;
ffffffff80101e77:	48 8b 05 8a a1 01 00 	mov    0x1a18a(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff80101e7e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	startedBet = 0;
ffffffff80101e82:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80101e89:	48 8b 05 80 a1 01 00 	mov    0x1a180(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff80101e90:	48 85 c0             	test   %rax,%rax
ffffffff80101e93:	74 3e                	je     ffffffff80101ed3 <malloc+0xf7>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80101e95:	48 8b 05 74 a1 01 00 	mov    0x1a174(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff80101e9c:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80101e9f:	48 8b 05 6a a1 01 00 	mov    0x1a16a(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff80101ea6:	8b 48 18             	mov    0x18(%rax),%ecx
ffffffff80101ea9:	89 d0                	mov    %edx,%eax
ffffffff80101eab:	29 c8                	sub    %ecx,%eax
ffffffff80101ead:	89 c0                	mov    %eax,%eax
ffffffff80101eaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80101eb3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80101eb7:	48 83 c0 28          	add    $0x28,%rax
ffffffff80101ebb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80101ebf:	76 12                	jbe    ffffffff80101ed3 <malloc+0xf7>
		{
			maj = l_bestBet;
ffffffff80101ec1:	48 8b 05 48 a1 01 00 	mov    0x1a148(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff80101ec8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			startedBet = 1;
ffffffff80101ecc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
		}
	}
	
	while ( maj != NULL )
ffffffff80101ed3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80101ed8:	0f 84 60 06 00 00    	je     ffffffff8010253e <malloc+0x762>
	{
		diff  = maj->size - maj->usage;	
ffffffff80101ede:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101ee2:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80101ee5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101ee9:	8b 48 18             	mov    0x18(%rax),%ecx
ffffffff80101eec:	89 d0                	mov    %edx,%eax
ffffffff80101eee:	29 c8                	sub    %ecx,%eax
ffffffff80101ef0:	89 c0                	mov    %eax,%eax
ffffffff80101ef2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
										// free memory in the block

		if ( bestSize < diff )
ffffffff80101ef6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80101efa:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80101efe:	73 13                	jae    ffffffff80101f13 <malloc+0x137>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80101f00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f04:	48 89 05 05 a1 01 00 	mov    %rax,0x1a105(%rip)        # ffffffff8011c010 <_ZL9l_bestBet>
			bestSize = diff;
ffffffff80101f0b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80101f0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80101f13:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80101f17:	48 83 c0 28          	add    $0x28,%rax
ffffffff80101f1b:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80101f1f:	73 7a                	jae    ffffffff80101f9b <malloc+0x1bf>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80101f21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f25:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80101f29:	48 85 c0             	test   %rax,%rax
ffffffff80101f2c:	74 11                	je     ffffffff80101f3f <malloc+0x163>
			{
				maj = maj->next;		// Hop to that one.
ffffffff80101f2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f32:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80101f36:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				continue;
ffffffff80101f3a:	e9 f6 05 00 00       	jmpq   ffffffff80102535 <malloc+0x759>
			}

			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80101f3f:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff80101f43:	75 17                	jne    ffffffff80101f5c <malloc+0x180>
			{							// let's start all over again.
				maj = l_memRoot;
ffffffff80101f45:	48 8b 05 bc a0 01 00 	mov    0x1a0bc(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff80101f4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff80101f50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff80101f57:	e9 d9 05 00 00       	jmpq   ffffffff80102535 <malloc+0x759>
			}

			// Create a new major block next to this one and...
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80101f5c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80101f60:	89 c7                	mov    %eax,%edi
ffffffff80101f62:	e8 6f fd ff ff       	callq  ffffffff80101cd6 <_ZL17allocate_new_pagej>
ffffffff80101f67:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80101f6b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80101f6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f73:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80101f77:	48 85 c0             	test   %rax,%rax
ffffffff80101f7a:	0f 84 ba 05 00 00    	je     ffffffff8010253a <malloc+0x75e>
			maj->next->prev = maj;
ffffffff80101f80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f84:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80101f88:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80101f8c:	48 89 10             	mov    %rdx,(%rax)
			maj = maj->next;
ffffffff80101f8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f93:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80101f97:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80101f9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101f9f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80101fa3:	48 85 c0             	test   %rax,%rax
ffffffff80101fa6:	0f 85 04 01 00 00    	jne    ffffffff801020b0 <malloc+0x2d4>
		{
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80101fac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101fb0:	48 83 c0 28          	add    $0x28,%rax
ffffffff80101fb4:	48 89 c2             	mov    %rax,%rdx
ffffffff80101fb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101fbb:	48 89 50 20          	mov    %rdx,0x20(%rax)

			
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80101fbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101fc3:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80101fc7:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 		= NULL;
ffffffff80101fce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101fd2:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80101fd6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->next 		= NULL;
ffffffff80101fdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101fe1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80101fe5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80101fec:	00 
			maj->first->block 		= maj;
ffffffff80101fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80101ff1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80101ff5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80101ff9:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 		= size;
ffffffff80101ffd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102001:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102005:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102009:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff8010200c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102010:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102014:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80102018:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 	+= size + sizeof( struct liballoc_minor );
ffffffff8010201b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010201f:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff80102022:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102026:	01 d0                	add    %edx,%eax
ffffffff80102028:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff8010202b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010202f:	89 50 18             	mov    %edx,0x18(%rax)


			l_inuse += size;
ffffffff80102032:	48 8b 15 e7 9f 01 00 	mov    0x19fe7(%rip),%rdx        # ffffffff8011c020 <_ZL7l_inuse>
ffffffff80102039:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010203d:	48 01 d0             	add    %rdx,%rax
ffffffff80102040:	48 89 05 d9 9f 01 00 	mov    %rax,0x19fd9(%rip)        # ffffffff8011c020 <_ZL7l_inuse>
			
			
			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff80102047:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010204b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010204f:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102053:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

			ALIGN( p );
ffffffff80102057:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010205b:	48 83 c0 10          	add    $0x10,%rax
ffffffff8010205f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102067:	83 e0 0f             	and    $0xf,%eax
ffffffff8010206a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8010206e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80102073:	74 1c                	je     ffffffff80102091 <malloc+0x2b5>
ffffffff80102075:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8010207a:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
ffffffff8010207e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80102082:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102086:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010208a:	48 01 d0             	add    %rdx,%rax
ffffffff8010208d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102091:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102095:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102098:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010209c:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801020a0:	88 10                	mov    %dl,(%rax)
			
			#ifdef DEBUG
			printf( "CASE 2: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff801020a2:	e8 e5 2a 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
			return p;
ffffffff801020a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801020ab:	e9 98 04 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>
#endif
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
ffffffff801020b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801020b4:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801020b8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		diff -= (uintptr_t)maj;
ffffffff801020bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801020c0:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
		diff -= sizeof(struct liballoc_major);
ffffffff801020c4:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff801020c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801020cd:	48 83 c0 28          	add    $0x28,%rax
ffffffff801020d1:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff801020d5:	0f 82 1e 01 00 00    	jb     ffffffff801021f9 <malloc+0x41d>
		{
			// Yes, space in front. Squeeze in.
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff801020db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801020df:	48 8d 50 28          	lea    0x28(%rax),%rdx
ffffffff801020e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801020e7:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801020eb:	48 89 10             	mov    %rdx,(%rax)
			maj->first->prev->next = maj->first;
ffffffff801020ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801020f2:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801020f6:	48 8b 00             	mov    (%rax),%rax
ffffffff801020f9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff801020fd:	48 8b 52 20          	mov    0x20(%rdx),%rdx
ffffffff80102101:	48 89 50 08          	mov    %rdx,0x8(%rax)
			maj->first = maj->first->prev;
ffffffff80102105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102109:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010210d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80102110:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102114:	48 89 50 20          	mov    %rdx,0x20(%rax)
				
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80102118:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010211c:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102120:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 	= NULL;
ffffffff80102127:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010212b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010212f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->block 	= maj;
ffffffff80102136:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010213a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010213e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102142:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 	= size;
ffffffff80102146:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010214a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010214e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102152:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff80102155:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102159:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010215d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80102161:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80102164:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102168:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff8010216b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010216f:	01 d0                	add    %edx,%eax
ffffffff80102171:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102174:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102178:	89 50 18             	mov    %edx,0x18(%rax)

			l_inuse += size;
ffffffff8010217b:	48 8b 15 9e 9e 01 00 	mov    0x19e9e(%rip),%rdx        # ffffffff8011c020 <_ZL7l_inuse>
ffffffff80102182:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102186:	48 01 d0             	add    %rdx,%rax
ffffffff80102189:	48 89 05 90 9e 01 00 	mov    %rax,0x19e90(%rip)        # ffffffff8011c020 <_ZL7l_inuse>

			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff80102190:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102194:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102198:	48 83 c0 28          	add    $0x28,%rax
ffffffff8010219c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			ALIGN( p );
ffffffff801021a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801021a4:	48 83 c0 10          	add    $0x10,%rax
ffffffff801021a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801021ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801021b0:	83 e0 0f             	and    $0xf,%eax
ffffffff801021b3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff801021b7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff801021bc:	74 1c                	je     ffffffff801021da <malloc+0x3fe>
ffffffff801021be:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff801021c3:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
ffffffff801021c7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff801021cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801021cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801021d3:	48 01 d0             	add    %rdx,%rax
ffffffff801021d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801021da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801021de:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff801021e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801021e5:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801021e9:	88 10                	mov    %dl,(%rax)

			#ifdef DEBUG
			printf( "CASE 3: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff801021eb:	e8 9c 29 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
			return p;
ffffffff801021f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801021f4:	e9 4f 03 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>


#ifdef USE_CASE4

		// CASE 4: There is enough space in this block. But is it contiguous?
		min = maj->first;
ffffffff801021f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801021fd:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102201:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		
			// Looping within the block now...
		while ( min != NULL )
ffffffff80102205:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8010220a:	0f 84 c3 02 00 00    	je     ffffffff801024d3 <malloc+0x6f7>
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80102210:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102214:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102218:	48 85 c0             	test   %rax,%rax
ffffffff8010221b:	0f 85 48 01 00 00    	jne    ffffffff80102369 <malloc+0x58d>
				{
					// the rest of this block is free...  is it big enough?
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80102221:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102225:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80102228:	89 c2                	mov    %eax,%edx
ffffffff8010222a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010222e:	48 01 d0             	add    %rdx,%rax
ffffffff80102231:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102235:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102239:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff8010223d:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size; 
ffffffff80102242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102246:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102249:	89 c0                	mov    %eax,%eax
ffffffff8010224b:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
						// minus already existing usage..

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff8010224f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102253:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102257:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff8010225b:	0f 82 08 01 00 00    	jb     ffffffff80102369 <malloc+0x58d>
					{
						// yay....
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80102261:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102265:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102268:	89 c2                	mov    %eax,%edx
ffffffff8010226a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010226e:	48 01 d0             	add    %rdx,%rax
ffffffff80102271:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102275:	48 89 c2             	mov    %rax,%rdx
ffffffff80102278:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010227c:	48 89 50 08          	mov    %rdx,0x8(%rax)
						min->next->prev = min;
ffffffff80102280:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102284:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102288:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8010228c:	48 89 10             	mov    %rdx,(%rax)
						min = min->next;
ffffffff8010228f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102293:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102297:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
						min->next = NULL;
ffffffff8010229b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010229f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff801022a6:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff801022a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801022ab:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						min->block = maj;
ffffffff801022b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801022b6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff801022ba:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->size = size;
ffffffff801022be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801022c2:	89 c2                	mov    %eax,%edx
ffffffff801022c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801022c8:	89 50 1c             	mov    %edx,0x1c(%rax)
						min->req_size = req_size;
ffffffff801022cb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801022cf:	89 c2                	mov    %eax,%edx
ffffffff801022d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801022d5:	89 50 20             	mov    %edx,0x20(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff801022d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801022dc:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff801022df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801022e3:	01 d0                	add    %edx,%eax
ffffffff801022e5:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff801022e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801022ec:	89 50 18             	mov    %edx,0x18(%rax)

						l_inuse += size;
ffffffff801022ef:	48 8b 15 2a 9d 01 00 	mov    0x19d2a(%rip),%rdx        # ffffffff8011c020 <_ZL7l_inuse>
ffffffff801022f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801022fa:	48 01 d0             	add    %rdx,%rax
ffffffff801022fd:	48 89 05 1c 9d 01 00 	mov    %rax,0x19d1c(%rip)        # ffffffff8011c020 <_ZL7l_inuse>
						
						p = (void*)((uintptr_t)min + sizeof( struct liballoc_minor ));
ffffffff80102304:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102308:	48 83 c0 28          	add    $0x28,%rax
ffffffff8010230c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102310:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102314:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102318:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8010231c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102320:	83 e0 0f             	and    $0xf,%eax
ffffffff80102323:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80102327:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff8010232c:	74 1c                	je     ffffffff8010234a <malloc+0x56e>
ffffffff8010232e:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102333:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
ffffffff80102337:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8010233b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010233f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102343:	48 01 d0             	add    %rdx,%rax
ffffffff80102346:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8010234a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8010234e:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102355:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102359:	88 10                	mov    %dl,(%rax)

						#ifdef DEBUG
						printf( "CASE 4.1: returning %x\n", p); 
						FLUSH();
						#endif
						liballoc_unlock();		// release the lock
ffffffff8010235b:	e8 2c 28 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
						return p;
ffffffff80102360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102364:	e9 df 01 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>
				}



				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
ffffffff80102369:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010236d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102371:	48 85 c0             	test   %rax,%rax
ffffffff80102374:	0f 84 48 01 00 00    	je     ffffffff801024c2 <malloc+0x6e6>
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
ffffffff8010237a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010237e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102382:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102386:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010238a:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff8010238e:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size;
ffffffff80102393:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102397:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff8010239a:	89 c0                	mov    %eax,%eax
ffffffff8010239c:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff801023a0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801023a4:	48 83 c0 28          	add    $0x28,%rax
ffffffff801023a8:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff801023ac:	0f 82 10 01 00 00    	jb     ffffffff801024c2 <malloc+0x6e6>
					{
						// yay......
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff801023b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801023b6:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff801023b9:	89 c2                	mov    %eax,%edx
ffffffff801023bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801023bf:	48 01 d0             	add    %rdx,%rax
ffffffff801023c2:	48 83 c0 28          	add    $0x28,%rax
ffffffff801023c6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

						new_min->magic = LIBALLOC_MAGIC;
ffffffff801023ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801023ce:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						new_min->next = min->next;
ffffffff801023d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801023d9:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff801023dd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801023e1:	48 89 50 08          	mov    %rdx,0x8(%rax)
						new_min->prev = min;
ffffffff801023e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801023e9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff801023ed:	48 89 10             	mov    %rdx,(%rax)
						new_min->size = size;
ffffffff801023f0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801023f4:	89 c2                	mov    %eax,%edx
ffffffff801023f6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801023fa:	89 50 1c             	mov    %edx,0x1c(%rax)
						new_min->req_size = req_size;
ffffffff801023fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102401:	89 c2                	mov    %eax,%edx
ffffffff80102403:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102407:	89 50 20             	mov    %edx,0x20(%rax)
						new_min->block = maj;
ffffffff8010240a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8010240e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102412:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->next->prev = new_min;
ffffffff80102416:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010241a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010241e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102422:	48 89 10             	mov    %rdx,(%rax)
						min->next = new_min;
ffffffff80102425:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102429:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8010242d:	48 89 50 08          	mov    %rdx,0x8(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80102431:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102435:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff80102438:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010243c:	01 d0                	add    %edx,%eax
ffffffff8010243e:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102441:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102445:	89 50 18             	mov    %edx,0x18(%rax)
						
						l_inuse += size;
ffffffff80102448:	48 8b 15 d1 9b 01 00 	mov    0x19bd1(%rip),%rdx        # ffffffff8011c020 <_ZL7l_inuse>
ffffffff8010244f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102453:	48 01 d0             	add    %rdx,%rax
ffffffff80102456:	48 89 05 c3 9b 01 00 	mov    %rax,0x19bc3(%rip)        # ffffffff8011c020 <_ZL7l_inuse>
						
						p = (void*)((uintptr_t)new_min + sizeof( struct liballoc_minor ));
ffffffff8010245d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102461:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102465:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102469:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010246d:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102471:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102479:	83 e0 0f             	and    $0xf,%eax
ffffffff8010247c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102480:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80102485:	74 1c                	je     ffffffff801024a3 <malloc+0x6c7>
ffffffff80102487:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8010248c:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
ffffffff80102490:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102494:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102498:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010249c:	48 01 d0             	add    %rdx,%rax
ffffffff8010249f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801024a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801024a7:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff801024aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801024ae:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801024b2:	88 10                	mov    %dl,(%rax)
						#ifdef DEBUG
						printf( "CASE 4.2: returning %x\n", p); 
						FLUSH();
						#endif
						
						liballoc_unlock();		// release the lock
ffffffff801024b4:	e8 d3 26 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
						return p;
ffffffff801024b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801024bd:	e9 86 00 00 00       	jmpq   ffffffff80102548 <malloc+0x76c>
					}
				}	// min->next != NULL

				min = min->next;
ffffffff801024c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801024c6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801024ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		while ( min != NULL )
ffffffff801024ce:	e9 32 fd ff ff       	jmpq   ffffffff80102205 <malloc+0x429>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff801024d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801024d7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801024db:	48 85 c0             	test   %rax,%rax
ffffffff801024de:	75 49                	jne    ffffffff80102529 <malloc+0x74d>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff801024e0:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff801024e4:	75 14                	jne    ffffffff801024fa <malloc+0x71e>
			{
				maj = l_memRoot;
ffffffff801024e6:	48 8b 05 1b 9b 01 00 	mov    0x19b1b(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff801024ed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff801024f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff801024f8:	eb 3b                	jmp    ffffffff80102535 <malloc+0x759>
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff801024fa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801024fe:	89 c7                	mov    %eax,%edi
ffffffff80102500:	e8 d1 f7 ff ff       	callq  ffffffff80101cd6 <_ZL17allocate_new_pagej>
ffffffff80102505:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102509:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff8010250d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102511:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102515:	48 85 c0             	test   %rax,%rax
ffffffff80102518:	74 23                	je     ffffffff8010253d <malloc+0x761>
			maj->next->prev = maj;
ffffffff8010251a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010251e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102522:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102526:	48 89 10             	mov    %rdx,(%rax)

		}

#endif

		maj = maj->next;
ffffffff80102529:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010252d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102531:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while ( maj != NULL )
ffffffff80102535:	e9 99 f9 ff ff       	jmpq   ffffffff80101ed3 <malloc+0xf7>
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff8010253a:	90                   	nop
ffffffff8010253b:	eb 01                	jmp    ffffffff8010253e <malloc+0x762>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff8010253d:	90                   	nop
	} // while (maj != NULL)


	
	liballoc_unlock();		// release the lock
ffffffff8010253e:	e8 49 26 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
	#if defined DEBUG || defined INFO
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
ffffffff80102543:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80102548:	c9                   	leaveq 
ffffffff80102549:	c3                   	retq   

ffffffff8010254a <free>:




void PREFIX(free)(void *ptr)
{
ffffffff8010254a:	55                   	push   %rbp
ffffffff8010254b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010254e:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80102552:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80102556:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8010255b:	75 17                	jne    ffffffff80102574 <free+0x2a>
	{
		l_warningCount += 1;
ffffffff8010255d:	48 8b 05 c4 9a 01 00 	mov    0x19ac4(%rip),%rax        # ffffffff8011c028 <_ZL14l_warningCount>
ffffffff80102564:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102568:	48 89 05 b9 9a 01 00 	mov    %rax,0x19ab9(%rip)        # ffffffff8011c028 <_ZL14l_warningCount>
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		return;
ffffffff8010256f:	e9 97 02 00 00       	jmpq   ffffffff8010280b <free+0x2c1>
	}

	UNALIGN( ptr );
ffffffff80102574:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102578:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8010257c:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010257f:	48 0f be c0          	movsbq %al,%rax
ffffffff80102583:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80102587:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
ffffffff8010258c:	77 0c                	ja     ffffffff8010259a <free+0x50>
ffffffff8010258e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102592:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff80102596:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	liballoc_lock();		// lockit
ffffffff8010259a:	e8 e2 25 00 00       	callq  ffffffff80104b81 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff8010259f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801025a3:	48 83 e8 28          	sub    $0x28,%rax
ffffffff801025a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff801025ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801025af:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801025b2:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff801025b7:	0f 84 97 00 00 00    	je     ffffffff80102654 <free+0x10a>
	{
		l_errorCount += 1;
ffffffff801025bd:	48 8b 05 6c 9a 01 00 	mov    0x19a6c(%rip),%rax        # ffffffff8011c030 <_ZL12l_errorCount>
ffffffff801025c4:	48 83 c0 01          	add    $0x1,%rax
ffffffff801025c8:	48 89 05 61 9a 01 00 	mov    %rax,0x19a61(%rip)        # ffffffff8011c030 <_ZL12l_errorCount>

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801025cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801025d3:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801025d6:	25 ff ff ff 00       	and    $0xffffff,%eax
		if ( 
ffffffff801025db:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff801025e0:	74 22                	je     ffffffff80102604 <free+0xba>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff801025e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801025e6:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801025e9:	0f b7 c0             	movzwl %ax,%eax
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801025ec:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff801025f1:	74 11                	je     ffffffff80102604 <free+0xba>
			((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff801025f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801025f7:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801025fa:	0f b6 c0             	movzbl %al,%eax
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff801025fd:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff80102602:	75 1e                	jne    ffffffff80102622 <free+0xd8>
		   )
		{
			l_possibleOverruns += 1;
ffffffff80102604:	48 8b 05 2d 9a 01 00 	mov    0x19a2d(%rip),%rax        # ffffffff8011c038 <_ZL18l_possibleOverruns>
ffffffff8010260b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8010260f:	48 89 05 22 9a 01 00 	mov    %rax,0x19a22(%rip)        # ffffffff8011c038 <_ZL18l_possibleOverruns>
            com_write_str( "liballoc: ERROR: Possible 1-3 byte overrun for magic ");
ffffffff80102616:	48 c7 c7 90 51 10 80 	mov    $0xffffffff80105190,%rdi
ffffffff8010261d:	e8 a7 1d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
			FLUSH();
			#endif
		}
						
						
		if ( min->magic == LIBALLOC_DEAD )
ffffffff80102622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102626:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102629:	3d ad de ad de       	cmp    $0xdeaddead,%eax
ffffffff8010262e:	75 0e                	jne    ffffffff8010263e <free+0xf4>
		{
            com_write_str( "liballoc: ERROR: multiple (free)() attempt ");
ffffffff80102630:	48 c7 c7 c8 51 10 80 	mov    $0xffffffff801051c8,%rdi
ffffffff80102637:	e8 8d 1d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
ffffffff8010263c:	eb 0c                	jmp    ffffffff8010264a <free+0x100>
			FLUSH();
			#endif
		}
		else
		{
            com_write_str( "liballoc: ERROR:bad free ");
ffffffff8010263e:	48 c7 c7 f4 51 10 80 	mov    $0xffffffff801051f4,%rdi
ffffffff80102645:	e8 7f 1d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
			FLUSH();
			#endif
		}
			
		// being lied to...
		liballoc_unlock();		// release the lock
ffffffff8010264a:	e8 3d 25 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
		return;
ffffffff8010264f:	e9 b7 01 00 00       	jmpq   ffffffff8010280b <free+0x2c1>
				ptr );
	FLUSH();
	#endif
	

		maj = min->block;
ffffffff80102654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102658:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8010265c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		l_inuse -= min->size;
ffffffff80102660:	48 8b 15 b9 99 01 00 	mov    0x199b9(%rip),%rdx        # ffffffff8011c020 <_ZL7l_inuse>
ffffffff80102667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010266b:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff8010266e:	89 c1                	mov    %eax,%ecx
ffffffff80102670:	48 89 d0             	mov    %rdx,%rax
ffffffff80102673:	48 29 c8             	sub    %rcx,%rax
ffffffff80102676:	48 89 05 a3 99 01 00 	mov    %rax,0x199a3(%rip)        # ffffffff8011c020 <_ZL7l_inuse>

		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff8010267d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102681:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff80102684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102688:	8b 48 1c             	mov    0x1c(%rax),%ecx
ffffffff8010268b:	89 d0                	mov    %edx,%eax
ffffffff8010268d:	29 c8                	sub    %ecx,%eax
ffffffff8010268f:	8d 50 d8             	lea    -0x28(%rax),%edx
ffffffff80102692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102696:	89 50 18             	mov    %edx,0x18(%rax)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80102699:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010269d:	c7 40 18 ad de ad de 	movl   $0xdeaddead,0x18(%rax)

		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff801026a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026a8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801026ac:	48 85 c0             	test   %rax,%rax
ffffffff801026af:	74 12                	je     ffffffff801026c3 <free+0x179>
ffffffff801026b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026b5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801026b9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801026bd:	48 8b 12             	mov    (%rdx),%rdx
ffffffff801026c0:	48 89 10             	mov    %rdx,(%rax)
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff801026c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026c7:	48 8b 00             	mov    (%rax),%rax
ffffffff801026ca:	48 85 c0             	test   %rax,%rax
ffffffff801026cd:	74 13                	je     ffffffff801026e2 <free+0x198>
ffffffff801026cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026d3:	48 8b 00             	mov    (%rax),%rax
ffffffff801026d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801026da:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff801026de:	48 89 50 08          	mov    %rdx,0x8(%rax)

		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff801026e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026e6:	48 8b 00             	mov    (%rax),%rax
ffffffff801026e9:	48 85 c0             	test   %rax,%rax
ffffffff801026ec:	75 10                	jne    ffffffff801026fe <free+0x1b4>
ffffffff801026ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026f2:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff801026f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801026fa:	48 89 50 20          	mov    %rdx,0x20(%rax)
							// minor.


	// We need to clean up after the majors now....

	if ( maj->first == NULL )	// Block completely unused.
ffffffff801026fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102702:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102706:	48 85 c0             	test   %rax,%rax
ffffffff80102709:	0f 85 a8 00 00 00    	jne    ffffffff801027b7 <free+0x26d>
	{
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff8010270f:	48 8b 05 f2 98 01 00 	mov    0x198f2(%rip),%rax        # ffffffff8011c008 <_ZL9l_memRoot>
ffffffff80102716:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8010271a:	75 0f                	jne    ffffffff8010272b <free+0x1e1>
ffffffff8010271c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102720:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102724:	48 89 05 dd 98 01 00 	mov    %rax,0x198dd(%rip)        # ffffffff8011c008 <_ZL9l_memRoot>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff8010272b:	48 8b 05 de 98 01 00 	mov    0x198de(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff80102732:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80102736:	75 0b                	jne    ffffffff80102743 <free+0x1f9>
ffffffff80102738:	48 c7 05 cd 98 01 00 	movq   $0x0,0x198cd(%rip)        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff8010273f:	00 00 00 00 
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80102743:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102747:	48 8b 00             	mov    (%rax),%rax
ffffffff8010274a:	48 85 c0             	test   %rax,%rax
ffffffff8010274d:	74 13                	je     ffffffff80102762 <free+0x218>
ffffffff8010274f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102753:	48 8b 00             	mov    (%rax),%rax
ffffffff80102756:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010275a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff8010275e:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80102762:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102766:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010276a:	48 85 c0             	test   %rax,%rax
ffffffff8010276d:	74 12                	je     ffffffff80102781 <free+0x237>
ffffffff8010276f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102773:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102777:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010277b:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8010277e:	48 89 10             	mov    %rdx,(%rax)
		l_allocated -= maj->size;
ffffffff80102781:	48 8b 15 90 98 01 00 	mov    0x19890(%rip),%rdx        # ffffffff8011c018 <_ZL11l_allocated>
ffffffff80102788:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010278c:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8010278f:	89 c1                	mov    %eax,%ecx
ffffffff80102791:	48 89 d0             	mov    %rdx,%rax
ffffffff80102794:	48 29 c8             	sub    %rcx,%rax
ffffffff80102797:	48 89 05 7a 98 01 00 	mov    %rax,0x1987a(%rip)        # ffffffff8011c018 <_ZL11l_allocated>

		liballoc_free( maj, maj->pages );
ffffffff8010279e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801027a2:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff801027a5:	89 c2                	mov    %eax,%edx
ffffffff801027a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801027ab:	89 d6                	mov    %edx,%esi
ffffffff801027ad:	48 89 c7             	mov    %rax,%rdi
ffffffff801027b0:	e8 01 24 00 00       	callq  ffffffff80104bb6 <liballoc_free>
ffffffff801027b5:	eb 4f                	jmp    ffffffff80102806 <free+0x2bc>
	}
	else
	{
		if ( l_bestBet != NULL )
ffffffff801027b7:	48 8b 05 52 98 01 00 	mov    0x19852(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff801027be:	48 85 c0             	test   %rax,%rax
ffffffff801027c1:	74 43                	je     ffffffff80102806 <free+0x2bc>
		{
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff801027c3:	48 8b 05 46 98 01 00 	mov    0x19846(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff801027ca:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff801027cd:	48 8b 05 3c 98 01 00 	mov    0x1983c(%rip),%rax        # ffffffff8011c010 <_ZL9l_bestBet>
ffffffff801027d4:	8b 48 18             	mov    0x18(%rax),%ecx
ffffffff801027d7:	89 d0                	mov    %edx,%eax
ffffffff801027d9:	29 c8                	sub    %ecx,%eax
ffffffff801027db:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			int majSize = maj->size - maj->usage;
ffffffff801027de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801027e2:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff801027e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801027e9:	8b 48 18             	mov    0x18(%rax),%ecx
ffffffff801027ec:	89 d0                	mov    %edx,%eax
ffffffff801027ee:	29 c8                	sub    %ecx,%eax
ffffffff801027f0:	89 45 e0             	mov    %eax,-0x20(%rbp)

			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff801027f3:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff801027f6:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff801027f9:	7e 0b                	jle    ffffffff80102806 <free+0x2bc>
ffffffff801027fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801027ff:	48 89 05 0a 98 01 00 	mov    %rax,0x1980a(%rip)        # ffffffff8011c010 <_ZL9l_bestBet>
	#ifdef DEBUG
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
ffffffff80102806:	e8 81 23 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
}
ffffffff8010280b:	c9                   	leaveq 
ffffffff8010280c:	c3                   	retq   

ffffffff8010280d <calloc>:




void* PREFIX(calloc)(size_t nobj, size_t size)
{
ffffffff8010280d:	55                   	push   %rbp
ffffffff8010280e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102811:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80102815:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80102819:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff8010281d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102821:	89 c2                	mov    %eax,%edx
ffffffff80102823:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102827:	0f af c2             	imul   %edx,%eax
ffffffff8010282a:	89 45 fc             	mov    %eax,-0x4(%rbp)
       
       p = PREFIX(malloc)( real_size );
ffffffff8010282d:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80102830:	48 98                	cltq   
ffffffff80102832:	48 89 c7             	mov    %rax,%rdi
ffffffff80102835:	e8 a2 f5 ff ff       	callq  ffffffff80101ddc <malloc>
ffffffff8010283a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

       liballoc_memset( p, 0, real_size );
ffffffff8010283e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80102841:	48 63 d0             	movslq %eax,%rdx
ffffffff80102844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102848:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8010284d:	48 89 c7             	mov    %rax,%rdi
ffffffff80102850:	e8 aa f3 ff ff       	callq  ffffffff80101bff <_ZL15liballoc_memsetPvil>

       return p;
ffffffff80102855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff80102859:	c9                   	leaveq 
ffffffff8010285a:	c3                   	retq   

ffffffff8010285b <realloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff8010285b:	55                   	push   %rbp
ffffffff8010285c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010285f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80102863:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80102867:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff8010286b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80102870:	75 16                	jne    ffffffff80102888 <realloc+0x2d>
	{
		PREFIX(free)( p );
ffffffff80102872:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102876:	48 89 c7             	mov    %rax,%rdi
ffffffff80102879:	e8 cc fc ff ff       	callq  ffffffff8010254a <free>
		return NULL;
ffffffff8010287e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80102883:	e9 30 01 00 00       	jmpq   ffffffff801029b8 <realloc+0x15d>
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80102888:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8010288d:	75 11                	jne    ffffffff801028a0 <realloc+0x45>
ffffffff8010288f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102893:	48 89 c7             	mov    %rax,%rdi
ffffffff80102896:	e8 41 f5 ff ff       	callq  ffffffff80101ddc <malloc>
ffffffff8010289b:	e9 18 01 00 00       	jmpq   ffffffff801029b8 <realloc+0x15d>

	// Unalign the pointer if required.
	ptr = p;
ffffffff801028a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801028a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	UNALIGN(ptr);
ffffffff801028a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801028ac:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801028b0:	0f b6 00             	movzbl (%rax),%eax
ffffffff801028b3:	48 0f be c0          	movsbq %al,%rax
ffffffff801028b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff801028bb:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
ffffffff801028c0:	77 0c                	ja     ffffffff801028ce <realloc+0x73>
ffffffff801028c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801028c6:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff801028ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	liballoc_lock();		// lockit
ffffffff801028ce:	e8 ae 22 00 00       	callq  ffffffff80104b81 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff801028d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801028d7:	48 83 e8 28          	sub    $0x28,%rax
ffffffff801028db:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff801028df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801028e3:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801028e6:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff801028eb:	74 65                	je     ffffffff80102952 <realloc+0xf7>
		{
			l_errorCount += 1;
ffffffff801028ed:	48 8b 05 3c 97 01 00 	mov    0x1973c(%rip),%rax        # ffffffff8011c030 <_ZL12l_errorCount>
ffffffff801028f4:	48 83 c0 01          	add    $0x1,%rax
ffffffff801028f8:	48 89 05 31 97 01 00 	mov    %rax,0x19731(%rip)        # ffffffff8011c030 <_ZL12l_errorCount>
	
			// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
			if ( 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801028ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102903:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102906:	25 ff ff ff 00       	and    $0xffffff,%eax
			if ( 
ffffffff8010290b:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80102910:	74 22                	je     ffffffff80102934 <realloc+0xd9>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80102912:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102916:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102919:	0f b7 c0             	movzwl %ax,%eax
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8010291c:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff80102921:	74 11                	je     ffffffff80102934 <realloc+0xd9>
				((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff80102923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102927:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8010292a:	0f b6 c0             	movzbl %al,%eax
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8010292d:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff80102932:	75 12                	jne    ffffffff80102946 <realloc+0xeb>
			   )
			{
				l_possibleOverruns += 1;
ffffffff80102934:	48 8b 05 fd 96 01 00 	mov    0x196fd(%rip),%rax        # ffffffff8011c038 <_ZL18l_possibleOverruns>
ffffffff8010293b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8010293f:	48 89 05 f2 96 01 00 	mov    %rax,0x196f2(%rip)        # ffffffff8011c038 <_ZL18l_possibleOverruns>
				FLUSH();
				#endif
			}
			
			// being lied to...
			liballoc_unlock();		// release the lock
ffffffff80102946:	e8 41 22 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
			return NULL;
ffffffff8010294b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80102950:	eb 66                	jmp    ffffffff801029b8 <realloc+0x15d>
		}	
		
		// Definitely a memory block.
		
		real_size = min->req_size;
ffffffff80102952:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102956:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff80102959:	89 45 e4             	mov    %eax,-0x1c(%rbp)

		if ( real_size >= size ) 
ffffffff8010295c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8010295f:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80102963:	7f 18                	jg     ffffffff8010297d <realloc+0x122>
		{
			min->req_size = size;
ffffffff80102965:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102969:	89 c2                	mov    %eax,%edx
ffffffff8010296b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010296f:	89 50 20             	mov    %edx,0x20(%rax)
			liballoc_unlock();
ffffffff80102972:	e8 15 22 00 00       	callq  ffffffff80104b8c <liballoc_unlock>
			return p;
ffffffff80102977:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010297b:	eb 3b                	jmp    ffffffff801029b8 <realloc+0x15d>
		}

	liballoc_unlock();
ffffffff8010297d:	e8 0a 22 00 00       	callq  ffffffff80104b8c <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80102982:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102986:	48 89 c7             	mov    %rax,%rdi
ffffffff80102989:	e8 4e f4 ff ff       	callq  ffffffff80101ddc <malloc>
ffffffff8010298e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	liballoc_memcpy( ptr, p, real_size );
ffffffff80102992:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff80102995:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80102999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010299d:	48 89 ce             	mov    %rcx,%rsi
ffffffff801029a0:	48 89 c7             	mov    %rax,%rdi
ffffffff801029a3:	e8 95 f2 ff ff       	callq  ffffffff80101c3d <_ZL15liballoc_memcpyPvPKvl>
	PREFIX(free)( p );
ffffffff801029a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801029ac:	48 89 c7             	mov    %rax,%rdi
ffffffff801029af:	e8 96 fb ff ff       	callq  ffffffff8010254a <free>

	return ptr;
ffffffff801029b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff801029b8:	c9                   	leaveq 
ffffffff801029b9:	c3                   	retq   

ffffffff801029ba <_Z8align_upmm>:
uint8_t temp_alloc_ptr[0x2000000]; // 33 megs of data so
uint32_t temp_alloc_current_cursor = 0;
bool paging_is_initialized;


 uint64_t align_up(uint64_t num, uint64_t multiple) {
ffffffff801029ba:	55                   	push   %rbp
ffffffff801029bb:	48 89 e5             	mov    %rsp,%rbp
ffffffff801029be:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801029c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff801029c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return ((num + multiple - 1) / multiple) * multiple;
ffffffff801029ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff801029ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801029d2:	48 01 d0             	add    %rdx,%rax
ffffffff801029d5:	48 83 e8 01          	sub    $0x1,%rax
ffffffff801029d9:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801029de:	48 f7 75 f0          	divq   -0x10(%rbp)
ffffffff801029e2:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
}
ffffffff801029e7:	c9                   	leaveq 
ffffffff801029e8:	c3                   	retq   

ffffffff801029e9 <_Z9frame_setm>:


void frame_set(uint64_t address){
ffffffff801029e9:	55                   	push   %rbp
ffffffff801029ea:	48 89 e5             	mov    %rsp,%rbp
ffffffff801029ed:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff801029f1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

    address     -= BITMAP_BASE;
ffffffff801029f5:	48 81 6d d8 00 10 00 	subq   $0x1000,-0x28(%rbp)
ffffffff801029fc:	00 
     uint64_t frame = address / PAGE_SIZE;
ffffffff801029fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a01:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102a05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)


     uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80102a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102a0d:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80102a11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     uint64_t offset = OFFSET_FROM_BIT(frame);
ffffffff80102a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102a19:	83 e0 1f             	and    $0x1f,%eax
ffffffff80102a1c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     frames[idx] |= (0x1 << offset) ;
ffffffff80102a20:	48 8b 15 e9 a5 01 00 	mov    0x1a5e9(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80102a27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102a2b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102a2f:	48 01 d0             	add    %rdx,%rax
ffffffff80102a32:	8b 10                	mov    (%rax),%edx
ffffffff80102a34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102a38:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80102a3d:	89 c1                	mov    %eax,%ecx
ffffffff80102a3f:	d3 e6                	shl    %cl,%esi
ffffffff80102a41:	89 f0                	mov    %esi,%eax
ffffffff80102a43:	89 c6                	mov    %eax,%esi
ffffffff80102a45:	48 8b 0d c4 a5 01 00 	mov    0x1a5c4(%rip),%rcx        # ffffffff8011d010 <frames>
ffffffff80102a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102a50:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102a54:	48 01 c8             	add    %rcx,%rax
ffffffff80102a57:	09 f2                	or     %esi,%edx
ffffffff80102a59:	89 10                	mov    %edx,(%rax)
}
ffffffff80102a5b:	90                   	nop
ffffffff80102a5c:	c9                   	leaveq 
ffffffff80102a5d:	c3                   	retq   

ffffffff80102a5e <_Z14test_frame_bitm>:

int test_frame_bit(uint64_t offset){
ffffffff80102a5e:	55                   	push   %rbp
ffffffff80102a5f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102a62:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80102a66:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int ret = -1;
ffffffff80102a6a:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    asm volatile (
ffffffff80102a71:	48 8b 05 98 a5 01 00 	mov    0x1a598(%rip),%rax        # ffffffff8011d010 <frames>
ffffffff80102a78:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102a7c:	48 0f a3 10          	bt     %rdx,(%rax)
ffffffff80102a80:	0f 92 c0             	setb   %al
ffffffff80102a83:	0f b6 c0             	movzbl %al,%eax
ffffffff80102a86:	89 45 fc             	mov    %eax,-0x4(%rbp)
        "bt [%1], %2;"
        : "=@ccc" (ret)
        : "r" (frames), "r" (offset)
        : "memory"
    );
   return ret;
ffffffff80102a89:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
ffffffff80102a8c:	c9                   	leaveq 
ffffffff80102a8d:	c3                   	retq   

ffffffff80102a8e <_Z13set_frame_bitm>:
int set_frame_bit(uint64_t offset){
ffffffff80102a8e:	55                   	push   %rbp
ffffffff80102a8f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102a92:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80102a96:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    int ret = -1;
ffffffff80102a9a:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    asm volatile (
ffffffff80102aa1:	48 8b 05 68 a5 01 00 	mov    0x1a568(%rip),%rax        # ffffffff8011d010 <frames>
ffffffff80102aa8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102aac:	48 0f ab 10          	bts    %rdx,(%rax)
ffffffff80102ab0:	0f 92 c0             	setb   %al
ffffffff80102ab3:	0f b6 c0             	movzbl %al,%eax
ffffffff80102ab6:	89 45 fc             	mov    %eax,-0x4(%rbp)
        "bts [%1], %2;"
        : "=@ccc" (ret)
        : "r" (frames), "r" (offset)
        : "memory"
    );
   return ret;
ffffffff80102ab9:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
ffffffff80102abc:	c9                   	leaveq 
ffffffff80102abd:	c3                   	retq   

ffffffff80102abe <_Z15reset_frame_bitm>:
int reset_frame_bit(uint64_t offset){
ffffffff80102abe:	55                   	push   %rbp
ffffffff80102abf:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102ac2:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80102ac6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int d = 0;
ffffffff80102aca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    asm volatile (
ffffffff80102ad1:	48 8b 05 38 a5 01 00 	mov    0x1a538(%rip),%rax        # ffffffff8011d010 <frames>
ffffffff80102ad8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102adc:	48 0f b3 10          	btr    %rdx,(%rax)
ffffffff80102ae0:	0f 92 c0             	setb   %al
ffffffff80102ae3:	0f b6 c0             	movzbl %al,%eax
ffffffff80102ae6:	89 45 fc             	mov    %eax,-0x4(%rbp)
        "btr [%1], %2;"
        :"=@ccc"(d)
        : "r" (frames), "r" (offset)
        : "memory"
    );
    return 0;
ffffffff80102ae9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80102aee:	c9                   	leaveq 
ffffffff80102aef:	c3                   	retq   

ffffffff80102af0 <_Z8pmm_freePvm>:
    size_t f = i + count;
    for (size_t j = i; j < f; j++)
        reset_frame_bit( j);
}

void pmm_free(void *ptr, uint64_t pg_count) {
ffffffff80102af0:	55                   	push   %rbp
ffffffff80102af1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102af4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80102af8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80102afc:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)

    uint64_t start = (uint64_t)ptr / PAGE_SIZE;
ffffffff80102b00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102b04:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102b08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80102b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102b10:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80102b14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102b18:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    i -= BITMAP_BASE;
ffffffff80102b1c:	48 81 6d f0 00 10 00 	subq   $0x1000,-0x10(%rbp)
ffffffff80102b23:	00 
    size_t f = i + count;
ffffffff80102b24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102b28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102b2c:	48 01 d0             	add    %rdx,%rax
ffffffff80102b2f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80102b33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102b37:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80102b3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102b3f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80102b43:	7e 13                	jle    ffffffff80102b58 <_Z8pmm_freePvm+0x68>
        reset_frame_bit( j);
ffffffff80102b45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102b49:	48 89 c7             	mov    %rax,%rdi
ffffffff80102b4c:	e8 6d ff ff ff       	callq  ffffffff80102abe <_Z15reset_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff80102b51:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80102b56:	eb e3                	jmp    ffffffff80102b3b <_Z8pmm_freePvm+0x4b>
}
ffffffff80102b58:	90                   	nop

    unset_frame_region(start, pg_count);

}
ffffffff80102b59:	90                   	nop
ffffffff80102b5a:	c9                   	leaveq 
ffffffff80102b5b:	c3                   	retq   

ffffffff80102b5c <_Z12get_mem_addrm>:
uint64_t get_mem_addr(uint64_t addr){
ffffffff80102b5c:	55                   	push   %rbp
ffffffff80102b5d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102b60:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80102b64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr + 0xffff800000000000;
ffffffff80102b68:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80102b6f:	80 ff ff 
ffffffff80102b72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102b76:	48 01 d0             	add    %rdx,%rax
}uint64_t get_rmem_addr(uint64_t addr){
ffffffff80102b79:	c9                   	leaveq 
ffffffff80102b7a:	c3                   	retq   

ffffffff80102b7b <_Z13get_rmem_addrm>:
ffffffff80102b7b:	55                   	push   %rbp
ffffffff80102b7c:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102b7f:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80102b83:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr - 0xffff800000000000;
ffffffff80102b87:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80102b8e:	80 00 00 
ffffffff80102b91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102b95:	48 01 d0             	add    %rdx,%rax
}
ffffffff80102b98:	c9                   	leaveq 
ffffffff80102b99:	c3                   	retq   

ffffffff80102b9a <_Z13get_kern_addrm>:
uint64_t get_kern_addr(uint64_t addr){
ffffffff80102b9a:	55                   	push   %rbp
ffffffff80102b9b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102b9e:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80102ba2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr + 0xffffffff80000000;
ffffffff80102ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102baa:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
}uint64_t get_rkern_addr(uint64_t addr){
ffffffff80102bb0:	c9                   	leaveq 
ffffffff80102bb1:	c3                   	retq   

ffffffff80102bb2 <_Z14get_rkern_addrm>:
ffffffff80102bb2:	55                   	push   %rbp
ffffffff80102bb3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102bb6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80102bba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr - 0xffffffff80000000;
ffffffff80102bbe:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff80102bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102bc7:	48 01 d0             	add    %rdx,%rax
}
ffffffff80102bca:	c9                   	leaveq 
ffffffff80102bcb:	c3                   	retq   

ffffffff80102bcc <_Z11frame_clearm>:
#define PAGE_FRAME 0xFFFFFFFFFF000

void frame_clear(uint64_t address){
ffffffff80102bcc:	55                   	push   %rbp
ffffffff80102bcd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102bd0:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80102bd4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

     uint64_t frame = address / PAGE_SIZE;
ffffffff80102bd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102bdc:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102be0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)


     uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80102be4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102be8:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80102bec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     uint64_t offset = OFFSET_FROM_BIT(frame);
ffffffff80102bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102bf4:	83 e0 1f             	and    $0x1f,%eax
ffffffff80102bf7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     frames[idx] &= ~(0x1 << offset) ;
ffffffff80102bfb:	48 8b 15 0e a4 01 00 	mov    0x1a40e(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80102c02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102c06:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102c0a:	48 01 d0             	add    %rdx,%rax
ffffffff80102c0d:	8b 10                	mov    (%rax),%edx
ffffffff80102c0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102c13:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80102c18:	89 c1                	mov    %eax,%ecx
ffffffff80102c1a:	d3 e6                	shl    %cl,%esi
ffffffff80102c1c:	89 f0                	mov    %esi,%eax
ffffffff80102c1e:	f7 d0                	not    %eax
ffffffff80102c20:	89 c6                	mov    %eax,%esi
ffffffff80102c22:	48 8b 0d e7 a3 01 00 	mov    0x1a3e7(%rip),%rcx        # ffffffff8011d010 <frames>
ffffffff80102c29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102c2d:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102c31:	48 01 c8             	add    %rcx,%rax
ffffffff80102c34:	21 f2                	and    %esi,%edx
ffffffff80102c36:	89 10                	mov    %edx,(%rax)
}
ffffffff80102c38:	90                   	nop
ffffffff80102c39:	c9                   	leaveq 
ffffffff80102c3a:	c3                   	retq   

ffffffff80102c3b <_Z14mmu_frame_testm>:


uint64_t mmu_frame_test(uint64_t frame_addr) {
ffffffff80102c3b:	55                   	push   %rbp
ffffffff80102c3c:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102c3f:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80102c43:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint64_t frame = frame_addr / PAGE_SIZE;
ffffffff80102c47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c4b:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102c4f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80102c53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102c57:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80102c5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  uint64_t off = OFFSET_FROM_BIT(frame);
ffffffff80102c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102c63:	83 e0 1f             	and    $0x1f,%eax
ffffffff80102c66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  return (frames[idx] & (0x1 << off));
ffffffff80102c6a:	48 8b 15 9f a3 01 00 	mov    0x1a39f(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80102c71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102c75:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102c79:	48 01 d0             	add    %rdx,%rax
ffffffff80102c7c:	8b 10                	mov    (%rax),%edx
ffffffff80102c7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102c82:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80102c87:	89 c1                	mov    %eax,%ecx
ffffffff80102c89:	d3 e6                	shl    %cl,%esi
ffffffff80102c8b:	89 f0                	mov    %esi,%eax
ffffffff80102c8d:	21 d0                	and    %edx,%eax
ffffffff80102c8f:	89 c0                	mov    %eax,%eax
}
ffffffff80102c91:	c9                   	leaveq 
ffffffff80102c92:	c3                   	retq   

ffffffff80102c93 <_Z10init_framemP14stivale_struct>:
uint32_t very_initial_frame_table[] = {0xffffff7f};
uint32_t* temp_frame_table;
void init_frame(uint64_t lenght, stivale_struct* sti_struct){
ffffffff80102c93:	55                   	push   %rbp
ffffffff80102c94:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102c97:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
ffffffff80102c9e:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff80102ca5:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
    com_write_str("loading initial frame table");
ffffffff80102cac:	48 c7 c7 10 52 10 80 	mov    $0xffffffff80105210,%rdi
ffffffff80102cb3:	e8 11 17 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    frames_counter = 32;
ffffffff80102cb8:	48 c7 05 4d 43 00 00 	movq   $0x20,0x434d(%rip)        # ffffffff80107010 <frames_counter>
ffffffff80102cbf:	20 00 00 00 
    frames = very_initial_frame_table;
ffffffff80102cc3:	48 c7 05 42 a3 01 00 	movq   $0xffffffff80107018,0x1a342(%rip)        # ffffffff8011d010 <frames>
ffffffff80102cca:	18 70 10 80 
    temp_frame_table = (uint32_t*)alloc_multiple_frame_zero(1);
ffffffff80102cce:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80102cd3:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80102cd8:	e8 58 06 00 00       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff80102cdd:	48 89 05 64 a3 01 02 	mov    %rax,0x201a364(%rip)        # ffffffff8211d048 <temp_frame_table>
    temp_frame_table = (uint32_t *)(get_mem_addr((uint64_t)temp_frame_table));
ffffffff80102ce4:	48 8b 05 5d a3 01 02 	mov    0x201a35d(%rip),%rax        # ffffffff8211d048 <temp_frame_table>
ffffffff80102ceb:	48 89 c7             	mov    %rax,%rdi
ffffffff80102cee:	e8 69 fe ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80102cf3:	48 89 05 4e a3 01 02 	mov    %rax,0x201a34e(%rip)        # ffffffff8211d048 <temp_frame_table>
    for (uint64_t i = 0; i < ( PAGE_SIZE) / sizeof(uint32_t); i++){
ffffffff80102cfa:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80102d01:	00 
ffffffff80102d02:	48 81 7d f8 ff 03 00 	cmpq   $0x3ff,-0x8(%rbp)
ffffffff80102d09:	00 
ffffffff80102d0a:	77 1f                	ja     ffffffff80102d2b <_Z10init_framemP14stivale_struct+0x98>
           temp_frame_table[i] = 0xffffffff;
ffffffff80102d0c:	48 8b 15 35 a3 01 02 	mov    0x201a335(%rip),%rdx        # ffffffff8211d048 <temp_frame_table>
ffffffff80102d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102d17:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102d1b:	48 01 d0             	add    %rdx,%rax
ffffffff80102d1e:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
    for (uint64_t i = 0; i < ( PAGE_SIZE) / sizeof(uint32_t); i++){
ffffffff80102d24:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80102d29:	eb d7                	jmp    ffffffff80102d02 <_Z10init_framemP14stivale_struct+0x6f>
     }
           frames = temp_frame_table;
ffffffff80102d2b:	48 8b 05 16 a3 01 02 	mov    0x201a316(%rip),%rax        # ffffffff8211d048 <temp_frame_table>
ffffffff80102d32:	48 89 05 d7 a2 01 00 	mov    %rax,0x1a2d7(%rip)        # ffffffff8011d010 <frames>

     frames_counter = ((PAGE_SIZE / sizeof(uint32_t)) * 32);
ffffffff80102d39:	48 c7 05 cc 42 00 00 	movq   $0x8000,0x42cc(%rip)        # ffffffff80107010 <frames_counter>
ffffffff80102d40:	00 80 00 00 

     e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80102d44:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80102d4b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102d4f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
     for(size_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80102d53:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80102d5a:	00 
ffffffff80102d5b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80102d62:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80102d66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102d6a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80102d6d:	0f 86 90 02 00 00    	jbe    ffffffff80103003 <_Z10init_framemP14stivale_struct+0x370>

         e820_entry_t *entry = &mementry[i];
ffffffff80102d73:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80102d77:	48 89 d0             	mov    %rdx,%rax
ffffffff80102d7a:	48 01 c0             	add    %rax,%rax
ffffffff80102d7d:	48 01 d0             	add    %rdx,%rax
ffffffff80102d80:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80102d84:	48 89 c2             	mov    %rax,%rdx
ffffffff80102d87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102d8b:	48 01 d0             	add    %rdx,%rax
ffffffff80102d8e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

         uint64_t aligned_base;
         if (entry->base % PAGE_SIZE){
ffffffff80102d92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102d96:	48 8b 00             	mov    (%rax),%rax
ffffffff80102d99:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80102d9e:	48 85 c0             	test   %rax,%rax
ffffffff80102da1:	74 19                	je     ffffffff80102dbc <_Z10init_framemP14stivale_struct+0x129>
                aligned_base = entry->base + (PAGE_SIZE - (entry->base % PAGE_SIZE));
ffffffff80102da3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102da7:	48 8b 00             	mov    (%rax),%rax
ffffffff80102daa:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80102db0:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80102db6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102dba:	eb 0b                	jmp    ffffffff80102dc7 <_Z10init_framemP14stivale_struct+0x134>
         }else{
                aligned_base = entry->base;
ffffffff80102dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102dc0:	48 8b 00             	mov    (%rax),%rax
ffffffff80102dc3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
         }

         size_t aligned_length = (entry->length / PAGE_SIZE) * PAGE_SIZE;
ffffffff80102dc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102dcb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102dcf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80102dd5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
         if ((entry->base % PAGE_SIZE) && aligned_length){
ffffffff80102dd9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102ddd:	48 8b 00             	mov    (%rax),%rax
ffffffff80102de0:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80102de5:	48 85 c0             	test   %rax,%rax
ffffffff80102de8:	74 0f                	je     ffffffff80102df9 <_Z10init_framemP14stivale_struct+0x166>
ffffffff80102dea:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80102def:	74 08                	je     ffffffff80102df9 <_Z10init_framemP14stivale_struct+0x166>
                     aligned_length -= PAGE_SIZE;
ffffffff80102df1:	48 81 6d e0 00 10 00 	subq   $0x1000,-0x20(%rbp)
ffffffff80102df8:	00 
         }


         for (size_t j = 0; j * PAGE_SIZE < aligned_length; j++) {
ffffffff80102df9:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80102e00:	00 
ffffffff80102e01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102e05:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102e09:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80102e0d:	0f 8e e6 01 00 00    	jle    ffffffff80102ff9 <_Z10init_framemP14stivale_struct+0x366>
             uint64_t addr = aligned_base + j * PAGE_SIZE;
ffffffff80102e13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102e17:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102e1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80102e1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e22:	48 01 d0             	add    %rdx,%rax
ffffffff80102e25:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
             size_t page = addr / PAGE_SIZE;
ffffffff80102e29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102e2d:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102e31:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
             if (addr < (MEMORY_BASE + PAGE_SIZE /* bitmap */))
ffffffff80102e35:	48 81 7d b0 ff 0f 00 	cmpq   $0x1000fff,-0x50(%rbp)
ffffffff80102e3c:	01 
ffffffff80102e3d:	0f 86 a8 01 00 00    	jbe    ffffffff80102feb <_Z10init_framemP14stivale_struct+0x358>
                             continue;
             if (addr >= (MEMORY_BASE + frames_counter * PAGE_SIZE)) {
ffffffff80102e43:	48 8b 05 c6 41 00 00 	mov    0x41c6(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80102e4a:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80102e50:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102e54:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
ffffffff80102e58:	0f 82 23 01 00 00    	jb     ffffffff80102f81 <_Z10init_framemP14stivale_struct+0x2ee>

                             /* Reallocate bitmap */
                             size_t cur_bitmap_size_in_pages = ((frames_counter / 32) * sizeof(uint32_t)) / PAGE_SIZE;
ffffffff80102e5e:	48 8b 05 ab 41 00 00 	mov    0x41ab(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80102e65:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80102e69:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102e6d:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80102e71:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
                             size_t new_bitmap_size_in_pages = cur_bitmap_size_in_pages + 1;
ffffffff80102e75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102e79:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102e7d:	48 89 45 98          	mov    %rax,-0x68(%rbp)

                             temp_frame_table = (uint32_t*)alloc_multiple_frame_zero(new_bitmap_size_in_pages);
ffffffff80102e81:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102e85:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80102e8a:	48 89 c7             	mov    %rax,%rdi
ffffffff80102e8d:	e8 a3 04 00 00       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff80102e92:	48 89 05 af a1 01 02 	mov    %rax,0x201a1af(%rip)        # ffffffff8211d048 <temp_frame_table>

                             temp_frame_table = (uint32_t *)(get_mem_addr((uint64_t)temp_frame_table));
ffffffff80102e99:	48 8b 05 a8 a1 01 02 	mov    0x201a1a8(%rip),%rax        # ffffffff8211d048 <temp_frame_table>
ffffffff80102ea0:	48 89 c7             	mov    %rax,%rdi
ffffffff80102ea3:	e8 b4 fc ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80102ea8:	48 89 05 99 a1 01 02 	mov    %rax,0x201a199(%rip)        # ffffffff8211d048 <temp_frame_table>
                             /* Copy over previous bitmap */

                             for (uint64_t i = 0;
ffffffff80102eaf:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80102eb6:	00 
                                  i < (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80102eb7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102ebb:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102ebf:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80102ec3:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80102ec7:	73 2f                	jae    ffffffff80102ef8 <_Z10init_framemP14stivale_struct+0x265>
                                  i++){
                                 temp_frame_table[i] = frames[i];
ffffffff80102ec9:	48 8b 15 40 a1 01 00 	mov    0x1a140(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80102ed0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102ed4:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102ed8:	48 01 d0             	add    %rdx,%rax
ffffffff80102edb:	48 8b 0d 66 a1 01 02 	mov    0x201a166(%rip),%rcx        # ffffffff8211d048 <temp_frame_table>
ffffffff80102ee2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80102ee6:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff80102eea:	48 01 ca             	add    %rcx,%rdx
ffffffff80102eed:	8b 00                	mov    (%rax),%eax
ffffffff80102eef:	89 02                	mov    %eax,(%rdx)
                             for (uint64_t i = 0;
ffffffff80102ef1:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
ffffffff80102ef6:	eb bf                	jmp    ffffffff80102eb7 <_Z10init_framemP14stivale_struct+0x224>
                             }
                                 /* Fill in the rest */
                             for (uint64_t i = (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80102ef8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102efc:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102f00:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80102f04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
                                  i < (new_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80102f08:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102f0c:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80102f10:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80102f14:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80102f18:	73 1f                	jae    ffffffff80102f39 <_Z10init_framemP14stivale_struct+0x2a6>
                                  i++){
                                 temp_frame_table[i] = 0xffffffff;
ffffffff80102f1a:	48 8b 15 27 a1 01 02 	mov    0x201a127(%rip),%rdx        # ffffffff8211d048 <temp_frame_table>
ffffffff80102f21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102f25:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80102f29:	48 01 d0             	add    %rdx,%rax
ffffffff80102f2c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
                             for (uint64_t i = (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80102f32:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
ffffffff80102f37:	eb cf                	jmp    ffffffff80102f08 <_Z10init_framemP14stivale_struct+0x275>
                             }
                             frames_counter += ((PAGE_SIZE / sizeof(uint32_t)) * 32) * 1;
ffffffff80102f39:	48 8b 05 d0 40 00 00 	mov    0x40d0(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80102f40:	48 05 00 80 00 00    	add    $0x8000,%rax
ffffffff80102f46:	48 89 05 c3 40 00 00 	mov    %rax,0x40c3(%rip)        # ffffffff80107010 <frames_counter>
                             uint32_t *old_bitmap = (uint32_t *)(get_rmem_addr((uint64_t)frames));
ffffffff80102f4d:	48 8b 05 bc a0 01 00 	mov    0x1a0bc(%rip),%rax        # ffffffff8011d010 <frames>
ffffffff80102f54:	48 89 c7             	mov    %rax,%rdi
ffffffff80102f57:	e8 1f fc ff ff       	callq  ffffffff80102b7b <_Z13get_rmem_addrm>
ffffffff80102f5c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
                             frames = temp_frame_table;
ffffffff80102f60:	48 8b 05 e1 a0 01 02 	mov    0x201a0e1(%rip),%rax        # ffffffff8211d048 <temp_frame_table>
ffffffff80102f67:	48 89 05 a2 a0 01 00 	mov    %rax,0x1a0a2(%rip)        # ffffffff8011d010 <frames>
                             pmm_free((old_bitmap), cur_bitmap_size_in_pages);
ffffffff80102f6e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102f72:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80102f76:	48 89 d6             	mov    %rdx,%rsi
ffffffff80102f79:	48 89 c7             	mov    %rax,%rdi
ffffffff80102f7c:	e8 6f fb ff ff       	callq  ffffffff80102af0 <_Z8pmm_freePvm>
              }

                if (entry->type == MEMMAP_USABLE) {
ffffffff80102f81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102f85:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80102f88:	83 f8 01             	cmp    $0x1,%eax
ffffffff80102f8b:	75 62                	jne    ffffffff80102fef <_Z10init_framemP14stivale_struct+0x35c>

                             unset_frame_region(page , 1);
ffffffff80102f8d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80102f91:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80102f95:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
ffffffff80102f9c:	00 
    i -= BITMAP_BASE;
ffffffff80102f9d:	48 81 6d 88 00 10 00 	subq   $0x1000,-0x78(%rbp)
ffffffff80102fa4:	00 
    size_t f = i + count;
ffffffff80102fa5:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80102fa9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80102fad:	48 01 d0             	add    %rdx,%rax
ffffffff80102fb0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80102fb7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80102fbb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80102fc2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff80102fc9:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
ffffffff80102fd0:	7e 1c                	jle    ffffffff80102fee <_Z10init_framemP14stivale_struct+0x35b>
        reset_frame_bit( j);
ffffffff80102fd2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80102fd9:	48 89 c7             	mov    %rax,%rdi
ffffffff80102fdc:	e8 dd fa ff ff       	callq  ffffffff80102abe <_Z15reset_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff80102fe1:	48 83 85 70 ff ff ff 	addq   $0x1,-0x90(%rbp)
ffffffff80102fe8:	01 
ffffffff80102fe9:	eb d7                	jmp    ffffffff80102fc2 <_Z10init_framemP14stivale_struct+0x32f>
                             continue;
ffffffff80102feb:	90                   	nop
ffffffff80102fec:	eb 01                	jmp    ffffffff80102fef <_Z10init_framemP14stivale_struct+0x35c>
}
ffffffff80102fee:	90                   	nop
         for (size_t j = 0; j * PAGE_SIZE < aligned_length; j++) {
ffffffff80102fef:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80102ff4:	e9 08 fe ff ff       	jmpq   ffffffff80102e01 <_Z10init_framemP14stivale_struct+0x16e>
     for(size_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80102ff9:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80102ffe:	e9 58 fd ff ff       	jmpq   ffffffff80102d5b <_Z10init_framemP14stivale_struct+0xc8>



            }
     }
    com_write_str("loading frame : OK");
ffffffff80103003:	48 c7 c7 2c 52 10 80 	mov    $0xffffffff8010522c,%rdi
ffffffff8010300a:	e8 ba 13 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
}
ffffffff8010300f:	90                   	nop
ffffffff80103010:	c9                   	leaveq 
ffffffff80103011:	c3                   	retq   

ffffffff80103012 <_Z16frame_find_firstv>:


uint64_t frame_find_first() {
ffffffff80103012:	55                   	push   %rbp
ffffffff80103013:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103016:	48 83 ec 20          	sub    $0x20,%rsp
  uint64_t i, j;
  for (i = 0; i < frames_counter; i++)
ffffffff8010301a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80103021:	00 
ffffffff80103022:	48 8b 05 e7 3f 00 00 	mov    0x3fe7(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80103029:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8010302d:	73 7a                	jae    ffffffff801030a9 <_Z16frame_find_firstv+0x97>
  {
    if (frames[i] != 0xFFFFFFFF) // nothing free, exit early.
ffffffff8010302f:	48 8b 15 da 9f 01 00 	mov    0x19fda(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80103036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010303a:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8010303e:	48 01 d0             	add    %rdx,%rax
ffffffff80103041:	8b 00                	mov    (%rax),%eax
ffffffff80103043:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff80103046:	74 57                	je     ffffffff8010309f <_Z16frame_find_firstv+0x8d>
    {
      // at least one bit is free here.
      for (j = 0; j < 32; j++) {
ffffffff80103048:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8010304f:	00 
ffffffff80103050:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
ffffffff80103055:	77 48                	ja     ffffffff8010309f <_Z16frame_find_firstv+0x8d>
        uint32_t toTest = 0x1 << j;
ffffffff80103057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010305b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80103060:	89 c1                	mov    %eax,%ecx
ffffffff80103062:	d3 e2                	shl    %cl,%edx
ffffffff80103064:	89 d0                	mov    %edx,%eax
ffffffff80103066:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (!(frames[i] & toTest)) {
ffffffff80103069:	48 8b 15 a0 9f 01 00 	mov    0x19fa0(%rip),%rdx        # ffffffff8011d010 <frames>
ffffffff80103070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103074:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80103078:	48 01 d0             	add    %rdx,%rax
ffffffff8010307b:	8b 00                	mov    (%rax),%eax
ffffffff8010307d:	23 45 ec             	and    -0x14(%rbp),%eax
ffffffff80103080:	85 c0                	test   %eax,%eax
ffffffff80103082:	75 14                	jne    ffffffff80103098 <_Z16frame_find_firstv+0x86>
          return i*4*8+j;
ffffffff80103084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103088:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8010308c:	48 89 c2             	mov    %rax,%rdx
ffffffff8010308f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103093:	48 01 d0             	add    %rdx,%rax
ffffffff80103096:	eb 16                	jmp    ffffffff801030ae <_Z16frame_find_firstv+0x9c>
      for (j = 0; j < 32; j++) {
ffffffff80103098:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8010309d:	eb b1                	jmp    ffffffff80103050 <_Z16frame_find_firstv+0x3e>
  for (i = 0; i < frames_counter; i++)
ffffffff8010309f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff801030a4:	e9 79 ff ff ff       	jmpq   ffffffff80103022 <_Z16frame_find_firstv+0x10>
        }
      }
    }
  }
  return 0;
ffffffff801030a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff801030ae:	c9                   	leaveq 
ffffffff801030af:	c3                   	retq   

ffffffff801030b0 <_Z10free_framem>:


void free_frame(uint64_t ptr) {
ffffffff801030b0:	55                   	push   %rbp
ffffffff801030b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff801030b4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801030b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  frame_clear(ptr);
ffffffff801030bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801030c0:	48 89 c7             	mov    %rax,%rdi
ffffffff801030c3:	e8 04 fb ff ff       	callq  ffffffff80102bcc <_Z11frame_clearm>
}
ffffffff801030c8:	90                   	nop
ffffffff801030c9:	c9                   	leaveq 
ffffffff801030ca:	c3                   	retq   

ffffffff801030cb <_Z11alloc_framev>:

void* alloc_frame() {
ffffffff801030cb:	55                   	push   %rbp
ffffffff801030cc:	48 89 e5             	mov    %rsp,%rbp
ffffffff801030cf:	48 83 ec 10          	sub    $0x10,%rsp
  uint64_t frame = frame_find_first();
ffffffff801030d3:	e8 3a ff ff ff       	callq  ffffffff80103012 <_Z16frame_find_firstv>
ffffffff801030d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  if (frame == 0) {
ffffffff801030dc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff801030e1:	75 13                	jne    ffffffff801030f6 <_Z11alloc_framev+0x2b>
    com_write_str("error not enought frame :^(");
ffffffff801030e3:	48 c7 c7 3f 52 10 80 	mov    $0xffffffff8010523f,%rdi
ffffffff801030ea:	e8 da 12 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    return 0x0; // never reached
ffffffff801030ef:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff801030f4:	eb 18                	jmp    ffffffff8010310e <_Z11alloc_framev+0x43>
  }
  frame_set(frame * PAGE_SIZE);
ffffffff801030f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801030fa:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff801030fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80103101:	e8 e3 f8 ff ff       	callq  ffffffff801029e9 <_Z9frame_setm>
  return (void*)(frame * PAGE_SIZE);
ffffffff80103106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010310a:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff8010310e:	c9                   	leaveq 
ffffffff8010310f:	c3                   	retq   

ffffffff80103110 <_Z20alloc_multiple_framemb>:
void* alloc_multiple_frame(uint64_t count,  bool use_fast ){
ffffffff80103110:	55                   	push   %rbp
ffffffff80103111:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103114:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80103118:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
ffffffff8010311c:	89 f0                	mov    %esi,%eax
ffffffff8010311e:	88 45 94             	mov    %al,-0x6c(%rbp)
    if (use_fast){
ffffffff80103121:	80 7d 94 00          	cmpb   $0x0,-0x6c(%rbp)
ffffffff80103125:	0f 84 28 01 00 00    	je     ffffffff80103253 <_Z20alloc_multiple_framemb+0x143>
        if(frame_cursor_pos == 0){
ffffffff8010312b:	48 8b 05 f6 9e 01 00 	mov    0x19ef6(%rip),%rax        # ffffffff8011d028 <frame_cursor_pos>
ffffffff80103132:	48 85 c0             	test   %rax,%rax
ffffffff80103135:	75 0b                	jne    ffffffff80103142 <_Z20alloc_multiple_framemb+0x32>
            frame_cursor_pos = BITMAP_BASE;
ffffffff80103137:	48 c7 05 e6 9e 01 00 	movq   $0x1000,0x19ee6(%rip)        # ffffffff8011d028 <frame_cursor_pos>
ffffffff8010313e:	00 10 00 00 
        }
        size_t pg_cnt = count;
ffffffff80103142:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103146:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        uint64_t i = 0;
ffffffff8010314a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80103151:	00 
         for( i = 0; i < frames_counter;){
ffffffff80103152:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80103159:	00 
ffffffff8010315a:	48 8b 05 af 3e 00 00 	mov    0x3eaf(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80103161:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80103165:	0f 83 dc 00 00 00    	jae    ffffffff80103247 <_Z20alloc_multiple_framemb+0x137>
             if (frame_cursor_pos == BITMAP_BASE + frames_counter) {
ffffffff8010316b:	48 8b 05 9e 3e 00 00 	mov    0x3e9e(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80103172:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
ffffffff80103179:	48 8b 05 a8 9e 01 00 	mov    0x19ea8(%rip),%rax        # ffffffff8011d028 <frame_cursor_pos>
ffffffff80103180:	48 39 c2             	cmp    %rax,%rdx
ffffffff80103183:	75 13                	jne    ffffffff80103198 <_Z20alloc_multiple_framemb+0x88>
                       frame_cursor_pos = BITMAP_BASE;
ffffffff80103185:	48 c7 05 98 9e 01 00 	movq   $0x1000,0x19e98(%rip)        # ffffffff8011d028 <frame_cursor_pos>
ffffffff8010318c:	00 10 00 00 
                       pg_cnt = count;
ffffffff80103190:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103194:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                   }


            if (!test_frame_bit(( frame_cursor_pos++) - BITMAP_BASE)){
ffffffff80103198:	48 8b 05 89 9e 01 00 	mov    0x19e89(%rip),%rax        # ffffffff8011d028 <frame_cursor_pos>
ffffffff8010319f:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff801031a3:	48 89 15 7e 9e 01 00 	mov    %rdx,0x19e7e(%rip)        # ffffffff8011d028 <frame_cursor_pos>
ffffffff801031aa:	48 2d 00 10 00 00    	sub    $0x1000,%rax
ffffffff801031b0:	48 89 c7             	mov    %rax,%rdi
ffffffff801031b3:	e8 a6 f8 ff ff       	callq  ffffffff80102a5e <_Z14test_frame_bitm>
ffffffff801031b8:	85 c0                	test   %eax,%eax
ffffffff801031ba:	0f 94 c0             	sete   %al
ffffffff801031bd:	84 c0                	test   %al,%al
ffffffff801031bf:	74 79                	je     ffffffff8010323a <_Z20alloc_multiple_framemb+0x12a>
                if (!--pg_cnt){
ffffffff801031c1:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff801031c6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff801031cb:	0f 94 c0             	sete   %al
ffffffff801031ce:	84 c0                	test   %al,%al
ffffffff801031d0:	74 88                	je     ffffffff8010315a <_Z20alloc_multiple_framemb+0x4a>
                    set_frame_region(frame_cursor_pos - count, count);
ffffffff801031d2:	48 8b 05 4f 9e 01 00 	mov    0x19e4f(%rip),%rax        # ffffffff8011d028 <frame_cursor_pos>
ffffffff801031d9:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff801031dd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff801031e1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801031e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      i -= BITMAP_BASE;
ffffffff801031e9:	48 81 6d d8 00 10 00 	subq   $0x1000,-0x28(%rbp)
ffffffff801031f0:	00 
    size_t f = i + count;
ffffffff801031f1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff801031f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801031f9:	48 01 d0             	add    %rdx,%rax
ffffffff801031fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80103200:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103204:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80103208:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8010320c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80103210:	7e 13                	jle    ffffffff80103225 <_Z20alloc_multiple_framemb+0x115>
        set_frame_bit( j);
ffffffff80103212:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103216:	48 89 c7             	mov    %rax,%rdi
ffffffff80103219:	e8 70 f8 ff ff       	callq  ffffffff80102a8e <_Z13set_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff8010321e:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff80103223:	eb e3                	jmp    ffffffff80103208 <_Z20alloc_multiple_framemb+0xf8>
}
ffffffff80103225:	90                   	nop
                    return (void*)((frame_cursor_pos - count)*PAGE_SIZE);
ffffffff80103226:	48 8b 05 fb 9d 01 00 	mov    0x19dfb(%rip),%rax        # ffffffff8011d028 <frame_cursor_pos>
ffffffff8010322d:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff80103231:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103235:	e9 f9 00 00 00       	jmpq   ffffffff80103333 <_Z20alloc_multiple_framemb+0x223>
                }
            }else{
                pg_cnt = count;
ffffffff8010323a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8010323e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
         for( i = 0; i < frames_counter;){
ffffffff80103242:	e9 13 ff ff ff       	jmpq   ffffffff8010315a <_Z20alloc_multiple_framemb+0x4a>
            }
         }

         com_write_str("error kernel doesn't have that much memory (fast)");
ffffffff80103247:	48 c7 c7 60 52 10 80 	mov    $0xffffffff80105260,%rdi
ffffffff8010324e:	e8 76 11 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    }
    size_t pg_cnt = count;
ffffffff80103253:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103257:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    uint64_t i = BITMAP_BASE;
ffffffff8010325b:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
ffffffff80103262:	00 
     for( i = BITMAP_BASE; i < BITMAP_BASE+frames_counter;){
ffffffff80103263:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
ffffffff8010326a:	00 
ffffffff8010326b:	48 8b 05 9e 3d 00 00 	mov    0x3d9e(%rip),%rax        # ffffffff80107010 <frames_counter>
ffffffff80103272:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80103278:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8010327c:	0f 83 a0 00 00 00    	jae    ffffffff80103322 <_Z20alloc_multiple_framemb+0x212>
        if (!test_frame_bit((  i++) - BITMAP_BASE)){
ffffffff80103282:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103286:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8010328a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8010328e:	48 2d 00 10 00 00    	sub    $0x1000,%rax
ffffffff80103294:	48 89 c7             	mov    %rax,%rdi
ffffffff80103297:	e8 c2 f7 ff ff       	callq  ffffffff80102a5e <_Z14test_frame_bitm>
ffffffff8010329c:	85 c0                	test   %eax,%eax
ffffffff8010329e:	0f 94 c0             	sete   %al
ffffffff801032a1:	84 c0                	test   %al,%al
ffffffff801032a3:	74 70                	je     ffffffff80103315 <_Z20alloc_multiple_framemb+0x205>
            if (!--pg_cnt){
ffffffff801032a5:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
ffffffff801032aa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff801032af:	0f 94 c0             	sete   %al
ffffffff801032b2:	84 c0                	test   %al,%al
ffffffff801032b4:	74 b5                	je     ffffffff8010326b <_Z20alloc_multiple_framemb+0x15b>
                set_frame_region(i - count, count);
ffffffff801032b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801032ba:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff801032be:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff801032c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801032c6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      i -= BITMAP_BASE;
ffffffff801032ca:	48 81 6d b8 00 10 00 	subq   $0x1000,-0x48(%rbp)
ffffffff801032d1:	00 
    size_t f = i + count;
ffffffff801032d2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff801032d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801032da:	48 01 d0             	add    %rdx,%rax
ffffffff801032dd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff801032e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801032e5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff801032e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff801032ed:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff801032f1:	7e 13                	jle    ffffffff80103306 <_Z20alloc_multiple_framemb+0x1f6>
        set_frame_bit( j);
ffffffff801032f3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801032f7:	48 89 c7             	mov    %rax,%rdi
ffffffff801032fa:	e8 8f f7 ff ff       	callq  ffffffff80102a8e <_Z13set_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff801032ff:	48 83 45 a0 01       	addq   $0x1,-0x60(%rbp)
ffffffff80103304:	eb e3                	jmp    ffffffff801032e9 <_Z20alloc_multiple_framemb+0x1d9>
}
ffffffff80103306:	90                   	nop
                return (void*)((i - count)*PAGE_SIZE);
ffffffff80103307:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010330b:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff8010330f:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103313:	eb 1e                	jmp    ffffffff80103333 <_Z20alloc_multiple_framemb+0x223>
            }
        }else{
            pg_cnt = count;
ffffffff80103315:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103319:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
     for( i = BITMAP_BASE; i < BITMAP_BASE+frames_counter;){
ffffffff8010331d:	e9 49 ff ff ff       	jmpq   ffffffff8010326b <_Z20alloc_multiple_framemb+0x15b>
        }
     }

    com_write_str("error kernel doesn't have that much memory (no frame)");
ffffffff80103322:	48 c7 c7 98 52 10 80 	mov    $0xffffffff80105298,%rdi
ffffffff80103329:	e8 9b 10 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    return 0x0;
ffffffff8010332e:	b8 00 00 00 00       	mov    $0x0,%eax

}
ffffffff80103333:	c9                   	leaveq 
ffffffff80103334:	c3                   	retq   

ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>:
void* alloc_multiple_frame_zero(uint64_t count, bool use_fast ){
ffffffff80103335:	55                   	push   %rbp
ffffffff80103336:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103339:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8010333d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80103341:	89 f0                	mov    %esi,%eax
ffffffff80103343:	88 45 d4             	mov    %al,-0x2c(%rbp)
    void* d = alloc_multiple_frame(count,use_fast);
ffffffff80103346:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
ffffffff8010334a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010334e:	89 d6                	mov    %edx,%esi
ffffffff80103350:	48 89 c7             	mov    %rax,%rdi
ffffffff80103353:	e8 b8 fd ff ff       	callq  ffffffff80103110 <_Z20alloc_multiple_framemb>
ffffffff80103358:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    uint64_t* pages = ((uint64_t*)(get_mem_addr((uint64_t)d)));
ffffffff8010335c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103360:	48 89 c7             	mov    %rax,%rdi
ffffffff80103363:	e8 f4 f7 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103368:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(uint64_t i = 0; i < (count * PAGE_SIZE) / sizeof (uint64_t); i++){
ffffffff8010336c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80103373:	00 
ffffffff80103374:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103378:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010337c:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80103380:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80103384:	73 21                	jae    ffffffff801033a7 <_Z25alloc_multiple_frame_zeromb+0x72>

        pages[i] = 0;
ffffffff80103386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010338a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103391:	00 
ffffffff80103392:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103396:	48 01 d0             	add    %rdx,%rax
ffffffff80103399:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(uint64_t i = 0; i < (count * PAGE_SIZE) / sizeof (uint64_t); i++){
ffffffff801033a0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff801033a5:	eb cd                	jmp    ffffffff80103374 <_Z25alloc_multiple_frame_zeromb+0x3f>
    }
    return d;
ffffffff801033a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff801033ab:	c9                   	leaveq 
ffffffff801033ac:	c3                   	retq   

ffffffff801033ad <_Z11init_pagingP14stivale_struct>:
   *page |= flags;

}


void init_paging( stivale_struct* sti_struct){
ffffffff801033ad:	55                   	push   %rbp
ffffffff801033ae:	48 89 e5             	mov    %rsp,%rbp
ffffffff801033b1:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff801033b5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)

    com_write_str("loading paging 1");
ffffffff801033b9:	48 c7 c7 ce 52 10 80 	mov    $0xffffffff801052ce,%rdi
ffffffff801033c0:	e8 04 10 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    pl4_table = (uint64_t*) (get_mem_addr((uint64_t)alloc_multiple_frame_zero(1)));
ffffffff801033c5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801033ca:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff801033cf:	e8 61 ff ff ff       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff801033d4:	48 89 c7             	mov    %rax,%rdi
ffffffff801033d7:	e8 80 f7 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff801033dc:	48 89 05 1d ac 01 02 	mov    %rax,0x201ac1d(%rip)        # ffffffff8211e000 <_ZL9pl4_table>
    for (uint64_t i = 0; i < (0x2000000 / PAGE_SIZE); i++) {
ffffffff801033e3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff801033ea:	00 
ffffffff801033eb:	48 81 7d f8 ff 1f 00 	cmpq   $0x1fff,-0x8(%rbp)
ffffffff801033f2:	00 
ffffffff801033f3:	77 71                	ja     ffffffff80103466 <_Z11init_pagingP14stivale_struct+0xb9>
         uint64_t addr = i * PAGE_SIZE;
ffffffff801033f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801033f9:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff801033fd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
         virt_map( addr, addr, 0x03);
ffffffff80103401:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80103405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103409:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff8010340e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103411:	48 89 c7             	mov    %rax,%rdi
ffffffff80103414:	e8 29 05 00 00       	callq  ffffffff80103942 <_Z8virt_mapmmm>
         virt_map( addr,get_mem_addr(   addr), 0x03);
ffffffff80103419:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010341d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103420:	e8 37 f7 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103425:	48 89 c1             	mov    %rax,%rcx
ffffffff80103428:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010342c:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103431:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103434:	48 89 c7             	mov    %rax,%rdi
ffffffff80103437:	e8 06 05 00 00       	callq  ffffffff80103942 <_Z8virt_mapmmm>
         virt_map( addr,get_kern_addr( addr), 0x03 | (1 << 8));
ffffffff8010343c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103440:	48 89 c7             	mov    %rax,%rdi
ffffffff80103443:	e8 52 f7 ff ff       	callq  ffffffff80102b9a <_Z13get_kern_addrm>
ffffffff80103448:	48 89 c1             	mov    %rax,%rcx
ffffffff8010344b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010344f:	ba 03 01 00 00       	mov    $0x103,%edx
ffffffff80103454:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103457:	48 89 c7             	mov    %rax,%rdi
ffffffff8010345a:	e8 e3 04 00 00       	callq  ffffffff80103942 <_Z8virt_mapmmm>
    for (uint64_t i = 0; i < (0x2000000 / PAGE_SIZE); i++) {
ffffffff8010345f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80103464:	eb 85                	jmp    ffffffff801033eb <_Z11init_pagingP14stivale_struct+0x3e>
     }

    com_write_str("loading paging 2");
ffffffff80103466:	48 c7 c7 df 52 10 80 	mov    $0xffffffff801052df,%rdi
ffffffff8010346d:	e8 57 0f 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    set_paging_dir(get_rmem_addr((uint64_t)pl4_table));
ffffffff80103472:	48 8b 05 87 ab 01 02 	mov    0x201ab87(%rip),%rax        # ffffffff8211e000 <_ZL9pl4_table>
ffffffff80103479:	48 89 c7             	mov    %rax,%rdi
ffffffff8010347c:	e8 fa f6 ff ff       	callq  ffffffff80102b7b <_Z13get_rmem_addrm>
ffffffff80103481:	48 89 c7             	mov    %rax,%rdi
ffffffff80103484:	e8 ad 16 00 00       	callq  ffffffff80104b36 <_Z14set_paging_dirm>

    uint64_t framebuffer_lenght =sti_struct->framebuffer_width * sti_struct->framebuffer_height * sti_struct->framebuffer_bpp;
ffffffff80103489:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8010348d:	0f b7 40 22          	movzwl 0x22(%rax),%eax
ffffffff80103491:	0f b7 d0             	movzwl %ax,%edx
ffffffff80103494:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103498:	0f b7 40 24          	movzwl 0x24(%rax),%eax
ffffffff8010349c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010349f:	0f af d0             	imul   %eax,%edx
ffffffff801034a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801034a6:	0f b7 40 26          	movzwl 0x26(%rax),%eax
ffffffff801034aa:	0f b7 c0             	movzwl %ax,%eax
ffffffff801034ad:	0f af c2             	imul   %edx,%eax
ffffffff801034b0:	48 98                	cltq   
ffffffff801034b2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (uint64_t i = (sti_struct->framebuffer_addr)  / PAGE_SIZE; i < ((framebuffer_lenght + sti_struct->framebuffer_addr) / PAGE_SIZE) + 1; i++) {
ffffffff801034b6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801034ba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff801034be:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff801034c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff801034c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801034ca:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff801034ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801034d2:	48 01 d0             	add    %rdx,%rax
ffffffff801034d5:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff801034d9:	48 83 c0 01          	add    $0x1,%rax
ffffffff801034dd:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff801034e1:	73 36                	jae    ffffffff80103519 <_Z11init_pagingP14stivale_struct+0x16c>
        uint64_t addr = i * PAGE_SIZE;
ffffffff801034e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801034e7:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff801034eb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

        virt_map( addr,get_mem_addr(   addr), 0x03);
ffffffff801034ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff801034f3:	48 89 c7             	mov    %rax,%rdi
ffffffff801034f6:	e8 61 f6 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff801034fb:	48 89 c1             	mov    %rax,%rcx
ffffffff801034fe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103502:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103507:	48 89 ce             	mov    %rcx,%rsi
ffffffff8010350a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010350d:	e8 30 04 00 00       	callq  ffffffff80103942 <_Z8virt_mapmmm>
    for (uint64_t i = (sti_struct->framebuffer_addr)  / PAGE_SIZE; i < ((framebuffer_lenght + sti_struct->framebuffer_addr) / PAGE_SIZE) + 1; i++) {
ffffffff80103512:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80103517:	eb ad                	jmp    ffffffff801034c6 <_Z11init_pagingP14stivale_struct+0x119>

    }
    com_write_str("loading paging 3");
ffffffff80103519:	48 c7 c7 f0 52 10 80 	mov    $0xffffffff801052f0,%rdi
ffffffff80103520:	e8 a4 0e 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80103525:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103529:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010352d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    for(uint64_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80103531:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80103538:	00 
ffffffff80103539:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8010353d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103541:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80103545:	0f 83 d0 00 00 00    	jae    ffffffff8010361b <_Z11init_pagingP14stivale_struct+0x26e>

        e820_entry_t *entry = &mementry[i];
ffffffff8010354b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010354f:	48 89 d0             	mov    %rdx,%rax
ffffffff80103552:	48 01 c0             	add    %rax,%rax
ffffffff80103555:	48 01 d0             	add    %rdx,%rax
ffffffff80103558:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8010355c:	48 89 c2             	mov    %rax,%rdx
ffffffff8010355f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80103563:	48 01 d0             	add    %rdx,%rax
ffffffff80103566:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        uint64_t base_aligned = entry->base - (entry->base % 4096);
ffffffff8010356a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010356e:	48 8b 00             	mov    (%rax),%rax
ffffffff80103571:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80103577:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        uint64_t lenght_aligned = align_up(entry->length, 4096);
ffffffff8010357b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010357f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103583:	be 00 10 00 00       	mov    $0x1000,%esi
ffffffff80103588:	48 89 c7             	mov    %rax,%rdi
ffffffff8010358b:	e8 2a f4 ff ff       	callq  ffffffff801029ba <_Z8align_upmm>
ffffffff80103590:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

        if (entry->base % PAGE_SIZE)
ffffffff80103594:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103598:	48 8b 00             	mov    (%rax),%rax
ffffffff8010359b:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff801035a0:	48 85 c0             	test   %rax,%rax
ffffffff801035a3:	74 08                	je     ffffffff801035ad <_Z11init_pagingP14stivale_struct+0x200>
            lenght_aligned += PAGE_SIZE;
ffffffff801035a5:	48 81 45 e0 00 10 00 	addq   $0x1000,-0x20(%rbp)
ffffffff801035ac:	00 

        for (size_t j = 0; j * PAGE_SIZE < lenght_aligned; j++) {
ffffffff801035ad:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff801035b4:	00 
ffffffff801035b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801035b9:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff801035bd:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff801035c1:	76 4e                	jbe    ffffffff80103611 <_Z11init_pagingP14stivale_struct+0x264>
                size_t addr = base_aligned + j * PAGE_SIZE;
ffffffff801035c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801035c7:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff801035cb:	48 89 c2             	mov    %rax,%rdx
ffffffff801035ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff801035d2:	48 01 d0             	add    %rdx,%rax
ffffffff801035d5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

                   /* Skip over first 4 GiB */
                if (addr < 0xffffffff)
ffffffff801035d9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
ffffffff801035de:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
ffffffff801035e2:	7e 25                	jle    ffffffff80103609 <_Z11init_pagingP14stivale_struct+0x25c>
                       continue;

                virt_map( addr, get_mem_addr(  addr), 0x03);
ffffffff801035e4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801035e8:	48 89 c7             	mov    %rax,%rdi
ffffffff801035eb:	e8 6c f5 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff801035f0:	48 89 c1             	mov    %rax,%rcx
ffffffff801035f3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801035f7:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff801035fc:	48 89 ce             	mov    %rcx,%rsi
ffffffff801035ff:	48 89 c7             	mov    %rax,%rdi
ffffffff80103602:	e8 3b 03 00 00       	callq  ffffffff80103942 <_Z8virt_mapmmm>
ffffffff80103607:	eb 01                	jmp    ffffffff8010360a <_Z11init_pagingP14stivale_struct+0x25d>
                       continue;
ffffffff80103609:	90                   	nop
        for (size_t j = 0; j * PAGE_SIZE < lenght_aligned; j++) {
ffffffff8010360a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff8010360f:	eb a4                	jmp    ffffffff801035b5 <_Z11init_pagingP14stivale_struct+0x208>
    for(uint64_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80103611:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80103616:	e9 1e ff ff ff       	jmpq   ffffffff80103539 <_Z11init_pagingP14stivale_struct+0x18c>
        }

    }
    set_paging_dir((uint64_t)pl4_table);
ffffffff8010361b:	48 8b 05 de a9 01 02 	mov    0x201a9de(%rip),%rax        # ffffffff8211e000 <_ZL9pl4_table>
ffffffff80103622:	48 89 c7             	mov    %rax,%rdi
ffffffff80103625:	e8 0c 15 00 00       	callq  ffffffff80104b36 <_Z14set_paging_dirm>
    com_write_str("loading paging done");
ffffffff8010362a:	48 c7 c7 01 53 10 80 	mov    $0xffffffff80105301,%rdi
ffffffff80103631:	e8 93 0d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

}
ffffffff80103636:	90                   	nop
ffffffff80103637:	c9                   	leaveq 
ffffffff80103638:	c3                   	retq   

ffffffff80103639 <_Z19init_virtual_memoryP14stivale_struct>:
void init_virtual_memory(stivale_struct* sti_struct){
ffffffff80103639:	55                   	push   %rbp
ffffffff8010363a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010363d:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80103641:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80103645:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103649:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8010364d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    char buffer[64];
    memzero(buffer, sizeof(buffer));
ffffffff80103651:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103655:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010365a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010365d:	e8 b3 13 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff80103662:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80103669:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010366c:	48 63 d0             	movslq %eax,%rdx
ffffffff8010366f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103673:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103677:	48 39 c2             	cmp    %rax,%rdx
ffffffff8010367a:	0f 83 21 02 00 00    	jae    ffffffff801038a1 <_Z19init_virtual_memoryP14stivale_struct+0x268>
    {
        com_write_str(" ============== ");
ffffffff80103680:	48 c7 c7 15 53 10 80 	mov    $0xffffffff80105315,%rdi
ffffffff80103687:	e8 3d 0d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

        switch (mementry[i].type)
ffffffff8010368c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010368f:	48 63 d0             	movslq %eax,%rdx
ffffffff80103692:	48 89 d0             	mov    %rdx,%rax
ffffffff80103695:	48 01 c0             	add    %rax,%rax
ffffffff80103698:	48 01 d0             	add    %rdx,%rax
ffffffff8010369b:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8010369f:	48 89 c2             	mov    %rax,%rdx
ffffffff801036a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801036a6:	48 01 d0             	add    %rdx,%rax
ffffffff801036a9:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff801036ac:	83 f8 01             	cmp    $0x1,%eax
ffffffff801036af:	74 0c                	je     ffffffff801036bd <_Z19init_virtual_memoryP14stivale_struct+0x84>
ffffffff801036b1:	3d 01 10 00 00       	cmp    $0x1001,%eax
ffffffff801036b6:	74 13                	je     ffffffff801036cb <_Z19init_virtual_memoryP14stivale_struct+0x92>
            break;
        case MEMMAP_KERNEL_AND_MODULES:
            com_write_str("kernel");
            break;
        default:
            continue;
ffffffff801036b8:	e9 db 01 00 00       	jmpq   ffffffff80103898 <_Z19init_virtual_memoryP14stivale_struct+0x25f>
            com_write_str("memory usable");
ffffffff801036bd:	48 c7 c7 26 53 10 80 	mov    $0xffffffff80105326,%rdi
ffffffff801036c4:	e8 00 0d 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
            break;
ffffffff801036c9:	eb 0d                	jmp    ffffffff801036d8 <_Z19init_virtual_memoryP14stivale_struct+0x9f>
            com_write_str("kernel");
ffffffff801036cb:	48 c7 c7 34 53 10 80 	mov    $0xffffffff80105334,%rdi
ffffffff801036d2:	e8 f2 0c 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
            break;
ffffffff801036d7:	90                   	nop
            break;
        }
        max_mem += mementry[i].length;
ffffffff801036d8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801036db:	48 63 d0             	movslq %eax,%rdx
ffffffff801036de:	48 89 d0             	mov    %rdx,%rax
ffffffff801036e1:	48 01 c0             	add    %rax,%rax
ffffffff801036e4:	48 01 d0             	add    %rdx,%rax
ffffffff801036e7:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801036eb:	48 89 c2             	mov    %rax,%rdx
ffffffff801036ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801036f2:	48 01 d0             	add    %rdx,%rax
ffffffff801036f5:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff801036f9:	48 8b 05 00 99 01 00 	mov    0x19900(%rip),%rax        # ffffffff8011d000 <max_mem>
ffffffff80103700:	48 01 d0             	add    %rdx,%rax
ffffffff80103703:	48 89 05 f6 98 01 00 	mov    %rax,0x198f6(%rip)        # ffffffff8011d000 <max_mem>
        kitoaT<uint64_t>(buffer, 'x', mementry[i].base);
ffffffff8010370a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010370d:	48 63 d0             	movslq %eax,%rdx
ffffffff80103710:	48 89 d0             	mov    %rdx,%rax
ffffffff80103713:	48 01 c0             	add    %rax,%rax
ffffffff80103716:	48 01 d0             	add    %rdx,%rax
ffffffff80103719:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8010371d:	48 89 c2             	mov    %rax,%rdx
ffffffff80103720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103724:	48 01 d0             	add    %rdx,%rax
ffffffff80103727:	48 8b 10             	mov    (%rax),%rdx
ffffffff8010372a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010372e:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80103733:	48 89 c7             	mov    %rax,%rdi
ffffffff80103736:	e8 14 13 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
        com_write_str(" memory start : ");
ffffffff8010373b:	48 c7 c7 3b 53 10 80 	mov    $0xffffffff8010533b,%rdi
ffffffff80103742:	e8 82 0c 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff80103747:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010374b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010374e:	e8 76 0c 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff80103753:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103757:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010375c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010375f:	e8 b1 12 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
         kitoaT<uint64_t>(buffer, 'x', mementry[i].length + mementry[i].base);
ffffffff80103764:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103767:	48 63 d0             	movslq %eax,%rdx
ffffffff8010376a:	48 89 d0             	mov    %rdx,%rax
ffffffff8010376d:	48 01 c0             	add    %rax,%rax
ffffffff80103770:	48 01 d0             	add    %rdx,%rax
ffffffff80103773:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103777:	48 89 c2             	mov    %rax,%rdx
ffffffff8010377a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010377e:	48 01 d0             	add    %rdx,%rax
ffffffff80103781:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80103785:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103788:	48 63 d0             	movslq %eax,%rdx
ffffffff8010378b:	48 89 d0             	mov    %rdx,%rax
ffffffff8010378e:	48 01 c0             	add    %rax,%rax
ffffffff80103791:	48 01 d0             	add    %rdx,%rax
ffffffff80103794:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103798:	48 89 c2             	mov    %rax,%rdx
ffffffff8010379b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010379f:	48 01 d0             	add    %rdx,%rax
ffffffff801037a2:	48 8b 00             	mov    (%rax),%rax
ffffffff801037a5:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff801037a9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801037ad:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff801037b2:	48 89 c7             	mov    %rax,%rdi
ffffffff801037b5:	e8 95 12 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
        com_write_str(" memory end : ");
ffffffff801037ba:	48 c7 c7 4c 53 10 80 	mov    $0xffffffff8010534c,%rdi
ffffffff801037c1:	e8 03 0c 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff801037c6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801037ca:	48 89 c7             	mov    %rax,%rdi
ffffffff801037cd:	e8 f7 0b 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff801037d2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801037d6:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801037db:	48 89 c7             	mov    %rax,%rdi
ffffffff801037de:	e8 32 12 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buffer, 'x', mementry[i].length );
ffffffff801037e3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801037e6:	48 63 d0             	movslq %eax,%rdx
ffffffff801037e9:	48 89 d0             	mov    %rdx,%rax
ffffffff801037ec:	48 01 c0             	add    %rax,%rax
ffffffff801037ef:	48 01 d0             	add    %rdx,%rax
ffffffff801037f2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801037f6:	48 89 c2             	mov    %rax,%rdx
ffffffff801037f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801037fd:	48 01 d0             	add    %rdx,%rax
ffffffff80103800:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80103804:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103808:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010380d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103810:	e8 3a 12 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
        com_write_str(" memory lenght : ");
ffffffff80103815:	48 c7 c7 5b 53 10 80 	mov    $0xffffffff8010535b,%rdi
ffffffff8010381c:	e8 a8 0b 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff80103821:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103825:	48 89 c7             	mov    %rax,%rdi
ffffffff80103828:	e8 9c 0b 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff8010382d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103831:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103836:	48 89 c7             	mov    %rax,%rdi
ffffffff80103839:	e8 d7 11 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
        kitoaT<uint32_t>(buffer, 'x', mementry[i].type);
ffffffff8010383e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103841:	48 63 d0             	movslq %eax,%rdx
ffffffff80103844:	48 89 d0             	mov    %rdx,%rax
ffffffff80103847:	48 01 c0             	add    %rax,%rax
ffffffff8010384a:	48 01 d0             	add    %rdx,%rax
ffffffff8010384d:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103851:	48 89 c2             	mov    %rax,%rdx
ffffffff80103854:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103858:	48 01 d0             	add    %rdx,%rax
ffffffff8010385b:	8b 50 10             	mov    0x10(%rax),%edx
ffffffff8010385e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103862:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80103867:	48 89 c7             	mov    %rax,%rdi
ffffffff8010386a:	e8 72 13 00 00       	callq  ffffffff80104be1 <_Z6kitoaTIjEvPciT_>
        com_write_str(" memory type : ");
ffffffff8010386f:	48 c7 c7 6d 53 10 80 	mov    $0xffffffff8010536d,%rdi
ffffffff80103876:	e8 4e 0b 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff8010387b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010387f:	48 89 c7             	mov    %rax,%rdi
ffffffff80103882:	e8 42 0b 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff80103887:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010388b:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103890:	48 89 c7             	mov    %rax,%rdi
ffffffff80103893:	e8 7d 11 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff80103898:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff8010389c:	e9 c8 fd ff ff       	jmpq   ffffffff80103669 <_Z19init_virtual_memoryP14stivale_struct+0x30>
        
    }
    memzero(buffer, sizeof(buffer));
ffffffff801038a1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801038a5:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801038aa:	48 89 c7             	mov    %rax,%rdi
ffffffff801038ad:	e8 63 11 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
    kitoaT<uint64_t>(buffer, 'd', max_mem / 0xFFFFF);
ffffffff801038b2:	48 8b 0d 47 97 01 00 	mov    0x19747(%rip),%rcx        # ffffffff8011d000 <max_mem>
ffffffff801038b9:	48 ba 11 00 00 01 00 	movabs $0x100001000011,%rdx
ffffffff801038c0:	10 00 00 
ffffffff801038c3:	48 89 c8             	mov    %rcx,%rax
ffffffff801038c6:	48 f7 e2             	mul    %rdx
ffffffff801038c9:	48 89 c8             	mov    %rcx,%rax
ffffffff801038cc:	48 29 d0             	sub    %rdx,%rax
ffffffff801038cf:	48 d1 e8             	shr    %rax
ffffffff801038d2:	48 01 d0             	add    %rdx,%rax
ffffffff801038d5:	48 c1 e8 13          	shr    $0x13,%rax
ffffffff801038d9:	48 89 c2             	mov    %rax,%rdx
ffffffff801038dc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801038e0:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff801038e5:	48 89 c7             	mov    %rax,%rdi
ffffffff801038e8:	e8 62 11 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
    com_write_str(" kernel memory (in Mb): ");
ffffffff801038ed:	48 c7 c7 7d 53 10 80 	mov    $0xffffffff8010537d,%rdi
ffffffff801038f4:	e8 d0 0a 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(buffer);
ffffffff801038f9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801038fd:	48 89 c7             	mov    %rax,%rdi
ffffffff80103900:	e8 c4 0a 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>


    com_write_str("loading frame");
ffffffff80103905:	48 c7 c7 96 53 10 80 	mov    $0xffffffff80105396,%rdi
ffffffff8010390c:	e8 b8 0a 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_frame(max_mem, sti_struct);
ffffffff80103911:	48 8b 05 e8 96 01 00 	mov    0x196e8(%rip),%rax        # ffffffff8011d000 <max_mem>
ffffffff80103918:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8010391c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8010391f:	48 89 c7             	mov    %rax,%rdi
ffffffff80103922:	e8 6c f3 ff ff       	callq  ffffffff80102c93 <_Z10init_framemP14stivale_struct>



    com_write_str("loading paging");
ffffffff80103927:	48 c7 c7 a4 53 10 80 	mov    $0xffffffff801053a4,%rdi
ffffffff8010392e:	e8 96 0a 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    init_paging(sti_struct);
ffffffff80103933:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103937:	48 89 c7             	mov    %rax,%rdi
ffffffff8010393a:	e8 6e fa ff ff       	callq  ffffffff801033ad <_Z11init_pagingP14stivale_struct>


}
ffffffff8010393f:	90                   	nop
ffffffff80103940:	c9                   	leaveq 
ffffffff80103941:	c3                   	retq   

ffffffff80103942 <_Z8virt_mapmmm>:


void virt_map(uint64_t vaddress, uint64_t paddress, uint64_t flags ){
ffffffff80103942:	55                   	push   %rbp
ffffffff80103943:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103946:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8010394a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8010394e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80103952:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    
	uint64_t _pml4e_offset = PML4_GET_INDEX(vaddress);
ffffffff80103956:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010395a:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff8010395e:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103963:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	uint64_t _pdpt_offset  = PDPT_GET_INDEX(vaddress);
ffffffff80103967:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010396b:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff8010396f:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103974:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	uint64_t _pd_offset   = PAGE_DIR_GET_INDEX(vaddress);
ffffffff80103978:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010397c:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80103980:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103985:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    uint64_t _pt_offset = PAGE_TABLE_GET_INDEX(vaddress);
ffffffff80103989:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010398d:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103991:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80103996:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

    uint64_t* pdpt = 0x0;
ffffffff8010399a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff801039a1:	00 
    if(pl4_table[_pml4e_offset] & 0x1){
ffffffff801039a2:	48 8b 15 57 a6 01 02 	mov    0x201a657(%rip),%rdx        # ffffffff8211e000 <_ZL9pl4_table>
ffffffff801039a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801039ad:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801039b1:	48 01 d0             	add    %rdx,%rax
ffffffff801039b4:	48 8b 00             	mov    (%rax),%rax
ffffffff801039b7:	83 e0 01             	and    $0x1,%eax
ffffffff801039ba:	48 85 c0             	test   %rax,%rax
ffffffff801039bd:	74 29                	je     ffffffff801039e8 <_Z8virt_mapmmm+0xa6>

        pdpt =  (uint64_t *)get_mem_addr((pl4_table[_pml4e_offset] & 0xfffffffffffff000));
ffffffff801039bf:	48 8b 15 3a a6 01 02 	mov    0x201a63a(%rip),%rdx        # ffffffff8211e000 <_ZL9pl4_table>
ffffffff801039c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801039ca:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801039ce:	48 01 d0             	add    %rdx,%rax
ffffffff801039d1:	48 8b 00             	mov    (%rax),%rax
ffffffff801039d4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff801039da:	48 89 c7             	mov    %rax,%rdi
ffffffff801039dd:	e8 7a f1 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff801039e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff801039e6:	eb 40                	jmp    ffffffff80103a28 <_Z8virt_mapmmm+0xe6>
    }else{
        pdpt = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff801039e8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff801039ed:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff801039f2:	e8 3e f9 ff ff       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff801039f7:	48 89 c7             	mov    %rax,%rdi
ffffffff801039fa:	e8 5d f1 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff801039ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        pl4_table[_pml4e_offset] = (uint64_t)(get_rmem_addr((uint64_t)pdpt ) | 0b111);
ffffffff80103a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103a07:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a0a:	e8 6c f1 ff ff       	callq  ffffffff80102b7b <_Z13get_rmem_addrm>
ffffffff80103a0f:	48 8b 0d ea a5 01 02 	mov    0x201a5ea(%rip),%rcx        # ffffffff8211e000 <_ZL9pl4_table>
ffffffff80103a16:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80103a1a:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff80103a1e:	48 01 ca             	add    %rcx,%rdx
ffffffff80103a21:	48 83 c8 07          	or     $0x7,%rax
ffffffff80103a25:	48 89 02             	mov    %rax,(%rdx)
    }


    uint64_t* pd = 0x0;
ffffffff80103a28:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80103a2f:	00 
    if(pdpt[_pdpt_offset] & 0x1){
ffffffff80103a30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103a34:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103a3b:	00 
ffffffff80103a3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103a40:	48 01 d0             	add    %rdx,%rax
ffffffff80103a43:	48 8b 00             	mov    (%rax),%rax
ffffffff80103a46:	83 e0 01             	and    $0x1,%eax
ffffffff80103a49:	48 85 c0             	test   %rax,%rax
ffffffff80103a4c:	74 2a                	je     ffffffff80103a78 <_Z8virt_mapmmm+0x136>
        pd =  (uint64_t *)get_mem_addr((pdpt[_pdpt_offset] & 0xfffffffffffff000));
ffffffff80103a4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103a52:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103a59:	00 
ffffffff80103a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103a5e:	48 01 d0             	add    %rdx,%rax
ffffffff80103a61:	48 8b 00             	mov    (%rax),%rax
ffffffff80103a64:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80103a6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a6d:	e8 ea f0 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103a72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80103a76:	eb 41                	jmp    ffffffff80103ab9 <_Z8virt_mapmmm+0x177>
    }else{

        pd = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff80103a78:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80103a7d:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80103a82:	e8 ae f8 ff ff       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff80103a87:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a8a:	e8 cd f0 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103a8f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        pdpt[_pdpt_offset] = (uint64_t)(get_rmem_addr((uint64_t)pd ) | 0b111);
ffffffff80103a93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103a97:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a9a:	e8 dc f0 ff ff       	callq  ffffffff80102b7b <_Z13get_rmem_addrm>
ffffffff80103a9f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80103aa3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff80103aaa:	00 
ffffffff80103aab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80103aaf:	48 01 ca             	add    %rcx,%rdx
ffffffff80103ab2:	48 83 c8 07          	or     $0x7,%rax
ffffffff80103ab6:	48 89 02             	mov    %rax,(%rdx)
    }

    uint64_t* pt = 0x0;
ffffffff80103ab9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80103ac0:	00 
    if(pdpt[_pd_offset] & 0x1){
ffffffff80103ac1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103ac5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103acc:	00 
ffffffff80103acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103ad1:	48 01 d0             	add    %rdx,%rax
ffffffff80103ad4:	48 8b 00             	mov    (%rax),%rax
ffffffff80103ad7:	83 e0 01             	and    $0x1,%eax
ffffffff80103ada:	48 85 c0             	test   %rax,%rax
ffffffff80103add:	74 2a                	je     ffffffff80103b09 <_Z8virt_mapmmm+0x1c7>
        pt =  (uint64_t *)get_mem_addr((pd[_pd_offset] & 0xfffffffffffff000));
ffffffff80103adf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103ae3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103aea:	00 
ffffffff80103aeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103aef:	48 01 d0             	add    %rdx,%rax
ffffffff80103af2:	48 8b 00             	mov    (%rax),%rax
ffffffff80103af5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80103afb:	48 89 c7             	mov    %rax,%rdi
ffffffff80103afe:	e8 59 f0 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103b03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80103b07:	eb 41                	jmp    ffffffff80103b4a <_Z8virt_mapmmm+0x208>
    }else{

        pt = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff80103b09:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80103b0e:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80103b13:	e8 1d f8 ff ff       	callq  ffffffff80103335 <_Z25alloc_multiple_frame_zeromb>
ffffffff80103b18:	48 89 c7             	mov    %rax,%rdi
ffffffff80103b1b:	e8 3c f0 ff ff       	callq  ffffffff80102b5c <_Z12get_mem_addrm>
ffffffff80103b20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        pd[_pd_offset] = (uint64_t)(get_rmem_addr((uint64_t)pt ) | 0b111);
ffffffff80103b24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103b28:	48 89 c7             	mov    %rax,%rdi
ffffffff80103b2b:	e8 4b f0 ff ff       	callq  ffffffff80102b7b <_Z13get_rmem_addrm>
ffffffff80103b30:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80103b34:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff80103b3b:	00 
ffffffff80103b3c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80103b40:	48 01 ca             	add    %rcx,%rdx
ffffffff80103b43:	48 83 c8 07          	or     $0x7,%rax
ffffffff80103b47:	48 89 02             	mov    %rax,(%rdx)
    }
    pt[_pt_offset] = (uint64_t)(paddress | flags);
ffffffff80103b4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80103b4e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103b55:	00 
ffffffff80103b56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103b5a:	48 01 c2             	add    %rax,%rdx
ffffffff80103b5d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103b61:	48 0b 45 a8          	or     -0x58(%rbp),%rax
ffffffff80103b65:	48 89 02             	mov    %rax,(%rdx)

}
ffffffff80103b68:	90                   	nop
ffffffff80103b69:	c9                   	leaveq 
ffffffff80103b6a:	c3                   	retq   

ffffffff80103b6b <_Z8pic_initv>:
                  "1:\n\t" \
                  "    jmp 2f\n\t" \
                  "2:"); \
    } while (0)

void pic_init(){
ffffffff80103b6b:	55                   	push   %rbp
ffffffff80103b6c:	48 89 e5             	mov    %rsp,%rbp
    outb(PIC1_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff80103b6f:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80103b74:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80103b79:	e8 3b 11 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103b7e:	eb 00                	jmp    ffffffff80103b80 <_Z8pic_initv+0x15>
ffffffff80103b80:	eb 00                	jmp    ffffffff80103b82 <_Z8pic_initv+0x17>
	outb(PIC2_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff80103b82:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80103b87:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80103b8c:	e8 28 11 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103b91:	eb 00                	jmp    ffffffff80103b93 <_Z8pic_initv+0x28>
ffffffff80103b93:	eb 00                	jmp    ffffffff80103b95 <_Z8pic_initv+0x2a>

	outb(PIC1_DATA, PIC1_OFFSET); pic_wait();
ffffffff80103b95:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80103b9a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103b9f:	e8 15 11 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103ba4:	eb 00                	jmp    ffffffff80103ba6 <_Z8pic_initv+0x3b>
ffffffff80103ba6:	eb 00                	jmp    ffffffff80103ba8 <_Z8pic_initv+0x3d>
	outb(PIC2_DATA, PIC2_OFFSET); pic_wait();
ffffffff80103ba8:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80103bad:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80103bb2:	e8 02 11 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103bb7:	eb 00                	jmp    ffffffff80103bb9 <_Z8pic_initv+0x4e>
ffffffff80103bb9:	eb 00                	jmp    ffffffff80103bbb <_Z8pic_initv+0x50>

	outb(PIC1_DATA, 0x04); pic_wait();
ffffffff80103bbb:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80103bc0:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103bc5:	e8 ef 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103bca:	eb 00                	jmp    ffffffff80103bcc <_Z8pic_initv+0x61>
ffffffff80103bcc:	eb 00                	jmp    ffffffff80103bce <_Z8pic_initv+0x63>
	outb(PIC2_DATA, 0x02); pic_wait();
ffffffff80103bce:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80103bd3:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80103bd8:	e8 dc 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103bdd:	eb 00                	jmp    ffffffff80103bdf <_Z8pic_initv+0x74>
ffffffff80103bdf:	eb 00                	jmp    ffffffff80103be1 <_Z8pic_initv+0x76>

	outb(PIC1_DATA, 0x01); pic_wait();
ffffffff80103be1:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80103be6:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103beb:	e8 c9 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103bf0:	eb 00                	jmp    ffffffff80103bf2 <_Z8pic_initv+0x87>
ffffffff80103bf2:	eb 00                	jmp    ffffffff80103bf4 <_Z8pic_initv+0x89>
	outb(PIC2_DATA, 0x01); pic_wait();
ffffffff80103bf4:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80103bf9:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80103bfe:	e8 b6 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
ffffffff80103c03:	eb 00                	jmp    ffffffff80103c05 <_Z8pic_initv+0x9a>
ffffffff80103c05:	eb 00                	jmp    ffffffff80103c07 <_Z8pic_initv+0x9c>
    
	outb(PIC1_DATA, 0x00);
ffffffff80103c07:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80103c0c:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80103c11:	e8 a3 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
	outb(PIC2_DATA, 0x00);
ffffffff80103c16:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80103c1b:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80103c20:	e8 94 10 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
}
ffffffff80103c25:	90                   	nop
ffffffff80103c26:	5d                   	pop    %rbp
ffffffff80103c27:	c3                   	retq   

ffffffff80103c28 <_Z8init_idtv>:
void init_idt(){
ffffffff80103c28:	55                   	push   %rbp
ffffffff80103c29:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103c2c:	48 83 ec 10          	sub    $0x10,%rsp
    com_write_str("loading idt");
ffffffff80103c30:	48 c7 c7 b3 53 10 80 	mov    $0xffffffff801053b3,%rdi
ffffffff80103c37:	e8 8d 07 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("loading idt table");
ffffffff80103c3c:	48 c7 c7 bf 53 10 80 	mov    $0xffffffff801053bf,%rdi
ffffffff80103c43:	e8 81 07 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    for (int i = 0; i < 32+48; i++)
ffffffff80103c48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80103c4f:	83 7d fc 4f          	cmpl   $0x4f,-0x4(%rbp)
ffffffff80103c53:	0f 8f c0 00 00 00    	jg     ffffffff80103d19 <_Z8init_idtv+0xf1>
    {
        idt[i] = IDT_ENTRY(__interrupt_vector[i], 0x08, INTGATE);
ffffffff80103c59:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103c5c:	48 98                	cltq   
ffffffff80103c5e:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff80103c65:	80 
ffffffff80103c66:	89 c6                	mov    %eax,%esi
ffffffff80103c68:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103c6b:	48 98                	cltq   
ffffffff80103c6d:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff80103c74:	80 
ffffffff80103c75:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80103c79:	89 c1                	mov    %eax,%ecx
ffffffff80103c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103c7e:	48 98                	cltq   
ffffffff80103c80:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff80103c87:	80 
ffffffff80103c88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80103c8c:	89 c2                	mov    %eax,%edx
ffffffff80103c8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103c91:	48 98                	cltq   
ffffffff80103c93:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103c97:	48 05 40 e1 11 82    	add    $0xffffffff8211e140,%rax
ffffffff80103c9d:	66 89 30             	mov    %si,(%rax)
ffffffff80103ca0:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103ca3:	48 98                	cltq   
ffffffff80103ca5:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103ca9:	48 05 42 e1 11 82    	add    $0xffffffff8211e142,%rax
ffffffff80103caf:	66 c7 00 08 00       	movw   $0x8,(%rax)
ffffffff80103cb4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103cb7:	48 98                	cltq   
ffffffff80103cb9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103cbd:	48 05 44 e1 11 82    	add    $0xffffffff8211e144,%rax
ffffffff80103cc3:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80103cc6:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103cc9:	48 98                	cltq   
ffffffff80103ccb:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103ccf:	48 05 45 e1 11 82    	add    $0xffffffff8211e145,%rax
ffffffff80103cd5:	c6 00 8e             	movb   $0x8e,(%rax)
ffffffff80103cd8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103cdb:	48 98                	cltq   
ffffffff80103cdd:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103ce1:	48 05 46 e1 11 82    	add    $0xffffffff8211e146,%rax
ffffffff80103ce7:	66 89 08             	mov    %cx,(%rax)
ffffffff80103cea:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103ced:	48 98                	cltq   
ffffffff80103cef:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103cf3:	48 05 48 e1 11 82    	add    $0xffffffff8211e148,%rax
ffffffff80103cf9:	89 10                	mov    %edx,(%rax)
ffffffff80103cfb:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103cfe:	48 98                	cltq   
ffffffff80103d00:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80103d04:	48 05 4c e1 11 82    	add    $0xffffffff8211e14c,%rax
ffffffff80103d0a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    for (int i = 0; i < 32+48; i++)
ffffffff80103d10:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80103d14:	e9 36 ff ff ff       	jmpq   ffffffff80103c4f <_Z8init_idtv+0x27>
    }
    
    com_write_str("loading idt idt_flush");
ffffffff80103d19:	48 c7 c7 d1 53 10 80 	mov    $0xffffffff801053d1,%rdi
ffffffff80103d20:	e8 a4 06 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
     asm volatile("lidt [%0]" : : "m" (idt_descriptor));
ffffffff80103d25:	0f 01 1d f4 32 00 00 	lidt   0x32f4(%rip)        # ffffffff80107020 <_ZL14idt_descriptor>
    com_write_str("loading pic");
ffffffff80103d2c:	48 c7 c7 e7 53 10 80 	mov    $0xffffffff801053e7,%rdi
ffffffff80103d33:	e8 91 06 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    pic_init();
ffffffff80103d38:	e8 2e fe ff ff       	callq  ffffffff80103b6b <_Z8pic_initv>
    com_write_str("loading pic : OK");
ffffffff80103d3d:	48 c7 c7 f3 53 10 80 	mov    $0xffffffff801053f3,%rdi
ffffffff80103d44:	e8 80 06 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str("loading idt : OK");
ffffffff80103d49:	48 c7 c7 04 54 10 80 	mov    $0xffffffff80105404,%rdi
ffffffff80103d50:	e8 74 06 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    
    com_write_str("turning on interrupt : OK ");
ffffffff80103d55:	48 c7 c7 15 54 10 80 	mov    $0xffffffff80105415,%rdi
ffffffff80103d5c:	e8 68 06 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
};
ffffffff80103d61:	90                   	nop
ffffffff80103d62:	c9                   	leaveq 
ffffffff80103d63:	c3                   	retq   

ffffffff80103d64 <_Z5dump1mPKc>:
    "Reserved",
    "Reserved"
};

char buff2[64];
void dump1(uint64_t reg, const char* name){
ffffffff80103d64:	55                   	push   %rbp
ffffffff80103d65:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103d68:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80103d6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80103d70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
     memzero(buff2, 64);
ffffffff80103d74:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103d79:	48 c7 c7 20 e0 11 82 	mov    $0xffffffff8211e020,%rdi
ffffffff80103d80:	e8 90 0c 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buff2, 'x',reg);
ffffffff80103d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103d89:	48 89 c2             	mov    %rax,%rdx
ffffffff80103d8c:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80103d91:	48 c7 c7 20 e0 11 82 	mov    $0xffffffff8211e020,%rdi
ffffffff80103d98:	e8 b2 0c 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
        com_write_strl(" | ");
ffffffff80103d9d:	48 c7 c7 6c 55 10 80 	mov    $0xffffffff8010556c,%rdi
ffffffff80103da4:	e8 7e 06 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
        com_write_strl(name);
ffffffff80103da9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103dad:	48 89 c7             	mov    %rax,%rdi
ffffffff80103db0:	e8 72 06 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
        com_write_strl(" = ");
ffffffff80103db5:	48 c7 c7 70 55 10 80 	mov    $0xffffffff80105570,%rdi
ffffffff80103dbc:	e8 66 06 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
        com_write_strl("0x");
ffffffff80103dc1:	48 c7 c7 74 55 10 80 	mov    $0xffffffff80105574,%rdi
ffffffff80103dc8:	e8 5a 06 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
        com_write_strl(buff2);
ffffffff80103dcd:	48 c7 c7 20 e0 11 82 	mov    $0xffffffff8211e020,%rdi
ffffffff80103dd4:	e8 4e 06 00 00       	callq  ffffffff80104427 <_Z14com_write_strlPKc>
}
ffffffff80103dd9:	90                   	nop
ffffffff80103dda:	c9                   	leaveq 
ffffffff80103ddb:	c3                   	retq   

ffffffff80103ddc <_Z12dumpregisterP19InterruptStackFrame>:
void dumpregister(InterruptStackFrame* stck){
ffffffff80103ddc:	55                   	push   %rbp
ffffffff80103ddd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103de0:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80103de4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    // this is the least readable code EVER
    com_write_str(" ===== cpu dump =====");
ffffffff80103de8:	48 c7 c7 77 55 10 80 	mov    $0xffffffff80105577,%rdi
ffffffff80103def:	e8 d5 05 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(" ===== cs and ss =====");
ffffffff80103df4:	48 c7 c7 8d 55 10 80 	mov    $0xffffffff8010558d,%rdi
ffffffff80103dfb:	e8 c9 05 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->cs, "cs");
ffffffff80103e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e04:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80103e0b:	48 c7 c6 a4 55 10 80 	mov    $0xffffffff801055a4,%rsi
ffffffff80103e12:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e15:	e8 4a ff ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->ss, "ss");
ffffffff80103e1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e1e:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff80103e25:	48 c7 c6 a7 55 10 80 	mov    $0xffffffff801055a7,%rsi
ffffffff80103e2c:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e2f:	e8 30 ff ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103e34:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103e3b:	e8 89 05 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(" ===== rx =====");
ffffffff80103e40:	48 c7 c7 ac 55 10 80 	mov    $0xffffffff801055ac,%rdi
ffffffff80103e47:	e8 7d 05 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->r8, "r8");
ffffffff80103e4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e50:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80103e54:	48 c7 c6 bc 55 10 80 	mov    $0xffffffff801055bc,%rsi
ffffffff80103e5b:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e5e:	e8 01 ff ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->r9, "r9");
ffffffff80103e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e67:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80103e6b:	48 c7 c6 bf 55 10 80 	mov    $0xffffffff801055bf,%rsi
ffffffff80103e72:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e75:	e8 ea fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->r10, "r10");
ffffffff80103e7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103e7e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80103e82:	48 c7 c6 c2 55 10 80 	mov    $0xffffffff801055c2,%rsi
ffffffff80103e89:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e8c:	e8 d3 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103e91:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103e98:	e8 2c 05 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->r11, "r11");
ffffffff80103e9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ea1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80103ea5:	48 c7 c6 c6 55 10 80 	mov    $0xffffffff801055c6,%rsi
ffffffff80103eac:	48 89 c7             	mov    %rax,%rdi
ffffffff80103eaf:	e8 b0 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->r12, "r12");
ffffffff80103eb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103eb8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80103ebc:	48 c7 c6 ca 55 10 80 	mov    $0xffffffff801055ca,%rsi
ffffffff80103ec3:	48 89 c7             	mov    %rax,%rdi
ffffffff80103ec6:	e8 99 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->r13, "r13");
ffffffff80103ecb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ecf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103ed3:	48 c7 c6 ce 55 10 80 	mov    $0xffffffff801055ce,%rsi
ffffffff80103eda:	48 89 c7             	mov    %rax,%rdi
ffffffff80103edd:	e8 82 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103ee2:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103ee9:	e8 db 04 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->r14, "r14");
ffffffff80103eee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ef2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103ef6:	48 c7 c6 d2 55 10 80 	mov    $0xffffffff801055d2,%rsi
ffffffff80103efd:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f00:	e8 5f fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->r15, "r15");
ffffffff80103f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f09:	48 8b 00             	mov    (%rax),%rax
ffffffff80103f0c:	48 c7 c6 d6 55 10 80 	mov    $0xffffffff801055d6,%rsi
ffffffff80103f13:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f16:	e8 49 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103f1b:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103f22:	e8 a2 04 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(" ===== utility =====");
ffffffff80103f27:	48 c7 c7 da 55 10 80 	mov    $0xffffffff801055da,%rdi
ffffffff80103f2e:	e8 96 04 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->rsp, "rsp");
ffffffff80103f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f37:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80103f3e:	48 c7 c6 ef 55 10 80 	mov    $0xffffffff801055ef,%rsi
ffffffff80103f45:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f48:	e8 17 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rbp, "rbp");
ffffffff80103f4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f51:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80103f55:	48 c7 c6 f3 55 10 80 	mov    $0xffffffff801055f3,%rsi
ffffffff80103f5c:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f5f:	e8 00 fe ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rdi, "rdi");
ffffffff80103f64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f68:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80103f6c:	48 c7 c6 f7 55 10 80 	mov    $0xffffffff801055f7,%rsi
ffffffff80103f73:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f76:	e8 e9 fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103f7b:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103f82:	e8 42 04 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->rsi, "rsi");
ffffffff80103f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103f8b:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80103f8f:	48 c7 c6 fb 55 10 80 	mov    $0xffffffff801055fb,%rsi
ffffffff80103f96:	48 89 c7             	mov    %rax,%rdi
ffffffff80103f99:	e8 c6 fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rdx, "rdx");
ffffffff80103f9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103fa2:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80103fa6:	48 c7 c6 ff 55 10 80 	mov    $0xffffffff801055ff,%rsi
ffffffff80103fad:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fb0:	e8 af fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rcx, "rcx");
ffffffff80103fb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103fb9:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80103fbd:	48 c7 c6 03 56 10 80 	mov    $0xffffffff80105603,%rsi
ffffffff80103fc4:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fc7:	e8 98 fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80103fcc:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80103fd3:	e8 f1 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->rbx, "rbx");
ffffffff80103fd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103fdc:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80103fe0:	48 c7 c6 07 56 10 80 	mov    $0xffffffff80105607,%rsi
ffffffff80103fe7:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fea:	e8 75 fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rax, "rax");
ffffffff80103fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103ff3:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80103ff7:	48 c7 c6 0b 56 10 80 	mov    $0xffffffff8010560b,%rsi
ffffffff80103ffe:	48 89 c7             	mov    %rax,%rdi
ffffffff80104001:	e8 5e fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80104006:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff8010400d:	e8 b7 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(" ===== other =====");
ffffffff80104012:	48 c7 c7 0f 56 10 80 	mov    $0xffffffff8010560f,%rdi
ffffffff80104019:	e8 ab 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->error_code, "error_code");
ffffffff8010401e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104022:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80104025:	89 c0                	mov    %eax,%eax
ffffffff80104027:	48 c7 c6 22 56 10 80 	mov    $0xffffffff80105622,%rsi
ffffffff8010402e:	48 89 c7             	mov    %rax,%rdi
ffffffff80104031:	e8 2e fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->int_no, "int_no");
ffffffff80104036:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010403a:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff8010403d:	89 c0                	mov    %eax,%eax
ffffffff8010403f:	48 c7 c6 2d 56 10 80 	mov    $0xffffffff8010562d,%rsi
ffffffff80104046:	48 89 c7             	mov    %rax,%rdi
ffffffff80104049:	e8 16 fd ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff8010404e:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80104055:	e8 6f 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    dump1(stck->rip, "rip");
ffffffff8010405a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010405e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104065:	48 c7 c6 34 56 10 80 	mov    $0xffffffff80105634,%rsi
ffffffff8010406c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010406f:	e8 f0 fc ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    dump1(stck->rflags, "rflags");
ffffffff80104074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104078:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff8010407f:	48 c7 c6 38 56 10 80 	mov    $0xffffffff80105638,%rsi
ffffffff80104086:	48 89 c7             	mov    %rax,%rdi
ffffffff80104089:	e8 d6 fc ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff8010408e:	48 c7 c7 aa 55 10 80 	mov    $0xffffffff801055aa,%rdi
ffffffff80104095:	e8 2f 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    com_write_str(" ===== CRX =====");
ffffffff8010409a:	48 c7 c7 3f 56 10 80 	mov    $0xffffffff8010563f,%rdi
ffffffff801040a1:	e8 23 03 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

    uint64_t CRX;
    asm volatile("mov %%cr2, %0" : "=r" (CRX));
ffffffff801040a6:	0f 22 d0             	mov    %rax,%cr2
ffffffff801040a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dump1(CRX, "CR2");
ffffffff801040ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801040b1:	48 c7 c6 50 56 10 80 	mov    $0xffffffff80105650,%rsi
ffffffff801040b8:	48 89 c7             	mov    %rax,%rdi
ffffffff801040bb:	e8 a4 fc ff ff       	callq  ffffffff80103d64 <_Z5dump1mPKc>
}
ffffffff801040c0:	90                   	nop
ffffffff801040c1:	c9                   	leaveq 
ffffffff801040c2:	c3                   	retq   

ffffffff801040c3 <_Z7pic_acki>:
void pic_ack(int intno)
{
ffffffff801040c3:	55                   	push   %rbp
ffffffff801040c4:	48 89 e5             	mov    %rsp,%rbp
ffffffff801040c7:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801040cb:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if (intno >= 40)
ffffffff801040ce:	83 7d fc 27          	cmpl   $0x27,-0x4(%rbp)
ffffffff801040d2:	7e 0f                	jle    ffffffff801040e3 <_Z7pic_acki+0x20>
	{
		outb(0xA0, 0x20);
ffffffff801040d4:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801040d9:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff801040de:	e8 d6 0b 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
	}

	outb(0x20, 0x20);
ffffffff801040e3:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801040e8:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff801040ed:	e8 c7 0b 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
}
ffffffff801040f2:	90                   	nop
ffffffff801040f3:	c9                   	leaveq 
ffffffff801040f4:	c3                   	retq   

ffffffff801040f5 <_Z8is_errori>:
    char buff[64];
bool is_error(int intno){
ffffffff801040f5:	55                   	push   %rbp
ffffffff801040f6:	48 89 e5             	mov    %rsp,%rbp
ffffffff801040f9:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801040fd:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (intno > 31)
ffffffff80104100:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff80104104:	7e 07                	jle    ffffffff8010410d <_Z8is_errori+0x18>
    {
        return false;
ffffffff80104106:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8010410b:	eb 2a                	jmp    ffffffff80104137 <_Z8is_errori+0x42>
    }
    // yeah i should do an array 
    if (intno == 1 || intno == 15 || (intno >= 21 && intno <= 29) || intno == 31)
ffffffff8010410d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff80104111:	74 18                	je     ffffffff8010412b <_Z8is_errori+0x36>
ffffffff80104113:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
ffffffff80104117:	74 12                	je     ffffffff8010412b <_Z8is_errori+0x36>
ffffffff80104119:	83 7d fc 14          	cmpl   $0x14,-0x4(%rbp)
ffffffff8010411d:	7e 06                	jle    ffffffff80104125 <_Z8is_errori+0x30>
ffffffff8010411f:	83 7d fc 1d          	cmpl   $0x1d,-0x4(%rbp)
ffffffff80104123:	7e 06                	jle    ffffffff8010412b <_Z8is_errori+0x36>
ffffffff80104125:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff80104129:	75 07                	jne    ffffffff80104132 <_Z8is_errori+0x3d>
    {
        return false;
ffffffff8010412b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80104130:	eb 05                	jmp    ffffffff80104137 <_Z8is_errori+0x42>
    }
    return true;
ffffffff80104132:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff80104137:	c9                   	leaveq 
ffffffff80104138:	c3                   	retq   

ffffffff80104139 <_Z7add_ripm>:
uint64_t rip_count[16];
uint32_t rip_counter = 0;
void add_rip(uint64_t addr){
ffffffff80104139:	55                   	push   %rbp
ffffffff8010413a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010413d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104141:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    rip_count[rip_counter++] = addr;
ffffffff80104145:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104149:	8b 15 d1 9f 01 02    	mov    0x2019fd1(%rip),%edx        # ffffffff8211e120 <rip_counter>
ffffffff8010414f:	8d 4a 01             	lea    0x1(%rdx),%ecx
ffffffff80104152:	89 0d c8 9f 01 02    	mov    %ecx,0x2019fc8(%rip)        # ffffffff8211e120 <rip_counter>
ffffffff80104158:	89 d2                	mov    %edx,%edx
ffffffff8010415a:	48 89 04 d5 a0 e0 11 	mov    %rax,-0x7dee1f60(,%rdx,8)
ffffffff80104161:	82 
    if(rip_counter == 15){
ffffffff80104162:	8b 05 b8 9f 01 02    	mov    0x2019fb8(%rip),%eax        # ffffffff8211e120 <rip_counter>
ffffffff80104168:	83 f8 0f             	cmp    $0xf,%eax
ffffffff8010416b:	75 0a                	jne    ffffffff80104177 <_Z7add_ripm+0x3e>
        rip_counter= 0;
ffffffff8010416d:	c7 05 a9 9f 01 02 00 	movl   $0x0,0x2019fa9(%rip)        # ffffffff8211e120 <rip_counter>
ffffffff80104174:	00 00 00 
    }
}
ffffffff80104177:	90                   	nop
ffffffff80104178:	c9                   	leaveq 
ffffffff80104179:	c3                   	retq   

ffffffff8010417a <interrupts_handler>:

static int dd = 0;
extern "C" void interrupts_handler( InterruptStackFrame* stackframe){
ffffffff8010417a:	55                   	push   %rbp
ffffffff8010417b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010417e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104182:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    add_rip(stackframe->rip);
ffffffff80104186:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010418a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104191:	48 89 c7             	mov    %rax,%rdi
ffffffff80104194:	e8 a0 ff ff ff       	callq  ffffffff80104139 <_Z7add_ripm>
    if (is_error(stackframe->int_no))
ffffffff80104199:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010419d:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801041a0:	89 c7                	mov    %eax,%edi
ffffffff801041a2:	e8 4e ff ff ff       	callq  ffffffff801040f5 <_Z8is_errori>
ffffffff801041a7:	84 c0                	test   %al,%al
ffffffff801041a9:	0f 84 5e 01 00 00    	je     ffffffff8010430d <interrupts_handler+0x193>
    {
        for(int i = 0; i < stackframe->int_no * 320; i++){
ffffffff801041af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff801041b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801041ba:	8b 50 7c             	mov    0x7c(%rax),%edx
ffffffff801041bd:	89 d0                	mov    %edx,%eax
ffffffff801041bf:	c1 e0 02             	shl    $0x2,%eax
ffffffff801041c2:	01 d0                	add    %edx,%eax
ffffffff801041c4:	c1 e0 06             	shl    $0x6,%eax
ffffffff801041c7:	89 c2                	mov    %eax,%edx
ffffffff801041c9:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801041cc:	39 c2                	cmp    %eax,%edx
ffffffff801041ce:	76 14                	jbe    ffffffff801041e4 <interrupts_handler+0x6a>
            is_error(stackframe->int_no);
ffffffff801041d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801041d4:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801041d7:	89 c7                	mov    %eax,%edi
ffffffff801041d9:	e8 17 ff ff ff       	callq  ffffffff801040f5 <_Z8is_errori>
        for(int i = 0; i < stackframe->int_no * 320; i++){
ffffffff801041de:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff801041e2:	eb d2                	jmp    ffffffff801041b6 <interrupts_handler+0x3c>
        }

        memzero(buff, 64);
ffffffff801041e4:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801041e9:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff801041f0:	e8 20 08 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
        kitoa(buff, 'd', stackframe->int_no);
ffffffff801041f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801041f9:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801041fc:	89 c2                	mov    %eax,%edx
ffffffff801041fe:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff80104203:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff8010420a:	e8 cb 0a 00 00       	callq  ffffffff80104cda <_Z5kitoaPcii>

        com_write_str("id :");
ffffffff8010420f:	48 c7 c7 54 56 10 80 	mov    $0xffffffff80105654,%rdi
ffffffff80104216:	e8 ae 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buff);
ffffffff8010421b:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff80104222:	e8 a2 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str("error fatal");
ffffffff80104227:	48 c7 c7 59 56 10 80 	mov    $0xffffffff80105659,%rdi
ffffffff8010422e:	e8 96 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(exception_messages[stackframe->int_no]);
ffffffff80104233:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104237:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff8010423a:	89 c0                	mov    %eax,%eax
ffffffff8010423c:	48 8b 04 c5 40 70 10 	mov    -0x7fef8fc0(,%rax,8),%rax
ffffffff80104243:	80 
ffffffff80104244:	48 89 c7             	mov    %rax,%rdi
ffffffff80104247:	e8 7d 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        dumpregister(stackframe);
ffffffff8010424c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104250:	48 89 c7             	mov    %rax,%rdi
ffffffff80104253:	e8 84 fb ff ff       	callq  ffffffff80103ddc <_Z12dumpregisterP19InterruptStackFrame>
        memzero(buff, 64);
ffffffff80104258:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010425d:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff80104264:	e8 ac 07 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buff, 'x', stackframe->rip);
ffffffff80104269:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010426d:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104274:	48 89 c2             	mov    %rax,%rdx
ffffffff80104277:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010427c:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff80104283:	e8 c7 07 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
        com_write_str(" ===== ");
ffffffff80104288:	48 c7 c7 65 56 10 80 	mov    $0xffffffff80105665,%rdi
ffffffff8010428f:	e8 35 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str("rip :");
ffffffff80104294:	48 c7 c7 6d 56 10 80 	mov    $0xffffffff8010566d,%rdi
ffffffff8010429b:	e8 29 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        com_write_str(buff);
ffffffff801042a0:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff801042a7:	e8 1d 01 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        for(uint64_t iz = 0; iz < 16; iz ++){
ffffffff801042ac:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801042b3:	00 
ffffffff801042b4:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff801042b9:	77 50                	ja     ffffffff8010430b <interrupts_handler+0x191>

            memzero(buff, 64);
ffffffff801042bb:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801042c0:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff801042c7:	e8 49 07 00 00       	callq  ffffffff80104a15 <_Z7memzeroPvm>
            kitoaT<uint64_t>(buff, 'x', rip_count[iz]);
ffffffff801042cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801042d0:	48 8b 04 c5 a0 e0 11 	mov    -0x7dee1f60(,%rax,8),%rax
ffffffff801042d7:	82 
ffffffff801042d8:	48 89 c2             	mov    %rax,%rdx
ffffffff801042db:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff801042e0:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff801042e7:	e8 63 07 00 00       	callq  ffffffff80104a4f <_Z6kitoaTImEvPciT_>
            com_write_str("rip :");
ffffffff801042ec:	48 c7 c7 6d 56 10 80 	mov    $0xffffffff8010566d,%rdi
ffffffff801042f3:	e8 d1 00 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
            com_write_str(buff);
ffffffff801042f8:	48 c7 c7 60 e0 11 82 	mov    $0xffffffff8211e060,%rdi
ffffffff801042ff:	e8 c5 00 00 00       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        for(uint64_t iz = 0; iz < 16; iz ++){
ffffffff80104304:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80104309:	eb a9                	jmp    ffffffff801042b4 <interrupts_handler+0x13a>
        }
        while(true){
ffffffff8010430b:	eb fe                	jmp    ffffffff8010430b <interrupts_handler+0x191>

        }
    }
    if(stackframe->int_no == 32){
ffffffff8010430d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104311:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104314:	83 f8 20             	cmp    $0x20,%eax
ffffffff80104317:	75 19                	jne    ffffffff80104332 <interrupts_handler+0x1b8>
        PIT::the()->update();
ffffffff80104319:	e8 48 03 00 00       	callq  ffffffff80104666 <_ZN3PIT3theEv>
ffffffff8010431e:	48 89 c7             	mov    %rax,%rdi
ffffffff80104321:	e8 d2 02 00 00       	callq  ffffffff801045f8 <_ZN3PIT6updateEv>
        irq_0_process_handler(stackframe);
ffffffff80104326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010432a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010432d:	e8 5f d7 ff ff       	callq  ffffffff80101a91 <_Z21irq_0_process_handlerP19InterruptStackFrame>

    }

    pic_ack(stackframe->int_no);
ffffffff80104332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104336:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104339:	89 c7                	mov    %eax,%edi
ffffffff8010433b:	e8 83 fd ff ff       	callq  ffffffff801040c3 <_Z7pic_acki>
}
ffffffff80104340:	90                   	nop
ffffffff80104341:	c9                   	leaveq 
ffffffff80104342:	c3                   	retq   

ffffffff80104343 <_Z8com_putc8COM_PORTc>:
    while ((inb(port + 5) & 0x20) == 0)
    { 
    }
}
void com_putc(COM_PORT port, char c)
{
ffffffff80104343:	55                   	push   %rbp
ffffffff80104344:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104347:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010434b:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff8010434e:	89 f0                	mov    %esi,%eax
ffffffff80104350:	88 45 f8             	mov    %al,-0x8(%rbp)
    com_wait_write(port);
ffffffff80104353:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104356:	89 c7                	mov    %eax,%edi
ffffffff80104358:	e8 b6 0a 00 00       	callq  ffffffff80104e13 <_Z14com_wait_write8COM_PORT>
    outb(port, c); 
ffffffff8010435d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80104361:	0f b6 d0             	movzbl %al,%edx
ffffffff80104364:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104367:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010436a:	89 d6                	mov    %edx,%esi
ffffffff8010436c:	89 c7                	mov    %eax,%edi
ffffffff8010436e:	e8 46 09 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
}
ffffffff80104373:	90                   	nop
ffffffff80104374:	c9                   	leaveq 
ffffffff80104375:	c3                   	retq   

ffffffff80104376 <_Z9com_write8COM_PORTPKvi>:

int com_write(COM_PORT port, const void *buffer, int size)
{   
ffffffff80104376:	55                   	push   %rbp
ffffffff80104377:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010437a:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8010437e:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80104381:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80104385:	89 55 e8             	mov    %edx,-0x18(%rbp)
    const char * bufaddr = (const char*)buffer;
ffffffff80104388:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010438c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for (int i = 0; i < size; i++)
ffffffff80104390:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80104397:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010439a:	3b 45 e8             	cmp    -0x18(%rbp),%eax
ffffffff8010439d:	7d 25                	jge    ffffffff801043c4 <_Z9com_write8COM_PORTPKvi+0x4e>
    {
        com_putc(port, (bufaddr)[i]);
ffffffff8010439f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801043a2:	48 63 d0             	movslq %eax,%rdx
ffffffff801043a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801043a9:	48 01 d0             	add    %rdx,%rax
ffffffff801043ac:	0f b6 00             	movzbl (%rax),%eax
ffffffff801043af:	0f be d0             	movsbl %al,%edx
ffffffff801043b2:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff801043b5:	89 d6                	mov    %edx,%esi
ffffffff801043b7:	89 c7                	mov    %eax,%edi
ffffffff801043b9:	e8 85 ff ff ff       	callq  ffffffff80104343 <_Z8com_putc8COM_PORTc>
    for (int i = 0; i < size; i++)
ffffffff801043be:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff801043c2:	eb d3                	jmp    ffffffff80104397 <_Z9com_write8COM_PORTPKvi+0x21>
    }


    return size;
ffffffff801043c4:	8b 45 e8             	mov    -0x18(%rbp),%eax
}
ffffffff801043c7:	c9                   	leaveq 
ffffffff801043c8:	c3                   	retq   

ffffffff801043c9 <_Z13com_write_strPKc>:
void com_write_str( const char *buffer)
{
ffffffff801043c9:	55                   	push   %rbp
ffffffff801043ca:	48 89 e5             	mov    %rsp,%rbp
ffffffff801043cd:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801043d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff801043d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff801043dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801043df:	48 63 d0             	movslq %eax,%rdx
ffffffff801043e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801043e6:	48 01 d0             	add    %rdx,%rax
ffffffff801043e9:	0f b6 00             	movzbl (%rax),%eax
ffffffff801043ec:	84 c0                	test   %al,%al
ffffffff801043ee:	74 25                	je     ffffffff80104415 <_Z13com_write_strPKc+0x4c>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff801043f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801043f3:	48 63 d0             	movslq %eax,%rdx
ffffffff801043f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801043fa:	48 01 d0             	add    %rdx,%rax
ffffffff801043fd:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104400:	0f be c0             	movsbl %al,%eax
ffffffff80104403:	89 c6                	mov    %eax,%esi
ffffffff80104405:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8010440a:	e8 34 ff ff ff       	callq  ffffffff80104343 <_Z8com_putc8COM_PORTc>
        i++;
ffffffff8010440f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104413:	eb c7                	jmp    ffffffff801043dc <_Z13com_write_strPKc+0x13>
    }
    
    com_putc(COM_PORT::COM1,'\n');
ffffffff80104415:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8010441a:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8010441f:	e8 1f ff ff ff       	callq  ffffffff80104343 <_Z8com_putc8COM_PORTc>
}
ffffffff80104424:	90                   	nop
ffffffff80104425:	c9                   	leaveq 
ffffffff80104426:	c3                   	retq   

ffffffff80104427 <_Z14com_write_strlPKc>:
void com_write_strl( const char *buffer)
{
ffffffff80104427:	55                   	push   %rbp
ffffffff80104428:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010442b:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8010442f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff80104433:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff8010443a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010443d:	48 63 d0             	movslq %eax,%rdx
ffffffff80104440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104444:	48 01 d0             	add    %rdx,%rax
ffffffff80104447:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010444a:	84 c0                	test   %al,%al
ffffffff8010444c:	74 25                	je     ffffffff80104473 <_Z14com_write_strlPKc+0x4c>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff8010444e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104451:	48 63 d0             	movslq %eax,%rdx
ffffffff80104454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104458:	48 01 d0             	add    %rdx,%rax
ffffffff8010445b:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010445e:	0f be c0             	movsbl %al,%eax
ffffffff80104461:	89 c6                	mov    %eax,%esi
ffffffff80104463:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80104468:	e8 d6 fe ff ff       	callq  ffffffff80104343 <_Z8com_putc8COM_PORTc>
        i++;
ffffffff8010446d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104471:	eb c7                	jmp    ffffffff8010443a <_Z14com_write_strlPKc+0x13>
    }
    
}
ffffffff80104473:	90                   	nop
ffffffff80104474:	c9                   	leaveq 
ffffffff80104475:	c3                   	retq   

ffffffff80104476 <_Z14com_initialize8COM_PORT>:
void com_initialize(COM_PORT port)
{
ffffffff80104476:	55                   	push   %rbp
ffffffff80104477:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010447a:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010447e:	89 7d fc             	mov    %edi,-0x4(%rbp)
    outb(port + 2, 0);
ffffffff80104481:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104484:	83 c0 02             	add    $0x2,%eax
ffffffff80104487:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010448a:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8010448f:	89 c7                	mov    %eax,%edi
ffffffff80104491:	e8 23 08 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    outb(port + 3, 1<<7);
ffffffff80104496:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104499:	83 c0 03             	add    $0x3,%eax
ffffffff8010449c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010449f:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff801044a4:	89 c7                	mov    %eax,%edi
ffffffff801044a6:	e8 0e 08 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    outb(port + 0,3);
ffffffff801044ab:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044ae:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044b1:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff801044b6:	89 c7                	mov    %eax,%edi
ffffffff801044b8:	e8 fc 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    outb(port + 1, 0);
ffffffff801044bd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044c0:	83 c0 01             	add    $0x1,%eax
ffffffff801044c3:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044c6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801044cb:	89 c7                	mov    %eax,%edi
ffffffff801044cd:	e8 e7 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    outb(port + 3, 0x03);
ffffffff801044d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044d5:	83 c0 03             	add    $0x3,%eax
ffffffff801044d8:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044db:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff801044e0:	89 c7                	mov    %eax,%edi
ffffffff801044e2:	e8 d2 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
outb(port + 2, 0xC7); // No idea what this does :/
ffffffff801044e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044ea:	83 c0 02             	add    $0x2,%eax
ffffffff801044ed:	0f b7 c0             	movzwl %ax,%eax
ffffffff801044f0:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff801044f5:	89 c7                	mov    %eax,%edi
ffffffff801044f7:	e8 bd 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
outb(port + 4, 0x0B); // No idea what this does either
ffffffff801044fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044ff:	83 c0 04             	add    $0x4,%eax
ffffffff80104502:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104505:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff8010450a:	89 c7                	mov    %eax,%edi
ffffffff8010450c:	e8 a8 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
}
ffffffff80104511:	90                   	nop
ffffffff80104512:	c9                   	leaveq 
ffffffff80104513:	c3                   	retq   

ffffffff80104514 <_ZN7graphicC1Ev>:
#include "graphic.h"

graphic::graphic()
ffffffff80104514:	55                   	push   %rbp
ffffffff80104515:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104518:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8010451c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
{

}
ffffffff80104520:	90                   	nop
ffffffff80104521:	c9                   	leaveq 
ffffffff80104522:	c3                   	retq   
ffffffff80104523:	90                   	nop

ffffffff80104524 <_ZN3PIT8init_PITEv>:
#include <arch/arch.h>
#include <com.h>
#pragma GCC optimize ("-O0")
PIT global_PIT ;

void PIT::init_PIT(){
ffffffff80104524:	55                   	push   %rbp
ffffffff80104525:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104528:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8010452c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    *this = PIT();
ffffffff80104530:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80104537:	00 
ffffffff80104538:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8010453f:	00 
ffffffff80104540:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80104547:	00 
ffffffff80104548:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8010454f:	00 
ffffffff80104550:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff80104557:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
ffffffff8010455b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010455e:	e8 2b 09 00 00       	callq  ffffffff80104e8e <_ZN3PITC1Ev>
ffffffff80104563:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104567:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8010456b:	48 89 10             	mov    %rdx,(%rax)
ffffffff8010456e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80104572:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80104576:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8010457a:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8010457e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80104582:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff80104586:	8b 55 f0             	mov    -0x10(%rbp),%edx
ffffffff80104589:	89 50 20             	mov    %edx,0x20(%rax)
    com_write_str("loading PIT");
ffffffff8010458c:	48 c7 c7 73 56 10 80 	mov    $0xffffffff80105673,%rdi
ffffffff80104593:	e8 31 fe ff ff       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
    uint16_t divisor = PIT_START_FREQUENCY / PIT_TARGET_FREQUECY; // to do : make this more portable
ffffffff80104598:	66 c7 45 fe a9 04    	movw   $0x4a9,-0x2(%rbp)

    outb(0x43, 0x36);
ffffffff8010459e:	be 36 00 00 00       	mov    $0x36,%esi
ffffffff801045a3:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff801045a8:	e8 0c 07 00 00       	callq  ffffffff80104cb9 <_Z4outbth>

    uint8_t l = (uint8_t)(divisor & 0xFF);
ffffffff801045ad:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff801045b1:	88 45 fd             	mov    %al,-0x3(%rbp)
    wait();
ffffffff801045b4:	e8 a9 08 00 00       	callq  ffffffff80104e62 <_Z4waitv>
    outb(0x40, l);
ffffffff801045b9:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
ffffffff801045bd:	89 c6                	mov    %eax,%esi
ffffffff801045bf:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff801045c4:	e8 f0 06 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    wait();
ffffffff801045c9:	e8 94 08 00 00       	callq  ffffffff80104e62 <_Z4waitv>
    uint8_t h = (uint8_t)( (divisor>>8) & 0xFF );
ffffffff801045ce:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff801045d2:	66 c1 e8 08          	shr    $0x8,%ax
ffffffff801045d6:	88 45 fc             	mov    %al,-0x4(%rbp)
    outb(0x40, h);
ffffffff801045d9:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
ffffffff801045dd:	89 c6                	mov    %eax,%esi
ffffffff801045df:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff801045e4:	e8 d0 06 00 00       	callq  ffffffff80104cb9 <_Z4outbth>
    com_write_str("loaded PIT");
ffffffff801045e9:	48 c7 c7 7f 56 10 80 	mov    $0xffffffff8010567f,%rdi
ffffffff801045f0:	e8 d4 fd ff ff       	callq  ffffffff801043c9 <_Z13com_write_strPKc>

}
ffffffff801045f5:	90                   	nop
ffffffff801045f6:	c9                   	leaveq 
ffffffff801045f7:	c3                   	retq   

ffffffff801045f8 <_ZN3PIT6updateEv>:

void PIT::update(){
ffffffff801045f8:	55                   	push   %rbp
ffffffff801045f9:	48 89 e5             	mov    %rsp,%rbp
ffffffff801045fc:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104600:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    total_count ++;
ffffffff80104604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104608:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8010460c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104614:	48 89 50 18          	mov    %rdx,0x18(%rax)
    current_count ++;
ffffffff80104618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010461c:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8010461f:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff80104622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104626:	89 50 20             	mov    %edx,0x20(%rax)
    if(current_count > 1000){
ffffffff80104629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010462d:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff80104630:	3d e8 03 00 00       	cmp    $0x3e8,%eax
ffffffff80104635:	7e 2b                	jle    ffffffff80104662 <_ZN3PIT6updateEv+0x6a>
        com_write_str("sec");
ffffffff80104637:	48 c7 c7 8a 56 10 80 	mov    $0xffffffff8010568a,%rdi
ffffffff8010463e:	e8 86 fd ff ff       	callq  ffffffff801043c9 <_Z13com_write_strPKc>
        current_count = 0;
ffffffff80104643:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104647:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
        passed_sec += 1;
ffffffff8010464e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104652:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80104656:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8010465a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010465e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
}
ffffffff80104662:	90                   	nop
ffffffff80104663:	c9                   	leaveq 
ffffffff80104664:	c3                   	retq   
ffffffff80104665:	90                   	nop

ffffffff80104666 <_ZN3PIT3theEv>:
bool loaded = false;

 PIT* PIT::the(){
ffffffff80104666:	55                   	push   %rbp
ffffffff80104667:	48 89 e5             	mov    %rsp,%rbp
    return &global_PIT;
ffffffff8010466a:	48 c7 c0 60 f1 11 82 	mov    $0xffffffff8211f160,%rax
}
ffffffff80104671:	5d                   	pop    %rbp
ffffffff80104672:	c3                   	retq   
ffffffff80104673:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010467a:	00 00 00 
ffffffff8010467d:	0f 1f 00             	nopl   (%rax)

ffffffff80104680 <idt_flush>:

[BITS 64]
section .text
global idt_flush
idt_flush:
    mov  rax, [rsp + 4]
ffffffff80104680:	48 8b 44 24 04       	mov    0x4(%rsp),%rax
    lidt  [rax]
ffffffff80104685:	0f 01 18             	lidt   (%rax)
    ret
ffffffff80104688:	c3                   	retq   

ffffffff80104689 <__interrupt_common>:
%endmacro

extern interrupts_handler

__interrupt_common:
    cli
ffffffff80104689:	fa                   	cli    
    cld
ffffffff8010468a:	fc                   	cld    
    push_all
ffffffff8010468b:	50                   	push   %rax
ffffffff8010468c:	53                   	push   %rbx
ffffffff8010468d:	51                   	push   %rcx
ffffffff8010468e:	52                   	push   %rdx
ffffffff8010468f:	56                   	push   %rsi
ffffffff80104690:	57                   	push   %rdi
ffffffff80104691:	55                   	push   %rbp
ffffffff80104692:	41 50                	push   %r8
ffffffff80104694:	41 51                	push   %r9
ffffffff80104696:	41 52                	push   %r10
ffffffff80104698:	41 53                	push   %r11
ffffffff8010469a:	41 54                	push   %r12
ffffffff8010469c:	41 55                	push   %r13
ffffffff8010469e:	41 56                	push   %r14
ffffffff801046a0:	41 57                	push   %r15
    

    mov rdi, rsp
ffffffff801046a2:	48 89 e7             	mov    %rsp,%rdi

    call interrupts_handler
ffffffff801046a5:	e8 d0 fa ff ff       	callq  ffffffff8010417a <interrupts_handler>

    pop_all
ffffffff801046aa:	41 5f                	pop    %r15
ffffffff801046ac:	41 5e                	pop    %r14
ffffffff801046ae:	41 5d                	pop    %r13
ffffffff801046b0:	41 5c                	pop    %r12
ffffffff801046b2:	41 5b                	pop    %r11
ffffffff801046b4:	41 5a                	pop    %r10
ffffffff801046b6:	41 59                	pop    %r9
ffffffff801046b8:	41 58                	pop    %r8
ffffffff801046ba:	5d                   	pop    %rbp
ffffffff801046bb:	5f                   	pop    %rdi
ffffffff801046bc:	5e                   	pop    %rsi
ffffffff801046bd:	5a                   	pop    %rdx
ffffffff801046be:	59                   	pop    %rcx
ffffffff801046bf:	5b                   	pop    %rbx
ffffffff801046c0:	58                   	pop    %rax

    add rsp, 8 ; pop errcode and int number
ffffffff801046c1:	48 83 c4 08          	add    $0x8,%rsp
    sti
ffffffff801046c5:	fb                   	sti    
    iretq
ffffffff801046c6:	48 cf                	iretq  

ffffffff801046c8 <__interrupt0>:
    

INTERRUPT_NOERR 0
ffffffff801046c8:	6a 00                	pushq  $0x0
ffffffff801046ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
ffffffff801046d1:	00 
ffffffff801046d2:	eb b5                	jmp    ffffffff80104689 <__interrupt_common>

ffffffff801046d4 <__interrupt1>:
INTERRUPT_NOERR 1
ffffffff801046d4:	6a 00                	pushq  $0x0
ffffffff801046d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
ffffffff801046dd:	00 
ffffffff801046de:	eb a9                	jmp    ffffffff80104689 <__interrupt_common>

ffffffff801046e0 <__interrupt2>:
INTERRUPT_NOERR 2
ffffffff801046e0:	6a 00                	pushq  $0x0
ffffffff801046e2:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp)
ffffffff801046e9:	00 
ffffffff801046ea:	eb 9d                	jmp    ffffffff80104689 <__interrupt_common>

ffffffff801046ec <__interrupt3>:
INTERRUPT_NOERR 3
ffffffff801046ec:	6a 00                	pushq  $0x0
ffffffff801046ee:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%rsp)
ffffffff801046f5:	00 
ffffffff801046f6:	eb 91                	jmp    ffffffff80104689 <__interrupt_common>

ffffffff801046f8 <__interrupt4>:
INTERRUPT_NOERR 4
ffffffff801046f8:	6a 00                	pushq  $0x0
ffffffff801046fa:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%rsp)
ffffffff80104701:	00 
ffffffff80104702:	eb 85                	jmp    ffffffff80104689 <__interrupt_common>

ffffffff80104704 <__interrupt5>:
INTERRUPT_NOERR 5
ffffffff80104704:	6a 00                	pushq  $0x0
ffffffff80104706:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%rsp)
ffffffff8010470d:	00 
ffffffff8010470e:	e9 76 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104713 <__interrupt6>:
INTERRUPT_NOERR 6
ffffffff80104713:	6a 00                	pushq  $0x0
ffffffff80104715:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%rsp)
ffffffff8010471c:	00 
ffffffff8010471d:	e9 67 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104722 <__interrupt7>:
INTERRUPT_NOERR 7
ffffffff80104722:	6a 00                	pushq  $0x0
ffffffff80104724:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%rsp)
ffffffff8010472b:	00 
ffffffff8010472c:	e9 58 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104731 <__interrupt8>:
INTERRUPT_ERR   8
ffffffff80104731:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%rsp)
ffffffff80104738:	00 
ffffffff80104739:	e9 4b ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010473e <__interrupt9>:
INTERRUPT_NOERR 9
ffffffff8010473e:	6a 00                	pushq  $0x0
ffffffff80104740:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%rsp)
ffffffff80104747:	00 
ffffffff80104748:	e9 3c ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010474d <__interrupt10>:
INTERRUPT_ERR   10
ffffffff8010474d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%rsp)
ffffffff80104754:	00 
ffffffff80104755:	e9 2f ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010475a <__interrupt11>:
INTERRUPT_ERR   11
ffffffff8010475a:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%rsp)
ffffffff80104761:	00 
ffffffff80104762:	e9 22 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104767 <__interrupt12>:
INTERRUPT_ERR   12
ffffffff80104767:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%rsp)
ffffffff8010476e:	00 
ffffffff8010476f:	e9 15 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104774 <__interrupt13>:
INTERRUPT_ERR   13
ffffffff80104774:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%rsp)
ffffffff8010477b:	00 
ffffffff8010477c:	e9 08 ff ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104781 <__interrupt14>:
INTERRUPT_ERR   14
ffffffff80104781:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%rsp)
ffffffff80104788:	00 
ffffffff80104789:	e9 fb fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010478e <__interrupt15>:
INTERRUPT_NOERR 15
ffffffff8010478e:	6a 00                	pushq  $0x0
ffffffff80104790:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%rsp)
ffffffff80104797:	00 
ffffffff80104798:	e9 ec fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010479d <__interrupt16>:
INTERRUPT_NOERR 16
ffffffff8010479d:	6a 00                	pushq  $0x0
ffffffff8010479f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%rsp)
ffffffff801047a6:	00 
ffffffff801047a7:	e9 dd fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047ac <__interrupt17>:
INTERRUPT_NOERR 17
ffffffff801047ac:	6a 00                	pushq  $0x0
ffffffff801047ae:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%rsp)
ffffffff801047b5:	00 
ffffffff801047b6:	e9 ce fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047bb <__interrupt18>:
INTERRUPT_NOERR 18
ffffffff801047bb:	6a 00                	pushq  $0x0
ffffffff801047bd:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%rsp)
ffffffff801047c4:	00 
ffffffff801047c5:	e9 bf fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047ca <__interrupt19>:
INTERRUPT_NOERR 19
ffffffff801047ca:	6a 00                	pushq  $0x0
ffffffff801047cc:	c7 44 24 04 13 00 00 	movl   $0x13,0x4(%rsp)
ffffffff801047d3:	00 
ffffffff801047d4:	e9 b0 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047d9 <__interrupt20>:
INTERRUPT_NOERR 20
ffffffff801047d9:	6a 00                	pushq  $0x0
ffffffff801047db:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%rsp)
ffffffff801047e2:	00 
ffffffff801047e3:	e9 a1 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047e8 <__interrupt21>:
INTERRUPT_NOERR 21
ffffffff801047e8:	6a 00                	pushq  $0x0
ffffffff801047ea:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%rsp)
ffffffff801047f1:	00 
ffffffff801047f2:	e9 92 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801047f7 <__interrupt22>:
INTERRUPT_NOERR 22
ffffffff801047f7:	6a 00                	pushq  $0x0
ffffffff801047f9:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%rsp)
ffffffff80104800:	00 
ffffffff80104801:	e9 83 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104806 <__interrupt23>:
INTERRUPT_NOERR 23
ffffffff80104806:	6a 00                	pushq  $0x0
ffffffff80104808:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%rsp)
ffffffff8010480f:	00 
ffffffff80104810:	e9 74 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104815 <__interrupt24>:
INTERRUPT_NOERR 24
ffffffff80104815:	6a 00                	pushq  $0x0
ffffffff80104817:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%rsp)
ffffffff8010481e:	00 
ffffffff8010481f:	e9 65 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104824 <__interrupt25>:
INTERRUPT_NOERR 25
ffffffff80104824:	6a 00                	pushq  $0x0
ffffffff80104826:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
ffffffff8010482d:	00 
ffffffff8010482e:	e9 56 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104833 <__interrupt26>:
INTERRUPT_NOERR 26
ffffffff80104833:	6a 00                	pushq  $0x0
ffffffff80104835:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%rsp)
ffffffff8010483c:	00 
ffffffff8010483d:	e9 47 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104842 <__interrupt27>:
INTERRUPT_NOERR 27
ffffffff80104842:	6a 00                	pushq  $0x0
ffffffff80104844:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%rsp)
ffffffff8010484b:	00 
ffffffff8010484c:	e9 38 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104851 <__interrupt28>:
INTERRUPT_NOERR 28
ffffffff80104851:	6a 00                	pushq  $0x0
ffffffff80104853:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%rsp)
ffffffff8010485a:	00 
ffffffff8010485b:	e9 29 fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104860 <__interrupt29>:
INTERRUPT_NOERR 29
ffffffff80104860:	6a 00                	pushq  $0x0
ffffffff80104862:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%rsp)
ffffffff80104869:	00 
ffffffff8010486a:	e9 1a fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010486f <__interrupt30>:
INTERRUPT_ERR   30
ffffffff8010486f:	c7 44 24 04 1e 00 00 	movl   $0x1e,0x4(%rsp)
ffffffff80104876:	00 
ffffffff80104877:	e9 0d fe ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010487c <__interrupt31>:
INTERRUPT_NOERR 31
ffffffff8010487c:	6a 00                	pushq  $0x0
ffffffff8010487e:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%rsp)
ffffffff80104885:	00 
ffffffff80104886:	e9 fe fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010488b <__interrupt32>:
extern get_current_esp
extern get_next_esp
extern task_update_switch
global irq0_first_jump
__interrupt32:
    cli
ffffffff8010488b:	fa                   	cli    

    push rax
ffffffff8010488c:	50                   	push   %rax
    push rbx
ffffffff8010488d:	53                   	push   %rbx
    push rcx
ffffffff8010488e:	51                   	push   %rcx
    push rdx
ffffffff8010488f:	52                   	push   %rdx
    push rsi
ffffffff80104890:	56                   	push   %rsi
    push rdi
ffffffff80104891:	57                   	push   %rdi
    push rbp
ffffffff80104892:	55                   	push   %rbp
    push r8
ffffffff80104893:	41 50                	push   %r8
    push r9
ffffffff80104895:	41 51                	push   %r9
    push r10
ffffffff80104897:	41 52                	push   %r10
    push r11
ffffffff80104899:	41 53                	push   %r11
    push r12
ffffffff8010489b:	41 54                	push   %r12
    push r13
ffffffff8010489d:	41 55                	push   %r13
    push r14
ffffffff8010489f:	41 56                	push   %r14
    push r15
ffffffff801048a1:	41 57                	push   %r15
    call get_current_esp
ffffffff801048a3:	e8 72 d2 ff ff       	callq  ffffffff80101b1a <get_current_esp>

    mov [rax], rsp
ffffffff801048a8:	48 89 20             	mov    %rsp,(%rax)

ffffffff801048ab <irq0_first_jump>:
irq0_first_jump:
    call get_next_esp
ffffffff801048ab:	e8 95 d2 ff ff       	callq  ffffffff80101b45 <get_next_esp>


    mov rsp, [rax]
ffffffff801048b0:	48 8b 20             	mov    (%rax),%rsp

    mov rdi, rax
ffffffff801048b3:	48 89 c7             	mov    %rax,%rdi

    call task_update_switch
ffffffff801048b6:	e8 c1 d2 ff ff       	callq  ffffffff80101b7c <task_update_switch>


    mov al, 0x20
ffffffff801048bb:	b0 20                	mov    $0x20,%al
    out 0x20, al
ffffffff801048bd:	e6 20                	out    %al,$0x20

    pop r15
ffffffff801048bf:	41 5f                	pop    %r15
    pop r14
ffffffff801048c1:	41 5e                	pop    %r14
    pop r13
ffffffff801048c3:	41 5d                	pop    %r13
    pop r12
ffffffff801048c5:	41 5c                	pop    %r12
    pop r11
ffffffff801048c7:	41 5b                	pop    %r11
    pop r10
ffffffff801048c9:	41 5a                	pop    %r10
    pop r9
ffffffff801048cb:	41 59                	pop    %r9
    pop r8
ffffffff801048cd:	41 58                	pop    %r8
    pop rbp
ffffffff801048cf:	5d                   	pop    %rbp
    pop rdi
ffffffff801048d0:	5f                   	pop    %rdi
    pop rsi
ffffffff801048d1:	5e                   	pop    %rsi
    pop rdx
ffffffff801048d2:	5a                   	pop    %rdx
    pop rcx
ffffffff801048d3:	59                   	pop    %rcx
    pop rbx
ffffffff801048d4:	5b                   	pop    %rbx
    pop rax
ffffffff801048d5:	58                   	pop    %rax
    sti
ffffffff801048d6:	fb                   	sti    
    iretq
ffffffff801048d7:	48 cf                	iretq  

ffffffff801048d9 <__interrupt33>:
INTERRUPT_NOERR 33
ffffffff801048d9:	6a 00                	pushq  $0x0
ffffffff801048db:	c7 44 24 04 21 00 00 	movl   $0x21,0x4(%rsp)
ffffffff801048e2:	00 
ffffffff801048e3:	e9 a1 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801048e8 <__interrupt34>:
INTERRUPT_NOERR 34
ffffffff801048e8:	6a 00                	pushq  $0x0
ffffffff801048ea:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%rsp)
ffffffff801048f1:	00 
ffffffff801048f2:	e9 92 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801048f7 <__interrupt35>:
INTERRUPT_NOERR 35
ffffffff801048f7:	6a 00                	pushq  $0x0
ffffffff801048f9:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%rsp)
ffffffff80104900:	00 
ffffffff80104901:	e9 83 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104906 <__interrupt36>:
INTERRUPT_NOERR 36
ffffffff80104906:	6a 00                	pushq  $0x0
ffffffff80104908:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%rsp)
ffffffff8010490f:	00 
ffffffff80104910:	e9 74 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104915 <__interrupt37>:
INTERRUPT_NOERR 37
ffffffff80104915:	6a 00                	pushq  $0x0
ffffffff80104917:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%rsp)
ffffffff8010491e:	00 
ffffffff8010491f:	e9 65 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104924 <__interrupt38>:
INTERRUPT_NOERR 38
ffffffff80104924:	6a 00                	pushq  $0x0
ffffffff80104926:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%rsp)
ffffffff8010492d:	00 
ffffffff8010492e:	e9 56 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104933 <__interrupt39>:
INTERRUPT_NOERR 39
ffffffff80104933:	6a 00                	pushq  $0x0
ffffffff80104935:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%rsp)
ffffffff8010493c:	00 
ffffffff8010493d:	e9 47 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104942 <__interrupt40>:
INTERRUPT_NOERR 40
ffffffff80104942:	6a 00                	pushq  $0x0
ffffffff80104944:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%rsp)
ffffffff8010494b:	00 
ffffffff8010494c:	e9 38 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104951 <__interrupt41>:
INTERRUPT_NOERR 41
ffffffff80104951:	6a 00                	pushq  $0x0
ffffffff80104953:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%rsp)
ffffffff8010495a:	00 
ffffffff8010495b:	e9 29 fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff80104960 <__interrupt42>:
INTERRUPT_NOERR 42
ffffffff80104960:	6a 00                	pushq  $0x0
ffffffff80104962:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%rsp)
ffffffff80104969:	00 
ffffffff8010496a:	e9 1a fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010496f <__interrupt43>:
INTERRUPT_NOERR 43
ffffffff8010496f:	6a 00                	pushq  $0x0
ffffffff80104971:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%rsp)
ffffffff80104978:	00 
ffffffff80104979:	e9 0b fd ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010497e <__interrupt44>:
INTERRUPT_NOERR 44
ffffffff8010497e:	6a 00                	pushq  $0x0
ffffffff80104980:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%rsp)
ffffffff80104987:	00 
ffffffff80104988:	e9 fc fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010498d <__interrupt45>:
INTERRUPT_NOERR 45
ffffffff8010498d:	6a 00                	pushq  $0x0
ffffffff8010498f:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%rsp)
ffffffff80104996:	00 
ffffffff80104997:	e9 ed fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff8010499c <__interrupt46>:
INTERRUPT_NOERR 46
ffffffff8010499c:	6a 00                	pushq  $0x0
ffffffff8010499e:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%rsp)
ffffffff801049a5:	00 
ffffffff801049a6:	e9 de fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801049ab <__interrupt47>:
INTERRUPT_NOERR 47
ffffffff801049ab:	6a 00                	pushq  $0x0
ffffffff801049ad:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%rsp)
ffffffff801049b4:	00 
ffffffff801049b5:	e9 cf fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801049ba <__interrupt50>:

INTERRUPT_NOERR 50
ffffffff801049ba:	6a 00                	pushq  $0x0
ffffffff801049bc:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%rsp)
ffffffff801049c3:	00 
ffffffff801049c4:	e9 c0 fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>

ffffffff801049c9 <__interrupt127>:
INTERRUPT_NOERR 127
ffffffff801049c9:	6a 00                	pushq  $0x0
ffffffff801049cb:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%rsp)
ffffffff801049d2:	00 
ffffffff801049d3:	e9 b1 fc ff ff       	jmpq   ffffffff80104689 <__interrupt_common>
ffffffff801049d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff801049df:	00 

ffffffff801049e0 <tss_install>:
global tss_install
tss_install:
  push rbp
ffffffff801049e0:	55                   	push   %rbp
  mov rbp, rsp
ffffffff801049e1:	48 89 e5             	mov    %rsp,%rbp
  mov rax, rdi
ffffffff801049e4:	48 89 f8             	mov    %rdi,%rax
  ltr ax
ffffffff801049e7:	0f 00 d8             	ltr    %ax
  pop rbp
ffffffff801049ea:	5d                   	pop    %rbp
  ret
ffffffff801049eb:	c3                   	retq   
ffffffff801049ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff801049f0 <gdtr_install>:

bits 64
global gdtr_install
gdtr_install:
  push rbp
ffffffff801049f0:	55                   	push   %rbp
  mov rbp, rsp
ffffffff801049f1:	48 89 e5             	mov    %rsp,%rbp
  lgdt [rdi]
ffffffff801049f4:	0f 01 17             	lgdt   (%rdi)
  mov ax, 16
ffffffff801049f7:	66 b8 10 00          	mov    $0x10,%ax
  mov ss, ax
ffffffff801049fb:	8e d0                	mov    %eax,%ss
  mov ds, ax
ffffffff801049fd:	8e d8                	mov    %eax,%ds
  mov es, ax
ffffffff801049ff:	8e c0                	mov    %eax,%es
  mov fs, ax
ffffffff80104a01:	8e e0                	mov    %eax,%fs
  mov gs, ax
ffffffff80104a03:	8e e8                	mov    %eax,%gs
  mov rax, qword .trampoline
ffffffff80104a05:	48 b8 13 4a 10 80 ff 	movabs $0xffffffff80104a13,%rax
ffffffff80104a0c:	ff ff ff 
  push rsi
ffffffff80104a0f:	56                   	push   %rsi
  push rax
ffffffff80104a10:	50                   	push   %rax
  o64 retf
ffffffff80104a11:	48 cb                	lretq  

ffffffff80104a13 <gdtr_install.trampoline>:
.trampoline:
  pop rbp
ffffffff80104a13:	5d                   	pop    %rbp
ffffffff80104a14:	c3                   	retq   

ffffffff80104a15 <_Z7memzeroPvm>:
#include <int_value.h>
#include <stivale.h>
#include <com.h>
void _start(struct stivale_struct *bootloader_data) ;

__attribute__((optimize("O0"))) inline void  memzero(void * s, uint64_t n) {
ffffffff80104a15:	55                   	push   %rbp
ffffffff80104a16:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104a19:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104a1d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80104a21:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    for (uint64_t i = 0; i < n; i++)
ffffffff80104a25:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80104a2c:	00 
ffffffff80104a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104a31:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80104a35:	73 15                	jae    ffffffff80104a4c <_Z7memzeroPvm+0x37>
    {
        ((uint8_t*)s)[i] = 0;
ffffffff80104a37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80104a3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104a3f:	48 01 d0             	add    %rdx,%rax
ffffffff80104a42:	c6 00 00             	movb   $0x0,(%rax)
    for (uint64_t i = 0; i < n; i++)
ffffffff80104a45:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80104a4a:	eb e1                	jmp    ffffffff80104a2d <_Z7memzeroPvm+0x18>
    }
}
ffffffff80104a4c:	90                   	nop
ffffffff80104a4d:	c9                   	leaveq 
ffffffff80104a4e:	c3                   	retq   

ffffffff80104a4f <_Z6kitoaTImEvPciT_>:
		p2--;
	}
}

template<class T>
inline void kitoaT(char* buf, int base, T d)
ffffffff80104a4f:	55                   	push   %rbp
ffffffff80104a50:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104a53:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff80104a57:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80104a5b:	89 75 b4             	mov    %esi,-0x4c(%rbp)
ffffffff80104a5e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	char* p = buf;
ffffffff80104a62:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80104a66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	char* p1, * p2;
	T ud = d;
ffffffff80104a6a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80104a6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	T divisor = 10;
ffffffff80104a72:	48 c7 45 d8 0a 00 00 	movq   $0xa,-0x28(%rbp)
ffffffff80104a79:	00 
	{
		*p++ = '-';
		buf++;
		ud = -d;
	}
	else if (base == 'x')
ffffffff80104a7a:	83 7d b4 78          	cmpl   $0x78,-0x4c(%rbp)
ffffffff80104a7e:	75 08                	jne    ffffffff80104a88 <_Z6kitoaTImEvPciT_+0x39>
		divisor = 16;
ffffffff80104a80:	48 c7 45 d8 10 00 00 	movq   $0x10,-0x28(%rbp)
ffffffff80104a87:	00 

	/* Divide UD by DIVISOR until UD == 0. */
	do
	{
		T remainder = ud % divisor;
ffffffff80104a88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104a8c:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104a91:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff80104a95:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)

		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80104a99:	48 83 7d d0 09       	cmpq   $0x9,-0x30(%rbp)
ffffffff80104a9e:	77 0b                	ja     ffffffff80104aab <_Z6kitoaTImEvPciT_+0x5c>
ffffffff80104aa0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104aa4:	83 c0 30             	add    $0x30,%eax
ffffffff80104aa7:	89 c1                	mov    %eax,%ecx
ffffffff80104aa9:	eb 09                	jmp    ffffffff80104ab4 <_Z6kitoaTImEvPciT_+0x65>
ffffffff80104aab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104aaf:	83 c0 57             	add    $0x57,%eax
ffffffff80104ab2:	89 c1                	mov    %eax,%ecx
ffffffff80104ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ab8:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104abc:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104ac0:	88 08                	mov    %cl,(%rax)
	} while (ud /= divisor);
ffffffff80104ac2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104ac6:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104acb:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff80104acf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104ad3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80104ad8:	0f 95 c0             	setne  %al
ffffffff80104adb:	84 c0                	test   %al,%al
ffffffff80104add:	74 02                	je     ffffffff80104ae1 <_Z6kitoaTImEvPciT_+0x92>
	do
ffffffff80104adf:	eb a7                	jmp    ffffffff80104a88 <_Z6kitoaTImEvPciT_+0x39>

	/* Terminate BUF. */
	*p = 0;
ffffffff80104ae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ae5:	c6 00 00             	movb   $0x0,(%rax)

	/* Reverse BUF. */
	p1 = buf;
ffffffff80104ae8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80104aec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104af0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104af4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80104af8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104b00:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104b04:	73 2d                	jae    ffffffff80104b33 <_Z6kitoaTImEvPciT_+0xe4>
	{
		char tmp = *p1;
ffffffff80104b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104b0a:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104b0d:	88 45 cf             	mov    %al,-0x31(%rbp)
		*p1 = *p2;
ffffffff80104b10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104b14:	0f b6 10             	movzbl (%rax),%edx
ffffffff80104b17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104b1b:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff80104b1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104b21:	0f b6 55 cf          	movzbl -0x31(%rbp),%edx
ffffffff80104b25:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80104b27:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80104b2c:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104b31:	eb c9                	jmp    ffffffff80104afc <_Z6kitoaTImEvPciT_+0xad>
	}
}
ffffffff80104b33:	90                   	nop
ffffffff80104b34:	c9                   	leaveq 
ffffffff80104b35:	c3                   	retq   

ffffffff80104b36 <_Z14set_paging_dirm>:

void* alloc_multiple_frame(uint64_t count, bool fast = false );
void* alloc_multiple_frame_zero(uint64_t count, bool fast = false );
void virt_map(uint64_t vaddress, uint64_t paddress, uint64_t flags );
void pmm_free(void *ptr, uint64_t pg_count);
inline void set_paging_dir(uint64_t pd){
ffffffff80104b36:	55                   	push   %rbp
ffffffff80104b37:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104b3a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104b3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    asm volatile ("mov %0, %%cr3":: "a"(pd): "memory");
ffffffff80104b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b46:	0f 20 d8             	mov    %cr3,%rax

}
ffffffff80104b49:	90                   	nop
ffffffff80104b4a:	c9                   	leaveq 
ffffffff80104b4b:	c3                   	retq   

ffffffff80104b4c <_ZN7processC1Ev>:
    PROCESS_AVAILABLE = 0,
    PROCESS_RUNNING = 1,
    PROCESS_WAITING = 2,
    PROCESS_CRASH = 3
};
struct process{
ffffffff80104b4c:	55                   	push   %rbp
ffffffff80104b4d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104b50:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80104b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b5c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80104b63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b67:	48 c7 40 0c 00 00 00 	movq   $0x0,0xc(%rax)
ffffffff80104b6e:	00 
ffffffff80104b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104b73:	48 c7 80 14 10 00 00 	movq   $0x0,0x1014(%rax)
ffffffff80104b7a:	00 00 00 00 
ffffffff80104b7e:	90                   	nop
ffffffff80104b7f:	c9                   	leaveq 
ffffffff80104b80:	c3                   	retq   

ffffffff80104b81 <liballoc_lock>:
 * It's up to you to decide. 
 *
 * \return 0 if the lock was acquired successfully. Anything else is
 * failure.
 */
inline int liballoc_lock(){
ffffffff80104b81:	55                   	push   %rbp
ffffffff80104b82:	48 89 e5             	mov    %rsp,%rbp
    //asm volatile("cli");
    return 0;
ffffffff80104b85:	b8 00 00 00 00       	mov    $0x0,%eax
};
ffffffff80104b8a:	5d                   	pop    %rbp
ffffffff80104b8b:	c3                   	retq   

ffffffff80104b8c <liballoc_unlock>:
 * function.  If it disabled interrupts, it enables interrupts. If it
 * had acquiried a spinlock, it releases the spinlock. etc.
 *
 * \return 0 if the lock was successfully released.
 */
inline int liballoc_unlock(){
ffffffff80104b8c:	55                   	push   %rbp
ffffffff80104b8d:	48 89 e5             	mov    %rsp,%rbp

    //asm volatile("sti");
    return 0;
ffffffff80104b90:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80104b95:	5d                   	pop    %rbp
ffffffff80104b96:	c3                   	retq   

ffffffff80104b97 <liballoc_alloc>:
 * required.  The page size was set up in the liballoc_init function.
 *
 * \return NULL if the pages were not allocated.
 * \return A pointer to the allocated memory.
 */
inline void* liballoc_alloc(int d){ // alloc x page
ffffffff80104b97:	55                   	push   %rbp
ffffffff80104b98:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104b9b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104b9f:	89 7d fc             	mov    %edi,-0x4(%rbp)

    return alloc_multiple_frame(d,  true );
ffffffff80104ba2:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104ba5:	48 98                	cltq   
ffffffff80104ba7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80104bac:	48 89 c7             	mov    %rax,%rdi
ffffffff80104baf:	e8 5c e5 ff ff       	callq  ffffffff80103110 <_Z20alloc_multiple_framemb>
}
ffffffff80104bb4:	c9                   	leaveq 
ffffffff80104bb5:	c3                   	retq   

ffffffff80104bb6 <liballoc_free>:
 *
 * The integer value is the number of pages to free.
 *
 * \return 0 if the memory was successfully freed.
 */
inline int liballoc_free(void* addr,int d){
ffffffff80104bb6:	55                   	push   %rbp
ffffffff80104bb7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104bba:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104bbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80104bc2:	89 75 f4             	mov    %esi,-0xc(%rbp)
    pmm_free(addr, d);
ffffffff80104bc5:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80104bc8:	48 63 d0             	movslq %eax,%rdx
ffffffff80104bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104bcf:	48 89 d6             	mov    %rdx,%rsi
ffffffff80104bd2:	48 89 c7             	mov    %rax,%rdi
ffffffff80104bd5:	e8 16 df ff ff       	callq  ffffffff80102af0 <_Z8pmm_freePvm>
    return 0;
ffffffff80104bda:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80104bdf:	c9                   	leaveq 
ffffffff80104be0:	c3                   	retq   

ffffffff80104be1 <_Z6kitoaTIjEvPciT_>:
inline void kitoaT(char* buf, int base, T d)
ffffffff80104be1:	55                   	push   %rbp
ffffffff80104be2:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104be5:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80104be9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80104bed:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff80104bf0:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff80104bf3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104bf7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	T ud = d;
ffffffff80104bfb:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80104bfe:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	T divisor = 10;
ffffffff80104c01:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%rbp)
	else if (base == 'x')
ffffffff80104c08:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff80104c0c:	75 07                	jne    ffffffff80104c15 <_Z6kitoaTIjEvPciT_+0x34>
		divisor = 16;
ffffffff80104c0e:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%rbp)
		T remainder = ud % divisor;
ffffffff80104c15:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80104c18:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104c1d:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff80104c20:	89 55 dc             	mov    %edx,-0x24(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80104c23:	83 7d dc 09          	cmpl   $0x9,-0x24(%rbp)
ffffffff80104c27:	77 0a                	ja     ffffffff80104c33 <_Z6kitoaTIjEvPciT_+0x52>
ffffffff80104c29:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104c2c:	83 c0 30             	add    $0x30,%eax
ffffffff80104c2f:	89 c1                	mov    %eax,%ecx
ffffffff80104c31:	eb 08                	jmp    ffffffff80104c3b <_Z6kitoaTIjEvPciT_+0x5a>
ffffffff80104c33:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104c36:	83 c0 57             	add    $0x57,%eax
ffffffff80104c39:	89 c1                	mov    %eax,%ecx
ffffffff80104c3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104c3f:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104c43:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104c47:	88 08                	mov    %cl,(%rax)
	} while (ud /= divisor);
ffffffff80104c49:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80104c4c:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104c51:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff80104c54:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80104c57:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff80104c5b:	0f 95 c0             	setne  %al
ffffffff80104c5e:	84 c0                	test   %al,%al
ffffffff80104c60:	74 02                	je     ffffffff80104c64 <_Z6kitoaTIjEvPciT_+0x83>
	do
ffffffff80104c62:	eb b1                	jmp    ffffffff80104c15 <_Z6kitoaTIjEvPciT_+0x34>
	*p = 0;
ffffffff80104c64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104c68:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff80104c6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104c6f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104c73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104c77:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80104c7b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104c83:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104c87:	73 2d                	jae    ffffffff80104cb6 <_Z6kitoaTIjEvPciT_+0xd5>
		char tmp = *p1;
ffffffff80104c89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104c8d:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104c90:	88 45 db             	mov    %al,-0x25(%rbp)
		*p1 = *p2;
ffffffff80104c93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104c97:	0f b6 10             	movzbl (%rax),%edx
ffffffff80104c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104c9e:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff80104ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104ca4:	0f b6 55 db          	movzbl -0x25(%rbp),%edx
ffffffff80104ca8:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80104caa:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80104caf:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104cb4:	eb c9                	jmp    ffffffff80104c7f <_Z6kitoaTIjEvPciT_+0x9e>
}
ffffffff80104cb6:	90                   	nop
ffffffff80104cb7:	c9                   	leaveq 
ffffffff80104cb8:	c3                   	retq   

ffffffff80104cb9 <_Z4outbth>:
#define X64

#ifdef X64

inline void outb(uint16_t port, uint8_t value)
{
ffffffff80104cb9:	55                   	push   %rbp
ffffffff80104cba:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104cbd:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104cc1:	89 f8                	mov    %edi,%eax
ffffffff80104cc3:	89 f2                	mov    %esi,%edx
ffffffff80104cc5:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
ffffffff80104cc9:	89 d0                	mov    %edx,%eax
ffffffff80104ccb:	88 45 f8             	mov    %al,-0x8(%rbp)
	asm volatile("out  dx, al"::"a"(value), "d"(port));
ffffffff80104cce:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80104cd2:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx
ffffffff80104cd6:	ee                   	out    %al,(%dx)
}
ffffffff80104cd7:	90                   	nop
ffffffff80104cd8:	c9                   	leaveq 
ffffffff80104cd9:	c3                   	retq   

ffffffff80104cda <_Z5kitoaPcii>:
{
ffffffff80104cda:	55                   	push   %rbp
ffffffff80104cdb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104cde:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80104ce2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80104ce6:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff80104ce9:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff80104cec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104cf0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	unsigned long ud = d;
ffffffff80104cf4:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80104cf7:	48 98                	cltq   
ffffffff80104cf9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int divisor = 10;
ffffffff80104cfd:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
	if (base == 'd' && d < 0)
ffffffff80104d04:	83 7d c4 64          	cmpl   $0x64,-0x3c(%rbp)
ffffffff80104d08:	75 27                	jne    ffffffff80104d31 <_Z5kitoaPcii+0x57>
ffffffff80104d0a:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
ffffffff80104d0e:	79 21                	jns    ffffffff80104d31 <_Z5kitoaPcii+0x57>
		*p++ = '-';
ffffffff80104d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104d14:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104d18:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104d1c:	c6 00 2d             	movb   $0x2d,(%rax)
		buf++;
ffffffff80104d1f:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
		ud = -d;
ffffffff80104d24:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80104d27:	f7 d8                	neg    %eax
ffffffff80104d29:	48 98                	cltq   
ffffffff80104d2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104d2f:	eb 0d                	jmp    ffffffff80104d3e <_Z5kitoaPcii+0x64>
	else if (base == 'x')
ffffffff80104d31:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff80104d35:	75 07                	jne    ffffffff80104d3e <_Z5kitoaPcii+0x64>
		divisor = 16;
ffffffff80104d37:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
		int remainder = ud % divisor;
ffffffff80104d3e:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104d41:	48 63 c8             	movslq %eax,%rcx
ffffffff80104d44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104d48:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104d4d:	48 f7 f1             	div    %rcx
ffffffff80104d50:	48 89 d0             	mov    %rdx,%rax
ffffffff80104d53:	89 45 d8             	mov    %eax,-0x28(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80104d56:	83 7d d8 09          	cmpl   $0x9,-0x28(%rbp)
ffffffff80104d5a:	7f 0a                	jg     ffffffff80104d66 <_Z5kitoaPcii+0x8c>
ffffffff80104d5c:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80104d5f:	83 c0 30             	add    $0x30,%eax
ffffffff80104d62:	89 c1                	mov    %eax,%ecx
ffffffff80104d64:	eb 08                	jmp    ffffffff80104d6e <_Z5kitoaPcii+0x94>
ffffffff80104d66:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80104d69:	83 c0 57             	add    $0x57,%eax
ffffffff80104d6c:	89 c1                	mov    %eax,%ecx
ffffffff80104d6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104d72:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80104d76:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80104d7a:	88 08                	mov    %cl,(%rax)
	} while (ud /= divisor);
ffffffff80104d7c:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80104d7f:	48 63 f0             	movslq %eax,%rsi
ffffffff80104d82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104d86:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80104d8b:	48 f7 f6             	div    %rsi
ffffffff80104d8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80104d92:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80104d97:	0f 95 c0             	setne  %al
ffffffff80104d9a:	84 c0                	test   %al,%al
ffffffff80104d9c:	74 02                	je     ffffffff80104da0 <_Z5kitoaPcii+0xc6>
	do
ffffffff80104d9e:	eb 9e                	jmp    ffffffff80104d3e <_Z5kitoaPcii+0x64>
	*p = 0;
ffffffff80104da0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104da4:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff80104da7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80104dab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff80104daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104db3:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80104db7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104dbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104dbf:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80104dc3:	73 2d                	jae    ffffffff80104df2 <_Z5kitoaPcii+0x118>
		char tmp = *p1;
ffffffff80104dc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104dc9:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104dcc:	88 45 d7             	mov    %al,-0x29(%rbp)
		*p1 = *p2;
ffffffff80104dcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104dd3:	0f b6 10             	movzbl (%rax),%edx
ffffffff80104dd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104dda:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff80104ddc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104de0:	0f b6 55 d7          	movzbl -0x29(%rbp),%edx
ffffffff80104de4:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80104de6:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80104deb:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff80104df0:	eb c9                	jmp    ffffffff80104dbb <_Z5kitoaPcii+0xe1>
}
ffffffff80104df2:	90                   	nop
ffffffff80104df3:	c9                   	leaveq 
ffffffff80104df4:	c3                   	retq   

ffffffff80104df5 <_Z3inbt>:
inline void outl(uint16_t port, uint32_t value)
{
	asm volatile("out  dx, eax"::"a"(value), "d"(port));
}
inline uint8_t inb(uint16_t port)
{
ffffffff80104df5:	55                   	push   %rbp
ffffffff80104df6:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104df9:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80104dfd:	89 f8                	mov    %edi,%eax
ffffffff80104dff:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
	uint8_t ret;
	asm volatile("in al, dx"
ffffffff80104e03:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80104e07:	89 c2                	mov    %eax,%edx
ffffffff80104e09:	ec                   	in     (%dx),%al
ffffffff80104e0a:	88 45 ff             	mov    %al,-0x1(%rbp)
		: "=a"(ret)
		: "d"(port)
		);
	return ret;
ffffffff80104e0d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff80104e11:	c9                   	leaveq 
ffffffff80104e12:	c3                   	retq   

ffffffff80104e13 <_Z14com_wait_write8COM_PORT>:
{
ffffffff80104e13:	55                   	push   %rbp
ffffffff80104e14:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104e17:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104e1b:	89 7d fc             	mov    %edi,-0x4(%rbp)
    while ((inb(port + 5) & 0x20) == 0)
ffffffff80104e1e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104e21:	83 c0 05             	add    $0x5,%eax
ffffffff80104e24:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104e27:	89 c7                	mov    %eax,%edi
ffffffff80104e29:	e8 c7 ff ff ff       	callq  ffffffff80104df5 <_Z3inbt>
ffffffff80104e2e:	0f b6 c0             	movzbl %al,%eax
ffffffff80104e31:	83 e0 20             	and    $0x20,%eax
ffffffff80104e34:	85 c0                	test   %eax,%eax
ffffffff80104e36:	0f 94 c0             	sete   %al
ffffffff80104e39:	84 c0                	test   %al,%al
ffffffff80104e3b:	74 02                	je     ffffffff80104e3f <_Z14com_wait_write8COM_PORT+0x2c>
ffffffff80104e3d:	eb df                	jmp    ffffffff80104e1e <_Z14com_wait_write8COM_PORT+0xb>
}
ffffffff80104e3f:	90                   	nop
ffffffff80104e40:	c9                   	leaveq 
ffffffff80104e41:	c3                   	retq   

ffffffff80104e42 <_Z3inwt>:
inline uint16_t inw(uint16_t port)
{
ffffffff80104e42:	55                   	push   %rbp
ffffffff80104e43:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104e46:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80104e4a:	89 f8                	mov    %edi,%eax
ffffffff80104e4c:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
	uint16_t ret;
	asm volatile ("in ax, dx"
ffffffff80104e50:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80104e54:	89 c2                	mov    %eax,%edx
ffffffff80104e56:	66 ed                	in     (%dx),%ax
ffffffff80104e58:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
		: "=a"(ret)
		: "d"(port));
	return ret;
ffffffff80104e5c:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
ffffffff80104e60:	c9                   	leaveq 
ffffffff80104e61:	c3                   	retq   

ffffffff80104e62 <_Z4waitv>:
inline void wait(){
ffffffff80104e62:	55                   	push   %rbp
ffffffff80104e63:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104e66:	48 83 ec 10          	sub    $0x10,%rsp
    for(int i = 0; i < 40; i ++){
ffffffff80104e6a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80104e71:	83 7d fc 27          	cmpl   $0x27,-0x4(%rbp)
ffffffff80104e75:	7f 13                	jg     ffffffff80104e8a <_Z4waitv+0x28>
        inw(i);
ffffffff80104e77:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104e7a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104e7d:	89 c7                	mov    %eax,%edi
ffffffff80104e7f:	e8 be ff ff ff       	callq  ffffffff80104e42 <_Z3inwt>
    for(int i = 0; i < 40; i ++){
ffffffff80104e84:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80104e88:	eb e7                	jmp    ffffffff80104e71 <_Z4waitv+0xf>
    }
}
ffffffff80104e8a:	90                   	nop
ffffffff80104e8b:	c9                   	leaveq 
ffffffff80104e8c:	c3                   	retq   
ffffffff80104e8d:	90                   	nop

ffffffff80104e8e <_ZN3PITC1Ev>:


#define PIT_START_FREQUENCY 1193182
#define PIT_TARGET_FREQUECY 1000

class PIT{
ffffffff80104e8e:	55                   	push   %rbp
ffffffff80104e8f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104e92:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80104e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80104e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104e9e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80104ea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ea9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80104eb0:	00 
ffffffff80104eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104eb5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80104ebc:	00 
ffffffff80104ebd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ec1:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80104ec8:	00 
ffffffff80104ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104ecd:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
ffffffff80104ed4:	90                   	nop
ffffffff80104ed5:	c9                   	leaveq 
ffffffff80104ed6:	c3                   	retq   
ffffffff80104ed7:	90                   	nop
ffffffff80104ed8:	ea                   	(bad)  
ffffffff80104ed9:	1b 10                	sbb    (%rax),%edx
ffffffff80104edb:	80 ff ff             	cmp    $0xff,%bh
ffffffff80104ede:	ff                   	(bad)  
ffffffff80104edf:	ff                   	.byte 0xff
