
kernel.elf:     format de fichier elf64-x86-64
architecture: i386:x86-64, fanions 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adresse de départ 0xffffffff801022c6

Contenu de la section .stivalehdr :
 ffffffff80100000 20601180 ffffffff 00000000 00000000   `..............
 ffffffff80100010 00000000 00000000                    ........        
Contenu de la section .text :
 ffffffff80101000 f30f1efa 554889e5 4883ec18 48897de8  ....UH..H...H.}.
 ffffffff80101010 48c745f8 00800b00 488b45f8 66c70068  H.E.....H.E.f..h
 ffffffff80101020 02488b45 f84883c0 0266c700 6502488b  .H.E.H...f..e.H.
 ffffffff80101030 45f84883 c00466c7 00650248 8b45f848  E.H...f..e.H.E.H
 ffffffff80101040 83c00666 c7006502 488b45f8 4883c008  ...f..e.H.E.H...
 ffffffff80101050 66c7006f 02f490c9 c3662e0f 1f840000  f..o.....f......
 ffffffff80101060 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101070 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101080 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101090 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801010a0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801010b0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801010c0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801010d0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801010e0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801010f0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101100 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101110 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101120 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101130 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101140 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101150 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101160 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101170 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101180 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101190 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801011a0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801011b0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801011c0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801011d0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801011e0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801011f0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101200 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101210 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101220 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101230 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101240 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101250 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101260 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101270 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101280 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101290 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801012a0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801012b0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801012c0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801012d0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801012e0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801012f0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101300 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101310 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101320 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101330 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101340 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101350 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101360 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101370 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101380 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101390 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801013a0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801013b0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801013c0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801013d0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801013e0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801013f0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101400 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101410 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101420 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101430 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101440 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101450 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101460 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101470 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101480 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101490 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801014a0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801014b0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801014c0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801014d0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801014e0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801014f0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101500 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101510 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101520 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101530 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101540 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101550 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101560 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101570 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101580 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101590 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801015a0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801015b0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801015c0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801015d0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801015e0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801015f0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101600 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101610 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101620 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101630 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101640 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101650 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101660 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101670 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101680 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101690 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801016a0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801016b0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801016c0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801016d0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801016e0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801016f0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101700 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101710 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101720 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101730 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101740 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101750 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101760 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101770 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101780 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101790 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801017a0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801017b0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801017c0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801017d0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801017e0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801017f0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101800 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101810 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101820 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101830 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101840 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101850 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101860 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101870 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101880 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101890 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801018a0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801018b0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801018c0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801018d0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801018e0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801018f0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101900 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101910 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101920 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101930 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101940 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101950 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101960 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101970 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101980 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101990 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801019a0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff801019b0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff801019c0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff801019d0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff801019e0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff801019f0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101a00 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101a10 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101a20 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101a30 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101a40 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101a50 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101a60 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101a70 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101a80 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101a90 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101aa0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ab0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ac0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101ad0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ae0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101af0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101b00 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101b10 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101b20 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101b30 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101b40 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101b50 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101b60 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101b70 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101b80 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101b90 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ba0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101bb0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101bc0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101bd0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101be0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101bf0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101c00 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101c10 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101c20 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101c30 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101c40 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101c50 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101c60 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101c70 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101c80 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101c90 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ca0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101cb0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101cc0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101cd0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ce0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101cf0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101d00 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101d10 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101d20 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101d30 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101d40 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101d50 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101d60 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101d70 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101d80 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101d90 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101da0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101db0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101dc0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101dd0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101de0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101df0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101e00 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101e10 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101e20 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101e30 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101e40 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101e50 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101e60 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101e70 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101e80 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101e90 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ea0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101eb0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101ec0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101ed0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101ee0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101ef0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101f00 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101f10 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101f20 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101f30 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101f40 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101f50 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101f60 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101f70 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101f80 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101f90 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101fa0 2e0f1f84 00000000 00662e0f 1f840000  .........f......
 ffffffff80101fb0 00000066 2e0f1f84 00000000 00662e0f  ...f.........f..
 ffffffff80101fc0 1f840000 00000066 2e0f1f84 00000000  .......f........
 ffffffff80101fd0 00662e0f 1f840000 00000066 2e0f1f84  .f.........f....
 ffffffff80101fe0 00000000 00662e0f 1f840000 00000066  .....f.........f
 ffffffff80101ff0 2e0f1f84 00000000 000f1f80 00000000  ................
 ffffffff80102000 f30f1efa 554889e5 4883ec28 48897de8  ....UH..H..(H.}.
 ffffffff80102010 89f089d6 89ca6689 45e489f0 8845e089  ......f.E....E..
 ffffffff80102020 d08845dc 0fb745e4 4883e0f8 4889c248  ..E...E.H...H..H
 ffffffff80102030 8b45e848 01d04889 45f8488b 45f80fb6  .E.H..H.E.H.E...
 ffffffff80102040 55e08850 050fb645 dcc1e004 83c80f89  U..P...E........
 ffffffff80102050 c2488b45 f8885006 488b45f8 66c700ff  .H.E..P.H.E.f...
 ffffffff80102060 ff90c9c3 f30f1efa 554889e5 4883ec38  ........UH..H..8
 ffffffff80102070 48897de8 89f089d6 89ca4c89 45d04c89  H.}.......L.E.L.
 ffffffff80102080 4dc86689 45e489f0 8845e089 d08845dc  M.f.E....E....E.
 ffffffff80102090 0fb745e4 4883e0f8 4889c248 8b45e848  ..E.H...H..H.E.H
 ffffffff801020a0 01d04889 45f8488b 45f80fb6 55e08850  ..H.E.H.E...U..P
 ffffffff801020b0 050fb645 dcc1e004 89c2488b 45c848c1  ...E......H.E.H.
 ffffffff801020c0 e81083e0 0f09c248 8b45f888 5006488b  .......H.E..P.H.
 ffffffff801020d0 45c889c2 488b45f8 66891048 8b45d089  E...H.E.f..H.E..
 ffffffff801020e0 c2488b45 f8668950 02488b45 d048c1e8  .H.E.f.P.H.E.H..
 ffffffff801020f0 1089c248 8b45f888 5004488b 45d048c1  ...H.E..P.H.E.H.
 ffffffff80102100 e81889c2 488b45f8 88500748 8b45d048  ....H.E..P.H.E.H
 ffffffff80102110 c1e82089 c2488b45 f8895008 488b45f8  .. ..H.E..P.H.E.
 ffffffff80102120 c7400c00 00000090 c9c3f30f 1efa5548  .@............UH
 ffffffff80102130 89e54883 ec1048c7 45f82082 1080488b  ..H...H.E. ...H.
 ffffffff80102140 45f84883 c06f4889 45f0be00 80000048  E.H..oH.E......H
 ffffffff80102150 c7c72080 1080e84a 2f0000b9 02000000  .. ....J/.......
 ffffffff80102160 ba980000 00be0800 000048c7 c7208010  ..........H.. ..
 ffffffff80102170 80e88afe ffffb900 000000ba 92000000  ................
 ffffffff80102180 be100000 0048c7c7 20801080 e86ffeff  .....H.. ....o..
 ffffffff80102190 ffb90000 0000baf2 000000be 18000000  ................
 ffffffff801021a0 48c7c720 801080e8 54feffff b9020000  H.. ....T.......
 ffffffff801021b0 00baf800 0000be20 00000048 c7c72080  ....... ...H.. .
 ffffffff801021c0 1080e839 feffff48 8b55f048 8b45f849  ...9...H.U.H.E.I
 ffffffff801021d0 89d14989 c0b90000 0000ba89 000000be  ..I.............
 ffffffff801021e0 28000000 48c7c720 801080e8 74feffff  (...H.. ....t...
 ffffffff801021f0 48c7c020 80108048 8905045e 000066c7  H.. ...H...^..f.
 ffffffff80102200 05f95d00 00ff0dba 10000000 be080000  ..].............
 ffffffff80102210 0048c7c7 00801080 e8632e00 0090c9c3  .H.......c......
 ffffffff80102220 f30f1efa 554889e5 4883ec10 48897df8  ....UH..H...H.}.
 ffffffff80102230 be700000 0048c7c7 20821080 e8642e00  .p...H.. ....d..
 ffffffff80102240 0066c705 3c600000 6f0048c7 c0009010  .f..<`..o.H.....
 ffffffff80102250 804805e0 3f000048 8905c65f 000048c7  .H..?..H..._..H.
 ffffffff80102260 c000d010 804805e0 3f000048 8905ba5f  .....H..?..H..._
 ffffffff80102270 000048c7 c0001011 804805e0 3f000048  ..H......H..?..H
 ffffffff80102280 8905ae5f 000066b8 28000f00 d890c9c3  ..._..f.(.......
 ffffffff80102290 f30f1efa 554889e5 4883ec08 48897df8  ....UH..H...H.}.
 ffffffff801022a0 488b45f8 48890579 5f000090 c9c3f30f  H.E.H..y_.......
 ffffffff801022b0 1efa5548 89e54883 ec104889 7df8e867  ..UH..H...H.}..g
 ffffffff801022c0 feffff90 c9c3f30f 1efa5548 89e54883  ..........UH..H.
 ffffffff801022d0 ec204889 7de84883 e4f0bff8 030000e8  . H.}.H.........
 ffffffff801022e0 bf290000 48c7c700 601080e8 fe280000  .)..H...`....(..
 ffffffff801022f0 48c7c70c 601080e8 f2280000 48c7c020  H...`....(..H.. 
 ffffffff80102300 50118048 05001000 004889c7 e89dffff  P..H.....H......
 ffffffff80102310 ff48c7c7 15601080 e8d12800 0048c7c7  .H...`....(..H..
 ffffffff80102320 24601080 e8c52800 00e89021 000048c7  $`....(....!..H.
 ffffffff80102330 c72d6010 80e8b428 000048c7 c73c6010  .-`....(..H..<`.
 ffffffff80102340 80e8a828 000048c7 c0205011 80480500  ...(..H.. P..H..
 ffffffff80102350 10000048 89c7e8c5 feffff48 c7c74560  ...H.......H..E`
 ffffffff80102360 1080e887 28000048 c7c75360 1080e87b  ....(..H..S`...{
 ffffffff80102370 28000048 8b45e848 89c7e844 1b000048  (..H.E.H...D...H
 ffffffff80102380 c7c75f60 1080e863 28000048 c7c77060  .._`...c(..H..p`
 ffffffff80102390 1080e857 28000048 b8ffffff ff0f0000  ...W(..H........
 ffffffff801023a0 00488945 f8488b45 f8c70000 00000048  .H.E.H.E.......H
 ffffffff801023b0 8b054a2c 01004889 c7e8282d 000048c7  ..J,..H...(-..H.
 ffffffff801023c0 c7786010 80e82428 0000488b 45e84889  .x`...$(..H.E.H.
 ffffffff801023d0 c7e82aec ffff90c9 c3f30f1e fa554889  ..*..........UH.
 ffffffff801023e0 e54883ec 2848897d e88975e4 488955d8  .H..(H.}..u.H.U.
 ffffffff801023f0 c745fc00 0000008b 45fc4839 45d87e15  .E......E.H9E.~.
 ffffffff80102400 8b55fc48 8b45e848 01d08b55 e4881083  .U.H.E.H...U....
 ffffffff80102410 45fc01eb e2488b45 e8c9c3f3 0f1efa55  E....H.E.......U
 ffffffff80102420 4889e548 83ec3848 897dd848 8975d048  H..H..8H.}.H.u.H
 ffffffff80102430 8955c848 8b45d848 8945e848 8b45d048  .U.H.E.H.E.H.E.H
 ffffffff80102440 8945e048 8b45c848 83f80376 2a488b45  .E.H.E.H...v*H.E
 ffffffff80102450 e0488d50 04488955 e08b1048 8b45e848  .H.P.H.U...H.E.H
 ffffffff80102460 8d480448 894de889 10488b45 c84883e8  .H.H.M...H.E.H..
 ffffffff80102470 04488945 c8ebcc48 8b45e848 8945f848  .H.E...H.E.H.E.H
 ffffffff80102480 8b45e048 8945f048 837dc800 7e24488b  .E.H.E.H.}..~$H.
 ffffffff80102490 45f0488d 50014889 55f00fb6 10488b45  E.H.P.H.U....H.E
 ffffffff801024a0 f8488d48 0148894d f8881048 836dc801  .H.H.H.M...H.m..
 ffffffff801024b0 ebd5488b 45d8c9c3 f30f1efa 554889e5  ..H.E.......UH..
 ffffffff801024c0 4883ec20 897dec8b 45ec83c0 288945fc  H.. .}..E...(.E.
 ffffffff801024d0 8345fc28 8b0d264b 00008b45 fcba0000  .E.(..&K...E....
 ffffffff801024e0 0000f7f1 89d085c0 75158b35 104b0000  ........u..5.K..
 ffffffff801024f0 8b45fcba 00000000 f7f68945 fceb168b  .E.........E....
 ffffffff80102500 0dfb4a00 008b45fc ba000000 00f7f183  ..J...E.........
 ffffffff80102510 c0018945 fc8b05e9 4a000039 45fc7309  ...E....J..9E.s.
 ffffffff80102520 8b05de4a 00008945 fc8b45fc 89c7e8e5  ...J...E..E.....
 ffffffff80102530 2b000048 8945f048 837df000 7519488b  +..H.E.H.}..u.H.
 ffffffff80102540 05fb3a01 004883c0 01488905 f03a0100  ..:..H...H...:..
 ffffffff80102550 b8000000 00eb6948 8b45f048 c7000000  ......iH.E.H....
 ffffffff80102560 0000488b 45f048c7 40080000 0000488b  ..H.E.H.@.....H.
 ffffffff80102570 45f08b55 fc895010 8b05824a 00000faf  E..U..P....J....
 ffffffff80102580 45fc89c2 488b45f0 89501448 8b45f0c7  E...H.E..P.H.E..
 ffffffff80102590 40182800 0000488b 45f048c7 40200000  @.(...H.E.H.@ ..
 ffffffff801025a0 0000488b 45f08b40 1489c248 8b057e3a  ..H.E..@...H..~:
 ffffffff801025b0 01004801 d0488905 743a0100 488b45f0  ..H..H..t:..H.E.
 ffffffff801025c0 c9c3f30f 1efa5548 89e54883 ec704889  ......UH..H..pH.
 ffffffff801025d0 7d98c745 fc000000 0048c745 f0000000  }..E.....H.E....
 ffffffff801025e0 0048c745 e8000000 00488b45 98488945  .H.E.....H.E.H.E
 ffffffff801025f0 b0488345 b020e805 2b000048 837db000  .H.E. ..+..H.}..
 ffffffff80102600 7526488b 05373a01 004883c0 01488905  u&H..7:..H...H..
 ffffffff80102610 2c3a0100 e8f32a00 00bf0100 0000e89f  ,:....*.........
 ffffffff80102620 ffffffe9 0a070000 488b05f1 39010048  ........H...9..H
 ffffffff80102630 85c0752d 488b45b0 89c7e879 feffff48  ..u-H.E....y...H
 ffffffff80102640 8905da39 0100488b 05d33901 004885c0  ...9..H...9..H..
 ffffffff80102650 750fe8b5 2a0000b8 00000000 e9d10600  u...*...........
 ffffffff80102660 00488b05 b8390100 488945e0 c745fc00  .H...9..H.E..E..
 ffffffff80102670 00000048 8b05ae39 01004885 c0743e48  ...H...9..H..t>H
 ffffffff80102680 8b05a239 01008b50 14488b05 98390100  ...9...P.H...9..
 ffffffff80102690 8b401829 c289d089 c0488945 f0488b45  .@.).....H.E.H.E
 ffffffff801026a0 b04883c0 28483945 f0761248 8b057639  .H..(H9E.v.H..v9
 ffffffff801026b0 01004889 45e0c745 fc010000 0048837d  ..H.E..E.....H.}
 ffffffff801026c0 e0000f84 60060000 488b45e0 8b501448  ....`...H.E..P.H
 ffffffff801026d0 8b45e08b 401829c2 89d089c0 488945a8  .E..@.).....H.E.
 ffffffff801026e0 488b45f0 483b45a8 7313488b 45e04889  H.E.H;E.s.H.E.H.
 ffffffff801026f0 05333901 00488b45 a8488945 f0488b45  .39..H.E.H.E.H.E
 ffffffff80102700 b04883c0 28483945 a8737a48 8b45e048  .H..(H9E.szH.E.H
 ffffffff80102710 8b400848 85c07411 488b45e0 488b4008  .@.H..t.H.E.H.@.
 ffffffff80102720 488945e0 e9f60500 00837dfc 01751748  H.E.......}..u.H
 ffffffff80102730 8b05ea38 01004889 45e0c745 fc000000  ...8..H.E..E....
 ffffffff80102740 00e9d905 0000488b 45b089c7 e867fdff  ......H.E....g..
 ffffffff80102750 ff488b55 e0488942 08488b45 e0488b40  .H.U.H.B.H.E.H.@
 ffffffff80102760 084885c0 0f84ba05 0000488b 45e0488b  .H........H.E.H.
 ffffffff80102770 4008488b 55e04889 10488b45 e0488b40  @.H.U.H..H.E.H.@
 ffffffff80102780 08488945 e0488b45 e0488b40 204885c0  .H.E.H.E.H.@ H..
 ffffffff80102790 0f850401 0000488b 45e04883 c0284889  ......H.E.H..(H.
 ffffffff801027a0 c2488b45 e0488950 20488b45 e0488b40  .H.E.H.P H.E.H.@
 ffffffff801027b0 20c74018 dec001c0 488b45e0 488b4020   .@.....H.E.H.@ 
 ffffffff801027c0 48c70000 00000048 8b45e048 8b402048  H......H.E.H.@ H
 ffffffff801027d0 c7400800 00000048 8b45e048 8b402048  .@.....H.E.H.@ H
 ffffffff801027e0 8b55e048 89501048 8b45e048 8b402048  .U.H.P.H.E.H.@ H
 ffffffff801027f0 8b55b089 501c488b 45e0488b 4020488b  .U..P.H.E.H.@ H.
 ffffffff80102800 55988950 20488b45 e08b4018 488b55b0  U..P H.E..@.H.U.
 ffffffff80102810 01d08d50 28488b45 e0895018 488b1515  ...P(H.E..P.H...
 ffffffff80102820 38010048 8b45b048 01d04889 05073801  8..H.E.H..H...8.
 ffffffff80102830 00488b45 e0488b40 204883c0 28488945  .H.E.H.@ H..(H.E
 ffffffff80102840 e8488b45 e84883c0 10488945 e8488b45  .H.E.H...H.E.H.E
 ffffffff80102850 e883e00f 488945d0 48837dd0 00741cb8  ....H.E.H.}..t..
 ffffffff80102860 10000000 482b45d0 488945d0 488b55e8  ....H+E.H.E.H.U.
 ffffffff80102870 488b45d0 4801d048 8945e848 8b45d08d  H.E.H..H.E.H.E..
 ffffffff80102880 5010488b 45e84883 e8108810 e87b2800  P.H.E.H......{(.
 ffffffff80102890 00488b45 e8e99804 0000488b 45e0488b  .H.E......H.E.H.
 ffffffff801028a0 40204889 45a8488b 45e04829 45a84883  @ H.E.H.E.H)E.H.
 ffffffff801028b0 6da82848 8b45b048 83c02848 3945a80f  m.(H.E.H..(H9E..
 ffffffff801028c0 821e0100 00488b45 e0488d50 28488b45  .....H.E.H.P(H.E
 ffffffff801028d0 e0488b40 20488910 488b45e0 488b4020  .H.@ H..H.E.H.@ 
 ffffffff801028e0 488b0048 8b55e048 8b522048 89500848  H..H.U.H.R H.P.H
 ffffffff801028f0 8b45e048 8b402048 8b10488b 45e04889  .E.H.@ H..H.E.H.
 ffffffff80102900 5020488b 45e0488b 4020c740 18dec001  P H.E.H.@ .@....
 ffffffff80102910 c0488b45 e0488b40 2048c700 00000000  .H.E.H.@ H......
 ffffffff80102920 488b45e0 488b4020 488b55e0 48895010  H.E.H.@ H.U.H.P.
 ffffffff80102930 488b45e0 488b4020 488b55b0 89501c48  H.E.H.@ H.U..P.H
 ffffffff80102940 8b45e048 8b402048 8b559889 5020488b  .E.H.@ H.U..P H.
 ffffffff80102950 45e08b40 18488b55 b001d08d 5028488b  E..@.H.U....P(H.
 ffffffff80102960 45e08950 18488b15 cc360100 488b45b0  E..P.H...6..H.E.
 ffffffff80102970 4801d048 8905be36 0100488b 45e0488b  H..H...6..H.E.H.
 ffffffff80102980 40204883 c0284889 45e8488b 45e84883  @ H..(H.E.H.E.H.
 ffffffff80102990 c0104889 45e8488b 45e883e0 0f488945  ..H.E.H.E....H.E
 ffffffff801029a0 c848837d c800741c b8100000 00482b45  .H.}..t......H+E
 ffffffff801029b0 c8488945 c8488b55 e8488b45 c84801d0  .H.E.H.U.H.E.H..
 ffffffff801029c0 488945e8 488b45c8 8d501048 8b45e848  H.E.H.E..P.H.E.H
 ffffffff801029d0 83e81088 10e83227 0000488b 45e8e94f  ......2'..H.E..O
 ffffffff801029e0 03000048 8b45e048 8b402048 8945d848  ...H.E.H.@ H.E.H
 ffffffff801029f0 837dd800 0f84c302 0000488b 45d8488b  .}........H.E.H.
 ffffffff80102a00 40084885 c00f8548 01000048 8b45e08b  @.H....H...H.E..
 ffffffff80102a10 401489c2 488b45e0 4801d048 8945a848  @...H.E.H..H.E.H
 ffffffff80102a20 8b45d848 2945a848 836da828 488b45d8  .E.H)E.H.m.(H.E.
 ffffffff80102a30 8b401c89 c0482945 a8488b45 b04883c0  .@...H)E.H.E.H..
 ffffffff80102a40 28483945 a80f8208 01000048 8b45d88b  (H9E.......H.E..
 ffffffff80102a50 401c89c2 488b45d8 4801d048 83c02848  @...H.E.H..H..(H
 ffffffff80102a60 89c2488b 45d84889 5008488b 45d8488b  ..H.E.H.P.H.E.H.
 ffffffff80102a70 4008488b 55d84889 10488b45 d8488b40  @.H.U.H..H.E.H.@
 ffffffff80102a80 08488945 d8488b45 d848c740 08000000  .H.E.H.E.H.@....
 ffffffff80102a90 00488b45 d8c74018 dec001c0 488b45d8  .H.E..@.....H.E.
 ffffffff80102aa0 488b55e0 48895010 488b45b0 89c2488b  H.U.H.P.H.E...H.
 ffffffff80102ab0 45d88950 1c488b45 9889c248 8b45d889  E..P.H.E...H.E..
 ffffffff80102ac0 5020488b 45e08b40 18488b55 b001d08d  P H.E..@.H.U....
 ffffffff80102ad0 5028488b 45e08950 18488b15 58350100  P(H.E..P.H..X5..
 ffffffff80102ae0 488b45b0 4801d048 89054a35 0100488b  H.E.H..H..J5..H.
 ffffffff80102af0 45d84883 c0284889 45e8488b 45e84883  E.H..(H.E.H.E.H.
 ffffffff80102b00 c0104889 45e8488b 45e883e0 0f488945  ..H.E.H.E....H.E
 ffffffff80102b10 c048837d c000741c b8100000 00482b45  .H.}..t......H+E
 ffffffff80102b20 c0488945 c0488b55 e8488b45 c04801d0  .H.E.H.U.H.E.H..
 ffffffff80102b30 488945e8 488b45c0 8d501048 8b45e848  H.E.H.E..P.H.E.H
 ffffffff80102b40 83e81088 10e8c225 0000488b 45e8e9df  .......%..H.E...
 ffffffff80102b50 01000048 8b45d848 8b400848 85c00f84  ...H.E.H.@.H....
 ffffffff80102b60 48010000 488b45d8 488b4008 488945a8  H...H.E.H.@.H.E.
 ffffffff80102b70 488b45d8 482945a8 48836da8 28488b45  H.E.H)E.H.m.(H.E
 ffffffff80102b80 d88b401c 89c04829 45a8488b 45b04883  ..@...H)E.H.E.H.
 ffffffff80102b90 c0284839 45a80f82 10010000 488b45d8  .(H9E.......H.E.
 ffffffff80102ba0 8b401c89 c2488b45 d84801d0 4883c028  .@...H.E.H..H..(
 ffffffff80102bb0 488945a0 488b45a0 c74018de c001c048  H.E.H.E..@.....H
 ffffffff80102bc0 8b45d848 8b500848 8b45a048 89500848  .E.H.P.H.E.H.P.H
 ffffffff80102bd0 8b45a048 8b55d848 8910488b 45b089c2  .E.H.U.H..H.E...
 ffffffff80102be0 488b45a0 89501c48 8b459889 c2488b45  H.E..P.H.E...H.E
 ffffffff80102bf0 a0895020 488b45a0 488b55e0 48895010  ..P H.E.H.U.H.P.
 ffffffff80102c00 488b45d8 488b4008 488b55a0 48891048  H.E.H.@.H.U.H..H
 ffffffff80102c10 8b45d848 8b55a048 89500848 8b45e08b  .E.H.U.H.P.H.E..
 ffffffff80102c20 4018488b 55b001d0 8d502848 8b45e089  @.H.U....P(H.E..
 ffffffff80102c30 5018488b 15ff3301 00488b45 b04801d0  P.H...3..H.E.H..
 ffffffff80102c40 488905f1 33010048 8b45a048 83c02848  H...3..H.E.H..(H
 ffffffff80102c50 8945e848 8b45e848 83c01048 8945e848  .E.H.E.H...H.E.H
 ffffffff80102c60 8b45e883 e00f4889 45b84883 7db80074  .E....H.E.H.}..t
 ffffffff80102c70 1cb81000 0000482b 45b84889 45b8488b  ......H+E.H.E.H.
 ffffffff80102c80 55e8488b 45b84801 d0488945 e8488b45  U.H.E.H..H.E.H.E
 ffffffff80102c90 b88d5010 488b45e8 4883e810 8810e869  ..P.H.E.H......i
 ffffffff80102ca0 24000048 8b45e8e9 86000000 488b45d8  $..H.E......H.E.
 ffffffff80102cb0 488b4008 488945d8 e932fdff ff488b45  H.@.H.E..2...H.E
 ffffffff80102cc0 e0488b40 084885c0 7549837d fc017514  .H.@.H..uI.}..u.
 ffffffff80102cd0 488b0549 33010048 8945e0c7 45fc0000  H..I3..H.E..E...
 ffffffff80102ce0 0000eb3b 488b45b0 89c7e8c9 f7ffff48  ...;H.E........H
 ffffffff80102cf0 8b55e048 89420848 8b45e048 8b400848  .U.H.B.H.E.H.@.H
 ffffffff80102d00 85c07423 488b45e0 488b4008 488b55e0  ..t#H.E.H.@.H.U.
 ffffffff80102d10 48891048 8b45e048 8b400848 8945e0e9  H..H.E.H.@.H.E..
 ffffffff80102d20 99f9ffff 90eb0190 e8df2300 00b80000  ..........#.....
 ffffffff80102d30 0000c9c3 f30f1efa 554889e5 4883ec30  ........UH..H..0
 ffffffff80102d40 48897dd8 48837dd8 00751748 8b05ee32  H.}.H.}..u.H...2
 ffffffff80102d50 01004883 c0014889 05e33201 00e99702  ..H...H...2.....
 ffffffff80102d60 0000488b 45d84883 e8100fb6 00480fbe  ..H.E.H......H..
 ffffffff80102d70 c0488945 f848837d f81f770c 488b45d8  .H.E.H.}..w.H.E.
 ffffffff80102d80 482b45f8 488945d8 e8732300 00488b45  H+E.H.E..s#..H.E
 ffffffff80102d90 d84883e8 28488945 f0488b45 f08b4018  .H..(H.E.H.E..@.
 ffffffff80102da0 3ddec001 c00f8497 00000048 8b059632  =..........H...2
 ffffffff80102db0 01004883 c0014889 058b3201 00488b45  ..H...H...2..H.E
 ffffffff80102dc0 f08b4018 25ffffff 003ddec0 01007422  ..@.%....=....t"
 ffffffff80102dd0 488b45f0 8b40180f b7c03dde c0000074  H.E..@....=....t
 ffffffff80102de0 11488b45 f08b4018 0fb6c03d de000000  .H.E..@....=....
 ffffffff80102df0 751e488b 05573201 004883c0 01488905  u.H..W2..H...H..
 ffffffff80102e00 4c320100 48c7c788 601080e8 de1d0000  L2..H...`.......
 ffffffff80102e10 488b45f0 8b40183d addeadde 750e48c7  H.E..@.=....u.H.
 ffffffff80102e20 c7c06010 80e8c41d 0000eb0c 48c7c7ec  ..`.........H...
 ffffffff80102e30 601080e8 b61d0000 e8cf2200 00e9b701  `.........".....
 ffffffff80102e40 0000488b 45f0488b 40104889 45e8488b  ..H.E.H.@.H.E.H.
 ffffffff80102e50 15e33101 00488b45 f08b401c 89c04829  ..1..H.E..@...H)
 ffffffff80102e60 c24889d0 488905cd 31010048 8b45e88b  .H..H...1..H.E..
 ffffffff80102e70 5018488b 45f08b40 1c29c289 d08d50d8  P.H.E..@.)....P.
 ffffffff80102e80 488b45e8 89501848 8b45f0c7 4018adde  H.E..P.H.E..@...
 ffffffff80102e90 adde488b 45f0488b 40084885 c0741248  ..H.E.H.@.H..t.H
 ffffffff80102ea0 8b45f048 8b400848 8b55f048 8b124889  .E.H.@.H.U.H..H.
 ffffffff80102eb0 10488b45 f0488b00 4885c074 13488b45  .H.E.H..H..t.H.E
 ffffffff80102ec0 f0488b00 488b55f0 488b5208 48895008  .H..H.U.H.R.H.P.
 ffffffff80102ed0 488b45f0 488b0048 85c07510 488b45f0  H.E.H..H..u.H.E.
 ffffffff80102ee0 488b5008 488b45e8 48895020 488b45e8  H.P.H.E.H.P H.E.
 ffffffff80102ef0 488b4020 4885c00f 85a80000 00488b05  H.@ H........H..
 ffffffff80102f00 1c310100 483945e8 750f488b 45e8488b  .1..H9E.u.H.E.H.
 ffffffff80102f10 40084889 05073101 00488b05 08310100  @.H...1..H...1..
 ffffffff80102f20 483945e8 750b48c7 05f73001 00000000  H9E.u.H...0.....
 ffffffff80102f30 00488b45 e8488b00 4885c074 13488b45  .H.E.H..H..t.H.E
 ffffffff80102f40 e8488b00 488b55e8 488b5208 48895008  .H..H.U.H.R.H.P.
 ffffffff80102f50 488b45e8 488b4008 4885c074 12488b45  H.E.H.@.H..t.H.E
 ffffffff80102f60 e8488b40 08488b55 e8488b12 48891048  .H.@.H.U.H..H..H
 ffffffff80102f70 8b15ba30 0100488b 45e88b40 1489c048  ...0..H.E..@...H
 ffffffff80102f80 29c24889 d0488905 a4300100 488b45e8  ).H..H...0..H.E.
 ffffffff80102f90 8b401089 c2488b45 e889d648 89c7e88b  .@...H.E...H....
 ffffffff80102fa0 210000eb 4f488b05 7c300100 4885c074  !...OH..|0..H..t
 ffffffff80102fb0 43488b05 70300100 8b501448 8b056630  CH..p0...P.H..f0
 ffffffff80102fc0 01008b40 1829c289 d08945e4 488b45e8  ...@.)....E.H.E.
 ffffffff80102fd0 8b501448 8b45e88b 401829c2 89d08945  .P.H.E..@.)....E
 ffffffff80102fe0 e08b45e0 3b45e47e 0b488b45 e8488905  ..E.;E.~.H.E.H..
 ffffffff80102ff0 34300100 e8132100 00c9c3f3 0f1efa55  40....!........U
 ffffffff80103000 4889e548 83ec2048 897de848 8975e048  H..H.. H.}.H.u.H
 ffffffff80103010 8b45e889 c2488b45 e00fafc2 8945fc8b  .E...H.E.....E..
 ffffffff80103020 45fc4898 4889c7e8 96f5ffff 488945f0  E.H.H.......H.E.
 ffffffff80103030 8b45fc48 63d0488b 45f0be00 00000048  .E.Hc.H.E......H
 ffffffff80103040 89c7e892 f3ffff48 8b45f0c9 c3f30f1e  .......H.E......
 ffffffff80103050 fa554889 e54883ec 3048897d d8488975  .UH..H..0H.}.H.u
 ffffffff80103060 d048837d d0007516 488b45d8 4889c7e8  .H.}..u.H.E.H...
 ffffffff80103070 c0fcffff b8000000 00e93001 00004883  ..........0...H.
 ffffffff80103080 7dd80075 11488b45 d04889c7 e831f5ff  }..u.H.E.H...1..
 ffffffff80103090 ffe91801 0000488b 45d84889 45f8488b  ......H.E.H.E.H.
 ffffffff801030a0 45f84883 e8100fb6 00480fbe c0488945  E.H......H...H.E
 ffffffff801030b0 f048837d f01f770c 488b45f8 482b45f0  .H.}..w.H.E.H+E.
 ffffffff801030c0 488945f8 e8372000 00488b45 f84883e8  H.E..7 ..H.E.H..
 ffffffff801030d0 28488945 e8488b45 e88b4018 3ddec001  (H.E.H.E..@.=...
 ffffffff801030e0 c0746548 8b055e2f 01004883 c0014889  .teH..^/..H...H.
 ffffffff801030f0 05532f01 00488b45 e88b4018 25ffffff  .S/..H.E..@.%...
 ffffffff80103100 003ddec0 01007422 488b45e8 8b40180f  .=....t"H.E..@..
 ffffffff80103110 b7c03dde c0000074 11488b45 e88b4018  ..=....t.H.E..@.
 ffffffff80103120 0fb6c03d de000000 7512488b 051f2f01  ...=....u.H.../.
 ffffffff80103130 004883c0 01488905 142f0100 e8cb1f00  .H...H.../......
 ffffffff80103140 00b80000 0000eb66 488b45e8 8b402089  .......fH.E..@ .
 ffffffff80103150 45e48b45 e4483945 d07f1848 8b45d089  E..E.H9E...H.E..
 ffffffff80103160 c2488b45 e8895020 e89f1f00 00488b45  .H.E..P .....H.E
 ffffffff80103170 d8eb3be8 941f0000 488b45d0 4889c7e8  ..;.....H.E.H...
 ffffffff80103180 3ef4ffff 488945f8 8b55e448 8b4dd848  >...H.E..U.H.M.H
 ffffffff80103190 8b45f848 89ce4889 c7e87df2 ffff488b  .E.H..H...}...H.
 ffffffff801031a0 45d84889 c7e88afb ffff488b 45f8c9c3  E.H.......H.E...
 ffffffff801031b0 f30f1efa 554889e5 4883ec10 48897df8  ....UH..H...H.}.
 ffffffff801031c0 488975f0 488b55f8 488b45f0 4801d048  H.u.H.U.H.E.H..H
 ffffffff801031d0 83e801ba 00000000 48f775f0 480faf45  ........H.u.H..E
 ffffffff801031e0 f0c9c3f3 0f1efa55 4889e548 83ec2848  .......UH..H..(H
 ffffffff801031f0 897dd848 816dd800 10000048 8b45d848  .}.H.m.....H.E.H
 ffffffff80103200 c1e80c48 8945f848 8b45f848 c1e80548  ...H.E.H.E.H...H
 ffffffff80103210 8945f048 8b45f883 e01f4889 45e8488b  .E.H.E....H.E.H.
 ffffffff80103220 05eb3d01 00488b55 f048c1e2 024801d0  ..=..H.U.H...H..
 ffffffff80103230 8b10488b 45e8be01 00000089 c1d3e689  ..H.E...........
 ffffffff80103240 f089c648 8b05c63d 0100488b 4df048c1  ...H...=..H.M.H.
 ffffffff80103250 e1024801 c809f289 1090c9c3 f30f1efa  ..H.............
 ffffffff80103260 554889e5 4883ec18 48897de8 c745fcff  UH..H...H.}..E..
 ffffffff80103270 ffffff48 8b05963d 0100488b 55e8480f  ...H...=..H.U.H.
 ffffffff80103280 a3100f92 c00fb6c0 8945fc8b 45fcc9c3  .........E..E...
 ffffffff80103290 f30f1efa 554889e5 4883ec18 48897de8  ....UH..H...H.}.
 ffffffff801032a0 c745fcff ffffff48 8b05623d 0100488b  .E.....H..b=..H.
 ffffffff801032b0 55e8480f ab100f92 c00fb6c0 8945fc8b  U.H..........E..
 ffffffff801032c0 45fcc9c3 f30f1efa 554889e5 4883ec18  E.......UH..H...
 ffffffff801032d0 48897de8 c745fc00 00000048 8b052e3d  H.}..E.....H...=
 ffffffff801032e0 0100488b 55e8480f b3100f92 c00fb6c0  ..H.U.H.........
 ffffffff801032f0 8945fcb8 00000000 c9c3f30f 1efa5548  .E............UH
 ffffffff80103300 89e54883 ec404889 7dc84889 75c0488b  ..H..@H.}.H.u.H.
 ffffffff80103310 45c848c1 e80c4889 45f8488b 45f84889  E.H...H.E.H.E.H.
 ffffffff80103320 45f0488b 45c04889 45e84881 6df00010  E.H.E.H.E.H.m...
 ffffffff80103330 0000488b 55e8488b 45f04801 d0488945  ..H.U.H.E.H..H.E
 ffffffff80103340 e0488b45 f0488945 d8488b45 e0483b45  .H.E.H.E.H.E.H;E
 ffffffff80103350 d87e1348 8b45d848 89c7e865 ffffff48  .~.H.E.H...e...H
 ffffffff80103360 8345d801 ebe39090 c9c3f30f 1efa5548  .E............UH
 ffffffff80103370 89e54883 ec084889 7df848ba 00000000  ..H...H.}.H.....
 ffffffff80103380 0080ffff 488b45f8 4801d0c9 c3f30f1e  ....H.E.H.......
 ffffffff80103390 fa554889 e54883ec 0848897d f848ba00  .UH..H...H.}.H..
 ffffffff801033a0 00000000 80000048 8b45f848 01d0c9c3  .......H.E.H....
 ffffffff801033b0 f30f1efa 554889e5 4883ec08 48897df8  ....UH..H...H.}.
 ffffffff801033c0 488b45f8 48050000 0080c9c3 f30f1efa  H.E.H...........
 ffffffff801033d0 554889e5 4883ec08 48897df8 ba000000  UH..H...H.}.....
 ffffffff801033e0 80488b45 f84801d0 c9c3f30f 1efa5548  .H.E.H........UH
 ffffffff801033f0 89e54883 ec284889 7dd8488b 45d848c1  ..H..(H.}.H.E.H.
 ffffffff80103400 e80c4889 45f8488b 45f848c1 e8054889  ..H.E.H.E.H...H.
 ffffffff80103410 45f0488b 45f883e0 1f488945 e8488b05  E.H.E....H.E.H..
 ffffffff80103420 ec3b0100 488b55f0 48c1e202 4801d08b  .;..H.U.H...H...
 ffffffff80103430 10488b45 e8be0100 000089c1 d3e689f0  .H.E............
 ffffffff80103440 f7d089c6 488b05c5 3b010048 8b4df048  ....H...;..H.M.H
 ffffffff80103450 c1e10248 01c821f2 891090c9 c3f30f1e  ...H..!.........
 ffffffff80103460 fa554889 e54883ec 2848897d d8488b45  .UH..H..(H.}.H.E
 ffffffff80103470 d848c1e8 0c488945 f8488b45 f848c1e8  .H...H.E.H.E.H..
 ffffffff80103480 05488945 f0488b45 f883e01f 488945e8  .H.E.H.E....H.E.
 ffffffff80103490 488b0579 3b010048 8b55f048 c1e20248  H..y;..H.U.H...H
 ffffffff801034a0 01d08b00 488b55e8 be010000 0089d1d3  ....H.U.........
 ffffffff801034b0 e689f221 d089c0c9 c3f30f1e fa554889  ...!.........UH.
 ffffffff801034c0 e54881ec a0000000 4889bd68 ffffff48  .H......H..h...H
 ffffffff801034d0 89b560ff ffff48c7 c7086110 80e80c17  ..`...H...a.....
 ffffffff801034e0 000048c7 051b3b00 00200000 0048c705  ..H...;.. ...H..
 ffffffff801034f0 183b0100 10701080 be000000 00bf0100  .;...p..........
 ffffffff80103500 0000e8b0 06000048 89053a3b 0102488b  .......H..:;..H.
 ffffffff80103510 05333b01 024889c7 e84dfeff ff488905  .3;..H...M...H..
 ffffffff80103520 243b0102 48c745f8 00000000 48817df8  $;..H.E.....H.}.
 ffffffff80103530 ff030000 771f488b 050b3b01 02488b55  ....w.H...;..H.U
 ffffffff80103540 f848c1e2 024801d0 c700ffff ffff4883  .H...H........H.
 ffffffff80103550 45f801eb d7488b05 ec3a0102 488905ad  E....H...:..H...
 ffffffff80103560 3a010048 c7059a3a 00000080 0000488b  :..H...:......H.
 ffffffff80103570 8560ffff ff488b40 08488945 c048c745  .`...H.@.H.E.H.E
 ffffffff80103580 f0000000 00488b85 60ffffff 488b5010  .....H..`...H.P.
 ffffffff80103590 488b45f0 4839c20f 86d80200 00488b55  H.E.H9.......H.U
 ffffffff801035a0 f04889d0 4801c048 01d048c1 e0034889  .H..H..H..H...H.
 ffffffff801035b0 c2488b45 c04801d0 488945b8 488b45b8  .H.E.H..H.E.H.E.
 ffffffff801035c0 488b0025 ff0f0000 4885c074 19488b45  H..%....H..t.H.E
 ffffffff801035d0 b8488b00 482500f0 ffff4805 00100000  .H..H%....H.....
 ffffffff801035e0 488945e8 eb0b488b 45b8488b 00488945  H.E...H.E.H..H.E
 ffffffff801035f0 e8488b45 b8488b40 08482500 f0ffff48  .H.E.H.@.H%....H
 ffffffff80103600 8945e048 8b45b848 8b0025ff 0f000048  .E.H.E.H..%....H
 ffffffff80103610 85c0740f 48837de0 00740848 816de000  ..t.H.}..t.H.m..
 ffffffff80103620 10000048 c745d800 00000048 8b45d848  ...H.E.....H.E.H
 ffffffff80103630 c1e00c48 3945e00f 8e2e0200 00488b45  ...H9E.......H.E
 ffffffff80103640 d848c1e0 0c4889c2 488b45e8 4801d048  .H...H..H.E.H..H
 ffffffff80103650 8945b048 8b45b048 c1e80c48 8945a848  .E.H.E.H...H.E.H
 ffffffff80103660 817db0ff 0f00010f 86f00100 00488b05  .}...........H..
 ffffffff80103670 94390000 48050010 000048c1 e00c4839  .9..H.....H...H9
 ffffffff80103680 45b00f82 6b010000 48c7c724 611080e8  E...k...H..$a...
 ffffffff80103690 5a150000 488b056d 39000048 c1e80548  Z...H..m9..H...H
 ffffffff801036a0 c1e00248 c1e80c48 8945a048 8b45a048  ...H...H.E.H.E.H
 ffffffff801036b0 83c00148 89459848 c7c73661 1080e82b  ...H.E.H..6a...+
 ffffffff801036c0 15000048 8b4598be 00000000 4889c7e8  ...H.E......H...
 ffffffff801036d0 e3040000 4889056d 39010248 8b056639  ....H..m9..H..f9
 ffffffff801036e0 01024889 c7e880fc ffff4889 05573901  ..H.......H..W9.
 ffffffff801036f0 0248c7c7 4a611080 e8f11400 0048c745  .H..Ja.......H.E
 ffffffff80103700 d0000000 00488b45 a048c1e0 0c48c1e8  .....H.E.H...H..
 ffffffff80103710 02483945 d0732f48 8b05f238 0100488b  .H9E.s/H...8..H.
 ffffffff80103720 55d048c1 e2024801 d0488b15 18390102  U.H...H..H...9..
 ffffffff80103730 488b4dd0 48c1e102 4801ca8b 00890248  H.M.H...H......H
 ffffffff80103740 8345d001 ebbf488b 45a048c1 e00c48c1  .E....H.E.H...H.
 ffffffff80103750 e8024889 45c8488b 459848c1 e00c48c1  ..H.E.H.E.H...H.
 ffffffff80103760 e8024839 45c8731f 488b05d9 38010248  ..H9E.s.H...8..H
 ffffffff80103770 8b55c848 c1e20248 01d0c700 ffffffff  .U.H...H........
 ffffffff80103780 488345c8 01ebcf48 c7c75e61 1080e85b  H.E....H..^a...[
 ffffffff80103790 14000048 8b056e38 00004805 00800000  ...H..n8..H.....
 ffffffff801037a0 48890561 38000048 8b056238 01004889  H..a8..H..b8..H.
 ffffffff801037b0 c7e8d7fb ffff4889 4590488b 05873801  ......H.E.H...8.
 ffffffff801037c0 02488905 48380100 48c7c772 611080e8  .H..H8..H..ra...
 ffffffff801037d0 1a140000 488b55a0 488b4590 4889d648  ....H.U.H.E.H..H
 ffffffff801037e0 89c7e813 fbffff48 c7c78861 1080e8fb  .......H...a....
 ffffffff801037f0 13000048 8b45b88b 401083f8 01756248  ...H.E..@....ubH
 ffffffff80103800 8b45a848 89458848 c7458001 00000048  .E.H.E.H.E.....H
 ffffffff80103810 816d8800 10000048 8b558048 8b458848  .m.....H.U.H.E.H
 ffffffff80103820 01d04889 8578ffff ff488b45 88488985  ..H..x...H.E.H..
 ffffffff80103830 70ffffff 488b8578 ffffff48 3b8570ff  p...H..x...H;.p.
 ffffffff80103840 ffff7e1c 488b8570 ffffff48 89c7e871  ..~.H..p...H...q
 ffffffff80103850 faffff48 838570ff ffff01eb d790eb01  ...H..p.........
 ffffffff80103860 90488345 d801e9c0 fdffff48 8345f001  .H.E.......H.E..
 ffffffff80103870 e910fdff ff48c7c7 9c611080 e86d1300  .....H...a...m..
 ffffffff80103880 0090c9c3 f30f1efa 554889e5 4883ec20  ........UH..H.. 
 ffffffff80103890 48c745f8 00000000 488b0569 37000048  H.E.....H..i7..H
 ffffffff801038a0 3945f873 7a488b05 64370100 488b55f8  9E.szH..d7..H.U.
 ffffffff801038b0 48c1e202 4801d08b 0083f8ff 745748c7  H...H.......tWH.
 ffffffff801038c0 45f00000 00004883 7df01f77 48488b45  E.....H.}..wHH.E
 ffffffff801038d0 f0ba0100 000089c1 d3e289d0 8945ec48  .............E.H
 ffffffff801038e0 8b052a37 0100488b 55f848c1 e2024801  ..*7..H.U.H...H.
 ffffffff801038f0 d08b0023 45ec85c0 7514488b 45f848c1  ...#E...u.H.E.H.
 ffffffff80103900 e0054889 c2488b45 f04801d0 eb164883  ..H..H.E.H....H.
 ffffffff80103910 45f001eb b1488345 f801e979 ffffffb8  E....H.E...y....
 ffffffff80103920 00000000 c9c3f30f 1efa5548 89e54883  ..........UH..H.
 ffffffff80103930 ec084889 7df8488b 45f84889 c7e8a8fa  ..H.}.H.E.H.....
 ffffffff80103940 ffff90c9 c3f30f1e fa554889 e54883ec  .........UH..H..
 ffffffff80103950 10e82eff ffff4889 45f84883 7df80075  ......H.E.H.}..u
 ffffffff80103960 1348c7c7 af611080 e8811200 00b80000  .H...a..........
 ffffffff80103970 0000eb18 488b45f8 48c1e00c 4889c7e8  ....H.E.H...H...
 ffffffff80103980 5ff8ffff 488b45f8 48c1e00c c9c3f30f  _...H.E.H.......
 ffffffff80103990 1efa5548 89e54883 ec704889 7d9889f0  ..UH..H..pH.}...
 ffffffff801039a0 88459480 7d94000f 84280100 00488b05  .E..}....(...H..
 ffffffff801039b0 74360100 4885c075 0b48c705 64360100  t6..H..u.H..d6..
 ffffffff801039c0 00100000 488b4598 488945f8 48c745e0  ....H.E.H.E.H.E.
 ffffffff801039d0 00000000 48c745e0 00000000 488b0525  ....H.E.....H..%
 ffffffff801039e0 36000048 3945e00f 83dc0000 00488b05  6..H9E.......H..
 ffffffff801039f0 14360000 488d9000 10000048 8b052636  .6..H......H..&6
 ffffffff80103a00 01004839 c2751348 c7051636 01000010  ..H9.u.H...6....
 ffffffff80103a10 0000488b 45984889 45f8488b 05073601  ..H.E.H.E.H...6.
 ffffffff80103a20 00488d50 01488915 fc350100 482d0010  .H.P.H...5..H-..
 ffffffff80103a30 00004889 c7e822f8 ffff85c0 0f94c084  ..H...".........
 ffffffff80103a40 c0747948 836df801 48837df8 000f94c0  .tyH.m..H.}.....
 ffffffff80103a50 84c07488 488b05cd 35010048 2b459848  ..t.H...5..H+E.H
 ffffffff80103a60 8945d848 8b459848 8945d048 816dd800  .E.H.E.H.E.H.m..
 ffffffff80103a70 10000048 8b55d048 8b45d848 01d04889  ...H.U.H.E.H..H.
 ffffffff80103a80 45c8488b 45d84889 45c0488b 45c8483b  E.H.E.H.E.H.E.H;
 ffffffff80103a90 45c07e13 488b45c0 4889c7e8 f0f7ffff  E.~.H.E.H.......
 ffffffff80103aa0 488345c0 01ebe390 488b0579 35010048  H.E.....H..y5..H
 ffffffff80103ab0 2b459848 c1e00ce9 f9000000 488b4598  +E.H........H.E.
 ffffffff80103ac0 488945f8 e913ffff ff48c7c7 d0611080  H.E......H...a..
 ffffffff80103ad0 e8191100 00488b45 98488945 f048c745  .....H.E.H.E.H.E
 ffffffff80103ae0 e8001000 0048c745 e8001000 00488b05  .....H.E.....H..
 ffffffff80103af0 14350000 48050010 00004839 45e80f83  .5..H.....H9E...
 ffffffff80103b00 a0000000 488b45e8 488d5001 488955e8  ....H.E.H.P.H.U.
 ffffffff80103b10 482d0010 00004889 c7e83ef7 ffff85c0  H-....H...>.....
 ffffffff80103b20 0f94c084 c0747048 836df001 48837df0  .....tpH.m..H.}.
 ffffffff80103b30 000f94c0 84c074b5 488b45e8 482b4598  ......t.H.E.H+E.
 ffffffff80103b40 488945b8 488b4598 488945b0 48816db8  H.E.H.E.H.E.H.m.
 ffffffff80103b50 00100000 488b55b0 488b45b8 4801d048  ....H.U.H.E.H..H
 ffffffff80103b60 8945a848 8b45b848 8945a048 8b45a848  .E.H.E.H.E.H.E.H
 ffffffff80103b70 3b45a07e 13488b45 a04889c7 e80ff7ff  ;E.~.H.E.H......
 ffffffff80103b80 ff488345 a001ebe3 90488b45 e8482b45  .H.E.....H.E.H+E
 ffffffff80103b90 9848c1e0 0ceb1e48 8b459848 8945f0e9  .H.....H.E.H.E..
 ffffffff80103ba0 49ffffff 48c7c708 621080e8 3e100000  I...H...b...>...
 ffffffff80103bb0 b8000000 00c9c3f3 0f1efa55 4889e548  ...........UH..H
 ffffffff80103bc0 83ec3048 897dd889 f08845d4 0fb655d4  ..0H.}....E...U.
 ffffffff80103bd0 488b45d8 89d64889 c7e8b0fd ffff4889  H.E...H.......H.
 ffffffff80103be0 45f0488b 45f04889 c7e87cf7 ffff4889  E.H.E.H...|...H.
 ffffffff80103bf0 45e848c7 45f80000 0000488b 45d848c1  E.H.E.....H.E.H.
 ffffffff80103c00 e00c48c1 e8034839 45f87321 488b45f8  ..H...H9E.s!H.E.
 ffffffff80103c10 488d14c5 00000000 488b45e8 4801d048  H.......H.E.H..H
 ffffffff80103c20 c7000000 00004883 45f801eb cd488b45  ......H.E....H.E
 ffffffff80103c30 f0c9c3f3 0f1efa55 4889e548 83ec7048  .......UH..H..pH
 ffffffff80103c40 897d9848 c7c73e62 1080e89f 0f0000be  .}.H..>b........
 ffffffff80103c50 00000000 bf010000 00e859ff ffff4889  ..........Y...H.
 ffffffff80103c60 c7e804f7 ffff4889 05934301 0248c745  ......H...C..H.E
 ffffffff80103c70 f8000000 0048817d f8ff1f00 00777148  .....H.}.....wqH
 ffffffff80103c80 8b45f848 c1e00c48 8945d048 8b4dd048  .E.H...H.E.H.M.H
 ffffffff80103c90 8b45d0ba 03000000 4889ce48 89c7e82d  .E......H..H...-
 ffffffff80103ca0 05000048 8b45d048 89c7e8bb f6ffff48  ...H.E.H.......H
 ffffffff80103cb0 89c1488b 45d0ba03 00000048 89ce4889  ..H.E......H..H.
 ffffffff80103cc0 c7e80a05 0000488b 45d04889 c7e8def6  ......H.E.H.....
 ffffffff80103cd0 ffff4889 c1488b45 d0ba0301 00004889  ..H..H.E......H.
 ffffffff80103ce0 ce4889c7 e8e70400 00488345 f801eb85  .H.......H.E....
 ffffffff80103cf0 48c7c74f 621080e8 f20e0000 488b05fd  H..Ob.......H...
 ffffffff80103d00 42010248 89c7e882 f6ffff48 89c7e8d3  B..H.......H....
 ffffffff80103d10 13000048 8b45980f b740220f b7d0488b  ...H.E...@"...H.
 ffffffff80103d20 45980fb7 40240fb7 c00fafd0 488b4598  E...@$......H.E.
 ffffffff80103d30 0fb74026 0fb7c00f afc24898 488945c8  ..@&......H.H.E.
 ffffffff80103d40 488b4598 488b4018 48c1e80c 488945f0  H.E.H.@.H...H.E.
 ffffffff80103d50 488b4598 488b5018 488b45c8 4801d048  H.E.H.P.H.E.H..H
 ffffffff80103d60 c1e80c48 83c00148 3945f073 36488b45  ...H...H9E.s6H.E
 ffffffff80103d70 f048c1e0 0c488945 c0488b45 c04889c7  .H...H.E.H.E.H..
 ffffffff80103d80 e8e5f5ff ff4889c1 488b45c0 ba030000  .....H..H.E.....
 ffffffff80103d90 004889ce 4889c7e8 34040000 488345f0  .H..H...4...H.E.
 ffffffff80103da0 01ebad48 c7c76062 1080e83f 0e000048  ...H..`b...?...H
 ffffffff80103db0 8b459848 8b400848 8945b848 c745e800  .E.H.@.H.E.H.E..
 ffffffff80103dc0 00000048 8b459848 8b401048 3945e80f  ...H.E.H.@.H9E..
 ffffffff80103dd0 83d00000 00488b55 e84889d0 4801c048  .....H.U.H..H..H
 ffffffff80103de0 01d048c1 e0034889 c2488b45 b84801d0  ..H...H..H.E.H..
 ffffffff80103df0 488945b0 488b45b0 488b0048 2500f0ff  H.E.H.E.H..H%...
 ffffffff80103e00 ff488945 a8488b45 b0488b40 08be0010  .H.E.H.E.H.@....
 ffffffff80103e10 00004889 c7e896f3 ffff4889 45e0488b  ..H.......H.E.H.
 ffffffff80103e20 45b0488b 0025ff0f 00004885 c0740848  E.H..%....H..t.H
 ffffffff80103e30 8145e000 10000048 c745d800 00000048  .E.....H.E.....H
 ffffffff80103e40 8b45d848 c1e00c48 3945e076 4e488b45  .E.H...H9E.vNH.E
 ffffffff80103e50 d848c1e0 0c4889c2 488b45a8 4801d048  .H...H..H.E.H..H
 ffffffff80103e60 8945a0b8 feffffff 483945a0 7e25488b  .E......H9E.~%H.
 ffffffff80103e70 45a04889 c7e8f0f4 ffff4889 c1488b45  E.H.......H..H.E
 ffffffff80103e80 a0ba0300 00004889 ce4889c7 e83f0300  ......H..H...?..
 ffffffff80103e90 00eb0190 488345d8 01eba448 8345e801  ....H.E....H.E..
 ffffffff80103ea0 e91effff ff488b05 54410102 4889c7e8  .....H..TA..H...
 ffffffff80103eb0 32120000 48c7c771 621080e8 2e0d0000  2...H..qb.......
 ffffffff80103ec0 90c9c3f3 0f1efa55 4889e548 83ec6048  .......UH..H..`H
 ffffffff80103ed0 897da848 8b45a848 8b400848 8945f048  .}.H.E.H.@.H.E.H
 ffffffff80103ee0 8d45b0be 40000000 4889c7e8 b5110000  .E..@...H.......
 ffffffff80103ef0 c745fc00 0000008b 45fc4863 d0488b45  .E......E.Hc.H.E
 ffffffff80103f00 a8488b40 104839c2 0f832102 000048c7  .H.@.H9...!...H.
 ffffffff80103f10 c7856210 80e8d40c 00008b45 fc4863d0  ..b........E.Hc.
 ffffffff80103f20 4889d048 01c04801 d048c1e0 034889c2  H..H..H..H...H..
 ffffffff80103f30 488b45f0 4801d08b 401083f8 01740c3d  H.E.H...@....t.=
 ffffffff80103f40 01100000 7413e9db 01000048 c7c79662  ....t......H...b
 ffffffff80103f50 1080e897 0c0000eb 0d48c7c7 a4621080  .........H...b..
 ffffffff80103f60 e8890c00 00908b45 fc4863d0 4889d048  .......E.Hc.H..H
 ffffffff80103f70 01c04801 d048c1e0 034889c2 488b45f0  ..H..H...H..H.E.
 ffffffff80103f80 4801d048 8b500848 8b057230 01004801  H..H.P.H..r0..H.
 ffffffff80103f90 d0488905 68300100 8b45fc48 63d04889  .H..h0...E.Hc.H.
 ffffffff80103fa0 d04801c0 4801d048 c1e00348 89c2488b  .H..H..H...H..H.
 ffffffff80103fb0 45f04801 d0488b10 488d45b0 be780000  E.H..H..H.E..x..
 ffffffff80103fc0 004889c7 e87f1100 0048c7c7 ab621080  .H.......H...b..
 ffffffff80103fd0 e8190c00 00488d45 b04889c7 e80d0c00  .....H.E.H......
 ffffffff80103fe0 00488d45 b0be4000 00004889 c7e8b310  .H.E..@...H.....
 ffffffff80103ff0 00008b45 fc4863d0 4889d048 01c04801  ...E.Hc.H..H..H.
 ffffffff80104000 d048c1e0 034889c2 488b45f0 4801d048  .H...H..H.E.H..H
 ffffffff80104010 8b48088b 45fc4863 d04889d0 4801c048  .H..E.Hc.H..H..H
 ffffffff80104020 01d048c1 e0034889 c2488b45 f04801d0  ..H...H..H.E.H..
 ffffffff80104030 488b0048 8d140148 8d45b0be 78000000  H..H...H.E..x...
 ffffffff80104040 4889c7e8 00110000 48c7c7bc 621080e8  H.......H...b...
 ffffffff80104050 9a0b0000 488d45b0 4889c7e8 8e0b0000  ....H.E.H.......
 ffffffff80104060 488d45b0 be400000 004889c7 e8341000  H.E..@...H...4..
 ffffffff80104070 008b45fc 4863d048 89d04801 c04801d0  ..E.Hc.H..H..H..
 ffffffff80104080 48c1e003 4889c248 8b45f048 01d0488b  H...H..H.E.H..H.
 ffffffff80104090 5008488d 45b0be78 00000048 89c7e8a5  P.H.E..x...H....
 ffffffff801040a0 10000048 c7c7cb62 1080e83f 0b000048  ...H...b...?...H
 ffffffff801040b0 8d45b048 89c7e833 0b000048 8d45b0be  .E.H...3...H.E..
 ffffffff801040c0 40000000 4889c7e8 d90f0000 8b45fc48  @...H........E.H
 ffffffff801040d0 63d04889 d04801c0 4801d048 c1e00348  c.H..H..H..H...H
 ffffffff801040e0 89c2488b 45f04801 d08b5010 488d45b0  ..H.E.H...P.H.E.
 ffffffff801040f0 be780000 004889c7 e8361100 0048c7c7  .x...H...6...H..
 ffffffff80104100 dd621080 e8e50a00 00488d45 b04889c7  .b.......H.E.H..
 ffffffff80104110 e8d90a00 00488d45 b0be4000 00004889  .....H.E..@...H.
 ffffffff80104120 c7e87f0f 00008345 fc01e9c8 fdffff48  .......E.......H
 ffffffff80104130 8d45b0be 40000000 4889c7e8 650f0000  .E..@...H...e...
 ffffffff80104140 488b0db9 2e010048 ba110000 01001000  H......H........
 ffffffff80104150 004889c8 48f7e248 89c84829 d048d1e8  .H..H..H..H).H..
 ffffffff80104160 4801d048 c1e81348 89c2488d 45b0be64  H..H...H..H.E..d
 ffffffff80104170 00000048 89c7e8cd 0f000048 c7c7ed62  ...H.......H...b
 ffffffff80104180 1080e867 0a000048 8d45b048 89c7e85b  ...g...H.E.H...[
 ffffffff80104190 0a000048 c7c70663 1080e84f 0a000048  ...H...c...O...H
 ffffffff801041a0 8b055a2e 0100488b 55a84889 d64889c7  ..Z...H.U.H..H..
 ffffffff801041b0 e804f3ff ff48c7c7 14631080 e82d0a00  .....H...c...-..
 ffffffff801041c0 00488b45 a84889c7 e866faff ff90c9c3  .H.E.H...f......
 ffffffff801041d0 f30f1efa 554889e5 4883ec60 48897db8  ....UH..H..`H.}.
 ffffffff801041e0 488975b0 488955a8 488b45b8 48c1e827  H.u.H.U.H.E.H..'
 ffffffff801041f0 25ff0100 00488945 e0488b45 b848c1e8  %....H.E.H.E.H..
 ffffffff80104200 1e25ff01 00004889 45d8488b 45b848c1  .%....H.E.H.E.H.
 ffffffff80104210 e81525ff 01000048 8945d048 8b45b848  ..%....H.E.H.E.H
 ffffffff80104220 c1e80c25 ff010000 488945c8 48c745f8  ...%....H.E.H.E.
 ffffffff80104230 00000000 488b05c5 3d010248 8b55e048  ....H...=..H.U.H
 ffffffff80104240 c1e20348 01d0488b 0083e001 4885c074  ...H..H.....H..t
 ffffffff80104250 29488b05 a83d0102 488b55e0 48c1e203  )H...=..H.U.H...
 ffffffff80104260 4801d048 8b004825 00f0ffff 4889c7e8  H..H..H%....H...
 ffffffff80104270 f6f0ffff 488945f8 eb40be01 000000bf  ....H.E..@......
 ffffffff80104280 01000000 e82ef9ff ff4889c7 e8d9f0ff  .........H......
 ffffffff80104290 ff488945 f8488b45 f84889c7 e8ecf0ff  .H.E.H.E.H......
 ffffffff801042a0 ff488b15 583d0102 488b4de0 48c1e103  .H..X=..H.M.H...
 ffffffff801042b0 4801ca48 83c80748 890248c7 45f00000  H..H...H..H.E...
 ffffffff801042c0 0000488b 45d8488d 14c50000 0000488b  ..H.E.H.......H.
 ffffffff801042d0 45f84801 d0488b00 83e00148 85c0742a  E.H..H.....H..t*
 ffffffff801042e0 488b45d8 488d14c5 00000000 488b45f8  H.E.H.......H.E.
 ffffffff801042f0 4801d048 8b004825 00f0ffff 4889c7e8  H..H..H%....H...
 ffffffff80104300 66f0ffff 488945f0 eb41be01 000000bf  f...H.E..A......
 ffffffff80104310 01000000 e89ef8ff ff4889c7 e849f0ff  .........H...I..
 ffffffff80104320 ff488945 f0488b45 f04889c7 e85cf0ff  .H.E.H.E.H...\..
 ffffffff80104330 ff488b55 d8488d0c d5000000 00488b55  .H.U.H.......H.U
 ffffffff80104340 f84801ca 4883c807 48890248 c745e800  .H..H...H..H.E..
 ffffffff80104350 00000048 8b45d048 8d14c500 00000048  ...H.E.H.......H
 ffffffff80104360 8b45f848 01d0488b 0083e001 4885c074  .E.H..H.....H..t
 ffffffff80104370 2a488b45 d0488d14 c5000000 00488b45  *H.E.H.......H.E
 ffffffff80104380 f04801d0 488b0048 2500f0ff ff4889c7  .H..H..H%....H..
 ffffffff80104390 e8d5efff ff488945 e8eb41be 01000000  .....H.E..A.....
 ffffffff801043a0 bf010000 00e80df8 ffff4889 c7e8b8ef  ..........H.....
 ffffffff801043b0 ffff4889 45e8488b 45e84889 c7e8cbef  ..H.E.H.E.H.....
 ffffffff801043c0 ffff488b 55d0488d 0cd50000 0000488b  ..H.U.H.......H.
 ffffffff801043d0 55f04801 ca4883c8 07488902 488b45c8  U.H..H...H..H.E.
 ffffffff801043e0 488d14c5 00000000 488b45e8 4801c248  H.......H.E.H..H
 ffffffff801043f0 8b45b048 0b45a848 890290c9 c3f30f1e  .E.H.E.H........
 ffffffff80104400 fa554889 e5be1100 0000bf20 000000e8  .UH........ ....
 ffffffff80104410 fb0e0000 eb00eb00 be110000 00bfa000  ................
 ffffffff80104420 0000e8e8 0e0000eb 00eb00be 20000000  ............ ...
 ffffffff80104430 bf210000 00e8d50e 0000eb00 eb00be28  .!.............(
 ffffffff80104440 000000bf a1000000 e8c20e00 00eb00eb  ................
 ffffffff80104450 00be0400 0000bf21 000000e8 af0e0000  .......!........
 ffffffff80104460 eb00eb00 be020000 00bfa100 0000e89c  ................
 ffffffff80104470 0e0000eb 00eb00be 01000000 bf210000  .............!..
 ffffffff80104480 00e8890e 0000eb00 eb00be01 000000bf  ................
 ffffffff80104490 a1000000 e8760e00 00eb00eb 00be0000  .....v..........
 ffffffff801044a0 0000bf21 000000e8 630e0000 be000000  ...!....c.......
 ffffffff801044b0 00bfa100 0000e854 0e000090 5dc3f30f  .......T....]...
 ffffffff801044c0 1efa5548 89e54883 ec1048c7 c7236310  ..UH..H...H..#c.
 ffffffff801044d0 80e81807 000048c7 c72f6310 80e80c07  ......H../c.....
 ffffffff801044e0 0000c745 fc000000 00837dfc 4f0f8fc0  ...E......}.O...
 ffffffff801044f0 0000008b 45fc4898 488b04c5 40711080  ....E.H.H...@q..
 ffffffff80104500 89c68b45 fc489848 8b04c540 71108048  ...E.H.H...@q..H
 ffffffff80104510 c1e81089 c18b45fc 4898488b 04c54071  ......E.H.H...@q
 ffffffff80104520 108048c1 e82089c2 8b45fc48 9848c1e0  ..H.. ...E.H.H..
 ffffffff80104530 044805a0 80118266 89308b45 fc489848  .H.....f.0.E.H.H
 ffffffff80104540 c1e00448 05a28011 8266c700 08008b45  ...H.....f.....E
 ffffffff80104550 fc489848 c1e00448 05a48011 82c60000  .H.H...H........
 ffffffff80104560 8b45fc48 9848c1e0 044805a5 801182c6  .E.H.H...H......
 ffffffff80104570 008e8b45 fc489848 c1e00448 05a68011  ...E.H.H...H....
 ffffffff80104580 82668908 8b45fc48 9848c1e0 044805a8  .f...E.H.H...H..
 ffffffff80104590 80118289 108b45fc 489848c1 e0044805  ......E.H.H...H.
 ffffffff801045a0 ac801182 c7000000 00008345 fc01e936  ...........E...6
 ffffffff801045b0 ffffff48 c7c74163 1080e82f 0600000f  ...H..Ac.../....
 ffffffff801045c0 011d5a2a 000048c7 c7576310 80e81c06  ..Z*..H..Wc.....
 ffffffff801045d0 0000e826 feffff48 c7c76363 1080e80b  ...&...H..cc....
 ffffffff801045e0 06000048 c7c77463 1080e8ff 05000048  ...H..tc.......H
 ffffffff801045f0 c7c78563 1080e8f3 05000090 c9c3f30f  ...c............
 ffffffff80104600 1efa5548 89e54883 ec104889 7df84889  ..UH..H...H.}.H.
 ffffffff80104610 75f0be40 00000048 c7c72080 1182e882  u..@...H.. .....
 ffffffff80104620 0a000048 8b45f848 89c2be78 00000048  ...H.E.H...x...H
 ffffffff80104630 c7c72080 1182e80d 0b000048 c7c7dc64  .. ........H...d
 ffffffff80104640 1080e809 06000048 8b45f048 89c7e8fd  .......H.E.H....
 ffffffff80104650 05000048 c7c7e064 1080e8f1 05000048  ...H...d.......H
 ffffffff80104660 c7c7e464 1080e8e5 05000048 c7c72080  ...d.......H.. .
 ffffffff80104670 1182e8d9 05000090 c9c3f30f 1efa5548  ..............UH
 ffffffff80104680 89e54883 ec204889 7de848c7 c7e76410  ..H.. H.}.H...d.
 ffffffff80104690 80e85805 000048c7 c7fd6410 80e84c05  ..X...H...d...L.
 ffffffff801046a0 0000488b 45e8488b 80880000 0048c7c6  ..H.E.H......H..
 ffffffff801046b0 14651080 4889c7e8 42ffffff 488b45e8  .e..H...B...H.E.
 ffffffff801046c0 488b80a0 00000048 c7c61765 10804889  H......H...e..H.
 ffffffff801046d0 c7e828ff ffff48c7 c71a6510 80e80c05  ..(...H...e.....
 ffffffff801046e0 000048c7 c71c6510 80e80005 0000488b  ..H...e.......H.
 ffffffff801046f0 45e8488b 403848c7 c62c6510 804889c7  E.H.@8H..,e..H..
 ffffffff80104700 e8f9feff ff488b45 e8488b40 3048c7c6  .....H.E.H.@0H..
 ffffffff80104710 2f651080 4889c7e8 e2feffff 488b45e8  /e..H.......H.E.
 ffffffff80104720 488b4028 48c7c632 65108048 89c7e8cb  H.@(H..2e..H....
 ffffffff80104730 feffff48 c7c71a65 1080e8af 04000048  ...H...e.......H
 ffffffff80104740 8b45e848 8b402048 c7c63665 10804889  .E.H.@ H..6e..H.
 ffffffff80104750 c7e8a8fe ffff488b 45e8488b 401848c7  ......H.E.H.@.H.
 ffffffff80104760 c63a6510 804889c7 e891feff ff488b45  .:e..H.......H.E
 ffffffff80104770 e8488b40 1048c7c6 3e651080 4889c7e8  .H.@.H..>e..H...
 ffffffff80104780 7afeffff 48c7c71a 651080e8 5e040000  z...H...e...^...
 ffffffff80104790 488b45e8 488b4008 48c7c642 65108048  H.E.H.@.H..Be..H
 ffffffff801047a0 89c7e857 feffff48 8b45e848 8b0048c7  ...W...H.E.H..H.
 ffffffff801047b0 c6466510 804889c7 e841feff ff48c7c7  .Fe..H...A...H..
 ffffffff801047c0 1a651080 e8250400 0048c7c7 4a651080  .e...%...H..Je..
 ffffffff801047d0 e8190400 00488b45 e8488b80 98000000  .....H.E.H......
 ffffffff801047e0 48c7c65f 65108048 89c7e80f feffff48  H.._e..H.......H
 ffffffff801047f0 8b45e848 8b404048 c7c66365 10804889  .E.H.@@H..ce..H.
 ffffffff80104800 c7e8f8fd ffff488b 45e8488b 404848c7  ......H.E.H.@HH.
 ffffffff80104810 c6676510 804889c7 e8e1fdff ff48c7c7  .ge..H.......H..
 ffffffff80104820 1a651080 e8c50300 00488b45 e8488b40  .e.......H.E.H.@
 ffffffff80104830 5048c7c6 6b651080 4889c7e8 befdffff  PH..ke..H.......
 ffffffff80104840 488b45e8 488b4058 48c7c66f 65108048  H.E.H.@XH..oe..H
 ffffffff80104850 89c7e8a7 fdffff48 8b45e848 8b406048  .......H.E.H.@`H
 ffffffff80104860 c7c67365 10804889 c7e890fd ffff48c7  ..se..H.......H.
 ffffffff80104870 c71a6510 80e87403 0000488b 45e8488b  ..e...t...H.E.H.
 ffffffff80104880 406848c7 c6776510 804889c7 e86dfdff  @hH..we..H...m..
 ffffffff80104890 ff488b45 e8488b40 7048c7c6 7b651080  .H.E.H.@pH..{e..
 ffffffff801048a0 4889c7e8 56fdffff 48c7c71a 651080e8  H...V...H...e...
 ffffffff801048b0 3a030000 48c7c77f 651080e8 2e030000  :...H...e.......
 ffffffff801048c0 488b45e8 8b407889 c048c7c6 92651080  H.E..@x..H...e..
 ffffffff801048d0 4889c7e8 26fdffff 488b45e8 8b407c89  H...&...H.E..@|.
 ffffffff801048e0 c048c7c6 9d651080 4889c7e8 0efdffff  .H...e..H.......
 ffffffff801048f0 48c7c71a 651080e8 f2020000 488b45e8  H...e.......H.E.
 ffffffff80104900 488b8080 00000048 c7c6a465 10804889  H......H...e..H.
 ffffffff80104910 c7e8e8fc ffff488b 45e8488b 80900000  ......H.E.H.....
 ffffffff80104920 0048c7c6 a8651080 4889c7e8 cefcffff  .H...e..H.......
 ffffffff80104930 48c7c71a 651080e8 b2020000 48c7c7af  H...e.......H...
 ffffffff80104940 651080e8 a6020000 0f22d048 8945f848  e........".H.E.H
 ffffffff80104950 8b45f848 c7c6c065 10804889 c7e89cfc  .E.H...e..H.....
 ffffffff80104960 ffff90c9 c3f30f1e fa554889 e54883ec  .........UH..H..
 ffffffff80104970 10897dfc 837dfc27 7e0fbe20 000000bf  ..}..}.'~.. ....
 ffffffff80104980 a0000000 e8860900 00be2000 0000bf20  .......... .... 
 ffffffff80104990 000000e8 77090000 90c9c3f3 0f1efa55  ....w..........U
 ffffffff801049a0 4889e548 83ec0889 7dfc837d fc1f7e07  H..H....}..}..~.
 ffffffff801049b0 b8000000 00eb2a83 7dfc0174 18837dfc  ......*.}..t..}.
 ffffffff801049c0 0f741283 7dfc147e 06837dfc 1d7e0683  .t..}..~..}..~..
 ffffffff801049d0 7dfc1f75 07b80000 0000eb05 b8010000  }..u............
 ffffffff801049e0 00c9c3f3 0f1efa55 4889e548 83ec2048  .......UH..H.. H
 ffffffff801049f0 897de848 c7c7c465 1080e8ef 01000048  .}.H...e.......H
 ffffffff80104a00 8b45e88b 407c89c7 e88effff ff84c00f  .E..@|..........
 ffffffff80104a10 84af0000 00c745fc 00000000 488b45e8  ......E.....H.E.
 ffffffff80104a20 8b507c89 d0c1e002 01d0c1e0 0689c28b  .P|.............
 ffffffff80104a30 45fc39c2 7614488b 45e88b40 7c89c7e8  E.9.v.H.E..@|...
 ffffffff80104a40 57ffffff 8345fc01 ebd248c7 c7d96510  W....E....H...e.
 ffffffff80104a50 80e89801 0000488b 45e88b40 7c89c048  ......H.E..@|..H
 ffffffff80104a60 8b04c540 70108048 89c7e87f 01000048  ...@p..H.......H
 ffffffff80104a70 8b45e848 89c7e8ff fbffffbe 40000000  .E.H........@...
 ffffffff80104a80 48c7c760 801182e8 19060000 488b45e8  H..`........H.E.
 ffffffff80104a90 488b8080 00000048 89c2be78 00000048  H......H...x...H
 ffffffff80104aa0 c7c76080 1182e89d 06000048 c7c7e565  ..`........H...e
 ffffffff80104ab0 1080e837 01000048 c7c76080 1182e82b  ...7...H..`....+
 ffffffff80104ac0 010000f4 488b45e8 8b407c89 c7e893fe  ....H.E..@|.....
 ffffffff80104ad0 ffffbe40 00000048 c7c76080 1182e8c2  ...@...H..`.....
 ffffffff80104ae0 05000048 8b45e88b 407c89c2 be640000  ...H.E..@|...d..
 ffffffff80104af0 0048c7c7 60801182 e8370800 0048c7c7  .H..`....7...H..
 ffffffff80104b00 eb651080 e8e50000 0048c7c7 60801182  .e.......H..`...
 ffffffff80104b10 e8d90000 00be4000 000048c7 c7608011  ......@...H..`..
 ffffffff80104b20 82e87f05 0000488b 45e8488b 80800000  ......H.E.H.....
 ffffffff80104b30 004889c2 be780000 0048c7c7 60801182  .H...x...H..`...
 ffffffff80104b40 e8030600 0048c7c7 e5651080 e89d0000  .....H...e......
 ffffffff80104b50 0048c7c7 60801182 e8910000 0090c9c3  .H..`...........
 ffffffff80104b60 f30f1efa 554889e5 4883ec10 897dfc89  ....UH..H....}..
 ffffffff80104b70 f08845f8 8b45fc89 c7e8f708 00000fb6  ..E..E..........
 ffffffff80104b80 45f80fb6 d08b45fc 0fb7c089 d689c7e8  E.....E.........
 ffffffff80104b90 7b070000 90c9c3f3 0f1efa55 4889e548  {..........UH..H
 ffffffff80104ba0 83ec2089 7dec4889 75e08955 e8488b45  .. .}.H.u..U.H.E
 ffffffff80104bb0 e0488945 f0c745fc 00000000 8b45fc3b  .H.E..E......E.;
 ffffffff80104bc0 45e87d25 8b45fc48 63d0488b 45f04801  E.}%.E.Hc.H.E.H.
 ffffffff80104bd0 d00fb600 0fbed08b 45ec89d6 89c7e87d  ........E......}
 ffffffff80104be0 ffffff83 45fc01eb d38b45e8 c9c3f30f  ....E.....E.....
 ffffffff80104bf0 1efa5548 89e54883 ec204889 7de8c745  ..UH..H.. H.}..E
 ffffffff80104c00 fc000000 008b45fc 4863d048 8b45e848  ......E.Hc.H.E.H
 ffffffff80104c10 01d00fb6 0084c074 258b45fc 4863d048  .......t%.E.Hc.H
 ffffffff80104c20 8b45e848 01d00fb6 000fbec0 89c6bff8  .E.H............
 ffffffff80104c30 030000e8 28ffffff 8345fc01 ebc7be0a  ....(....E......
 ffffffff80104c40 000000bf f8030000 e813ffff ff90c9c3  ................
 ffffffff80104c50 f30f1efa 554889e5 4883ec20 48897de8  ....UH..H.. H.}.
 ffffffff80104c60 c745fc00 0000008b 45fc4863 d0488b45  .E......E.Hc.H.E
 ffffffff80104c70 e84801d0 0fb60084 c074258b 45fc4863  .H.......t%.E.Hc
 ffffffff80104c80 d0488b45 e84801d0 0fb6000f bec089c6  .H.E.H..........
 ffffffff80104c90 bff80300 00e8c6fe ffff8345 fc01ebc7  ...........E....
 ffffffff80104ca0 90c9c3f3 0f1efa55 4889e548 83ec1089  .......UH..H....
 ffffffff80104cb0 7dfc8b45 fc83c002 0fb7c0be 00000000  }..E............
 ffffffff80104cc0 89c7e848 0600008b 45fc83c0 030fb7c0  ...H....E.......
 ffffffff80104cd0 be800000 0089c7e8 33060000 8b45fc0f  ........3....E..
 ffffffff80104ce0 b7c0be03 00000089 c7e82106 00008b45  ..........!....E
 ffffffff80104cf0 fc83c001 0fb7c0be 00000000 89c7e80c  ................
 ffffffff80104d00 0600008b 45fc83c0 030fb7c0 be030000  ....E...........
 ffffffff80104d10 0089c7e8 f7050000 8b45fc83 c0020fb7  .........E......
 ffffffff80104d20 c0bec700 000089c7 e8e20500 008b45fc  ..............E.
 ffffffff80104d30 83c0040f b7c0be0b 00000089 c7e8cd05  ................
 ffffffff80104d40 000090c9 c3662e0f 1f840000 00000090  .....f..........
 ffffffff80104d50 488b4424 040f0118 c3fafc50 53515256  H.D$.......PSQRV
 ffffffff80104d60 57554150 41514152 41534154 41554156  WUAPAQARASATAUAV
 ffffffff80104d70 41574889 e7e869fc ffff415f 415e415d  AWH...i...A_A^A]
 ffffffff80104d80 415c415b 415a4159 41585d5f 5e5a595b  A\A[AZAYAX]_^ZY[
 ffffffff80104d90 584883c4 08fb48cf 6a00c744 24040000  XH....H.j..D$...
 ffffffff80104da0 0000ebb5 6a00c744 24040100 0000eba9  ....j..D$.......
 ffffffff80104db0 6a00c744 24040200 0000eb9d 6a00c744  j..D$.......j..D
 ffffffff80104dc0 24040300 0000eb91 6a00c744 24040400  $.......j..D$...
 ffffffff80104dd0 0000eb85 6a00c744 24040500 0000e976  ....j..D$......v
 ffffffff80104de0 ffffff6a 00c74424 04060000 00e967ff  ...j..D$......g.
 ffffffff80104df0 ffff6a00 c7442404 07000000 e958ffff  ..j..D$......X..
 ffffffff80104e00 ffc74424 04080000 00e94bff ffff6a00  ..D$......K...j.
 ffffffff80104e10 c7442404 09000000 e93cffff ffc74424  .D$......<....D$
 ffffffff80104e20 040a0000 00e92fff ffffc744 24040b00  ....../....D$...
 ffffffff80104e30 0000e922 ffffffc7 4424040c 000000e9  ..."....D$......
 ffffffff80104e40 15ffffff c7442404 0d000000 e908ffff  .....D$.........
 ffffffff80104e50 ffc74424 040e0000 00e9fbfe ffff6a00  ..D$..........j.
 ffffffff80104e60 c7442404 0f000000 e9ecfeff ff6a00c7  .D$..........j..
 ffffffff80104e70 44240410 000000e9 ddfeffff 6a00c744  D$..........j..D
 ffffffff80104e80 24041100 0000e9ce feffff6a 00c74424  $..........j..D$
 ffffffff80104e90 04120000 00e9bffe ffff6a00 c7442404  ..........j..D$.
 ffffffff80104ea0 13000000 e9b0feff ff6a00c7 44240414  .........j..D$..
 ffffffff80104eb0 000000e9 a1feffff 6a00c744 24041500  ........j..D$...
 ffffffff80104ec0 0000e992 feffff6a 00c74424 04160000  .......j..D$....
 ffffffff80104ed0 00e983fe ffff6a00 c7442404 17000000  ......j..D$.....
 ffffffff80104ee0 e974feff ff6a00c7 44240418 000000e9  .t...j..D$......
 ffffffff80104ef0 65feffff 6a00c744 24041900 0000e956  e...j..D$......V
 ffffffff80104f00 feffff6a 00c74424 041a0000 00e947fe  ...j..D$......G.
 ffffffff80104f10 ffff6a00 c7442404 1b000000 e938feff  ..j..D$......8..
 ffffffff80104f20 ff6a00c7 4424041c 000000e9 29feffff  .j..D$......)...
 ffffffff80104f30 6a00c744 24041d00 0000e91a feffffc7  j..D$...........
 ffffffff80104f40 4424041e 000000e9 0dfeffff 6a00c744  D$..........j..D
 ffffffff80104f50 24041f00 0000e9fe fdffff6a 00c74424  $..........j..D$
 ffffffff80104f60 04200000 00e9effd ffff6a00 c7442404  . ........j..D$.
 ffffffff80104f70 21000000 e9e0fdff ff6a00c7 44240422  !........j..D$."
 ffffffff80104f80 000000e9 d1fdffff 6a00c744 24042300  ........j..D$.#.
 ffffffff80104f90 0000e9c2 fdffff6a 00c74424 04240000  .......j..D$.$..
 ffffffff80104fa0 00e9b3fd ffff6a00 c7442404 25000000  ......j..D$.%...
 ffffffff80104fb0 e9a4fdff ff6a00c7 44240426 000000e9  .....j..D$.&....
 ffffffff80104fc0 95fdffff 6a00c744 24042700 0000e986  ....j..D$.'.....
 ffffffff80104fd0 fdffff6a 00c74424 04280000 00e977fd  ...j..D$.(....w.
 ffffffff80104fe0 ffff6a00 c7442404 29000000 e968fdff  ..j..D$.)....h..
 ffffffff80104ff0 ff6a00c7 4424042a 000000e9 59fdffff  .j..D$.*....Y...
 ffffffff80105000 6a00c744 24042b00 0000e94a fdffff6a  j..D$.+....J...j
 ffffffff80105010 00c74424 042c0000 00e93bfd ffff6a00  ..D$.,....;...j.
 ffffffff80105020 c7442404 2d000000 e92cfdff ff6a00c7  .D$.-....,...j..
 ffffffff80105030 4424042e 000000e9 1dfdffff 6a00c744  D$..........j..D
 ffffffff80105040 24042f00 0000e90e fdffff6a 00c74424  $./........j..D$
 ffffffff80105050 04320000 00e9fffc ffff6a00 c7442404  .2........j..D$.
 ffffffff80105060 7f000000 e9f0fcff ff0f1f80 00000000  ................
 ffffffff80105070 554889e5 4889f80f 00d85dc3 0f1f4000  UH..H.....]...@.
 ffffffff80105080 554889e5 0f011766 b810008e d08ed88e  UH.....f........
 ffffffff80105090 c08ee08e e848b8a3 501080ff ffffff56  .....H..P......V
 ffffffff801050a0 5048cb5d c3f30f1e fa554889 e54883ec  PH.].....UH..H..
 ffffffff801050b0 2048897d e8488975 e048c745 f8000000   H.}.H.u.H.E....
 ffffffff801050c0 00488b45 f8483b45 e0731548 8b55e848  .H.E.H;E.s.H.U.H
 ffffffff801050d0 8b45f848 01d0c600 00488345 f801ebe1  .E.H.....H.E....
 ffffffff801050e0 488b45e8 c9c3f30f 1efa5548 89e54883  H.E.......UH..H.
 ffffffff801050f0 ec084889 7df8488b 45f80f20 d890c9c3  ..H.}.H.E.. ....
 ffffffff80105100 f30f1efa 554889e5 fa905dc3 f30f1efa  ....UH....].....
 ffffffff80105110 554889e5 fb905dc3 f30f1efa 554889e5  UH....].....UH..
 ffffffff80105120 4883ec08 897dfcb8 00000000 c9c3f30f  H....}..........
 ffffffff80105130 1efa5548 89e54883 ec104889 7df88975  ..UH..H...H.}..u
 ffffffff80105140 f4b80000 0000c9c3 f30f1efa 554889e5  ............UH..
 ffffffff80105150 4883ec58 48897db8 8975b448 8955a848  H..XH.}..u.H.U.H
 ffffffff80105160 8b45b848 8945f848 8b45a848 8945e048  .E.H.E.H.E.H.E.H
 ffffffff80105170 c745d80a 00000083 7db47875 0848c745  .E......}.xu.H.E
 ffffffff80105180 d8100000 00488b45 e0ba0000 000048f7  .....H.E......H.
 ffffffff80105190 75d84889 55d04883 7dd00977 0b488b45  u.H.U.H.}..w.H.E
 ffffffff801051a0 d083c030 89c1eb09 488b45d0 83c05789  ...0....H.E...W.
 ffffffff801051b0 c1488b45 f8488d50 01488955 f8880848  .H.E.H.P.H.U...H
 ffffffff801051c0 8b45e0ba 00000000 48f775d8 488945e0  .E......H.u.H.E.
 ffffffff801051d0 48837de0 000f95c0 84c07402 eba7488b  H.}.......t...H.
 ffffffff801051e0 45f8c600 00488b45 b8488945 f0488b45  E....H.E.H.E.H.E
 ffffffff801051f0 f84883e8 01488945 e8488b45 f0483b45  .H...H.E.H.E.H;E
 ffffffff80105200 e8732d48 8b45f00f b6008845 cf488b45  .s-H.E.....E.H.E
 ffffffff80105210 e80fb610 488b45f0 8810488b 45e80fb6  ....H.E...H.E...
 ffffffff80105220 55cf8810 488345f0 0148836d e801ebc9  U...H.E..H.m....
 ffffffff80105230 90c9c3f3 0f1efa55 4889e548 83ec4048  .......UH..H..@H
 ffffffff80105240 897dc889 75c48955 c0488b45 c8488945  .}..u..U.H.E.H.E
 ffffffff80105250 f88b45c0 8945e4c7 45e00a00 0000837d  ..E..E..E......}
 ffffffff80105260 c4787507 c745e010 0000008b 45e4ba00  .xu..E......E...
 ffffffff80105270 000000f7 75e08955 dc837ddc 09770a8b  ....u..U..}..w..
 ffffffff80105280 45dc83c0 3089c1eb 088b45dc 83c05789  E...0.....E...W.
 ffffffff80105290 c1488b45 f8488d50 01488955 f888088b  .H.E.H.P.H.U....
 ffffffff801052a0 45e4ba00 000000f7 75e08945 e4837de4  E.......u..E..}.
 ffffffff801052b0 000f95c0 84c07402 ebb1488b 45f8c600  ......t...H.E...
 ffffffff801052c0 00488b45 c8488945 f0488b45 f84883e8  .H.E.H.E.H.E.H..
 ffffffff801052d0 01488945 e8488b45 f0483b45 e8732d48  .H.E.H.E.H;E.s-H
 ffffffff801052e0 8b45f00f b6008845 db488b45 e80fb610  .E.....E.H.E....
 ffffffff801052f0 488b45f0 8810488b 45e80fb6 55db8810  H.E...H.E...U...
 ffffffff80105300 488345f0 0148836d e801ebc9 90c9c3f3  H.E..H.m........
 ffffffff80105310 0f1efa55 4889e548 83ec0889 f889f266  ...UH..H.......f
 ffffffff80105320 8945fc89 d08845f8 0fb645f8 0fb755fc  .E....E...E...U.
 ffffffff80105330 ee90c9c3 f30f1efa 554889e5 4883ec40  ........UH..H..@
 ffffffff80105340 48897dc8 8975c489 55c0488b 45c84889  H.}..u..U.H.E.H.
 ffffffff80105350 45f88b45 c0489848 8945e0c7 45dc0a00  E..E.H.H.E..E...
 ffffffff80105360 0000837d c4647527 837dc000 7921488b  ...}.du'.}..y!H.
 ffffffff80105370 45f8488d 50014889 55f8c600 2d488345  E.H.P.H.U...-H.E
 ffffffff80105380 c8018b45 c0f7d848 98488945 e0eb0d83  ...E...H.H.E....
 ffffffff80105390 7dc47875 07c745dc 10000000 8b45dc48  }.xu..E......E.H
 ffffffff801053a0 63c8488b 45e0ba00 00000048 f7f14889  c.H.E......H..H.
 ffffffff801053b0 d08945d8 837dd809 7f0a8b45 d883c030  ..E..}.....E...0
 ffffffff801053c0 89c1eb08 8b45d883 c05789c1 488b45f8  .....E...W..H.E.
 ffffffff801053d0 488d5001 488955f8 88088b45 dc4863f0  H.P.H.U....E.Hc.
 ffffffff801053e0 488b45e0 ba000000 0048f7f6 488945e0  H.E......H..H.E.
 ffffffff801053f0 48837de0 000f95c0 84c07402 eb9e488b  H.}.......t...H.
 ffffffff80105400 45f8c600 00488b45 c8488945 f0488b45  E....H.E.H.E.H.E
 ffffffff80105410 f84883e8 01488945 e8488b45 f0483b45  .H...H.E.H.E.H;E
 ffffffff80105420 e8732d48 8b45f00f b6008845 d7488b45  .s-H.E.....E.H.E
 ffffffff80105430 e80fb610 488b45f0 8810488b 45e80fb6  ....H.E...H.E...
 ffffffff80105440 55d78810 488345f0 0148836d e801ebc9  U...H.E..H.m....
 ffffffff80105450 90c9c3f3 0f1efa55 4889e548 83ec1889  .......UH..H....
 ffffffff80105460 f8668945 ec0fb745 ec89c2ec 8845ff0f  .f.E...E.....E..
 ffffffff80105470 b645ffc9 c3f30f1e fa554889 e54883ec  .E.......UH..H..
 ffffffff80105480 10897dfc 8b45fc83 c0050fb7 c089c7e8  ..}..E..........
 ffffffff80105490 bfffffff 0fb6c083 e02085c0 0f94c084  ......... ......
 ffffffff801054a0 c07402eb df90c9c3                    .t......        
Contenu de la section .rodata :
 ffffffff80106000 68656c6c 6f20776f 726c6400 696e6974  hello world.init
 ffffffff80106010 20676474 00696e69 74206764 74203a20   gdt.init gdt : 
 ffffffff80106020 e29c8500 696e6974 20696474 00696e69  ....init idt.ini
 ffffffff80106030 74206964 74203a20 e29c8500 696e6974  t idt : ....init
 ffffffff80106040 20747373 00696e69 74207473 73203a20   tss.init tss : 
 ffffffff80106050 4f4b0069 6e697420 70616769 6e670069  OK.init paging.i
 ffffffff80106060 6e697420 70616769 6e67203a 204f4b00  nit paging : OK.
 ffffffff80106070 6d617070 696e6700 6d617070 696e6720  mapping.mapping 
 ffffffff80106080 6f6b0000 00000000 6c696261 6c6c6f63  ok......liballoc
 ffffffff80106090 3a204552 524f523a 20506f73 7369626c  : ERROR: Possibl
 ffffffff801060a0 6520312d 33206279 7465206f 76657272  e 1-3 byte overr
 ffffffff801060b0 756e2066 6f72206d 61676963 20000000  un for magic ...
 ffffffff801060c0 6c696261 6c6c6f63 3a204552 524f523a  liballoc: ERROR:
 ffffffff801060d0 206d756c 7469706c 65202866 72656529   multiple (free)
 ffffffff801060e0 28292061 7474656d 70742000 6c696261  () attempt .liba
 ffffffff801060f0 6c6c6f63 3a204552 524f523a 62616420  lloc: ERROR:bad 
 ffffffff80106100 66726565 20000000 6c6f6164 696e6720  free ...loading 
 ffffffff80106110 696e6974 69616c20 6672616d 65207461  initial frame ta
 ffffffff80106120 626c6500 7265616c 6f636174 74652062  ble.realocatte b
 ffffffff80106130 69746d61 70007265 616c6f63 61747465  itmap.realocatte
 ffffffff80106140 20626974 6d617020 31007265 616c6f63   bitmap 1.realoc
 ffffffff80106150 61747465 20626974 6d617020 32007265  atte bitmap 2.re
 ffffffff80106160 616c6f63 61747465 20626974 6d617020  alocatte bitmap 
 ffffffff80106170 33007265 616c6f63 61747465 20626974  3.realocatte bit
 ffffffff80106180 6d617020 332e3500 7265616c 6f636174  map 3.5.realocat
 ffffffff80106190 74652062 69746d61 70203400 6c6f6164  te bitmap 4.load
 ffffffff801061a0 696e6720 6672616d 65203a20 4f4b0065  ing frame : OK.e
 ffffffff801061b0 72726f72 206e6f74 20656e6f 75676874  rror not enought
 ffffffff801061c0 20667261 6d65203a 5e280000 00000000   frame :^(......
 ffffffff801061d0 6572726f 72206b65 726e656c 20646f65  error kernel doe
 ffffffff801061e0 736e2774 20686176 65207468 6174206d  sn't have that m
 ffffffff801061f0 75636820 6d656d6f 72792028 66617374  uch memory (fast
 ffffffff80106200 29000000 00000000 6572726f 72206b65  ).......error ke
 ffffffff80106210 726e656c 20646f65 736e2774 20686176  rnel doesn't hav
 ffffffff80106220 65207468 6174206d 75636820 6d656d6f  e that much memo
 ffffffff80106230 72792028 6e6f2066 72616d65 29006c6f  ry (no frame).lo
 ffffffff80106240 6164696e 67207061 67696e67 2031006c  ading paging 1.l
 ffffffff80106250 6f616469 6e672070 6167696e 67203200  oading paging 2.
 ffffffff80106260 6c6f6164 696e6720 70616769 6e672033  loading paging 3
 ffffffff80106270 006c6f61 64696e67 20706167 696e6720  .loading paging 
 ffffffff80106280 646f6e65 00203d3d 3d3d3d3d 3d3d3d3d  done. ==========
 ffffffff80106290 3d3d3d3d 20006d65 6d6f7279 20757361  ==== .memory usa
 ffffffff801062a0 626c6500 6b65726e 656c0020 6d656d6f  ble.kernel. memo
 ffffffff801062b0 72792073 74617274 203a2000 206d656d  ry start : . mem
 ffffffff801062c0 6f727920 656e6420 3a200020 6d656d6f  ory end : . memo
 ffffffff801062d0 7279206c 656e6768 74203a20 00206d65  ry lenght : . me
 ffffffff801062e0 6d6f7279 20747970 65203a20 00206b65  mory type : . ke
 ffffffff801062f0 726e656c 206d656d 6f727920 28696e20  rnel memory (in 
 ffffffff80106300 4d62293a 20006c6f 6164696e 67206672  Mb): .loading fr
 ffffffff80106310 616d6500 6c6f6164 696e6720 70616769  ame.loading pagi
 ffffffff80106320 6e67006c 6f616469 6e672069 6474006c  ng.loading idt.l
 ffffffff80106330 6f616469 6e672069 64742074 61626c65  oading idt table
 ffffffff80106340 006c6f61 64696e67 20696474 20696474  .loading idt idt
 ffffffff80106350 5f666c75 7368006c 6f616469 6e672070  _flush.loading p
 ffffffff80106360 6963006c 6f616469 6e672070 6963203a  ic.loading pic :
 ffffffff80106370 204f4b00 6c6f6164 696e6720 69647420   OK.loading idt 
 ffffffff80106380 3a204f4b 00747572 6e696e67 206f6e20  : OK.turning on 
 ffffffff80106390 696e7465 72727570 74203a20 4f4b2000  interrupt : OK .
 ffffffff801063a0 44697669 73696f6e 20427920 5a65726f  Division By Zero
 ffffffff801063b0 00446562 7567004e 6f6e204d 61736b61  .Debug.Non Maska
 ffffffff801063c0 626c6520 496e7465 72727570 74004272  ble Interrupt.Br
 ffffffff801063d0 65616b70 6f696e74 00496e74 6f204465  eakpoint.Into De
 ffffffff801063e0 74656374 6564204f 76657266 6c6f7700  tected Overflow.
 ffffffff801063f0 4f757420 6f662042 6f756e64 7300496e  Out of Bounds.In
 ffffffff80106400 76616c69 64204f70 636f6465 004e6f20  valid Opcode.No 
 ffffffff80106410 436f7072 6f636573 736f7200 446f7562  Coprocessor.Doub
 ffffffff80106420 6c652046 61756c74 00436f70 726f6365  le Fault.Coproce
 ffffffff80106430 73736f72 20536567 6d656e74 204f7665  ssor Segment Ove
 ffffffff80106440 7272756e 00426164 20545353 00536567  rrun.Bad TSS.Seg
 ffffffff80106450 6d656e74 204e6f74 20507265 73656e74  ment Not Present
 ffffffff80106460 00537461 636b2046 61756c74 0047656e  .Stack Fault.Gen
 ffffffff80106470 6572616c 2050726f 74656374 696f6e20  eral Protection 
 ffffffff80106480 4661756c 74005061 67652046 61756c74  Fault.Page Fault
 ffffffff80106490 00556e6b 6e6f776e 20496e74 65727275  .Unknown Interru
 ffffffff801064a0 70740043 6f70726f 63657373 6f722046  pt.Coprocessor F
 ffffffff801064b0 61756c74 00416c69 676e6d65 6e742043  ault.Alignment C
 ffffffff801064c0 6865636b 004d6163 68696e65 20436865  heck.Machine Che
 ffffffff801064d0 636b0052 65736572 76656400 207c2000  ck.Reserved. | .
 ffffffff801064e0 203d2000 30780020 3d3d3d3d 3d206370   = .0x. ===== cp
 ffffffff801064f0 75206475 6d70203d 3d3d3d3d 00203d3d  u dump =====. ==
 ffffffff80106500 3d3d3d20 63732061 6e642073 73203d3d  === cs and ss ==
 ffffffff80106510 3d3d3d00 63730073 73002000 203d3d3d  ===.cs.ss. . ===
 ffffffff80106520 3d3d2072 78203d3d 3d3d3d00 72380072  == rx =====.r8.r
 ffffffff80106530 39007231 30007231 31007231 32007231  9.r10.r11.r12.r1
 ffffffff80106540 33007231 34007231 3500203d 3d3d3d3d  3.r14.r15. =====
 ffffffff80106550 20757469 6c697479 203d3d3d 3d3d0072   utility =====.r
 ffffffff80106560 73700072 62700072 64690072 73690072  sp.rbp.rdi.rsi.r
 ffffffff80106570 64780072 63780072 62780072 61780020  dx.rcx.rbx.rax. 
 ffffffff80106580 3d3d3d3d 3d206f74 68657220 3d3d3d3d  ===== other ====
 ffffffff80106590 3d006572 726f725f 636f6465 00696e74  =.error_code.int
 ffffffff801065a0 5f6e6f00 72697000 72666c61 67730020  _no.rip.rflags. 
 ffffffff801065b0 3d3d3d3d 3d204352 58203d3d 3d3d3d00  ===== CRX =====.
 ffffffff801065c0 43523200 72656365 69766520 616e2069  CR2.receive an i
 ffffffff801065d0 6e746572 72757074 00657272 6f722066  nterrupt.error f
 ffffffff801065e0 6174616c 00726970 203a0069 64203a00  atal.rip :.id :.
Contenu de la section .eh_frame :
 ffffffff801065f0 14000000 00000000 017a5200 01781001  .........zR..x..
 ffffffff80106600 1b0c0708 90010000 1c000000 1c000000  ................
 ffffffff80106610 f0a9ffff 59000000 00450e10 8602430d  ....Y....E....C.
 ffffffff80106620 060250c6 0c070800 1c000000 3c000000  ..P.........<...
 ffffffff80106630 75eaffff 41000000 00450e10 8602430d  u...A....E....C.
 ffffffff80106640 0678c60c 07080000 1c000000 5c000000  .x..........\...
 ffffffff80106650 b0b9ffff 64000000 00450e10 8602430d  ....d....E....C.
 ffffffff80106660 06025bc6 0c070800 1c000000 7c000000  ..[.........|...
 ffffffff80106670 f4b9ffff c6000000 00450e10 8602430d  .........E....C.
 ffffffff80106680 0602bdc6 0c070800 1c000000 9c000000  ................
 ffffffff80106690 9abaffff f6000000 00450e10 8602430d  .........E....C.
 ffffffff801066a0 0602edc6 0c070800 1c000000 bc000000  ................
 ffffffff801066b0 70bbffff 70000000 00450e10 8602430d  p...p....E....C.
 ffffffff801066c0 060267c6 0c070800 1c000000 dc000000  ..g.............
 ffffffff801066d0 c0bbffff 1e000000 00450e10 8602430d  .........E....C.
 ffffffff801066e0 0655c60c 07080000 1c000000 fc000000  .U..............
 ffffffff801066f0 bebbffff 18000000 00450e10 8602430d  .........E....C.
 ffffffff80106700 064fc60c 07080000 1c000000 1c010000  .O..............
 ffffffff80106710 d6e9ffff 1a000000 00450e10 8602430d  .........E....C.
 ffffffff80106720 0651c60c 07080000 1c000000 3c010000  .Q..........<...
 ffffffff80106730 96bbffff 13010000 00450e10 8602430d  .........E....C.
 ffffffff80106740 06030a01 c60c0708 1c000000 5c010000  ............\...
 ffffffff80106750 b0e9ffff 0c000000 00450e10 8602430d  .........E....C.
 ffffffff80106760 0643c60c 07080000 1c000000 7c010000  .C..........|...
 ffffffff80106770 9ce9ffff 0c000000 00450e10 8602430d  .........E....C.
 ffffffff80106780 0643c60c 07080000 1c000000 9c010000  .C..............
 ffffffff80106790 88e9ffff 16000000 00450e10 8602430d  .........E....C.
 ffffffff801067a0 064dc60c 07080000 1c000000 bc010000  .M..............
 ffffffff801067b0 7ee9ffff 1a000000 00450e10 8602430d  ~........E....C.
 ffffffff801067c0 0651c60c 07080000 1c000000 dc010000  .Q..............
 ffffffff801067d0 09bcffff 42000000 00450e10 8602430d  ....B....E....C.
 ffffffff801067e0 0679c60c 07080000 1c000000 fc010000  .y..............
 ffffffff801067f0 2bbcffff 9d000000 00450e10 8602430d  +........E....C.
 ffffffff80106800 060294c6 0c070800 1c000000 1c020000  ................
 ffffffff80106810 a8bcffff 0a010000 00450e10 8602430d  .........E....C.
 ffffffff80106820 06030101 c60c0708 1c000000 3c020000  ............<...
 ffffffff80106830 92bdffff 72070000 00450e10 8602430d  ....r....E....C.
 ffffffff80106840 06036907 c60c0708 1c000000 5c020000  ..i.........\...
 ffffffff80106850 e4c4ffff c7020000 00450e10 8602430d  .........E....C.
 ffffffff80106860 0603be02 c60c0708 1c000000 7c020000  ............|...
 ffffffff80106870 8bc7ffff 52000000 00450e10 8602430d  ....R....E....C.
 ffffffff80106880 060249c6 0c070800 1c000000 9c020000  ..I.............
 ffffffff80106890 bdc7ffff 63010000 00450e10 8602430d  ....c....E....C.
 ffffffff801068a0 06035a01 c60c0708 1c000000 bc020000  ..Z.............
 ffffffff801068b0 00c9ffff 33000000 00450e10 8602430d  ....3....E....C.
 ffffffff801068c0 066ac60c 07080000 1c000000 dc020000  .j..............
 ffffffff801068d0 13c9ffff 79000000 00450e10 8602430d  ....y....E....C.
 ffffffff801068e0 060270c6 0c070800 1c000000 fc020000  ..p.............
 ffffffff801068f0 6cc9ffff 34000000 00450e10 8602430d  l...4....E....C.
 ffffffff80106900 066bc60c 07080000 1c000000 1c030000  .k..............
 ffffffff80106910 80c9ffff 34000000 00450e10 8602430d  ....4....E....C.
 ffffffff80106920 066bc60c 07080000 1c000000 3c030000  .k..........<...
 ffffffff80106930 94c9ffff 36000000 00450e10 8602430d  ....6....E....C.
 ffffffff80106940 066dc60c 07080000 1c000000 5c030000  .m..........\...
 ffffffff80106950 aac9ffff 70000000 00450e10 8602430d  ....p....E....C.
 ffffffff80106960 060267c6 0c070800 1c000000 7c030000  ..g.........|...
 ffffffff80106970 fac9ffff 23000000 00450e10 8602430d  ....#....E....C.
 ffffffff80106980 065ac60c 07080000 1c000000 9c030000  .Z..............
 ffffffff80106990 fdc9ffff 23000000 00450e10 8602430d  ....#....E....C.
 ffffffff801069a0 065ac60c 07080000 1c000000 bc030000  .Z..............
 ffffffff801069b0 00caffff 1c000000 00450e10 8602430d  .........E....C.
 ffffffff801069c0 0653c60c 07080000 1c000000 dc030000  .S..............
 ffffffff801069d0 fcc9ffff 1e000000 00450e10 8602430d  .........E....C.
 ffffffff801069e0 0655c60c 07080000 1c000000 fc030000  .U..............
 ffffffff801069f0 fac9ffff 73000000 00450e10 8602430d  ....s....E....C.
 ffffffff80106a00 06026ac6 0c070800 1c000000 1c040000  ..j.............
 ffffffff80106a10 4dcaffff 5c000000 00450e10 8602430d  M...\....E....C.
 ffffffff80106a20 060253c6 0c070800 1c000000 3c040000  ..S.........<...
 ffffffff80106a30 89caffff cb030000 00450e10 8602430d  .........E....C.
 ffffffff80106a40 0603c203 c60c0708 1c000000 5c040000  ............\...
 ffffffff80106a50 34ceffff a2000000 00450e10 8602430d  4........E....C.
 ffffffff80106a60 060299c6 0c070800 1c000000 7c040000  ............|...
 ffffffff80106a70 b6ceffff 1f000000 00450e10 8602430d  .........E....C.
 ffffffff80106a80 0656c60c 07080000 1c000000 9c040000  .V..............
 ffffffff80106a90 b5ceffff 49000000 00450e10 8602430d  ....I....E....C.
 ffffffff80106aa0 060240c6 0c070800 1c000000 bc040000  ..@.............
 ffffffff80106ab0 deceffff 29020000 00450e10 8602430d  ....)....E....C.
 ffffffff80106ac0 06032002 c60c0708 1c000000 dc040000  .. .............
 ffffffff80106ad0 e7d0ffff 7c000000 00450e10 8602430d  ....|....E....C.
 ffffffff80106ae0 060273c6 0c070800 1c000000 fc040000  ..s.............
 ffffffff80106af0 43d1ffff 90020000 00450e10 8602430d  C........E....C.
 ffffffff80106b00 06038702 c60c0708 1c000000 1c050000  ................
 ffffffff80106b10 b3d3ffff 0d030000 00450e10 8602430d  .........E....C.
 ffffffff80106b20 06030403 c60c0708 1c000000 3c050000  ............<...
 ffffffff80106b30 a0d6ffff 2d020000 00450e10 8602430d  ....-....E....C.
 ffffffff80106b40 06032402 c60c0708 1c000000 5c050000  ..$.........\...
 ffffffff80106b50 f8e5ffff eb000000 00450e10 8602430d  .........E....C.
 ffffffff80106b60 0602e2c6 0c070800 1c000000 7c050000  ............|...
 ffffffff80106b70 c3e6ffff dc000000 00450e10 8602430d  .........E....C.
 ffffffff80106b80 0602d3c6 0c070800 1c000000 9c050000  ................
 ffffffff80106b90 7fe7ffff 25000000 00450e10 8602430d  ....%....E....C.
 ffffffff80106ba0 065cc60c 07080000 1c000000 bc050000  .\..............
 ffffffff80106bb0 84e7ffff 1f010000 00450e10 8602430d  .........E....C.
 ffffffff80106bc0 06031601 c60c0708 1c000000 dc050000  ................
 ffffffff80106bd0 2dd8ffff c1000000 00450e10 8602430d  -........E....C.
 ffffffff80106be0 0602b8c6 0c070800 1c000000 fc050000  ................
 ffffffff80106bf0 ced8ffff 40010000 00450e10 8602430d  ....@....E....C.
 ffffffff80106c00 06033701 c60c0708 1c000000 1c060000  ..7.............
 ffffffff80106c10 eed9ffff 7c000000 00450e10 8602430d  ....|....E....C.
 ffffffff80106c20 060273c6 0c070800 1c000000 3c060000  ..s.........<...
 ffffffff80106c30 4adaffff eb020000 00450e10 8602430d  J........E....C.
 ffffffff80106c40 0603e202 c60c0708 1c000000 5c060000  ............\...
 ffffffff80106c50 15ddffff 36000000 00450e10 8602430d  ....6....E....C.
 ffffffff80106c60 066dc60c 07080000 1c000000 7c060000  .m..........|...
 ffffffff80106c70 2bddffff 48000000 00450e10 8602430d  +...H....E....C.
 ffffffff80106c80 067fc60c 07080000 1c000000 9c060000  ................
 ffffffff80106c90 53ddffff 7d010000 00450e10 8602430d  S...}....E....C.
 ffffffff80106ca0 06037401 c60c0708 1c000000 bc060000  ..t.............
 ffffffff80106cb0 a3e7ffff 22000000 00450e10 8602430d  ...."....E....C.
 ffffffff80106cc0 0659c60c 07080000 1c000000 dc060000  .Y..............
 ffffffff80106cd0 a5e7ffff 33000000 00450e10 8602430d  ....3....E....C.
 ffffffff80106ce0 066ac60c 07080000 1c000000 fc060000  .j..............
 ffffffff80106cf0 70deffff 37000000 00450e10 8602430d  p...7....E....C.
 ffffffff80106d00 066ec60c 07080000 1c000000 1c070000  .n..............
 ffffffff80106d10 87deffff 57000000 00450e10 8602430d  ....W....E....C.
 ffffffff80106d20 06024ec6 0c070800 1c000000 3c070000  ..N.........<...
 ffffffff80106d30 bedeffff 62000000 00450e10 8602430d  ....b....E....C.
 ffffffff80106d40 060259c6 0c070800 1c000000 5c070000  ..Y.........\...
 ffffffff80106d50 00dfffff 53000000 00450e10 8602430d  ....S....E....C.
 ffffffff80106d60 06024ac6 0c070800 1c000000 7c070000  ..J.........|...
 ffffffff80106d70 33dfffff a2000000 00450e10 8602430d  3........E....C.
 ffffffff80106d80 060299c6 0c070800                    ........        
Contenu de la section .data :
 ffffffff80107000 00100000 10000000 20000000 00000000  ........ .......
 ffffffff80107010 7fffffff 00000000 00000000 00000000  ................
 ffffffff80107020 0010a080 1182ffff ffff0000 00000000  ................
 ffffffff80107030 00000000 00000000 00000000 00000000  ................
 ffffffff80107040 a0631080 ffffffff b1631080 ffffffff  .c.......c......
 ffffffff80107050 b7631080 ffffffff ce631080 ffffffff  .c.......c......
 ffffffff80107060 d9631080 ffffffff f0631080 ffffffff  .c.......c......
 ffffffff80107070 fe631080 ffffffff 0d641080 ffffffff  .c.......d......
 ffffffff80107080 1c641080 ffffffff 29641080 ffffffff  .d......)d......
 ffffffff80107090 45641080 ffffffff 4d641080 ffffffff  Ed......Md......
 ffffffff801070a0 61641080 ffffffff 6d641080 ffffffff  ad......md......
 ffffffff801070b0 86641080 ffffffff 91641080 ffffffff  .d.......d......
 ffffffff801070c0 a3641080 ffffffff b5641080 ffffffff  .d.......d......
 ffffffff801070d0 c5641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff801070e0 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff801070f0 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff80107100 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff80107110 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff80107120 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff80107130 d3641080 ffffffff d3641080 ffffffff  .d.......d......
 ffffffff80107140 984d1080 ffffffff a44d1080 ffffffff  .M.......M......
 ffffffff80107150 b04d1080 ffffffff bc4d1080 ffffffff  .M.......M......
 ffffffff80107160 c84d1080 ffffffff d44d1080 ffffffff  .M.......M......
 ffffffff80107170 e34d1080 ffffffff f24d1080 ffffffff  .M.......M......
 ffffffff80107180 014e1080 ffffffff 0e4e1080 ffffffff  .N.......N......
 ffffffff80107190 1d4e1080 ffffffff 2a4e1080 ffffffff  .N......*N......
 ffffffff801071a0 374e1080 ffffffff 444e1080 ffffffff  7N......DN......
 ffffffff801071b0 514e1080 ffffffff 5e4e1080 ffffffff  QN......^N......
 ffffffff801071c0 6d4e1080 ffffffff 7c4e1080 ffffffff  mN......|N......
 ffffffff801071d0 8b4e1080 ffffffff 9a4e1080 ffffffff  .N.......N......
 ffffffff801071e0 a94e1080 ffffffff b84e1080 ffffffff  .N.......N......
 ffffffff801071f0 c74e1080 ffffffff d64e1080 ffffffff  .N.......N......
 ffffffff80107200 e54e1080 ffffffff f44e1080 ffffffff  .N.......N......
 ffffffff80107210 034f1080 ffffffff 124f1080 ffffffff  .O.......O......
 ffffffff80107220 214f1080 ffffffff 304f1080 ffffffff  !O......0O......
 ffffffff80107230 3f4f1080 ffffffff 4c4f1080 ffffffff  ?O......LO......
 ffffffff80107240 5b4f1080 ffffffff 6a4f1080 ffffffff  [O......jO......
 ffffffff80107250 794f1080 ffffffff 884f1080 ffffffff  yO.......O......
 ffffffff80107260 974f1080 ffffffff a64f1080 ffffffff  .O.......O......
 ffffffff80107270 b54f1080 ffffffff c44f1080 ffffffff  .O.......O......
 ffffffff80107280 d34f1080 ffffffff e24f1080 ffffffff  .O.......O......
 ffffffff80107290 f14f1080 ffffffff 00501080 ffffffff  .O.......P......
 ffffffff801072a0 0f501080 ffffffff 1e501080 ffffffff  .P.......P......
 ffffffff801072b0 2d501080 ffffffff 3c501080 ffffffff  -P......<P......
 ffffffff801072c0 5a501080 ffffffff 4b501080 ffffffff  ZP......KP......
Contenu de la section .debug_info :
 0000 8a010000 04000000 00000801 37000000  ............7...
 0010 04150000 00c50100 00001010 80ffffff  ................
 0020 ff590000 00000000 00000000 00020106  .Y..............
 0030 65010000 0202050f 02000003 0405696e  e.............in
 0040 74000208 05290300 00020108 63010000  t....)......c...
 0050 04190200 00020d1d 61000000 05500000  ........a....P..
 0060 00020207 71010000 020407ce 05000004  ....q...........
 0070 43020000 020f1b7b 00000002 0807c905  C......{........
 0080 00000201 066c0100 00067b0b 00005003  .....l....{...P.
 0090 16084001 0000075f 02000003 170e6f00  ..@...._......o.
 00a0 00000007 a3010000 03180e6f 00000008  ...........o....
 00b0 074c0200 0003190e 6f000000 1007f301  .L......o.......
 00c0 0000031a 0e6f0000 00180784 01000003  .....o..........
 00d0 1b0e5000 00002007 b3010000 031c0e50  ..P... ........P
 00e0 00000022 07240000 00031d0e 50000000  ...".$......P...
 00f0 24075301 0000031e 0e500000 00260710  $.S......P...&..
 0100 00000003 1f0e6f00 00002807 96010000  ......o...(.....
 0110 03200e6f 00000030 07eb0100 0003210e  . .o...0......!.
 0120 6f000000 38072202 00000322 0e6f0000  o...8."....".o..
 0130 00400731 0d000003 230e6f00 00004800  .@.1....#.o...H.
 0140 08860400 00011c06 28020000 00101080  ........(.......
 0150 ffffffff 59000000 00000000 019c8101  ....Y...........
 0160 00000900 00000001 1c248101 00000291  .........$......
 0170 580a0402 0000011e 18870100 00029168  X..............h
 0180 000b0889 0000000b 085c0000 00005d05  .........\....].
 0190 00000400 a9000000 08013700 0000040e  ..........7.....
 01a0 040000c5 01000000 00000000 00000000  ................
 01b0 00000084 00000002 01066501 00000202  ..........e.....
 01c0 050f0200 00030405 696e7400 02080529  ........int....)
 01d0 03000004 cf020000 032e1851 00000002  ...........Q....
 01e0 01086301 00000419 02000003 31196400  ..c.........1.d.
 01f0 00000202 07710100 0004a103 00000334  .....q.........4
 0200 19770000 00020407 ce050000 04430200  .w...........C..
 0210 00033719 8a000000 020807c9 05000002  ..7.............
 0220 01066c01 0000050a 04130132 040000c0  ..l........2....
 0230 00000006 6c656e00 04140c58 00000000  ....len....X....
 0240 07130a00 0004150c 7e000000 02000433  ........~......3
 0250 04000004 161f9800 00000508 04190132  ...............2
 0260 03000028 01000007 58030000 041a0c58  ...(....X......X
 0270 00000000 071f0400 00041b0c 58000000  ............X...
 0280 02078602 0000041c 0c450000 00040731  .........E.....1
 0290 0d000004 1d0c4500 00000507 94020000  ......E.........
 02a0 041e0c45 00000006 07dd0300 00041f0c  ...E............
 02b0 45000000 07000434 03000004 201fcc00  E......4.... ...
 02c0 00000510 042301b5 03000080 01000008  .....#..........
 02d0 08042603 65010000 07aa0300 0004270e  ..&.e.........'.
 02e0 6b000000 00079803 00000428 0e6b0000  k..........(.k..
 02f0 00040006 6c6f7700 04241428 01000000  ....low..$.(....
 0300 07e20300 00042905 41010000 080004b7  ......).A.......
 0310 03000004 2a1f3401 00000970 10043201  ....*.4....p..2.
 0320 7b030000 5f020000 0ac90300 0004330c  {..._.........3.
 0330 6b000000 1000074c 04000004 340c7e00  k......L....4.~.
 0340 00000407 8e030000 04350c7e 0000000c  .........5.~....
 0350 07930300 0004360c 7e000000 14074e03  ......6.~.....N.
 0360 00000437 0c7e0000 001c0751 04000004  ...7.~.....Q....
 0370 380c7e00 00002407 e7030000 04390c7e  8.~...$......9.~
 0380 0000002c 07ec0300 00043a0c 7e000000  ...,......:.~...
 0390 3407f103 0000043b 0c7e0000 003c07f6  4......;.~...<..
 03a0 03000004 3c0c7e00 00004407 69040000  ....<.~...D.i...
 03b0 043d0c7e 0000004c 07fb0300 00043e0c  .=.~...L......>.
 03c0 7e000000 5407d303 0000043f 0c7e0000  ~...T......?.~..
 03d0 005c073a 04000004 400c5800 00006407  .\.:....@.X...d.
 03e0 05030000 04410c58 00000066 000b7c03  .....A.X...f..|.
 03f0 00000442 1f8c0100 00100208 05240300  ...B.........$..
 0400 00021004 82030000 0c740200 000dae02  .........t......
 0410 0000020e 08c00000 00090300 801080ff  ................
 0420 ffffff0e 28010000 a5020000 0f8a0000  ....(...........
 0430 003f000d 62030000 02121395 02000009  .?..b...........
 0440 03208010 80ffffff ff107473 73000213  . ........tss...
 0450 095f0200 00090320 821080ff ffffff0e  ._..... ........
 0460 45000000 e2020000 118a0000 00ff3f00  E.............?.
 0470 12760400 00024e09 d1020000 00100903  .v....N.........
 0480 00901080 ffffffff 12d70200 00024f09  ..............O.
 0490 d1020000 00100903 00d01080 ffffffff  ................
 04a0 12e20200 00025009 d1020000 00100903  ......P.........
 04b0 00101180 ffffffff 13c50200 00026707  ..............g.
 04c0 f7020000 ae221080 ffffffff 18000000  ....."..........
 04d0 00000000 019c5a03 00001469 0002671f  ......Z....i..g.
 04e0 8a000000 02916800 15440400 00026106  ......h..D....a.
 04f0 b3020000 90221080 ffffffff 1e000000  ....."..........
 0500 00000000 019c8c03 0000164c 04000002  ...........L....
 0510 611c7e00 00000291 68001372 03000002  a.~.....h..r....
 0520 51066702 00002022 1080ffff ffff7000  Q.g... "......p.
 0530 00000000 0000019c bc030000 14690002  .............i..
 0540 51187e00 00000291 68001328 04000002  Q.~.....h..(....
 0550 2a060004 00002a21 1080ffff fffff600  *.....*!........
 0560 00000000 0000019c fd030000 17450300  .............E..
 0570 0002310c 7e000000 02916817 ed020000  ..1.~.....h.....
 0580 02320c7e 00000002 91600018 10030000  .2.~.....`......
 0590 021c0d64 201080ff ffffffc6 00000000  ...d ...........
 05a0 00000001 9c860400 00166203 0000021c  ..........b.....
 05b0 33860400 00029158 1473656c 00021c4d  3......X.sel...M
 05c0 58000000 02915416 310d0000 021c5a45  X.....T.1.....ZE
 05d0 00000002 9150168f 02000002 1c694500  .....P.......iE.
 05e0 00000291 4c160c07 0000021c 787e0000  ....L.......x~..
 05f0 00029140 16f10200 00021c87 7e000000  ...@........~...
 0600 0391b87f 17350c00 00021e16 8c040000  .....5..........
 0610 02916800 19082801 00001908 80010000  ..h...(.........
 0620 1a560400 0002140d 00100020 1080ffff  .V......... ....
 0630 ffff6400 00000000 0000019c fe040000  ..d.............
 0640 16620300 00021432 86040000 02915814  .b.....2......X.
 0650 73656c00 02144c58 00000002 91541631  sel...LX.....T.1
 0660 0d000002 14594500 00000291 50168f02  .....YE.....P...
 0670 00000214 68450000 0002914c 17350c00  ....hE.....L.5..
 0680 00021615 86040000 02916800 1b6e0400  ..........h..n..
 0690 0001060f a0020000 5e050000 a5501080  ........^....P..
 06a0 ffffffff 41000000 00000000 019c5e05  ....A.........^.
 06b0 00001473 0001061e 5e050000 02915814  ...s....^.....X.
 06c0 6e000106 2a7e0000 00029150 1cb95010  n...*~.....P..P.
 06d0 80ffffff ff270000 00000000 001d6900  .....'........i.
 06e0 0107137e 00000002 91680000 1e0800a6  ...~.....h......
 06f0 02000004 00a20200 00080137 00000004  ...........7....
 0700 c9040000 c5010000 30000000 00000000  ........0.......
 0710 00000000 ff010000 02010665 01000002  ...........e....
 0720 02050f02 00000304 05696e74 00020805  .........int....
 0730 29030000 02010863 01000004 19020000  )......c........
 0740 03311958 00000002 02077101 00000204  .1.X......q.....
 0750 07ce0500 00044302 00000337 19720000  ......C....7.r..
 0760 00020807 c9050000 048d0400 0003561a  ..............V.
 0770 72000000 05970400 00180403 08e10000  r...............
 0780 00067a04 00000405 0e660000 00000631  ..z......f.....1
 0790 0d000004 080e4c00 00000806 b3010000  ......L.........
 07a0 04090e4c 0000000a 06240000 00040a0e  ...L.....$......
 07b0 4c000000 0c065301 0000040b 0e4c0000  L.....S......L..
 07c0 000e06f0 04000004 0c0b6600 00001000  ..........f.....
 07d0 0201066c 01000005 7b0b0000 50041608  ...l....{...P...
 07e0 9f010000 065f0200 0004170e 66000000  ....._......f...
 07f0 0006a301 00000418 0e660000 0008064c  .........f.....L
 0800 02000004 190e6600 00001006 f3010000  ......f.........
 0810 041a0e66 00000018 06840100 00041b0e  ...f............
 0820 4c000000 2006b301 0000041c 0e4c0000  L... ........L..
 0830 00220624 00000004 1d0e4c00 00002406  .".$......L...$.
 0840 53010000 041e0e4c 00000026 06100000  S......L...&....
 0850 00041f0e 66000000 28069601 00000420  ....f...(...... 
 0860 0e660000 003006eb 01000004 210e6600  .f...0......!.f.
 0870 00003806 22020000 04220e66 00000040  ..8."....".f...@
 0880 06310d00 0004230e 66000000 4800078b  .1....#.f...H...
 0890 0e000007 045f0000 00050406 ce010000  ....._..........
 08a0 08fc0400 00f80308 01050000 f8020806  ................
 08b0 050000e8 03080b05 0000e802 0004e504  ................
 08c0 00000111 12660000 0009db04 00000113  .....f..........
 08d0 14f20100 00001009 03005011 80ffffff  ..........P.....
 08e0 ff0a08ce 0100000b e1000000 09020000  ................
 08f0 0c720000 00ff0f00 0d7a0400 0002080d  .r.......z......
 0900 f8010000 09032050 1180ffff ffff0e9f  ...... P........
 0910 04000002 0b118500 00000903 00001080  ................
 0920 ffffffff 0f800400 00021411 c6221080  ............."..
 0930 ffffffff 13010000 00000000 019c7002  ..............p.
 0940 00001000 00000002 142e7002 00000291  ..........p.....
 0950 58116900 02290a76 02000002 9168000a  X.i..).v.....h..
 0960 08e80000 000a0837 00000012 ba040000  .......7........
 0970 011e0da6 040000e6 501080ff ffffff1a  ........P.......
 0980 00000000 00000001 9c137064 00011e25  ..........pd...%
 0990 66000000 02916800 00e50600 000400d5  f.....h.........
 09a0 03000008 01370000 00044d06 0000c501  .....7....M.....
 09b0 00006000 00000000 00000000 00000903  ..`.............
 09c0 00000201 06650100 00020205 0f020000  .....e..........
 09d0 03040569 6e740002 08052903 00000201  ...int....).....
 09e0 08630100 00020207 71010000 020407ce  .c......q.......
 09f0 05000002 0807c905 0000048d 04000003  ................
 0a00 561a5a00 00000426 05000001 0e0e3e00  V.Z....&......>.
 0a10 000005b5 05000028 023e08d5 00000006  .......(.>......
 0a20 ac060000 024019d5 00000000 06bd0600  .....@..........
 0a30 00024119 d5000000 08069d0b 00000242  ..A............B
 0a40 0f530000 00100623 06000002 430f5300  .S.....#....C.S.
 0a50 00001406 10050000 02440f53 00000018  .........D.S....
 0a60 06910900 00024519 37010000 20000708  ......E.7... ...
 0a70 79000000 05340500 0028024d 08370100  y....4...(.M.7..
 0a80 0006ac06 0000024f 19370100 000006bd  .......O.7......
 0a90 06000002 50193701 00000806 a1050000  ....P.7.........
 0aa0 025119d5 00000010 06a10600 0002520f  .Q............R.
 0ab0 53000000 18062306 00000253 0f530000  S.....#....S.S..
 0ac0 001c0644 06000002 540f5300 00002000  ...D....T.S... .
 0ad0 0708db00 0000087f 05000002 581fd500  ............X...
 0ae0 00000903 20601180 ffffffff 08280600  .... `.......(..
 0af0 0002591f d5000000 09032860 1180ffff  ..Y.......(`....
 0b00 ffff080b 06000002 5b155300 00000903  ........[.S.....
 0b10 00701080 ffffffff 08b10600 00025c15  .p............\.
 0b20 53000000 09030470 1080ffff ffff08eb  S......p........
 0b30 05000002 5d1bab01 00000903 30601180  ....].......0`..
 0b40 ffffffff 020807c4 05000008 99050000  ................
 0b50 025e1bab 01000009 03386011 80ffffff  .^.......8`.....
 0b60 ff086c06 00000261 12de0100 00090340  ..l....a.......@
 0b70 601180ff ffffff02 08052403 000008f7  `.........$.....
 0b80 05000002 6212de01 00000903 48601180  ....b.......H`..
 0b90 ffffffff 08660500 00026312 de010000  .....f....c.....
 0ba0 09035060 1180ffff ffff0916 06000002  ..P`............
 0bb0 e60209a5 0200004d 301080ff ffffff63  .......M0......c
 0bc0 01000000 00000001 9ca50200 000a7000  ..............p.
 0bd0 02e6021f a5020000 0291480b 23060000  ..........H.#...
 0be0 02e60229 6d000000 0291400c 70747200  ...)m.....@.ptr.
 0bf0 02e80208 a5020000 0291680c 6d696e00  ..........h.min.
 0c00 02e90219 37010000 0291580d 1e060000  ....7.....X.....
 0c10 02ea020f 53000000 0291540e 9e301080  ....S.....T..0..
 0c20 ffffffff 26000000 00000000 0d160500  ....&...........
 0c30 0002f802 02610000 00029160 00000f08  .....a.....`....
 0c40 09040600 0002d602 07a50200 00fb2f10  ............../.
 0c50 80ffffff ff520000 00000000 00019c09  .....R..........
 0c60 0300000b a7060000 02d6021d 6d000000  ............m...
 0c70 0291580b 23060000 02d6022a 6d000000  ..X.#......*m...
 0c80 0291500d 1e060000 02d8020c 37000000  ..P.........7...
 0c90 02916c0c 700002d9 020ea502 00000291  ..l.p...........
 0ca0 600010b0 05000002 52020634 2d1080ff  `.......R..4-...
 0cb0 ffffffc7 02000000 00000001 9cb10300  ................
 0cc0 000a7074 72000252 0219a502 00000291  ..ptr..R........
 0cd0 480c6d69 6e000254 02193701 00000291  H.min..T..7.....
 0ce0 600c6d61 6a000255 0219d500 00000291  `.maj..U........
 0cf0 5811622d 1080ffff ffff2600 00000000  X.b-......&.....
 0d00 00007e03 00000d16 05000002 62020261  ..~.........b..a
 0d10 00000002 9168000e b12f1080 ffffffff  .....h.../......
 0d20 43000000 00000000 0d8a0600 0002c102  C...............
 0d30 08370000 00029154 0dc20600 0002c202  .7.....T........
 0d40 08370000 00029150 0000122d 05000002  .7.....P...-....
 0d50 f107a502 0000c225 1080ffff ffff7207  .......%......r.
 0d60 00000000 0000019c f4040000 13440600  .............D..
 0d70 0002f11d 6d000000 0391887f 081b0500  ....m...........
 0d80 0002f306 37000000 02916c08 8a060000  ....7.....l.....
 0d90 02f415ab 01000002 91601470 0002f508  .........`.p....
 0da0 a5020000 02915808 16050000 02f60c61  ......X........a
 0db0 00000003 91987f14 6d616a00 02f719d5  ........maj.....
 0dc0 00000002 9150146d 696e0002 f8193701  .....P.min....7.
 0dd0 00000291 48084e05 000002f9 19370100  ....H.N......7..
 0de0 00039190 7f082306 000002fa 105a0000  ......#......Z..
 0df0 000391a0 7f114128 1080ffff ffff4b00  ......A(......K.
 0e00 00000000 00008204 00000d16 05000002  ................
 0e10 8e010461 00000002 91400011 8a291080  ...a.....@...)..
 0e20 ffffffff 4b000000 00000000 a9040000  ....K...........
 0e30 0d160500 0002b201 04610000 000391b8  .........a......
 0e40 7f0011fa 2a1080ff ffffff4b 00000000  ....*......K....
 0e50 000000d0 0400000d 16050000 02e10107  ................
 0e60 61000000 0391b07f 000e532c 1080ffff  a.........S,....
 0e70 ffff4b00 00000000 00000d16 05000002  ..K.............
 0e80 0a020761 00000003 91a87f00 00153206  ...a..........2.
 0e90 000002b9 1fd50000 00b82410 80ffffff  ..........$.....
 0ea0 ff0a0100 00000000 00019c43 05000013  ...........C....
 0eb0 23060000 02b93f53 00000002 915c1473  #.....?S.....\.s
 0ec0 740002bb 0f530000 0002916c 146d616a  t....S.....l.maj
 0ed0 0002bc19 d5000000 02916000 16890500  ..........`.....
 0ee0 0002730e a5020000 1b241080 ffffffff  ..s......$......
 0ef0 9d000000 00000000 019ccc05 00001773  ...............s
 0f00 31000273 24a50200 00029148 17733200  1..s$......H.s2.
 0f10 027334cc 05000002 9140176e 0002733f  .s4......@.n..s?
 0f20 6d000000 0391b87f 08430500 00027509  m........C....u.
 0f30 d3050000 02916808 67060000 027609d3  ......h.g....v..
 0f40 05000002 91600879 05000002 7711e005  .....`.y....w...
 0f50 00000291 58084905 00000278 11e00500  ....X.I....x....
 0f60 00029150 000708d2 05000018 0708d905  ...P............
 0f70 00000201 066c0100 00070853 00000016  .....l.....S....
 0f80 db050000 026b0ea5 020000d9 231080ff  .....k......#...
 0f90 ffffff42 00000000 00000001 9c3d0600  ...B.........=..
 0fa0 00177300 026b24a5 02000002 91581763  ..s..k$......X.c
 0fb0 00026b2b 37000000 02915417 6e00026b  ..k+7.....T.n..k
 0fc0 356d0000 00029148 14690002 6d0f5300  5m.....H.i..m.S.
 0fd0 00000291 6c0019a7 05000001 460c3700  ....l.......F.7.
 0fe0 00002e51 1080ffff ffff1a00 00000000  ...Q............
 0ff0 0000019c 7c060000 13130a00 00014620  ....|.........F 
 1000 a5020000 02916817 64000146 29370000  ......h.d..F)7..
 1010 00029164 00197b06 0000013a 0ea50200  ...d..{....:....
 1020 00185110 80ffffff ff160000 00000000  ..Q.............
 1030 00019cac 06000017 6400013a 21370000  ........d..:!7..
 1040 0002916c 001a5605 0000012e 0c370000  ...l..V......7..
 1050 000c5110 80ffffff ff0c0000 00000000  ..Q.............
 1060 00019c1a 93060000 01240c37 00000000  .........$.7....
 1070 511080ff ffffff0c 00000000 00000001  Q...............
 1080 9c000011 00000400 9d050000 08013700  ..............7.
 1090 0000047b 0a0000c5 010000f0 00000000  ...{............
 10a0 00000000 000000a8 09000002 01066501  ..............e.
 10b0 00000202 050f0200 00030405 696e7400  ............int.
 10c0 02080529 03000004 cf020000 052e1851  ...)...........Q
 10d0 00000002 01086301 00000419 02000005  ......c.........
 10e0 31196400 00000202 07710100 0004a103  1.d......q......
 10f0 00000534 19770000 00020407 ce050000  ...4.w..........
 1100 04430200 00053719 8a000000 020807c9  .C....7.........
 1110 05000002 01066c01 0000057b 0b000050  ......l....{...P
 1120 0616084f 01000006 5f020000 06170e7e  ...O...._......~
 1130 00000000 06a30100 0006180e 7e000000  ............~...
 1140 08064c02 00000619 0e7e0000 001006f3  ..L......~......
 1150 01000006 1a0e7e00 00001806 84010000  ......~.........
 1160 061b0e58 00000020 06b30100 00061c0e  ...X... ........
 1170 58000000 22062400 0000061d 0e580000  X...".$......X..
 1180 00240653 01000006 1e0e5800 00002606  .$.S......X...&.
 1190 10000000 061f0e7e 00000028 06960100  .......~...(....
 11a0 0006200e 7e000000 3006eb01 00000621  .. .~...0......!
 11b0 0e7e0000 00380622 02000006 220e7e00  .~...8."....".~.
 11c0 00004006 310d0000 06230e7e 00000048  ..@.1....#.~...H
 11d0 0005da08 00001806 2e089101 0000060c  ................
 11e0 07000006 2f0e7e00 00000006 6c0a0000  ..../.~.....l...
 11f0 06300e7e 00000008 06e50600 0006310e  .0.~..........1.
 1200 6b000000 10066409 00000632 0e6b0000  k.....d....2.k..
 1210 00140004 e5040000 0111127e 00000007  ...........~....
 1220 db040000 011314b5 01000000 10090300  ................
 1230 801182ff ffffff08 08910100 00042605  ..............&.
 1240 0000070e 0e3e0000 0009730a 0000030c  .....>....s.....
 1250 0a7e0000 00090300 701180ff ffffff0a  .~......p.......
 1260 08080000 030d157e 00000009 180a0000  .......~........
 1270 030e0a7e 00000009 03087011 80ffffff  ...~......p.....
 1280 ff09160c 0000030f 0b150200 00090310  ................
 1290 701180ff ffffff08 086b0000 0009c409  p........k......
 12a0 00000310 0a7e0000 00090308 701080ff  .....~......p...
 12b0 ffffff09 e70b0000 03110a7e 00000009  ...........~....
 12c0 03187011 80ffffff ff09e509 00000312  ..p.............
 12d0 0a7e0000 00090320 701180ff ffffff09  .~..... p.......
 12e0 340b0000 03130a7e 00000009 03287011  4......~.....(p.
 12f0 80ffffff ff0b4500 00008602 00000c8a  ......E.........
 1300 000000ff ffff0100 09470700 00031509  .........G......
 1310 73020000 09034070 1180ffff ffff09ac  s.....@p........
 1320 08000003 160a6b00 00000903 40701182  ......k.....@p..
 1330 ffffffff 09ee0900 00031706 c8020000  ................
 1340 09034470 1182ffff ffff0201 020d0900  ..Dp............
 1350 000b6b00 0000df02 00000d8a 00000000  ..k.............
 1360 00091e09 0000037e 0acf0200 00090310  .......~........
 1370 701080ff ffffff09 fc080000 037f0b15  p...............
 1380 02000009 03487011 82ffffff ff0e5f07  .....Hp......._.
 1390 00000456 0dfa0a00 00335210 80ffffff  ...V.....3R.....
 13a0 ffdc0000 00000000 00019cef 0300000f  ................
 13b0 54007700 00001062 75660004 561aef03  T.w....buf..V...
 13c0 00000391 b87f110c 07000004 56233700  ............V#7.
 13d0 00000391 b47f1064 0004562b 77000000  .......d..V+w...
 13e0 0391b07f 12700004 5808ef03 00000291  .....p..X.......
 13f0 68127031 00045908 ef030000 02916012  h.p1..Y.......`.
 1400 70320004 590eef03 00000291 58127564  p2..Y.......X.ud
 1410 00045a04 77000000 02915413 6b090000  ..Z.w.....T.k...
 1420 045b0477 00000002 9150146b 521080ff  .[.w.....P.kR...
 1430 ffffff34 00000000 000000cd 03000013  ...4............
 1440 9f0a0000 046a0577 00000002 914c0015  .....j.w.....L..
 1450 df521080 ffffffff 2b000000 00000000  .R......+.......
 1460 12746d70 00047708 91000000 02914b00  .tmp..w.......K.
 1470 00080891 0000000e ea060000 04560d56  .............V.V
 1480 0b000048 511080ff ffffffeb 00000000  ...HQ...........
 1490 00000001 9cda0400 000f5400 8a000000  ..........T.....
 14a0 10627566 0004561a ef030000 0391a87f  .buf..V.........
 14b0 110c0700 00045623 37000000 0391a47f  ......V#7.......
 14c0 10640004 562b8a00 00000391 987f1270  .d..V+.........p
 14d0 00045808 ef030000 02916812 70310004  ..X.......h.p1..
 14e0 5908ef03 00000291 60127032 0004590e  Y.......`.p2..Y.
 14f0 ef030000 02915812 75640004 5a048a00  ......X.ud..Z...
 1500 00000291 50136b09 0000045b 048a0000  ....P.k....[....
 1510 00029148 14855110 80ffffff ff3a0000  ...H..Q......:..
 1520 00000000 00b70400 00139f0a 0000046a  ...............j
 1530 058a0000 00029140 00150352 1080ffff  .......@...R....
 1540 ffff2b00 00000000 00001274 6d700004  ..+........tmp..
 1550 77089100 00000391 bf7f0000 160d0c00  w...............
 1560 00039f01 067c0800 00d04110 80ffffff  .....|....A.....
 1570 ff2d0200 00000000 00019ca0 05000017  .-..............
 1580 9a080000 039f0118 7e000000 0391a87f  ........~.......
 1590 172b0b00 00039f01 2b7e0000 000391a0  .+......+~......
 15a0 7f17310d 0000039f 013e7e00 00000391  ..1......>~.....
 15b0 987f18ee 08000003 a1010b7e 00000002  ...........~....
 15c0 91501822 0a000003 a2010b7e 00000002  .P.".......~....
 15d0 914818f2 0b000003 a3010b7e 00000002  .H.........~....
 15e0 91401894 0a000003 a4010e7e 00000003  .@.........~....
 15f0 91b87f18 ca060000 03a6010f a0050000  ................
 1600 02916819 70640003 b0010fa0 05000002  ..h.pd..........
 1610 91601970 740003b9 010fa005 00000291  .`.pt...........
 1620 58000808 7e000000 161d0c00 00036601  X...~.........f.
 1630 063f0800 00c33e10 80ffffff ff0d0300  .?....>.........
 1640 00000000 00019c1c 06000017 37090000  ............7...
 1650 0366012a 1c060000 0391987f 182f0a00  .f.*........./..
 1660 00036701 13220600 00029160 18080200  ..g..".....`....
 1670 00036801 0a280600 000391a0 7f15f03e  ..h..(.........>
 1680 1080ffff ffff3f02 00000000 00001969  ......?........i
 1690 00036a01 0e370000 0002916c 00000808  ..j..7.....l....
 16a0 98000000 08084f01 00000b91 00000038  ......O........8
 16b0 0600000d 8a000000 3f0016ee 0a000003  ........?.......
 16c0 37010669 0b000033 3c1080ff ffffff90  7..i...3<.......
 16d0 02000000 00000001 9cc30700 00173709  ..............7.
 16e0 00000337 01231c06 00000391 887f1842  ...7.#.........B
 16f0 09000003 45010e7e 00000003 91b87f18  ....E..~........
 1700 2f0a0000 034d0113 22060000 0391a87f  /....M..".......
 1710 146d3c10 80ffffff ff830000 00000000  .m<.............
 1720 00d40600 00196900 033b0113 7e000000  ......i..;..~...
 1730 02916815 7f3c1080 ffffffff 6a000000  ..h..<......j...
 1740 00000000 18130a00 00033c01 137e0000  ..........<..~..
 1750 00029140 00001440 3d1080ff ffffff63  ...@...@=......c
 1760 00000000 0000001b 07000019 69000346  ............i..F
 1770 01137e00 00000291 60156d3d 1080ffff  ..~.....`.m=....
 1780 ffff2f00 00000000 00001813 0a000003  ../.............
 1790 4701127e 00000003 91b07f00 0015bb3d  G..~...........=
 17a0 1080ffff ffffea00 00000000 00001969  ...............i
 17b0 00034e01 127e0000 00029158 15d53d10  ..N..~.....X..=.
 17c0 80ffffff ffc60000 00000000 0018320a  ..............2.
 17d0 00000350 01172206 00000391 a07f18d8  ...P..".........
 17e0 06000003 5101127e 00000003 91987f18  ....Q..~........
 17f0 c7070000 03520112 7e000000 02915015  .....R..~.....P.
 1800 373e1080 ffffffff 64000000 00000000  7>......d.......
 1810 196a0003 570115bb 01000002 9148154d  .j..W........H.M
 1820 3e1080ff ffffff47 00000000 00000018  >......G........
 1830 130a0000 03580118 bb010000 0391907f  .....X..........
 1840 00000000 001a8407 0000031e 0107a707  ................
 1850 00004908 0000b73b 1080ffff ffff7c00  ..I....;......|.
 1860 00000000 0000019c 49080000 179d0100  ........I.......
 1870 00031e01 2a7e0000 00029148 179e0700  ....*~.....H....
 1880 00031e01 36c80200 00029144 19640003  ....6......D.d..
 1890 1f010b49 08000002 9160189d 0b000003  ...I.....`......
 18a0 21010fa0 05000002 915815f2 3b1080ff  !........X..;...
 18b0 ffffff3b 00000000 00000019 69000323  ...;........i..#
 18c0 01127e00 00000291 6800001b 081ca90a  ..~.....h.......
 18d0 000003f3 07c50a00 00490800 008e3910  .........I....9.
 18e0 80ffffff ff290200 00000000 00019c88  .....)..........
 18f0 09000011 9d010000 03f3257e 00000003  ..........%~....
 1900 91887f11 9e070000 03f332c8 02000003  ..........2.....
 1910 91847f18 e7080000 030d010c bb010000  ................
 1920 02916019 6900030e 010e7e00 00000291  ..`.i.....~.....
 1930 5814ad39 1080ffff ffff2801 00000000  X..9......(.....
 1940 00003309 000013e7 08000003 f810bb01  ..3.............
 1950 00000291 68126900 03f9127e 00000002  ....h.i....~....
 1960 91501dcb 0e00006b 3a1080ff ffffff3d  .P.....k:......=
 1970 00000000 00000003 0301251e e20e0000  ..........%.....
 1980 0291401e d80e0000 0291481f ee0e0000  ..@.......H.....
 1990 0391b87f 20f80e00 00823a10 80ffffff  .... .....:.....
 19a0 ff250000 00000000 001ff90e 00000391  .%..............
 19b0 b07f0000 001dcb0e 00004c3b 1080ffff  ..........L;....
 19c0 ffff3d00 00000000 00000312 01211ee2  ..=..........!..
 19d0 0e000003 91a07f1e d80e0000 0391a87f  ................
 19e0 1fee0e00 00039198 7f20f80e 0000633b  ......... ....c;
 19f0 1080ffff ffff2500 00000000 00001ff9  ......%.........
 1a00 0e000003 91907f00 00001c12 09000003  ................
 1a10 ea072007 00004908 00004539 1080ffff  .. ...I...E9....
 1a20 ffff4900 00000000 0000019c be090000  ..I.............
 1a30 13180900 0003eb0c 7e000000 02916800  ........~.....h.
 1a40 21b90900 0003e606 74070000 26391080  !.......t...&9..
 1a50 ffffffff 1f000000 00000000 019cf009  ................
 1a60 00001070 74720003 e61a7e00 00000291  ...ptr....~.....
 1a70 68002286 09000003 d30a3107 00007e00  h.".......1...~.
 1a80 00008438 1080ffff ffffa200 00000000  ...8............
 1a90 0000019c 520a0000 12690003 d40c7e00  ....R....i....~.
 1aa0 00000291 68126a00 03d40f7e 00000002  ....h.j....~....
 1ab0 916015cd 381080ff ffffff41 00000000  .`..8......A....
 1ac0 00000013 be0a0000 03db126b 00000002  ...........k....
 1ad0 915c0000 21200b00 00038006 a30b0000  .\..! ..........
 1ae0 b9341080 ffffffff cb030000 00000000  .4..............
 1af0 019c560c 0000114e 09000003 801a7e00  ..V....N......~.
 1b00 00000391 d87e1137 09000003 80321c06  .....~.7.....2..
 1b10 00000391 d07e132f 0a000003 8d142206  .....~./......".
 1b20 00000391 b07f1424 351080ff ffffff31  .......$5......1
 1b30 00000000 000000c7 0a000012 69000386  ............i...
 1b40 137e0000 00029168 00157d35 1080ffff  .~.....h..}5....
 1b50 fffff802 00000000 00001269 00038e11  ...........i....
 1b60 bb010000 02916015 9d351080 ffffffff  ......`..5......
 1b70 ce020000 00000000 13320a00 00039018  .........2......
 1b80 22060000 0391a87f 13040700 00039213  "...............
 1b90 7e000000 02915813 640a0000 039911bb  ~.....X.d.......
 1ba0 01000002 91501523 361080ff ffffff48  .....P.#6......H
 1bb0 02000000 00000012 6a00039f 16bb0100  ........j.......
 1bc0 00029148 153d3610 80ffffff ff240200  ...H.=6......$..
 1bd0 00000000 0013130a 000003a0 177e0000  .............~..
 1be0 000391a0 7f133f06 000003a1 15bb0100  ......?.........
 1bf0 00039198 7f148836 1080ffff ffff6b01  .......6......k.
 1c00 00000000 0000fc0b 0000138a 0b000003  ................
 1c10 a825bb01 00000391 907f1313 08000003  .%..............
 1c20 a925bb01 00000391 887f13c4 0b000003  .%..............
 1c30 bf281502 00000391 807f14fd 361080ff  .(..........6...
 1c40 ffffff49 00000000 000000db 0b000012  ...I............
 1c50 690003b2 2c7e0000 00029140 00154637  i...,~.....@..F7
 1c60 1080ffff ffff4100 00000000 00001269  ......A........i
 1c70 0003b82c 7e000000 0391b87f 00002391  ...,~.........#.
 1c80 0e00000f 381080ff ffffffc0 00000003  ....8...........
 1c90 c8301ea8 0e000003 91f07e1e 9e0e0000  .0........~.....
 1ca0 0391f87e 24c00000 001fb40e 00000391  ...~$...........
 1cb0 e87e20be 0e000029 381080ff ffffff34  .~ ....)8......4
 1cc0 00000000 0000001f bf0e0000 0391e07e  ...............~
 1cd0 00000000 00000000 228b0800 0003780a  ........".....x.
 1ce0 c6080000 7e000000 5d341080 ffffffff  ....~...]4......
 1cf0 5c000000 00000000 019cb90c 0000110d  \...............
 1d00 0a000003 78227e00 00000291 48131809  ....x"~.....H...
 1d10 00000379 0c7e0000 00029168 12696478  ...y.~.....h.idx
 1d20 00037a0c 7e000000 02916012 6f666600  ..z.~.....`.off.
 1d30 037b0c7e 00000002 9158000e 380a0000  .{.~.....X..8...
 1d40 036c0645 0b0000ea 331080ff ffffff73  .l.E....3......s
 1d50 00000000 00000001 9c180d00 00112c0b  ..............,.
 1d60 0000036c 1b7e0000 00029148 13180900  ...l.~.....H....
 1d70 00036e0f 7e000000 02916812 69647800  ..n.~.....h.idx.
 1d80 03710f7e 00000002 916013f6 0b000003  .q.~.....`......
 1d90 730f7e00 00000291 580022eb 07000003  s.~.....X.".....
 1da0 670b6808 00007e00 0000cc33 1080ffff  g.h...~....3....
 1db0 ffff1e00 00000000 0000019c 4e0d0000  ............N...
 1dc0 11130a00 00036723 7e000000 02916800  ......g#~.....h.
 1dd0 22e00a00 0003650a 73090000 7e000000  ".....e.s...~...
 1de0 b0331080 ffffffff 1c000000 00000000  .3..............
 1df0 019c840d 00001113 0a000003 65217e00  ............e!~.
 1e00 00000291 68002297 09000003 620b2c08  ....h.".....b.,.
 1e10 00007e00 00008d33 1080ffff ffff2300  ..~....3......#.
 1e20 00000000 0000019c ba0d0000 11130a00  ................
 1e30 00036222 7e000000 02916800 22570a00  ..b"~.....h."W..
 1e40 0003600a d3090000 7e000000 6a331080  ..`.....~...j3..
 1e50 ffffffff 23000000 00000000 019cf00d  ....#...........
 1e60 00001113 0a000003 60207e00 00000291  ........` ~.....
 1e70 680021cf 06000003 59061107 0000fa32  h.!.....Y......2
 1e80 1080ffff ffff7000 00000000 0000019c  ......p.........
 1e90 910e0000 10707472 00035915 49080000  .....ptr..Y.I...
 1ea0 0391b87f 11560700 00035923 7e000000  .....V....Y#~...
 1eb0 0391b07f 13870400 00035b0e 7e000000  ..........[.~...
 1ec0 02916825 910e0000 2a331080 ffffffff  ..h%....*3......
 1ed0 3d000000 00000000 035d171e a80e0000  =........]......
 1ee0 0291581e 9e0e0000 0291601f b40e0000  ..X.......`.....
 1ef0 02915020 be0e0000 41331080 ffffffff  ..P ....A3......
 1f00 25000000 00000000 1fbf0e00 00029148  %..............H
 1f10 00000026 440a0000 03513303 cb0e0000  ...&D....Q3.....
 1f20 27690003 514f7e00 0000289d 01000003  'i..QO~...(.....
 1f30 515b7e00 00002966 0003540c bb010000  Q[~...)f..T.....
 1f40 2a296a00 035511bb 01000000 0026460a  *)j..U.......&F.
 1f50 0000034b 3303050f 00002769 00034b4d  ...K3.....'i..KM
 1f60 7e000000 289d0100 00034b59 7e000000  ~...(.....KY~...
 1f70 29660003 4d0cbb01 00002a29 6a00034e  )f..M.....*)j..N
 1f80 11bb0100 00000022 fd0b0000 034005d6  .......".....@..
 1f90 07000037 000000c4 321080ff ffffff36  ...7....2......6
 1fa0 00000000 00000001 9c480f00 0011f60b  .........H......
 1fb0 00000340 1e7e0000 00029158 12640003  ...@.~.....X.d..
 1fc0 41093700 00000291 6c0022ff 0b000003  A.7.....l.".....
 1fd0 35050d0b 00003700 00009032 1080ffff  5.....7....2....
 1fe0 ffff3400 00000000 0000019c 8d0f0000  ..4.............
 1ff0 11f60b00 0003351c 7e000000 02915812  ......5.~.....X.
 2000 72657400 03370937 00000002 916c0022  ret..7.7.....l."
 2010 55090000 032b05a5 09000037 0000005c  U....+.....7...\
 2020 321080ff ffffff34 00000000 00000001  2......4........
 2030 9cd20f00 0011f60b 0000032b 1d7e0000  ...........+.~..
 2040 00029158 12726574 00032c09 37000000  ...X.ret..,.7...
 2050 02916c00 0ecf0b00 00031f06 d90b0000  ..l.............
 2060 e3311080 ffffffff 79000000 00000000  .1......y.......
 2070 019c3110 0000112c 0b000003 1f197e00  ..1....,......~.
 2080 00000291 48131809 00000322 0f7e0000  ....H......".~..
 2090 00029168 12696478 0003250f 7e000000  ...h.idx..%.~...
 20a0 02916013 f60b0000 03270f7e 00000002  ..`......'.~....
 20b0 91580022 040a0000 031a0bfa 0700007e  .X."...........~
 20c0 000000b0 311080ff ffffff33 00000000  ....1......3....
 20d0 00000001 9c761000 00106e75 6d00031a  .....v....num...
 20e0 1d7e0000 00029168 11a30800 00031a2b  .~.....h.......+
 20f0 7e000000 02916000 226e0400 0002060f  ~.....`."n......
 2100 a0020000 49080000 a5501080 ffffffff  ....I....P......
 2110 41000000 00000000 019cd610 00001073  A..............s
 2120 0002061e 49080000 02915810 6e000206  ....I.....X.n...
 2130 2a7e0000 00029150 15b95010 80ffffff  *~.....P..P.....
 2140 ff270000 00000000 00126900 0207137e  .'........i....~
 2150 00000002 91680000 2bba0400 00011e0d  .....h..+.......
 2160 a6040000 e6501080 ffffffff 1a000000  .....P..........
 2170 00000000 019c1070 6400011e 257e0000  .......pd...%~..
 2180 00029168 00004107 00000400 53080000  ...h..A.....S...
 2190 08013700 0000044b 0c0000c5 01000050  ..7....K.......P
 21a0 01000000 00000000 00000020 12000002  ........... ....
 21b0 01066501 00000202 050f0200 00030405  ..e.............
 21c0 696e7400 02080529 03000004 cf020000  int....)........
 21d0 052e1851 00000002 01086301 00000419  ...Q......c.....
 21e0 02000005 31196400 00000202 07710100  ....1.d......q..
 21f0 0004a103 00000534 19770000 00020407  .......4.w......
 2200 ce050000 04430200 00053719 8a000000  .....C....7.....
 2210 020807c9 05000004 8d040000 05561a8a  .............V..
 2220 00000005 10060410 b00c0000 05010000  ................
 2230 06d50d00 0006050e 58000000 00076373  ........X.....cs
 2240 0006060e 58000000 02076973 74000607  ....X.....ist...
 2250 0d450000 00040640 0c000006 080d4500  .E.....@......E.
 2260 00000506 c80d0000 06090e58 00000006  ...........X....
 2270 067c0c00 00060a0e 6b000000 08069907  .|......k.......
 2280 0000060b 0e6b0000 000c0004 b20c0000  .....k..........
 2290 060c1b9d 00000005 0a060d10 ad0d0000  ................
 22a0 39010000 06230600 00060e0e 58000000  9....#......X...
 22b0 0006f60b 0000060f 0e7e0000 00020004  .........~......
 22c0 ae0d0000 06101b11 01000008 0f0d0000  ................
 22d0 a8070608 6d020000 07723135 0007070b  ....m....r15....
 22e0 7e000000 00077231 34000708 0b7e0000  ~.....r14....~..
 22f0 00080772 31330007 090b7e00 00001007  ...r13....~.....
 2300 72313200 070a0b7e 00000018 07723131  r12....~.....r11
 2310 00070b0b 7e000000 20077231 3000070c  ....~... .r10...
 2320 0b7e0000 00280772 3900070d 0b7e0000  .~...(.r9....~..
 2330 00300772 3800070e 0b7e0000 00380772  .0.r8....~...8.r
 2340 62700007 0f0b7e00 00004007 72646900  bp....~...@.rdi.
 2350 07100b7e 00000048 07727369 0007110b  ...~...H.rsi....
 2360 7e000000 50077264 78000712 0b7e0000  ~...P.rdx....~..
 2370 00580772 63780007 130b7e00 00006007  .X.rcx....~...`.
 2380 72627800 07140b7e 00000068 07726178  rbx....~...h.rax
 2390 0007150b 7e000000 7006900c 0000071a  ....~...p.......
 23a0 0b6b0000 0078069b 0d000007 1b0b6b00  .k...x........k.
 23b0 00007c07 72697000 071d0b7e 00000080  ..|.rip....~....
 23c0 07637300 071e0b7e 00000088 06300d00  .cs....~.....0..
 23d0 00071f0b 7e000000 90077273 70000720  ....~.....rsp.. 
 23e0 0b7e0000 00980773 73000721 0b7e0000  .~.....ss..!.~..
 23f0 00a00002 01066c01 0000096d 0200000a  ......l....m....
 2400 91000000 89020000 0b8a0000 007f000c  ................
 2410 600d0000 04171279 0200000a 05010000  `......y........
 2420 a5020000 0b8a0000 00ff000d 69647400  ............idt.
 2430 04181495 02000009 03a08011 82ffffff  ................
 2440 ff0e310c 00000419 0f390100 00090320  ..1......9..... 
 2450 701080ff ffffff0a e1020000 e1020000  p...............
 2460 0b8a0000 001f000f 08740200 0010880d  .........t......
 2470 00000455 0dd10200 00090340 701080ff  ...U.......@p...
 2480 ffffff0a 6d020000 0d030000 0b8a0000  ....m...........
 2490 003f0010 aa0c0000 047b06fd 02000009  .?.......{......
 24a0 03208011 82ffffff ff10620c 000004ba  . ........b.....
 24b0 0afd0200 00090360 801182ff ffffff11  .......`........
 24c0 ea060000 03560d56 0b000048 511080ff  .....V.V...HQ...
 24d0 ffffffeb 00000000 00000001 9c1e0400  ................
 24e0 00125400 8a000000 13627566 0003561a  ..T......buf..V.
 24f0 1e040000 0391a87f 140c0700 00035623  ..............V#
 2500 37000000 0391a47f 13640003 562b8a00  7........d..V+..
 2510 00000391 987f0d70 00035808 1e040000  .......p..X.....
 2520 0291680d 70310003 59081e04 00000291  ..h.p1..Y.......
 2530 600d7032 0003590e 1e040000 0291580d  `.p2..Y.......X.
 2540 75640003 5a048a00 00000291 500e6b09  ud..Z.......P.k.
 2550 0000035b 048a0000 00029148 15855110  ...[.......H..Q.
 2560 80ffffff ff3a0000 00000000 00fb0300  .....:..........
 2570 000e9f0a 0000036a 058a0000 00029140  .......j.......@
 2580 00160352 1080ffff ffff2b00 00000000  ...R......+.....
 2590 00000d74 6d700003 77086d02 00000391  ...tmp..w.m.....
 25a0 bf7f0000 0f086d02 0000174d 0d000004  ......m....M....
 25b0 c711e349 1080ffff ffff7d01 00000000  ...I......}.....
 25c0 0000019c 71040000 14f10c00 0004c73a  ....q..........:
 25d0 71040000 02915816 154a1080 ffffffff  q.....X..J......
 25e0 35000000 00000000 0d690004 cb113700  5........i....7.
 25f0 00000291 6c00000f 08450100 0018be0c  ....l....E......
 2600 000004bb 06230d00 00ad0400 009b4910  .....#........I.
 2610 80ffffff ff480000 00000000 00019cad  .....H..........
 2620 04000014 a70d0000 04bb1337 00000002  ...........7....
 2630 916c0002 01020d09 00001974 0c000004  .l.........t....
 2640 b106730d 00006549 1080ffff ffff3600  ..s...eI......6.
 2650 00000000 0000019c e6040000 14a70d00  ................
 2660 0004b112 37000000 02916c00 19400d00  ....7.....l..@..
 2670 00048506 fc0c0000 7a461080 ffffffff  ........zF......
 2680 eb020000 00000000 019c2705 000014da  ..........'.....
 2690 0c000004 85287104 00000291 580d4352  .....(q.....X.CR
 26a0 580004ad 0e7e0000 00029168 0019b50d  X....~.....h....
 26b0 0000047c 06cd0c00 00fe4510 80ffffff  ...|......E.....
 26c0 ff7c0000 00000000 00019c68 05000013  .|.........h....
 26d0 72656700 047c157e 00000002 916814ec  reg..|.~.....h..
 26e0 0c000004 7c26e102 00000291 60001937  ....|&......`..7
 26f0 0d000004 4306670c 0000be44 1080ffff  ....C.g....D....
 2700 ffff4001 00000000 0000019c aa050000  ..@.............
 2710 16e24410 80ffffff ffd10000 00000000  ..D.............
 2720 000d6900 04460e37 00000002 916c0000  ..i..F.7.....l..
 2730 1a7f0d00 00043306 df0c0000 fd431080  ......3......C..
 2740 ffffffff c1000000 00000000 019c11c7  ................
 2750 0c000003 030dbb0d 00003453 1080ffff  ..........4S....
 2760 ffff1f01 00000000 0000019c a5060000  ................
 2770 13627566 00030319 1e040000 0391b87f  .buf............
 2780 140c0700 00030322 37000000 0391b47f  ......."7.......
 2790 13640003 032c3700 00000391 b07f0d70  .d...,7........p
 27a0 00030508 1e040000 0291680d 70310003  ..........h.p1..
 27b0 06081e04 00000291 600d7032 0003060e  ........`.p2....
 27c0 1e040000 0291580d 75640003 07108a00  ......X.ud......
 27d0 00000291 500e6b09 00000308 06370000  ....P.k......7..
 27e0 0002914c 159c5310 80ffffff ff3e0000  ...L..S......>..
 27f0 00000000 00830600 000e9f0a 00000317  ................
 2800 07370000 00029148 00162354 1080ffff  .7.....H..#T....
 2810 ffff2b00 00000000 00000d74 6d700003  ..+........tmp..
 2820 24086d02 00000291 47000018 6e040000  $.m.....G...n...
 2830 02060fa0 02000005 070000a5 501080ff  ............P...
 2840 ffffff41 00000000 00000001 9c050700  ...A............
 2850 00137300 02061e05 07000002 9158136e  ..s..........X.n
 2860 0002062a 7e000000 02915016 b9501080  ...*~.....P..P..
 2870 ffffffff 27000000 00000000 0d690002  ....'........i..
 2880 07137e00 00000291 6800001b 081c9b0c  ..~.....h.......
 2890 00000109 0da00c00 000f5310 80ffffff  ..........S.....
 28a0 ff250000 00000000 00019c14 a20d0000  .%..............
 28b0 01091b58 00000002 916c148a 0c000001  ...X.....l......
 28c0 09294500 00000291 680000e3 02000004  .)E.....h.......
 28d0 00240a00 00080137 00000004 ae0e0000  .$.....7........
 28e0 c5010000 b0010000 00000000 00000000  ................
 28f0 3b160000 02010665 01000002 02050f02  ;......e........
 2900 00000304 05696e74 00020805 29030000  .....int....)...
 2910 04cf0200 00030c18 51000000 02010863  ........Q......c
 2920 01000004 19020000 030d1d64 00000002  ...........d....
 2930 02077101 00000204 07ce0500 00020807  ..q.............
 2940 c9050000 058b0e00 0007046b 00000004  ...........k....
 2950 0406a800 000006fc 040000f8 03060105  ................
 2960 0000f802 06060500 00e80306 0b050000  ................
 2970 e8020007 ba0e0000 022f062d 0e0000a3  ........./.-....
 2980 4c1080ff ffffffa2 00000000 00000001  L...............
 2990 9cda0000 0008a20d 0000022f 1e790000  .........../.y..
 29a0 0002916c 0007e20d 00000225 06c90e00  ...l.......%....
 29b0 00504c10 80ffffff ff530000 00000000  .PL......S......
 29c0 00019c19 01000008 08020000 02252219  .............%".
 29d0 01000002 91580969 00022709 37000000  .....X.i..'.7...
 29e0 02916c00 0a082601 00000201 066c0100  ..l...&......l..
 29f0 000b1f01 000007f1 0d000002 1a06ff0d  ................
 2a00 0000ee4b 1080ffff ffff6200 00000000  ...K......b.....
 2a10 0000019c 6a010000 08080200 00021a21  ....j..........!
 2a20 19010000 02915809 6900021c 09370000  ......X.i....7..
 2a30 0002916c 000c230e 0000020f 05940e00  ...l..#.........
 2a40 00370000 00974b10 80ffffff ff570000  .7....K......W..
 2a50 00000000 00019cec 01000008 a20d0000  ................
 2a60 020f1879 00000002 915c0808 02000002  ...y.....\......
 2a70 0f2aec01 00000291 50082306 0000020f  .*......P.#.....
 2a80 36370000 00029158 0d510e00 00021112  67.....X.Q......
 2a90 19010000 0291600e b54b1080 ffffffff  ......`..K......
 2aa0 34000000 00000000 09690002 120e3700  4........i....7.
 2ab0 00000291 6c00000a 08f20100 000f0759  ....l..........Y
 2ac0 0e000002 0906620e 0000604b 1080ffff  ......b...`K....
 2ad0 ffff3700 00000000 0000019c 32020000  ..7.........2...
 2ae0 08a20d00 00020918 79000000 02916c10  ........y.....l.
 2af0 63000209 231f0100 00029168 0007140e  c...#......h....
 2b00 00000203 0d780e00 00755410 80ffffff  .....x...uT.....
 2b10 ff330000 00000000 00019c64 02000008  .3.........d....
 2b20 a20d0000 02032579 00000002 916c0011  ......%y.....l..
 2b30 696e6200 01151049 0e000045 00000053  inb....I...E...S
 2b40 541080ff ffffff22 00000000 00000001  T......"........
 2b50 9ca90200 0008a20d 00000115 1d580000  .............X..
 2b60 0002915c 09726574 0001170a 45000000  ...\.ret....E...
 2b70 02916f00 129b0c00 0001090d a00c0000  ..o.............
 2b80 0f531080 ffffffff 25000000 00000000  .S......%.......
 2b90 019c08a2 0d000001 091b5800 00000291  ..........X.....
 2ba0 6c088a0c 00000109 29450000 00029168  l.......)E.....h
 2bb0 00005b00 00000300 4f0b0000 0801504d  ..[.....O.....PM
 2bc0 1080ffff ffff6950 1080ffff ffffb517  ......iP........
 2bd0 00007372 632f6172 63682f69 6e746572  ..src/arch/inter
 2be0 72757074 5f68616e 646c652e 61736d00  rupt_handle.asm.
 2bf0 4e41534d 20322e31 342e3032 00018002  NASM 2.14.02....
 2c00 504d1080 ffffffff 00000000 00000000  PM..............
 2c10 00520000 0003006a 0b000008 01705010  .R.....j.....pP.
 2c20 80ffffff ff7c5010 80ffffff ff4e1800  .....|P......N..
 2c30 00737263 2f617263 682f7574 696c6974  .src/arch/utilit
 2c40 792e6173 6d004e41 534d2032 2e31342e  y.asm.NASM 2.14.
 2c50 30320001 80027050 1080ffff ffff0000  02....pP........
 2c60 00000000 00000052 00000003 00850b00  .......R........
 2c70 00080180 501080ff ffffffa5 501080ff  ....P.......P...
 2c80 ffffff99 18000073 72632f61 7263682f  .......src/arch/
 2c90 6764745f 61736d2e 61736d00 4e41534d  gdt_asm.asm.NASM
 2ca0 20322e31 342e3032 00018002 80501080   2.14.02.....P..
 2cb0 ffffffff 00000000 00000000 00        .............   
Contenu de la section .debug_abbrev :
 0000 01110125 0e130b03 0e1b0e11 01120710  ...%............
 0010 17000002 24000b0b 3e0b030e 00000324  ....$...>......$
 0020 000b0b3e 0b030800 00041600 030e3a0b  ...>..........:.
 0030 3b0b390b 49130000 05350049 13000006  ;.9.I....5.I....
 0040 1301030e 0b0b3a0b 3b0b390b 01130000  ......:.;.9.....
 0050 070d0003 0e3a0b3b 0b390b49 13380b00  .....:.;.9.I.8..
 0060 00082e01 3f19030e 3a0b3b0b 390b6e0e  ....?...:.;.9.n.
 0070 11011207 40189742 19011300 00090500  ....@..B........
 0080 030e3a0b 3b0b390b 49130218 00000a34  ..:.;.9.I......4
 0090 00030e3a 0b3b0b39 0b491302 1800000b  ...:.;.9.I......
 00a0 0f000b0b 49130000 00011101 250e130b  ....I.......%...
 00b0 030e1b0e 55171101 10170000 0224000b  ....U........$..
 00c0 0b3e0b03 0e000003 24000b0b 3e0b0308  .>......$...>...
 00d0 00000416 00030e3a 0b3b0b39 0b491300  .......:.;.9.I..
 00e0 00051301 0b0b3a0b 3b0b390b 6e0e0113  ......:.;.9.n...
 00f0 0000060d 0003083a 0b3b0b39 0b491338  .......:.;.9.I.8
 0100 0b000007 0d00030e 3a0b3b0b 390b4913  ........:.;.9.I.
 0110 380b0000 0813010b 0b3a0b3b 0b390b01  8........:.;.9..
 0120 13000009 13010b0b 88010b3a 0b3b0b39  ...........:.;.9
 0130 0b6e0e01 1300000a 0d00030e 3a0b3b0b  .n..........:.;.
 0140 390b4913 88010b38 0b00000b 1600030e  9.I....8........
 0150 3a0b3b0b 390b4913 88010b00 000c3b00  :.;.9.I.......;.
 0160 030e0000 0d340003 0e3a0b3b 0b390b49  .....4...:.;.9.I
 0170 133f1902 1800000e 01014913 01130000  .?........I.....
 0180 0f210049 132f0b00 00103400 03083a0b  .!.I./....4...:.
 0190 3b0b390b 49133f19 02180000 11210049  ;.9.I.?......!.I
 01a0 132f0500 00123400 030e3a0b 3b0b390b  ./....4...:.;.9.
 01b0 49133f19 88010502 18000013 2e013f19  I.?...........?.
 01c0 030e3a0b 3b0b390b 6e0e1101 12074018  ..:.;.9.n.....@.
 01d0 96421901 13000014 05000308 3a0b3b0b  .B..........:.;.
 01e0 390b4913 02180000 152e013f 19030e3a  9.I........?...:
 01f0 0b3b0b39 0b6e0e11 01120740 18974219  .;.9.n.....@..B.
 0200 01130000 16050003 0e3a0b3b 0b390b49  .........:.;.9.I
 0210 13021800 00173400 030e3a0b 3b0b390b  ......4...:.;.9.
 0220 49130218 0000182e 01030e3a 0b3b0b39  I..........:.;.9
 0230 0b110112 07401897 42190113 0000190f  .....@..B.......
 0240 000b0b49 1300001a 2e01030e 3a0b3b0b  ...I........:.;.
 0250 390b8801 05110112 07401897 42190113  9........@..B...
 0260 00001b2e 013f1903 0e3a0b3b 0b390b6e  .....?...:.;.9.n
 0270 0e491311 01120740 18974219 01130000  .I.....@..B.....
 0280 1c0b0111 01120700 001d3400 03083a0b  ..........4...:.
 0290 3b0b390b 49130218 00001e0f 000b0b00  ;.9.I...........
 02a0 00000111 01250e13 0b030e1b 0e551711  .....%.......U..
 02b0 01101700 00022400 0b0b3e0b 030e0000  ......$...>.....
 02c0 0324000b 0b3e0b03 08000004 1600030e  .$...>..........
 02d0 3a0b3b0b 390b4913 00000513 01030e0b  :.;.9.I.........
 02e0 0b3a0b3b 0b390b01 13000006 0d00030e  .:.;.9..........
 02f0 3a0b3b0b 390b4913 380b0000 07040103  :.;.9.I.8.......
 0300 0e3e0b0b 0b49133a 0b3b0b39 0b011300  .>...I.:.;.9....
 0310 00082800 030e1c05 00000934 00030e3a  ..(........4...:
 0320 0b3b0b39 0b491388 01050218 00000a0f  .;.9.I..........
 0330 000b0b49 1300000b 01014913 01130000  ...I......I.....
 0340 0c210049 132f0500 000d3400 030e3a0b  .!.I./....4...:.
 0350 3b0b390b 49130218 00000e34 00030e3a  ;.9.I......4...:
 0360 0b3b0b39 0b49133f 19021800 000f2e01  .;.9.I.?........
 0370 3f19030e 3a0b3b0b 390b1101 12074018  ?...:.;.9.....@.
 0380 96421901 13000010 0500030e 3a0b3b0b  .B..........:.;.
 0390 390b4913 02180000 11340003 083a0b3b  9.I......4...:.;
 03a0 0b390b49 13021800 00122e01 3f19030e  .9.I........?...
 03b0 3a0b3b0b 390b6e0e 11011207 40189742  :.;.9.n.....@..B
 03c0 19000013 05000308 3a0b3b0b 390b4913  ........:.;.9.I.
 03d0 02180000 00011101 250e130b 030e1b0e  ........%.......
 03e0 55171101 10170000 0224000b 0b3e0b03  U........$...>..
 03f0 0e000003 24000b0b 3e0b0308 00000416  ....$...>.......
 0400 00030e3a 0b3b0b39 0b491300 00051301  ...:.;.9.I......
 0410 030e0b0b 3a0b3b0b 390b0113 0000060d  ....:.;.9.......
 0420 00030e3a 0b3b0b39 0b491338 0b000007  ...:.;.9.I.8....
 0430 0f000b0b 49130000 08340003 0e3a0b3b  ....I....4...:.;
 0440 0b390b49 13021800 00092e01 3f19030e  .9.I........?...
 0450 3a0b3b05 390b4913 11011207 40189642  :.;.9.I.....@..B
 0460 19011300 000a0500 03083a0b 3b05390b  ..........:.;.9.
 0470 49130218 00000b05 00030e3a 0b3b0539  I..........:.;.9
 0480 0b491302 1800000c 34000308 3a0b3b05  .I......4...:.;.
 0490 390b4913 02180000 0d340003 0e3a0b3b  9.I......4...:.;
 04a0 05390b49 13021800 000e0b01 11011207  .9.I............
 04b0 00000f0f 000b0b00 00102e01 3f19030e  ............?...
 04c0 3a0b3b05 390b1101 12074018 96421901  :.;.9.....@..B..
 04d0 13000011 0b011101 12070113 0000122e  ................
 04e0 013f1903 0e3a0b3b 0b390b49 13110112  .?...:.;.9.I....
 04f0 07401896 42190113 00001305 00030e3a  .@..B..........:
 0500 0b3b0b39 0b491302 18000014 34000308  .;.9.I......4...
 0510 3a0b3b0b 390b4913 02180000 152e0103  :.;.9.I.........
 0520 0e3a0b3b 0b390b49 13110112 07401896  .:.;.9.I.....@..
 0530 42190113 0000162e 01030e3a 0b3b0b39  B..........:.;.9
 0540 0b491311 01120740 18974219 01130000  .I.....@..B.....
 0550 17050003 083a0b3b 0b390b49 13021800  .....:.;.9.I....
 0560 00182600 0000192e 013f1903 0e3a0b3b  ..&......?...:.;
 0570 0b390b49 13110112 07401897 42190113  .9.I.....@..B...
 0580 00001a2e 003f1903 0e3a0b3b 0b390b49  .....?...:.;.9.I
 0590 13110112 07401897 42190000 00011101  .....@..B.......
 05a0 250e130b 030e1b0e 55171101 10170000  %.......U.......
 05b0 0224000b 0b3e0b03 0e000003 24000b0b  .$...>......$...
 05c0 3e0b0308 00000416 00030e3a 0b3b0b39  >..........:.;.9
 05d0 0b491300 00051301 030e0b0b 3a0b3b0b  .I..........:.;.
 05e0 390b0113 0000060d 00030e3a 0b3b0b39  9..........:.;.9
 05f0 0b491338 0b000007 3400030e 3a0b3b0b  .I.8....4...:.;.
 0600 390b4913 88010502 18000008 0f000b0b  9.I.............
 0610 49130000 09340003 0e3a0b3b 0b390b49  I....4...:.;.9.I
 0620 133f1902 1800000a 3400030e 3a0b3b0b  .?......4...:.;.
 0630 390b4913 3f193c19 00000b01 01491301  9.I.?.<......I..
 0640 1300000c 21004913 2f060000 0d210049  ....!.I./....!.I
 0650 132f0b00 000e2e01 3f19030e 3a0b3b0b  ./......?...:.;.
 0660 390b6e0e 11011207 40189742 19011300  9.n.....@..B....
 0670 000f2f00 03084913 00001005 0003083a  ../...I........:
 0680 0b3b0b39 0b491302 18000011 0500030e  .;.9.I..........
 0690 3a0b3b0b 390b4913 02180000 12340003  :.;.9.I......4..
 06a0 083a0b3b 0b390b49 13021800 00133400  .:.;.9.I......4.
 06b0 030e3a0b 3b0b390b 49130218 0000140b  ..:.;.9.I.......
 06c0 01110112 07011300 00150b01 11011207  ................
 06d0 0000162e 013f1903 0e3a0b3b 05390b6e  .....?...:.;.9.n
 06e0 0e110112 07401896 42190113 00001705  .....@..B.......
 06f0 00030e3a 0b3b0539 0b491302 18000018  ...:.;.9.I......
 0700 3400030e 3a0b3b05 390b4913 02180000  4...:.;.9.I.....
 0710 19340003 083a0b3b 05390b49 13021800  .4...:.;.9.I....
 0720 001a2e01 3f19030e 3a0b3b05 390b6e0e  ....?...:.;.9.n.
 0730 49131101 12074018 96421901 1300001b  I.....@..B......
 0740 0f000b0b 00001c2e 013f1903 0e3a0b3b  .........?...:.;
 0750 0b390b6e 0e491311 01120740 18964219  .9.n.I.....@..B.
 0760 01130000 1d1d0131 13110112 07580b59  .......1.....X.Y
 0770 05570b00 001e0500 31130218 00001f34  .W......1......4
 0780 00311302 18000020 0b013113 11011207  .1..... ..1.....
 0790 0000212e 013f1903 0e3a0b3b 0b390b6e  ..!..?...:.;.9.n
 07a0 0e110112 07401896 42190113 0000222e  .....@..B.....".
 07b0 013f1903 0e3a0b3b 0b390b6e 0e491311  .?...:.;.9.n.I..
 07c0 01120740 18974219 01130000 231d0131  ...@..B.....#..1
 07d0 13520155 17580b59 0b570b00 00240b01  .R.U.X.Y.W...$..
 07e0 55170000 251d0131 13110112 07580b59  U...%..1.....X.Y
 07f0 0b570b00 00262e01 030e3a0b 3b0b390b  .W...&....:.;.9.
 0800 200b0113 00002705 0003083a 0b3b0b39   .....'....:.;.9
 0810 0b491300 00280500 030e3a0b 3b0b390b  .I...(....:.;.9.
 0820 49130000 29340003 083a0b3b 0b390b49  I...)4...:.;.9.I
 0830 1300002a 0b010000 2b2e013f 19030e3a  ...*....+..?...:
 0840 0b3b0b39 0b6e0e11 01120740 18974219  .;.9.n.....@..B.
 0850 00000001 1101250e 130b030e 1b0e5517  ......%.......U.
 0860 11011017 00000224 000b0b3e 0b030e00  .......$...>....
 0870 00032400 0b0b3e0b 03080000 04160003  ..$...>.........
 0880 0e3a0b3b 0b390b49 13000005 13010b0b  .:.;.9.I........
 0890 3a0b3b0b 390b6e0e 01130000 060d0003  :.;.9.n.........
 08a0 0e3a0b3b 0b390b49 13380b00 00070d00  .:.;.9.I.8......
 08b0 03083a0b 3b0b390b 4913380b 00000813  ..:.;.9.I.8.....
 08c0 01030e0b 0b3a0b3b 0b390b01 13000009  .....:.;.9......
 08d0 26004913 00000a01 01491301 1300000b  &.I......I......
 08e0 21004913 2f0b0000 0c340003 0e3a0b3b  !.I./....4...:.;
 08f0 0b390b49 133f193c 1900000d 34000308  .9.I.?.<....4...
 0900 3a0b3b0b 390b4913 02180000 0e340003  :.;.9.I......4..
 0910 0e3a0b3b 0b390b49 13021800 000f0f00  .:.;.9.I........
 0920 0b0b4913 00001034 00030e3a 0b3b0b39  ..I....4...:.;.9
 0930 0b49133f 19021800 00112e01 3f19030e  .I.?........?...
 0940 3a0b3b0b 390b6e0e 11011207 40189742  :.;.9.n.....@..B
 0950 19011300 00122f00 03084913 00001305  ....../...I.....
 0960 0003083a 0b3b0b39 0b491302 18000014  ...:.;.9.I......
 0970 0500030e 3a0b3b0b 390b4913 02180000  ....:.;.9.I.....
 0980 150b0111 01120701 13000016 0b011101  ................
 0990 12070000 172e013f 19030e3a 0b3b0b39  .......?...:.;.9
 09a0 0b110112 07401896 42190113 0000182e  .....@..B.......
 09b0 013f1903 0e3a0b3b 0b390b6e 0e491311  .?...:.;.9.n.I..
 09c0 01120740 18974219 01130000 192e013f  ...@..B........?
 09d0 19030e3a 0b3b0b39 0b6e0e11 01120740  ...:.;.9.n.....@
 09e0 18964219 01130000 1a2e003f 19030e3a  ..B........?...:
 09f0 0b3b0b39 0b6e0e11 01120740 18964219  .;.9.n.....@..B.
 0a00 00001b0f 000b0b00 001c2e01 3f19030e  ............?...
 0a10 3a0b3b0b 390b6e0e 11011207 40189742  :.;.9.n.....@..B
 0a20 19000000 01110125 0e130b03 0e1b0e55  .......%.......U
 0a30 17110110 17000002 24000b0b 3e0b030e  ........$...>...
 0a40 00000324 000b0b3e 0b030800 00041600  ...$...>........
 0a50 030e3a0b 3b0b390b 49130000 05040103  ..:.;.9.I.......
 0a60 0e3e0b0b 0b49133a 0b3b0b39 0b011300  .>...I.:.;.9....
 0a70 00062800 030e1c05 0000072e 013f1903  ..(..........?..
 0a80 0e3a0b3b 0b390b6e 0e110112 07401896  .:.;.9.n.....@..
 0a90 42190113 00000805 00030e3a 0b3b0b39  B..........:.;.9
 0aa0 0b491302 18000009 34000308 3a0b3b0b  .I......4...:.;.
 0ab0 390b4913 02180000 0a0f000b 0b491300  9.I..........I..
 0ac0 000b2600 49130000 0c2e013f 19030e3a  ..&.I......?...:
 0ad0 0b3b0b39 0b6e0e49 13110112 07401896  .;.9.n.I.....@..
 0ae0 42190113 00000d34 00030e3a 0b3b0b39  B......4...:.;.9
 0af0 0b491302 1800000e 0b011101 12070000  .I..............
 0b00 0f260000 00100500 03083a0b 3b0b390b  .&........:.;.9.
 0b10 49130218 0000112e 013f1903 083a0b3b  I........?...:.;
 0b20 0b390b6e 0e491311 01120740 18974219  .9.n.I.....@..B.
 0b30 01130000 122e013f 19030e3a 0b3b0b39  .......?...:.;.9
 0b40 0b6e0e11 01120740 18974219 00000001  .n.....@..B.....
 0b50 11011101 12011006 03082508 13050000  ..........%.....
 0b60 022e0011 01400600 00000111 01110112  .....@..........
 0b70 01100603 08250813 05000002 2e001101  .....%..........
 0b80 40060000 00011101 11011201 10060308  @...............
 0b90 25081305 0000022e 00110140 06000000  %..........@....
Contenu de la section .debug_aranges :
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00101080 ffffffff 59000000 00000000  ........Y.......
 0020 00000000 00000000 00000000 00000000  ................
 0030 3c000000 02008e01 00000800 00000000  <...............
 0040 00201080 ffffffff c6020000 00000000  . ..............
 0050 a5501080 ffffffff 41000000 00000000  .P......A.......
 0060 00000000 00000000 00000000 00000000  ................
 0070 3c000000 0200ef06 00000800 00000000  <...............
 0080 c6221080 ffffffff 13010000 00000000  ."..............
 0090 e6501080 ffffffff 1a000000 00000000  .P..............
 00a0 00000000 00000000 00000000 00000000  ................
 00b0 6c000000 02009909 00000800 00000000  l...............
 00c0 d9231080 ffffffff d70d0000 00000000  .#..............
 00d0 00511080 ffffffff 0c000000 00000000  .Q..............
 00e0 0c511080 ffffffff 0c000000 00000000  .Q..............
 00f0 18511080 ffffffff 16000000 00000000  .Q..............
 0100 2e511080 ffffffff 1a000000 00000000  .Q..............
 0110 00000000 00000000 00000000 00000000  ................
 0120 6c000000 02008210 00000800 00000000  l...............
 0130 b0311080 ffffffff 4d120000 00000000  .1......M.......
 0140 e6501080 ffffffff 1a000000 00000000  .P..............
 0150 a5501080 ffffffff 41000000 00000000  .P......A.......
 0160 48511080 ffffffff eb000000 00000000  HQ..............
 0170 33521080 ffffffff dc000000 00000000  3R..............
 0180 00000000 00000000 00000000 00000000  ................
 0190 6c000000 02008621 00000800 00000000  l......!........
 01a0 fd431080 ffffffff 63070000 00000000  .C......c.......
 01b0 0f531080 ffffffff 25000000 00000000  .S......%.......
 01c0 a5501080 ffffffff 41000000 00000000  .P......A.......
 01d0 34531080 ffffffff 1f010000 00000000  4S..............
 01e0 48511080 ffffffff eb000000 00000000  HQ..............
 01f0 00000000 00000000 00000000 00000000  ................
 0200 5c000000 0200cb28 00000800 00000000  \......(........
 0210 604b1080 ffffffff e5010000 00000000  `K..............
 0220 0f531080 ffffffff 25000000 00000000  .S......%.......
 0230 53541080 ffffffff 22000000 00000000  ST......".......
 0240 75541080 ffffffff 33000000 00000000  uT......3.......
 0250 00000000 00000000 00000000 00000000  ................
 0260 2c000000 0300b22b 00000800 00000000  ,......+........
 0270 504d1080 ffffffff 19030000 00000000  PM..............
 0280 00000000 00000000 00000000 00000000  ................
 0290 2c000000 0300112c 00000800 00000000  ,......,........
 02a0 70501080 ffffffff 0c000000 00000000  pP..............
 02b0 00000000 00000000 00000000 00000000  ................
 02c0 2c000000 0300672c 00000800 00000000  ,.....g,........
 02d0 80501080 ffffffff 25000000 00000000  .P......%.......
 02e0 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_line :
 0000 80000000 03004100 00000101 fb0e0d00  ......A.........
 0010 01010101 00000001 00000173 72630000  ...........src..
 0020 6b65726e 656c2e63 70700001 0000696e  kernel.cpp....in
 0030 745f7661 6c75652e 68000100 00737469  t_value.h....sti
 0040 76616c65 2e680001 00000005 35000902  vale.h......5...
 0050 00101080 ffffffff 031b0105 18f40513  ................
 0060 83051191 05138205 11590513 82051159  .........Y.....Y
 0070 05138205 11590513 82051959 05012102  .....Y.....Y..!.
 0080 03000101 77010000 03007800 00000101  ....w.....x.....
 0090 fb0e0d00 01010101 00000001 00000173  ...............s
 00a0 72630073 72632f61 72636800 2f757372  rc.src/arch./usr
 00b0 2f6c6962 2f676363 2f783836 5f36342d  /lib/gcc/x86_64-
 00c0 6c696e75 782d676e 752f392f 696e636c  linux-gnu/9/incl
 00d0 75646500 006b6572 6e656c2e 68000100  ude..kernel.h...
 00e0 00676474 2e637070 00020000 73746469  .gdt.cpp....stdi
 00f0 6e742d67 63632e68 00030000 6764742e  nt-gcc.h....gdt.
 0100 68000200 0000052d 000902a5 501080ff  h......-....P...
 0110 ffffff17 0513083d 051c0002 04038205  .......=........
 0120 35000204 029e0537 00020402 ac050500  5......7........
 0130 0204023c 050c7505 014b0202 00010104  ...<..u..K......
 0140 02050100 09020020 1080ffff ffff0314  ....... ........
 0150 01055102 24130515 acad051e ad05234a  ..Q.$.........#J
 0160 05293c05 1b580519 75050191 3f056902  .)<..X..u...?.i.
 0170 2c130516 ac0519ad 0527ad05 3790053e  ,........'..7..>
 0180 82052d3c 051f2e05 1d75051c c90525d7  ..-<.....u....%.
 0190 051c8205 2691051d 82052891 051f8205  ....&.....(.....
 01a0 1d910501 ad40050c c083050a bd051508  .....@..........
 01b0 15089f08 9f089f05 16089f05 0d02291a  ..............).
 01c0 050cd705 0f910501 085c4405 0af60512  .........\D.....
 01d0 0813052c 91050ec8 052c7505 0ec8052c  ...,.....,u....,
 01e0 75050ec8 05447805 01753f05 0cf60501  u....Dx..u?.....
 01f0 ad05213c 050ef305 01590203 00010106  ..!<.....Y......
 0200 01000003 00940000 000101fb 0e0d0001  ................
 0210 01010100 00000100 00017372 632f6172  ..........src/ar
 0220 63682f6d 656d0073 72632f61 72636800  ch/mem.src/arch.
 0230 2f757372 2f6c6962 2f676363 2f783836  /usr/lib/gcc/x86
 0240 5f36342d 6c696e75 782d676e 752f392f  _64-linux-gnu/9/
 0250 696e636c 75646500 73726300 00766972  include.src..vir
 0260 7475616c 2e680001 00006172 63682e63  tual.h....arch.c
 0270 70700002 00007374 64696e74 2d676363  pp....stdint-gcc
 0280 2e680003 00007374 6976616c 652e6800  .h....stivale.h.
 0290 04000063 6f6d2e68 00040000 00052800  ...com.h......(.
 02a0 0902e650 1080ffff ffff031d 010537f4  ...P..........7.
 02b0 05017602 03000101 0402053e 000902c6  ..v........>....
 02c0 221080ff ffffff03 13010521 f405134b  "..........!...K
 02d0 0512a0bb 050ebb05 12084bbb 050dbc05  ..........K.....
 02e0 1259bc05 0dbb0512 084bbb05 18bb0512  .Y.......K......
 02f0 bbbb050a bb0508d7 05139f05 12e5050b  ................
 0300 bb0501bb 02030001 019b0600 00030076  ...............v
 0310 00000001 01fb0e0d 00010101 01000000  ................
 0320 01000001 7372632f 61726368 2f6d656d  ....src/arch/mem
 0330 002f7573 722f6c69 622f6763 632f7838  ./usr/lib/gcc/x8
 0340 365f3634 2d6c696e 75782d67 6e752f39  6_64-linux-gnu/9
 0350 2f696e63 6c756465 00006c69 62616c6c  /include..liball
 0360 6f632e68 00010000 6c696261 6c6c6f63  oc.h....liballoc
 0370 2e637070 00010000 73746469 6e742d67  .cpp....stdint-g
 0380 63632e68 00020000 00051b00 09020051  cc.h...........Q
 0390 1080ffff ffff0323 01051883 05012102  .......#......!.
 03a0 03000101 051d0009 020c5110 80ffffff  ..........Q.....
 03b0 ff032d01 05188405 01210203 00010105  ..-......!......
 03c0 23000902 18511080 ffffffff 03390105  #....Q.......9..
 03d0 0ce50501 59020200 0101052b 0009022e  ....Y......+....
 03e0 511080ff ffffff03 c5000105 0c082f05  Q............./.
 03f0 01590202 00010104 02050100 0902d923  .Y.............#
 0400 1080ffff ffff03eb 0001050a 0868050f  .............h..
 0410 00020403 74051100 0204033c 050e0002  ....t......<....
 0420 04026705 0f000204 023c0511 00020402  ..g......<......
 0430 74050200 02040257 05096905 014b3005  t......W..i..K0.
 0440 11087783 050b8405 0d4a0517 680512ba  ..w......J..h...
 0450 050d2e05 10ba0506 2f0503b7 05093483  ......../.....4.
 0460 050d8405 17760512 ba050d3c 0510ba05  .....v.....<....
 0470 062f0503 55050a34 05014b03 302e0507  ./..U..4..K.0...
 0480 e9050691 050c4d05 03082005 0d4b0508  ......M... ..K..
 0490 66050de6 0508f205 0b6b0503 66051e00  f........k..f...
 04a0 02040158 052f9205 03d80513 76050b08  ...X./......v...
 04b0 25050e77 ad050fbb 05139f05 0eba050f  %..w............
 04c0 75ad0517 bc050f90 050e030a 08120501  u...............
 04d0 4b350506 f3051575 05088305 10870508  K5.....u........
 04e0 87050f5d 05025a05 12760826 05185905  ...]..Z..v.&..Y.
 04f0 1a9e0511 5c050274 0520030b 58050dac  ....\..t. ..X...
 0500 05127505 03740514 5a050c5d 05060313  ..u..t..Z..]....
 0510 9e050dad 05117705 02740519 5a052b9e  ......w..t..Z.+.
 0520 051e9e05 0c4a0519 68050382 05086805  .....J..h.....h.
 0530 0fad050e 780510ae 051c7405 15740509  ....x.....t..t..
 0540 4a050369 050ea105 0dad0515 89050382  J..i............
 0550 050e6e05 04820509 00020401 5a050500  ..n.........Z...
 0560 020401bb 05045b05 09000204 01680510  ......[......h..
 0570 00020401 ad050500 02040175 05215c05  ...........u.!\.
 0580 0eac8305 04820509 91051482 05087505  ..............u.
 0590 0d030aba 05038205 3992050f 820509af  ........9.......
 05a0 05188205 09750517 82050975 05178205  .....u.....u....
 05b0 09830518 82050983 05178205 0975051a  .............u..
 05c0 82051075 050c0869 0521084d 05288205  ...u...i.!.M.(..
 05d0 064a0504 4c000204 010608c8 00020403  .J..L...........
 05e0 08ac0513 00020403 06081805 0b000204  ................
 05f0 0359051c 98050882 4b830516 5a050382  .Y......K...Z...
 0600 053fa105 09820515 8205093d 05108205  .?.........=....
 0610 223c051b 8205164b 051d8205 0f3c0509  "<.....K.....<..
 0620 84051782 05097505 16820509 75051782  ......u.....u...
 0630 05098305 16820509 75051a82 05127505  ........u.....u.
 0640 0c086805 21084c05 28820506 4a05044b  ..h.!.L.(...J..K
 0650 00020401 0608c800 02040308 ac051300  ................
 0660 02040306 0818050b 00020403 59050703  ............Y...
 0670 0990050f bdaf0505 82052593 051e9005  ..........%.....
 0680 0b4a7583 05135905 0b900519 4d050682  .Ju...Y.....M...
 0690 0564a105 5d900511 ac050cad 05178205  .d..]...........
 06a0 0b750511 bb0512bb ad0511bb 0515c905  .u..............
 06b0 12c9050f 08680522 084c0509 8205074b  .....h.".L.....K
 06c0 00020401 0608c800 02040308 ac051600  ................
 06d0 02040306 0818050e 00020403 59050f97  ............Y...
 06e0 05058205 1f93050c 82050b4b 83051359  ...........K...Y
 06f0 050b9005 194d0506 820562a1 055b9005  .....M....b..[..
 0700 0fac0516 4c051cad 05158283 ad0519c9  ....L...........
 0710 0516c905 0cbb0517 82051175 0512bb05  ...........u....
 0720 0f086805 26084c05 09820507 4b000204  ..h.&.L.....K...
 0730 010608c8 00020403 08ac0516 00020403  ................
 0740 06081a05 0e000204 03590509 94050303  .........Y......
 0750 ae7fba05 0d03db00 58050382 05045f05  ........X....._.
 0760 09000204 01680510 00020401 ad050500  .....h..........
 0770 02040175 05213205 0eac8305 04820509  ...u.!2.........
 0780 59051482 05077a05 0203917e ba051d03  Y.....z....~....
 0790 275803c1 013c0511 030c2005 09030b58  'X...<.... ....X
 07a0 05015903 0b2e0502 f6051276 05030826  ..Y........v...&
 07b0 05025b00 02040106 0890050f 06bc0530  ..[............0
 07c0 5b050682 050c4d05 02740510 ae050b08  [.....M..t......
 07d0 24051174 05035705 0b760511 74053d3b  $..t..W..v..t.=;
 07e0 050b7605 11740539 3b051778 051a0821  ..v..t.9;..x...!
 07f0 050d030a ba050374 051a7603 0ad60512  .......t..v.....
 0800 030aba05 03590507 030b5805 0bbc0513  .....Y....X.....
 0810 74050b90 050eca05 1774050e 74050fd7  t........t..t...
 0820 050dae05 03820521 00020401 58053300  .......!....X.3.
 0830 02040182 052c0002 04017405 0d3d0503  .....,....t..=..
 0840 74052100 02040158 05330002 04017405  t.!....X.3....t.
 0850 2c000204 0182050d 4c050374 052e0002  ,.......L..t....
 0860 04015805 27000204 0182050c 89050282  ..X.'...........
 0870 05129205 0374052c 00020401 66052500  .....t.,....f.%.
 0880 02040182 05127505 03740525 00020401  ......u..t.%....
 0890 66050dad 05037405 21000204 01580533  f.....t.!....X.3
 08a0 00020401 74052c00 02040182 050d4b05  ....t.,.......K.
 08b0 03820521 00020401 58053300 02040182  ...!....X.3.....
 08c0 052c0002 04017405 0f3d0517 74050f90  .,....t..=..t...
 08d0 051cca05 10740512 08240503 74051e5a  .....t...$..t..Z
 08e0 05319e05 249e0508 4a05173d 05237405  .1..$...J..=.#t.
 08f0 1c740508 4a05043e 05280002 04018205  .t..J..>.(......
 0900 11030bac 05015935 05120840 051af405  ......Y5...@....
 0910 17081405 0f086805 014b3305 02084205  ......h..K3...B.
 0920 0f76050a bb0502a2 05280002 04017405  .v.......(....t.
 0930 2f000204 01ba0506 5b050283 00020401  /.......[.......
 0940 06089005 0f06bc05 315a0507 82050d4d  ........1Z.....M
 0950 05037405 1176050c 08240512 74050457  ..t..v...$..t..W
 0960 050c7605 1274053e 3b050c76 05127405  ..v..t.>;..v..t.
 0970 3a3b0518 78051303 1e082005 0b59050d  :;..x..... ..Y..
 0980 790508a0 05033c05 12680513 c9050b59  y.....<..h.....Y
 0990 05116905 165b0511 f3050e08 590509bc  ..i..[......Y...
 09a0 05014b02 02000101 74080000 0300ac00  ..K.....t.......
 09b0 00000101 fb0e0d00 01010101 00000001  ................
 09c0 00000173 72632f61 7263682f 6d656d00  ...src/arch/mem.
 09d0 73726300 2f757372 2f6c6962 2f676363  src./usr/lib/gcc
 09e0 2f783836 5f36342d 6c696e75 782d676e  /x86_64-linux-gn
 09f0 752f392f 696e636c 75646500 00766972  u/9/include..vir
 0a00 7475616c 2e680001 00006b65 726e656c  tual.h....kernel
 0a10 2e680002 00007669 72747561 6c2e6370  .h....virtual.cp
 0a20 70000100 00757469 6c697479 2e680002  p....utility.h..
 0a30 00007374 64696e74 2d676363 2e680003  ..stdint-gcc.h..
 0a40 00007374 6976616c 652e6800 0200006c  ..stivale.h....l
 0a50 6962616c 6c6f632e 68000100 00000528  iballoc.h......(
 0a60 000902e6 501080ff ffffff03 1d010537  ....P..........7
 0a70 f4050176 02030001 01040205 2d000902  ...v........-...
 0a80 a5501080 ffffffff 17051308 3d051c00  .P..........=...
 0a90 02040382 05350002 04029e05 37000204  .....5......7...
 0aa0 02ac0505 00020402 3c050c75 05014b02  ........<..u..K.
 0ab0 02000101 04030535 000902b0 311080ff  .......5....1...
 0ac0 ffffff03 19010510 083d051b ac05204a  .........=.... J
 0ad0 052e9005 01590521 310511f4 050f83bd  .....Y.!1.......
 0ae0 bc0512ad 051a083c 05120812 05010859  .......<.......Y
 0af0 05243e05 09f30506 7a050b08 7505013d  .$>.....z...u..=
 0b00 05232f05 09f40506 7a050b08 7505013d  .#/.....z...u..=
 0b10 05252f05 09f30506 7a050c08 75050159  .%/.....z...u..Y
 0b20 052d0310 2e052408 3e050e4a 05070378  .-....$.>..J...x
 0b30 08740512 83050cac 05114b05 1a820518  .t........K.....
 0b40 9f0505b9 05017628 05253d05 13f30501  ......v(.%=.....
 0b50 08130527 2e0513f3 05010813 05262f05  ...'.........&/.
 0b60 13f30501 9f05282e 0513f305 01bb0523  ......(........#
 0b70 31050ff4 bdbc0512 ad051b08 3c0515e4  1...........<...
 0b80 05124a05 01085905 2e3f050c f3bbbb05  ..J...Y..?......
 0b90 15ad051e 083c0517 e405252e 05012f05  .....<....%.../.
 0ba0 3d310512 08bb0514 bb050cad 053cad05  =1...........<..
 0bb0 16e40531 750516e4 05137505 1c000204  ...1u.....u.....
 0bc0 0382051e 00020402 9f052000 02040208  .......... .....
 0bd0 20050500 02040265 05137705 15d8053a   ......e..w....:
 0be0 ae0514ac 05114b05 28000204 01820518  ......K.(.......
 0bf0 00020401 ac051a00 0204014a 052a9205  ...........J.*..
 0c00 2b4a0518 f20515af 051a7405 0a580543  +J........t..X.C
 0c10 59052c74 051e66bc 052aaf05 11820516  Y.,t..f..*......
 0c20 9f051b74 050a5805 28000204 01580525  ...t..X.(....X.%
 0c30 75051686 051f0002 04018205 2b000204  u...........+...
 0c40 0182052f 9f0517ac 0521ad05 1582050e  .../.....!......
 0c50 4b0527d8 050e0812 051fa005 51bc0557  K.'.........Q..W
 0c60 ac056b4a 05254a4b 052bbc05 55bb052f  ..kJ.%JK.+..U../
 0c70 0812054a 76052fe4 052b7705 2cbb0541  ...Jv./..+w.,..A
 0c80 83054e82 05254a05 40680534 08200540  ..N..%J.@h.4. .@
 0c90 08200536 2e051e2b 054a7a05 2c820541  . .6...+.Jz.,..A
 0ca0 83054e82 05254a05 34680536 0820051e  ..N..%J.4h.6. ..
 0cb0 63052b79 052dbb05 4f083d05 61e40525  c.+y.-..O.=.a..%
 0cc0 4b052bd7 0526bb05 2b082f05 1cbd0511  K.+..&..+./.....
 0cd0 7405305a 0507038b 7ff20512 83050cac  t.0Z............
 0ce0 05117505 1aac0518 f30505e3 051e03ce  ..u.............
 0cf0 009e0501 03b47f3c 050a0002 040203c8  .......<........
 0d00 00200506 00020402 036f9e05 1203c100  . .......o......
 0d10 9e0501bb 051d3f05 0abc0511 00020401  ......?.........
 0d20 82ca0505 083c050e 5b051500 02040182  .....<..[.......
 0d30 051f7505 12e40517 3d051908 3c05093c  ..u.....=...<..<
 0d40 05154b05 18ac0507 00020402 8d050300  ..K.............
 0d50 0204026f 050a030d 9e050159 051f3105  ...o.......Y..1.
 0d60 0ef30501 bb05153e 0524bb05 03910512  .......>.$......
 0d70 75050cbb 760518f3 05018305 3c2f0505  u...v.......</..
 0d80 084b051d 9f050974 051e5905 10ae0512  .K.....t..Y.....
 0d90 83051183 05180002 04018205 32081305  ............2...
 0da0 23d6050e 74052959 051fad05 33860520  #...t.)Y....3.. 
 0db0 08200511 d6050d58 05154b05 11c80525  . .....X..K....%
 0dc0 4b050903 c97e0866 05128305 0cac0511  K....~.f........
 0dd0 4b051a82 05169f05 05b90501 76053603  K...........v.6.
 0de0 b4012005 3eac0548 4a05185b 050a0373  .. .>..HJ..[...s
 0df0 82051703 1158050c bc050e83 050d8305  .....X..........
 0e00 2b000204 0182051e 00020401 c805219f  +.............!.
 0e10 051cba05 0dd60509 5805114b 050dc805  ........X..K....
 0e20 214b0509 03ba7e08 3c051283 050cac05  !K....~.<.......
 0e30 114b051a 8205169f 0505b905 01760523  .K...........v.#
 0e40 03c30120 052b8205 354a0514 31050603  ... .+..5J..1...
 0e50 79820512 030b5805 0cbb0501 5a05402f  y.....X.....Z.@/
 0e60 0523084b 0530085a 053eba05 124c0524  .#.K.0.Z.>...L.$
 0e70 00020403 82053100 02040382 051b0002  ......1.........
 0e80 04034a05 10000204 02680512 00020402  ..J......h......
 0e90 082e0505 00020402 72050c78 05014b05  ........r..x..K.
 0ea0 2e030f2e 0512f405 4ebb052a e4050f82  ........N..*....
 0eb0 05137505 1c000204 03820513 00020402  ..u.............
 0ec0 9f051200 020402bb 00020402 08750002  .............u..
 0ed0 04020223 13050500 02040202 230e0512  ...#........#...
 0ee0 7b0513bb 052e0868 054eac05 40ac056f  {......h.N..@..o
 0ef0 3c0561ac 050e3c05 24670513 82056b00  <.a...<.$g....k.
 0f00 02040382 055d0002 04038205 7d000204  .....]......}...
 0f10 0374058a 01000204 034a0546 00020403  .t.......J.F....
 0f20 4a051200 02040267 05110002 0402bc05  J......g........
 0f30 05000204 0202230f 05127a05 39bb0513  ......#...z.9...
 0f40 8205124b 05290002 04018205 1b000204  ...K.)..........
 0f50 0182052a a0051708 3c0537ad 05127405  ...*....<.7...t.
 0f60 2b9f0514 08840519 74050958 051c5905  +.......t..X..Y.
 0f70 1584051e 00020401 82052a00 02040182  ..........*.....
 0f80 05306705 2cac0518 7405114d 0519af05  .0g.,...t..M....
 0f90 18022510 05090002 04021b05 05000204  ..%.............
 0fa0 02037774 05130314 9e0512e5 0501bc05  ..wt............
 0fb0 353d0539 f3051382 050c4c05 0e081305  5=.9......L.....
 0fc0 15000204 01740525 00020401 66051700  .....t.%....f...
 0fd0 02040182 05169205 1abc051b 66051d08  ............f...
 0fe0 6605093c 050d0309 ba051a03 7a58050d  f..<........zX..
 0ff0 bb051a30 050dbb05 1d25051e 66052008  ...0.....%..f. .
 1000 6605114a 05300813 05316605 19086605  f..J.0...1f...f.
 1010 16083dbb 0510bb05 31081305 32660534  ..=.....1...2f.4
 1020 08660546 4a054766 05490866 051a3c05  .f.FJ.Gf.I.f..<.
 1030 16084bbb 0510bb05 30081305 31660519  ..K.....0...1f..
 1040 08660516 084bbb05 10bb0530 08130531  .f...K.....0...1
 1050 66051908 66051608 3dbb0510 bb050500  f...f...=.......
 1060 02040203 60081205 0c032390 05150813  ....`.....#.....
 1070 0512023b 13bbbd05 0fbb0512 085c0510  ...;.........\..
 1080 bb0501bd 05453f05 1b087605 0b82051b  .....E?...v.....
 1090 91050b82 051a9105 0b82051b 91050e82  ................
 10a0 050f9205 1f830521 084a0505 3c05425a  .......!.J..<.BZ
 10b0 0529084a 050ed605 4b680527 e4050e82  .).J....Kh.'....
 10c0 053c4b05 20ba054e 08200522 4a050f40  .<K. ..N. ."J..@
 10d0 05198305 1b085805 053c053a 59052708  ......X..<.:Y.'.
 10e0 58050cd6 05496905 25e4050c 8205364b  X....Ii.%.....6K
 10f0 051aba05 46082e05 1c4a050f 3f051783  ....F....J..?...
 1100 05190858 05053c05 36590527 0858050c  ...X..<.6Y.'.X..
 1110 d6054969 0525e405 0c820532 4b0516ba  ..Ii.%.....2K...
 1120 0542082e 05184a05 123e052a 082e0514  .B....J..>.*....
 1130 8205013e 02030001 01040405 0d000902  ...>............
 1140 48511080 ffffffff 03d50001 05080868  HQ.............h
 1150 05048483 05070309 82050367 05058705  ...........g....
 1160 03081405 27000204 01740503 00020401  ....'....t......
 1170 74053f00 0204024a 05030002 04027400  t.?....J......t.
 1180 02040406 2e050200 02040406 d20608ba  ................
 1190 06367783 050cbb05 08a00503 9fc99f59  .6w............Y
 11a0 0502037a 58050136 02030001 01040405  ...zX..6........
 11b0 0d000902 33521080 ffffffff 03d50001  ....3R..........
 11c0 0508085a 05048467 05070309 74050367  ...Z...g....t..g
 11d0 05057905 03d80527 00020401 66050300  ..y....'....f...
 11e0 02040166 053f0002 04024a05 03000204  ...f.?....J.....
 11f0 02660002 0404062e 05020002 040406d2  .f..............
 1200 06088206 36778305 0cbb0508 a005039f  ....6w..........
 1210 c99f5905 02037a58 05013602 03000101  ..Y...zX..6.....
 1220 17040000 0300a600 00000101 fb0e0d00  ................
 1230 01010101 00000001 00000173 72632f61  ...........src/a
 1240 72636800 73726300 2f757372 2f6c6962  rch.src./usr/lib
 1250 2f676363 2f783836 5f36342d 6c696e75  /gcc/x86_64-linu
 1260 782d676e 752f392f 696e636c 75646500  x-gnu/9/include.
 1270 00617263 682e6800 0100006b 65726e65  .arch.h....kerne
 1280 6c2e6800 02000075 74696c69 74792e68  l.h....utility.h
 1290 00020000 696e7465 72727570 742e6370  ....interrupt.cp
 12a0 70000100 00737464 696e742d 6763632e  p....stdint-gcc.
 12b0 68000300 00696e74 65727275 70742e68  h....interrupt.h
 12c0 00010000 36346269 742e6800 01000000  ....64bit.h.....
 12d0 05010009 020f5310 80ffffff ff030901  ......S.........
 12e0 05340883 05019102 03000101 0402052d  .4.............-
 12f0 000902a5 501080ff ffffff17 0513083d  ....P..........=
 1300 051c0002 04038205 35000204 029e0537  ........5......7
 1310 00020402 ac050500 0204023c 050c7505  ...........<..u.
 1320 014b0202 00010104 03050100 09023453  .K............4S
 1330 1080ffff ffff1505 08085905 10840506  ..........Y.....
 1340 91050277 05120002 04016605 05680508  ...w......f..h..
 1350 ba05063d 05085905 06580507 84050b67  ...=..Y..X.....g
 1360 05187905 16660507 e405083e 05270002  ..y..f.....>.'..
 1370 04016605 08000204 0166053f 00020402  ..f......f.?....
 1380 4a050800 02040266 05050002 04042e05  J......f........
 1390 08000204 04ba0511 00020404 2f050e00  ............/...
 13a0 02040466 05110002 0404f205 02b50505  ...f............
 13b0 36778305 0cbb0508 a005099f 05077467  6w............tg
 13c0 05059f59 0502037a 58050136 02030001  ...Y...zX..6....
 13d0 01040405 10000902 fd431080 ffffffff  .........C......
 13e0 03320105 0983052e e405064b 052be405  .2.........K.+..
 13f0 064c0520 e405064b 0520e405 064c0519  .L. ...K. ...L..
 1400 e405064b 0519e405 064c0519 e405064b  ...K.....L.....K
 1410 0519e405 064ce505 01e50510 3d0512bb  .....L......=...
 1420 bb050ebb 05170002 04037405 12000204  ..........t.....
 1430 02a00510 00020402 c8051200 0204022e  ................
 1440 05100002 04020812 05120002 04022e05  ................
 1450 10000204 02081205 05000204 02028401  ................
 1460 10051295 0538bb05 1275050d bb051259  .....8...u.....Y
 1470 bbbc0501 bb052b03 293c050d 083d0519  ......+.)<...=..
 1480 08130517 0875bbbb bbbb0501 bb052d3d  .....u........-=
 1490 0512f4bb 050abb08 91051208 91bb050a  ................
 14a0 bb086708 67051208 67050abb 08670867  ..g.g...g....g.g
 14b0 05120867 050abb08 67051208 59bb050a  ...g....g...Y...
 14c0 bb089108 67051208 67050abb 08670867  ....g...g....g.g
 14d0 05120867 050abb08 67051208 67bb0511  ...g....g...g...
 14e0 bb050a74 05110813 050a7405 12081305  ...t......t.....
 14f0 0abb0891 05120891 bb052fbd 050a7505  ........../...u.
 1500 01082f3e 0502e505 07680506 e70501e5  ../>.....h......
 1510 05193e05 05e50510 68050577 05140002  ..>.....h..w....
 1520 04016605 23000204 02660533 00020403  ..f.#....f.3....
 1530 66054300 02040566 05106805 0c760501  f.C....f..h..v..
 1540 5905452f 0512f305 1ebb0511 74050574  Y.E/........t..t
 1550 05118405 28000204 0374052f 00020403  ....(....t./....
 1560 74051800 020403ba 051a0002 04033c05  t.............<.
 1570 22000204 024b0515 00020402 74050900  "....K......t...
 1580 02040273 05166905 36bb0516 74051508  ...s..i.6...t...
 1590 210510bb 05190813 051608d7 bb051cbb  !...............
 15a0 05192305 0c747505 22081305 0a740512  ..#..tu."....t..
 15b0 0830bb05 0cbd0515 08130512 08d8bb05  .0..............
 15c0 01bb0203 00010104 03050d00 09024851  ..............HQ
 15d0 1080ffff ffff03d5 00010508 08680504  .............h..
 15e0 84830507 03098205 03670505 87050308  .........g......
 15f0 14052700 02040174 05030002 04017405  ..'....t......t.
 1600 3f000204 024a0503 00020402 74000204  ?....J......t...
 1610 04062e05 02000204 0406d206 08ba0636  ...............6
 1620 7783050c bb0508a0 05039fc9 9f590502  w............Y..
 1630 037a5805 01360203 00010176 01000003  .zX..6.....v....
 1640 004d0000 000101fb 0e0d0001 01010100  .M..............
 1650 00000100 00017372 632f6172 63680073  ......src/arch.s
 1660 72630000 61726368 2e680001 0000636f  rc..arch.h....co
 1670 6d2e6370 70000200 00696e74 5f76616c  m.cpp....int_val
 1680 75652e68 00020000 636f6d2e 68000200  ue.h....com.h...
 1690 00000501 0009020f 531080ff ffffff03  ........S.......
 16a0 09010534 08830501 91020300 01010501  ...4............
 16b0 00090253 541080ff ffffff03 15010504  ...ST...........
 16c0 08250509 9f05014b 02020001 01040205  .%.....K........
 16d0 01000902 75541080 ffffffff 150516e5  ....uT..........
 16e0 05106605 1b9e0523 66050590 05013102  ..f....#f.....1.
 16f0 03000101 04020501 00090260 4b1080ff  ...........`K...
 1700 ffffff03 09010513 083d0510 9f05094a  .........=.....J
 1710 05010821 3f051208 59050e83 05170002  ...!?...Y.......
 1720 04037405 22000204 02840523 00020402  ..t."......#....
 1730 66051100 0204029e 05050002 0402e205  f...............
 1740 0c6c0501 3d300509 f3051375 05146605  .l..=0.....u..f.
 1750 169e0528 4c052966 05119e05 0ae50505  ...(L.)f........
 1760 47050d34 0501e53e 0509f305 13750514  G..4...>.....u..
 1770 6605169e 05284c05 29660511 9e050ae5  f....(L.)f......
 1780 05054705 01343e05 0fe50509 66050fe5  ..G..4>.....f...
 1790 050966e5 050f0821 05096605 0fe50509  ..f....!..f.....
 17a0 66050be5 05056605 0be50505 660501e5  f.....f.....f...
 17b0 02030001 01950000 00030034 00000001  ...........4....
 17c0 01fb0e0d 00010101 01000000 01000001  ................
 17d0 00737263 2f617263 682f696e 74657272  .src/arch/interr
 17e0 7570745f 68616e64 6c652e61 736d0000  upt_handle.asm..
 17f0 00000000 0902504d 1080ffff ffff1759  ......PM.......Y
 1800 3d03c500 02010121 21030302 17013e5a  =......!!.....>Z
 1810 03020217 014b2131 bbbbbbbb bbe5e5e5  .....K!1........
 1820 c9e5c9c9 c9c9c9e5 e5e5e5e5 e5e5e5e5  ................
 1830 e5e5e5e5 e5e5c9e6 e5e5e5e5 e5e5e5e5  ................
 1840 e5e5e5e5 e5e5e5e6 e5020f00 01014700  ..............G.
 1850 00000300 2b000000 0101fb0e 0d000101  ....+...........
 1860 01010000 00010000 01007372 632f6172  ..........src/ar
 1870 63682f75 74696c69 74792e61 736d0000  ch/utility.asm..
 1880 00000000 09027050 1080ffff ffff1421  ......pP.......!
 1890 3d3d3d21 02010001 01500000 0003002b  ===!.....P.....+
 18a0 00000001 01fb0e0d 00010101 01000000  ................
 18b0 01000001 00737263 2f617263 682f6764  .....src/arch/gd
 18c0 745f6173 6d2e6173 6d000000 00000009  t_asm.asm.......
 18d0 02805010 80ffffff ff16213d 3d4b2f2f  ..P.......!==K//
 18e0 2f2f2f9f 21213021 02010001 01        ///.!!0!.....   
Contenu de la section .debug_str :
 0000 626f6f74 6c6f6164 65725f64 61746100  bootloader_data.
 0010 72736470 00737263 2f6b6572 6e656c2e  rsdp.src/kernel.
 0020 63707000 6672616d 65627566 6665725f  cpp.framebuffer_
 0030 68656967 68740047 4e552043 2b2b3137  height.GNU C++17
 0040 20392e33 2e30202d 6d61736d 3d696e74   9.3.0 -masm=int
 0050 656c202d 6d6e6f2d 73736520 2d6d3634  el -mno-sse -m64
 0060 202d6d6e 6f2d7373 6532202d 6d6e6f2d   -mno-sse2 -mno-
 0070 6d6d7820 2d6d636d 6f64656c 3d6b6572  mmx -mcmodel=ker
 0080 6e656c20 2d6d6e6f 2d383033 3837202d  nel -mno-80387 -
 0090 6d6e6f2d 7265642d 7a6f6e65 202d6d74  mno-red-zone -mt
 00a0 756e653d 67656e65 72696320 2d6d6172  une=generic -mar
 00b0 63683d78 38362d36 34202d67 202d7374  ch=x86-64 -g -st
 00c0 643d632b 2b313720 2d666e6f 2d706963  d=c++17 -fno-pic
 00d0 202d6666 72656573 74616e64 696e6720   -ffreestanding 
 00e0 2d666e6f 2d737461 636b2d70 726f7465  -fno-stack-prote
 00f0 63746f72 202d666e 6f2d6f6d 69742d66  ctor -fno-omit-f
 0100 72616d65 2d706f69 6e746572 202d6661  rame-pointer -fa
 0110 73796e63 68726f6e 6f75732d 756e7769  synchronous-unwi
 0120 6e642d74 61626c65 73202d66 73746163  nd-tables -fstac
 0130 6b2d636c 6173682d 70726f74 65637469  k-clash-protecti
 0140 6f6e202d 6663662d 70726f74 65637469  on -fcf-protecti
 0150 6f6e0066 72616d65 62756666 65725f62  on.framebuffer_b
 0160 70700075 6e736967 6e656420 63686172  pp.unsigned char
 0170 0073686f 72742075 6e736967 6e656420  .short unsigned 
 0180 696e7400 6672616d 65627566 6665725f  int.framebuffer_
 0190 70697463 68006d6f 64756c65 5f636f75  pitch.module_cou
 01a0 6e74006d 656d6f72 795f6d61 705f6164  nt.memory_map_ad
 01b0 64720066 72616d65 62756666 65725f77  dr.framebuffer_w
 01c0 69647468 002f686f 6d652f63 79702f6f  idth./home/cyp/o
 01d0 74686572 5f6f732f 716c6f61 64657232  ther_os/qloader2
 01e0 2d626172 65626f6e 6573006d 6f64756c  -barebones.modul
 01f0 65730066 72616d65 62756666 65725f61  es.framebuffer_a
 0200 64647200 7667615f 62756666 65720073  ddr.vga_buffer.s
 0210 686f7274 20696e74 0075696e 7431365f  hort int.uint16_
 0220 74006570 6f636800 5f5a365f 73746172  t.epoch._Z6_star
 0230 74503134 73746976 616c655f 73747275  tP14stivale_stru
 0240 63740075 696e7436 345f7400 6d656d6f  ct.uint64_t.memo
 0250 72795f6d 61705f65 6e747269 65730063  ry_map_entries.c
 0260 6d646c69 6e65005f 5a387473 735f696e  mdline._Z8tss_in
 0270 69746d00 6465636c 74797065 286e756c  itm.decltype(nul
 0280 6c707472 29006261 73655f6d 69640067  lptr).base_mid.g
 0290 72616e00 6772616e 756c6172 69747900  ran.granularity.
 02a0 5f5a376d 656d7a65 726f5076 6d006764  _Z7memzeroPvm.gd
 02b0 7472005f 5a313274 73735f73 65745f72  tr._Z12tss_set_r
 02c0 7370306d 00736574 75705f67 64740075  sp0m.setup_gdt.u
 02d0 696e7438 5f740069 64745f73 7461636b  int8_t.idt_stack
 02e0 32006964 745f7374 61636b33 00747373  2.idt_stack3.tss
 02f0 5f6c696d 6974005f 5a397365 7475705f  _limit._Z9setup_
 0300 6764746d 00696f6d 61705f62 61736500  gdtm.iomap_base.
 0310 6764745f 7365745f 78646573 63726970  gdt_set_xdescrip
 0320 746f7200 6c6f6e67 206c6f6e 6720696e  tor.long long in
 0330 74003136 6764745f 64657363 72697074  t.16gdt_descript
 0340 6f725f74 00747373 5f626173 65007265  or_t.tss_base.re
 0350 73657276 65643100 6c696d69 745f6c6f  served1.limit_lo
 0360 77006764 745f6465 73637269 70746f72  w.gdt_descriptor
 0370 73007473 735f696e 69740035 7473735f  s.tss_init.5tss_
 0380 74006c6f 6e672064 6f75626c 65007273  t.long double.rs
 0390 70310072 73703200 72657365 72766564  p1.rsp2.reserved
 03a0 0075696e 7433325f 74006261 73655f78  .uint32_t.base_x
 03b0 68696768 00313767 64745f78 64657363  high.17gdt_xdesc
 03c0 72697074 6f725f74 00726573 65727665  riptor_t.reserve
 03d0 64300072 65736572 76656432 00626173  d0.reserved2.bas
 03e0 655f6869 67680069 73743200 69737433  e_high.ist2.ist3
 03f0 00697374 34006973 74350069 73743700  .ist4.ist5.ist7.
 0400 5f5a3972 6764745f 696e6974 76007372  _Z9rgdt_initv.sr
 0410 632f6172 63682f67 64742e63 70700062  c/arch/gdt.cpp.b
 0420 6173655f 6c6f7700 72676474 5f696e69  ase_low.rgdt_ini
 0430 74003667 6474725f 74007265 73657276  t.6gdtr_t.reserv
 0440 65643300 7473735f 7365745f 72737030  ed3.tss_set_rsp0
 0450 00697374 31006764 745f7365 745f6465  .ist1.gdt_set_de
 0460 73637269 70746f72 00697374 36006d65  scriptor.ist6.me
 0470 6d7a6572 6f006964 745f7374 61636b00  mzero.idt_stack.
 0480 6b65726e 656c5f73 74617274 0075696e  kernel_start.uin
 0490 74707472 5f740073 74697661 6c655f68  tptr_t.stivale_h
 04a0 65616465 72005f5a 31347365 745f7061  eader._Z14set_pa
 04b0 67696e67 5f646972 6d007365 745f7061  ging_dirm.set_pa
 04c0 67696e67 5f646972 00737263 2f617263  ging_dir.src/arc
 04d0 682f6172 63682e63 70700070 6c345f74  h/arch.cpp.pl4_t
 04e0 61626c65 00706c34 5f706167 696e6700  able.pl4_paging.
 04f0 656e7472 795f706f 696e7400 434f4d31  entry_point.COM1
 0500 00434f4d 3200434f 4d330043 4f4d3400  .COM2.COM3.COM4.
 0510 75736167 65006469 66660073 74617274  usage.diff.start
 0520 65644265 74007369 7a655f74 006d616c  edBet.size_t.mal
 0530 6c6f6300 6c696261 6c6c6f63 5f6d696e  loc.liballoc_min
 0540 6f720063 64657374 006c7372 63006e65  or.cdest.lsrc.ne
 0550 775f6d69 6e006c69 62616c6c 6f635f75  w_min.liballoc_u
 0560 6e6c6f63 6b006c5f 706f7373 69626c65  nlock.l_possible
 0570 4f766572 72756e73 006c6465 7374006c  Overruns.ldest.l
 0580 5f6d656d 526f6f74 006c6962 616c6c6f  _memRoot.liballo
 0590 635f6d65 6d637079 006c5f69 6e757365  c_memcpy.l_inuse
 05a0 00626c6f 636b006c 6962616c 6c6f635f  .block.liballoc_
 05b0 66726565 006c6962 616c6c6f 635f6d61  free.liballoc_ma
 05c0 6a6f7200 6c6f6e67 206c6f6e 6720756e  jor.long long un
 05d0 7369676e 65642069 6e74006c 6962616c  signed int.libal
 05e0 6c6f635f 6d656d73 6574006c 5f616c6c  loc_memset.l_all
 05f0 6f636174 6564006c 5f657272 6f72436f  ocated.l_errorCo
 0600 756e7400 63616c6c 6f63006c 5f706167  unt.calloc.l_pag
 0610 6553697a 65007265 616c6c6f 63007265  eSize.realloc.re
 0620 616c5f73 697a6500 6c5f6265 73744265  al_size.l_bestBe
 0630 7400616c 6c6f6361 74655f6e 65775f70  t.allocate_new_p
 0640 61676500 7265715f 73697a65 00737263  age.req_size.src
 0650 2f617263 682f6d65 6d2f6c69 62616c6c  /arch/mem/liball
 0660 6f632e63 70700063 73726300 6c5f7761  oc.cpp.csrc.l_wa
 0670 726e696e 67436f75 6e74006c 6962616c  rningCount.libal
 0680 6c6f635f 616c6c6f 63006265 73745369  loc_alloc.bestSi
 0690 7a65006c 6962616c 6c6f635f 6c6f636b  ze.liballoc_lock
 06a0 006d6167 6963006e 6f626a00 70726576  .magic.nobj.prev
 06b0 006c5f70 61676543 6f756e74 006e6578  .l_pageCount.nex
 06c0 74006d61 6a53697a 65007064 70740070  t.majSize.pdpt.p
 06d0 6d6d5f66 72656500 62617365 5f616c69  mm_free.base_ali
 06e0 676e6564 00747970 65006b69 746f6154  gned.type.kitoaT
 06f0 3c6c6f6e 6720756e 7369676e 65642069  <long unsigned i
 0700 6e743e00 616c6967 6e65645f 62617365  nt>.aligned_base
 0710 005f5a38 706d6d5f 66726565 50766d00  ._Z8pmm_freePvm.
 0720 5f5a3131 616c6c6f 635f6672 616d6576  _Z11alloc_framev
 0730 005f5a31 36667261 6d655f66 696e645f  ._Z16frame_find_
 0740 66697273 74760074 656d705f 616c6c6f  firstv.temp_allo
 0750 635f7074 72007067 5f636f75 6e74006b  c_ptr.pg_count.k
 0760 69746f61 543c756e 7369676e 65642069  itoaT<unsigned i
 0770 6e743e00 5f5a3130 66726565 5f667261  nt>._Z10free_fra
 0780 6d656d00 616c6c6f 635f6d75 6c746970  mem.alloc_multip
 0790 6c655f66 72616d65 5f7a6572 6f007573  le_frame_zero.us
 07a0 655f6661 7374005f 5a323561 6c6c6f63  e_fast._Z25alloc
 07b0 5f6d756c 7469706c 655f6672 616d655f  _multiple_frame_
 07c0 7a65726f 6d62006c 656e6768 745f616c  zeromb.lenght_al
 07d0 69676e65 64005f5a 31357265 7365745f  igned._Z15reset_
 07e0 6672616d 655f6269 746d0067 65745f72  frame_bitm.get_r
 07f0 6b65726e 5f616464 72005f5a 38616c69  kern_addr._Z8ali
 0800 676e5f75 706d6d00 6b65726e 656c5f65  gn_upmm.kernel_e
 0810 6e64006e 65775f62 69746d61 705f7369  nd.new_bitmap_si
 0820 7a655f69 6e5f7061 67657300 5f5a3133  ze_in_pages._Z13
 0830 6765745f 726d656d 5f616464 726d005f  get_rmem_addrm._
 0840 5a313969 6e69745f 76697274 75616c5f  Z19init_virtual_
 0850 6d656d6f 72795031 34737469 76616c65  memoryP14stivale
 0860 5f737472 75637400 5f5a3134 6765745f  _struct._Z14get_
 0870 726b6572 6e5f6164 64726d00 5f5a3876  rkern_addrm._Z8v
 0880 6972745f 6d61706d 6d6d006d 6d755f66  irt_mapmmm.mmu_f
 0890 72616d65 5f746573 74007661 64647265  rame_test.vaddre
 08a0 7373006d 756c7469 706c6500 74656d70  ss.multiple.temp
 08b0 5f616c6c 6f635f63 75727265 6e745f63  _alloc_current_c
 08c0 7572736f 72005f5a 31346d6d 755f6672  ursor._Z14mmu_fr
 08d0 616d655f 74657374 6d006538 32305f65  ame_testm.e820_e
 08e0 6e747279 5f740070 675f636e 74005f70  ntry_t.pg_cnt._p
 08f0 6d6c3465 5f6f6666 73657400 74656d70  ml4e_offset.temp
 0900 5f667261 6d655f74 61626c65 00626f6f  _frame_table.boo
 0910 6c00616c 6c6f635f 6672616d 65007665  l.alloc_frame.ve
 0920 72795f69 6e697469 616c5f66 72616d65  ry_initial_frame
 0930 5f746162 6c650073 74695f73 74727563  _table.sti_struc
 0940 74006672 616d6562 75666665 725f6c65  t.framebuffer_le
 0950 6e676874 00746573 745f6672 616d655f  nght.test_frame_
 0960 62697400 756e7573 65640064 69766973  bit.unused.divis
 0970 6f72005f 5a313367 65745f6b 65726e5f  or._Z13get_kern_
 0980 61646472 6d006672 616d655f 66696e64  addrm.frame_find
 0990 5f666972 73740067 65745f72 6d656d5f  _first.get_rmem_
 09a0 61646472 005f5a31 34746573 745f6672  addr._Z14test_fr
 09b0 616d655f 6269746d 00667265 655f6672  ame_bitm.free_fr
 09c0 616d6500 6672616d 65735f63 6f756e74  ame.frames_count
 09d0 6572005f 5a313267 65745f6d 656d5f61  er._Z12get_mem_a
 09e0 6464726d 00686561 705f656e 64007061  ddrm.heap_end.pa
 09f0 67696e67 5f69735f 696e6974 69616c69  ging_is_initiali
 0a00 7a656400 616c6967 6e5f7570 00667261  zed.align_up.fra
 0a10 6d655f61 64647200 6672616d 655f656e  me_addr.frame_en
 0a20 64005f70 6470745f 6f666673 6574006d  d._pdpt_offset.m
 0a30 656d656e 74727900 6672616d 655f636c  ementry.frame_cl
 0a40 65617200 756e7365 745f6672 616d655f  ear.unset_frame_
 0a50 72656769 6f6e0067 65745f6d 656d5f61  region.get_mem_a
 0a60 64647200 616c6967 6e65645f 6c656e67  ddr.aligned_leng
 0a70 7468006d 61785f6d 656d0073 72632f61  th.max_mem.src/a
 0a80 7263682f 6d656d2f 76697274 75616c2e  rch/mem/virtual.
 0a90 63707000 5f70745f 6f666673 65740072  cpp._pt_offset.r
 0aa0 656d6169 6e646572 00616c6c 6f635f6d  emainder.alloc_m
 0ab0 756c7469 706c655f 6672616d 6500746f  ultiple_frame.to
 0ac0 54657374 005f5a32 30616c6c 6f635f6d  Test._Z20alloc_m
 0ad0 756c7469 706c655f 6672616d 656d6200  ultiple_framemb.
 0ae0 6765745f 6b65726e 5f616464 7200696e  get_kern_addr.in
 0af0 69745f70 6167696e 67005f5a 366b6974  it_paging._Z6kit
 0b00 6f615449 6a457650 6369545f 005f5a31  oaTIjEvPciT_._Z1
 0b10 33736574 5f667261 6d655f62 69746d00  3set_frame_bitm.
 0b20 696e6974 5f667261 6d650070 61646472  init_frame.paddr
 0b30 65737300 6672616d 655f6375 72736f72  ess.frame_cursor
 0b40 5f706f73 005f5a31 31667261 6d655f63  _pos._Z11frame_c
 0b50 6c656172 6d005f5a 366b6974 6f615449  learm._Z6kitoaTI
 0b60 6d457650 6369545f 005f5a31 31696e69  mEvPciT_._Z11ini
 0b70 745f7061 67696e67 50313473 74697661  t_pagingP14stiva
 0b80 6c655f73 74727563 74006375 725f6269  le_struct.cur_bi
 0b90 746d6170 5f73697a 655f696e 5f706167  tmap_size_in_pag
 0ba0 6573005f 5a313069 6e69745f 6672616d  es._Z10init_fram
 0bb0 656d5031 34737469 76616c65 5f737472  emP14stivale_str
 0bc0 75637400 6f6c645f 6269746d 61700066  uct.old_bitmap.f
 0bd0 72616d65 5f736574 005f5a39 6672616d  rame_set._Z9fram
 0be0 655f7365 746d0068 6561705f 73746172  e_setm.heap_star
 0bf0 74005f70 645f6f66 66736574 00726573  t._pd_offset.res
 0c00 65745f66 72616d65 5f626974 00766972  et_frame_bit.vir
 0c10 745f6d61 70006672 616d6573 00696e69  t_map.frames.ini
 0c20 745f7669 72747561 6c5f6d65 6d6f7279  t_virtual_memory
 0c30 00696474 5f646573 63726970 746f7200  .idt_descriptor.
 0c40 61747472 69627574 65730073 72632f61  attributes.src/a
 0c50 7263682f 696e7465 72727570 742e6370  rch/interrupt.cp
 0c60 70006275 6666005f 5a38696e 69745f69  p.buff._Z8init_i
 0c70 64747600 7069635f 61636b00 6f666673  dtv.pic_ack.offs
 0c80 65745f68 69676833 32007661 6c756500  et_high32.value.
 0c90 6572726f 725f636f 6465006f 75746200  error_code.outb.
 0ca0 5f5a346f 75746274 68006275 66663200  _Z4outbth.buff2.
 0cb0 31316964 745f656e 7472795f 74006973  11idt_entry_t.is
 0cc0 5f657272 6f72006b 69746f61 005f5a35  _error.kitoa._Z5
 0cd0 64756d70 316d504b 63007374 636b005f  dump1mPKc.stck._
 0ce0 5a387069 635f696e 69747600 6e616d65  Z8pic_initv.name
 0cf0 00737461 636b6672 616d6500 5f5a3132  .stackframe._Z12
 0d00 64756d70 72656769 73746572 50313949  dumpregisterP19I
 0d10 6e746572 72757074 53746163 6b467261  nterruptStackFra
 0d20 6d65005f 5a386973 5f657272 6f726900  me._Z8is_errori.
 0d30 72666c61 67730069 6e69745f 69647400  rflags.init_idt.
 0d40 64756d70 72656769 73746572 00696e74  dumpregister.int
 0d50 65727275 7074735f 68616e64 6c657200  errupts_handler.
 0d60 5f5f696e 74657272 7570745f 76656374  __interrupt_vect
 0d70 6f72005f 5a377069 635f6163 6b690070  or._Z7pic_acki.p
 0d80 69635f69 6e697400 65786365 7074696f  ic_init.exceptio
 0d90 6e5f6d65 73736167 65730069 6e745f6e  n_messages.int_n
 0da0 6f00706f 72740069 6e746e6f 00366964  o.port.intno.6id
 0db0 74725f74 0064756d 7031005f 5a356b69  tr_t.dump1._Z5ki
 0dc0 746f6150 63696900 6f666673 65745f6d  toaPcii.offset_m
 0dd0 69643136 006f6666 7365745f 6c6f7731  id16.offset_low1
 0de0 3600636f 6d5f7772 6974655f 7374726c  6.com_write_strl
 0df0 00636f6d 5f777269 74655f73 7472005f  .com_write_str._
 0e00 5a313363 6f6d5f77 72697465 5f737472  Z13com_write_str
 0e10 504b6300 636f6d5f 77616974 5f777269  PKc.com_wait_wri
 0e20 74650063 6f6d5f77 72697465 005f5a31  te.com_write._Z1
 0e30 34636f6d 5f696e69 7469616c 697a6538  4com_initialize8
 0e40 434f4d5f 504f5254 005f5a33 696e6274  COM_PORT._Z3inbt
 0e50 00627566 61646472 00636f6d 5f707574  .bufaddr.com_put
 0e60 63005f5a 38636f6d 5f707574 6338434f  c._Z8com_putc8CO
 0e70 4d5f504f 52546300 5f5a3134 636f6d5f  M_PORTc._Z14com_
 0e80 77616974 5f777269 74653843 4f4d5f50  wait_write8COM_P
 0e90 4f525400 5f5a3963 6f6d5f77 72697465  ORT._Z9com_write
 0ea0 38434f4d 5f504f52 54504b76 69007372  8COM_PORTPKvi.sr
 0eb0 632f636f 6d2e6370 7000636f 6d5f696e  c/com.cpp.com_in
 0ec0 69746961 6c697a65 005f5a31 34636f6d  itialize._Z14com
 0ed0 5f777269 74655f73 74726c50 4b6300    _write_strlPKc. 
Contenu de la section .comment :
 0000 4743433a 20285562 756e7475 20392e33  GCC: (Ubuntu 9.3
 0010 2e302d31 30756275 6e747532 2920392e  .0-10ubuntu2) 9.
 0020 332e3000                             3.0.            
Contenu de la section .debug_ranges :
 0000 00201080 ffffffff c6221080 ffffffff  . ......."......
 0010 a5501080 ffffffff e6501080 ffffffff  .P.......P......
 0020 00000000 00000000 00000000 00000000  ................
 0030 c6221080 ffffffff d9231080 ffffffff  .".......#......
 0040 e6501080 ffffffff 00511080 ffffffff  .P.......Q......
 0050 00000000 00000000 00000000 00000000  ................
 0060 d9231080 ffffffff b0311080 ffffffff  .#.......1......
 0070 00511080 ffffffff 0c511080 ffffffff  .Q.......Q......
 0080 0c511080 ffffffff 18511080 ffffffff  .Q.......Q......
 0090 18511080 ffffffff 2e511080 ffffffff  .Q.......Q......
 00a0 2e511080 ffffffff 48511080 ffffffff  .Q......HQ......
 00b0 00000000 00000000 00000000 00000000  ................
 00c0 0f381080 ffffffff 5d381080 ffffffff  .8......]8......
 00d0 60381080 ffffffff 61381080 ffffffff  `8......a8......
 00e0 00000000 00000000 00000000 00000000  ................
 00f0 b0311080 ffffffff fd431080 ffffffff  .1.......C......
 0100 e6501080 ffffffff 00511080 ffffffff  .P.......Q......
 0110 a5501080 ffffffff e6501080 ffffffff  .P.......P......
 0120 48511080 ffffffff 33521080 ffffffff  HQ......3R......
 0130 33521080 ffffffff 0f531080 ffffffff  3R.......S......
 0140 00000000 00000000 00000000 00000000  ................
 0150 fd431080 ffffffff 604b1080 ffffffff  .C......`K......
 0160 0f531080 ffffffff 34531080 ffffffff  .S......4S......
 0170 a5501080 ffffffff e6501080 ffffffff  .P.......P......
 0180 34531080 ffffffff 53541080 ffffffff  4S......ST......
 0190 48511080 ffffffff 33521080 ffffffff  HQ......3R......
 01a0 00000000 00000000 00000000 00000000  ................
 01b0 604b1080 ffffffff 454d1080 ffffffff  `K......EM......
 01c0 0f531080 ffffffff 34531080 ffffffff  .S......4S......
 01d0 53541080 ffffffff 75541080 ffffffff  ST......uT......
 01e0 75541080 ffffffff a8541080 ffffffff  uT.......T......
 01f0 00000000 00000000 00000000 00000000  ................
Contenu de la section .debug_pubnames :
 0000 0e000000 03000000 00000000 00000000  ................
 0010 00000e00 00000300 00000000 00000000  ................
 0020 00000000 0e000000 03000000 00000000  ................
 0030 00000000 0000                        ......          
Contenu de la section .debug_frame :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000                             ....            
Contenu de la section .debug_loc :
 0000 00000000 00000000 00000000 00000000  ................
 0010 00000000 00000000 00000000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................

Déassemblage de la section .text :

ffffffff80101000 <_Z6_startP14stivale_struct>:
/**
 * Stack for bootstrapping the kernel
 */


void _start(struct stivale_struct *bootloader_data) {
ffffffff80101000:	f3 0f 1e fa          	endbr64 
ffffffff80101004:	55                   	push   %rbp
ffffffff80101005:	48 89 e5             	mov    %rsp,%rbp
ffffffff80101008:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8010100c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    volatile uint16_t *vga_buffer = (uint16_t*)VGA_ADDRESS;
ffffffff80101010:	48 c7 45 f8 00 80 0b 	movq   $0xb8000,-0x8(%rbp)
ffffffff80101017:	00 
    vga_buffer[0] = VGA_COLOR('h', VGA_GREEN);
ffffffff80101018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010101c:	66 c7 00 68 02       	movw   $0x268,(%rax)
    vga_buffer[1] = VGA_COLOR('e', VGA_GREEN);
ffffffff80101021:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101025:	48 83 c0 02          	add    $0x2,%rax
ffffffff80101029:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[2] = VGA_COLOR('e', VGA_GREEN);
ffffffff8010102e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80101032:	48 83 c0 04          	add    $0x4,%rax
ffffffff80101036:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[3] = VGA_COLOR('e', VGA_GREEN);
ffffffff8010103b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010103f:	48 83 c0 06          	add    $0x6,%rax
ffffffff80101043:	66 c7 00 65 02       	movw   $0x265,(%rax)
    vga_buffer[4] = VGA_COLOR('o', VGA_GREEN);
ffffffff80101048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010104c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80101050:	66 c7 00 6f 02       	movw   $0x26f,(%rax)
    asm volatile ("hlt");
ffffffff80101055:	f4                   	hlt    
}
ffffffff80101056:	90                   	nop
ffffffff80101057:	c9                   	leaveq 
ffffffff80101058:	c3                   	retq   
ffffffff80101059:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101060:	00 00 00 
ffffffff80101063:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010106a:	00 00 00 
ffffffff8010106d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101074:	00 00 00 
ffffffff80101077:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010107e:	00 00 00 
ffffffff80101081:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101088:	00 00 00 
ffffffff8010108b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101092:	00 00 00 
ffffffff80101095:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010109c:	00 00 00 
ffffffff8010109f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010a6:	00 00 00 
ffffffff801010a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010b0:	00 00 00 
ffffffff801010b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ba:	00 00 00 
ffffffff801010bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010c4:	00 00 00 
ffffffff801010c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ce:	00 00 00 
ffffffff801010d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010d8:	00 00 00 
ffffffff801010db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010e2:	00 00 00 
ffffffff801010e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010ec:	00 00 00 
ffffffff801010ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801010f6:	00 00 00 
ffffffff801010f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101100:	00 00 00 
ffffffff80101103:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010110a:	00 00 00 
ffffffff8010110d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101114:	00 00 00 
ffffffff80101117:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010111e:	00 00 00 
ffffffff80101121:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101128:	00 00 00 
ffffffff8010112b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101132:	00 00 00 
ffffffff80101135:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010113c:	00 00 00 
ffffffff8010113f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101146:	00 00 00 
ffffffff80101149:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101150:	00 00 00 
ffffffff80101153:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010115a:	00 00 00 
ffffffff8010115d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101164:	00 00 00 
ffffffff80101167:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010116e:	00 00 00 
ffffffff80101171:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101178:	00 00 00 
ffffffff8010117b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101182:	00 00 00 
ffffffff80101185:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010118c:	00 00 00 
ffffffff8010118f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101196:	00 00 00 
ffffffff80101199:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011a0:	00 00 00 
ffffffff801011a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011aa:	00 00 00 
ffffffff801011ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011b4:	00 00 00 
ffffffff801011b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011be:	00 00 00 
ffffffff801011c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011c8:	00 00 00 
ffffffff801011cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011d2:	00 00 00 
ffffffff801011d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011dc:	00 00 00 
ffffffff801011df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011e6:	00 00 00 
ffffffff801011e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011f0:	00 00 00 
ffffffff801011f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801011fa:	00 00 00 
ffffffff801011fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101204:	00 00 00 
ffffffff80101207:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010120e:	00 00 00 
ffffffff80101211:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101218:	00 00 00 
ffffffff8010121b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101222:	00 00 00 
ffffffff80101225:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010122c:	00 00 00 
ffffffff8010122f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101236:	00 00 00 
ffffffff80101239:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101240:	00 00 00 
ffffffff80101243:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010124a:	00 00 00 
ffffffff8010124d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101254:	00 00 00 
ffffffff80101257:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010125e:	00 00 00 
ffffffff80101261:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101268:	00 00 00 
ffffffff8010126b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101272:	00 00 00 
ffffffff80101275:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010127c:	00 00 00 
ffffffff8010127f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101286:	00 00 00 
ffffffff80101289:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101290:	00 00 00 
ffffffff80101293:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010129a:	00 00 00 
ffffffff8010129d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012a4:	00 00 00 
ffffffff801012a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012ae:	00 00 00 
ffffffff801012b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012b8:	00 00 00 
ffffffff801012bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012c2:	00 00 00 
ffffffff801012c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012cc:	00 00 00 
ffffffff801012cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012d6:	00 00 00 
ffffffff801012d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012e0:	00 00 00 
ffffffff801012e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012ea:	00 00 00 
ffffffff801012ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012f4:	00 00 00 
ffffffff801012f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801012fe:	00 00 00 
ffffffff80101301:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101308:	00 00 00 
ffffffff8010130b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101312:	00 00 00 
ffffffff80101315:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010131c:	00 00 00 
ffffffff8010131f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101326:	00 00 00 
ffffffff80101329:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101330:	00 00 00 
ffffffff80101333:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010133a:	00 00 00 
ffffffff8010133d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101344:	00 00 00 
ffffffff80101347:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010134e:	00 00 00 
ffffffff80101351:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101358:	00 00 00 
ffffffff8010135b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101362:	00 00 00 
ffffffff80101365:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010136c:	00 00 00 
ffffffff8010136f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101376:	00 00 00 
ffffffff80101379:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101380:	00 00 00 
ffffffff80101383:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010138a:	00 00 00 
ffffffff8010138d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101394:	00 00 00 
ffffffff80101397:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010139e:	00 00 00 
ffffffff801013a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013a8:	00 00 00 
ffffffff801013ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013b2:	00 00 00 
ffffffff801013b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013bc:	00 00 00 
ffffffff801013bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013c6:	00 00 00 
ffffffff801013c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013d0:	00 00 00 
ffffffff801013d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013da:	00 00 00 
ffffffff801013dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013e4:	00 00 00 
ffffffff801013e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013ee:	00 00 00 
ffffffff801013f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801013f8:	00 00 00 
ffffffff801013fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101402:	00 00 00 
ffffffff80101405:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010140c:	00 00 00 
ffffffff8010140f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101416:	00 00 00 
ffffffff80101419:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101420:	00 00 00 
ffffffff80101423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010142a:	00 00 00 
ffffffff8010142d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101434:	00 00 00 
ffffffff80101437:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010143e:	00 00 00 
ffffffff80101441:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101448:	00 00 00 
ffffffff8010144b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101452:	00 00 00 
ffffffff80101455:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010145c:	00 00 00 
ffffffff8010145f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101466:	00 00 00 
ffffffff80101469:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101470:	00 00 00 
ffffffff80101473:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010147a:	00 00 00 
ffffffff8010147d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101484:	00 00 00 
ffffffff80101487:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010148e:	00 00 00 
ffffffff80101491:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101498:	00 00 00 
ffffffff8010149b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014a2:	00 00 00 
ffffffff801014a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014ac:	00 00 00 
ffffffff801014af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014b6:	00 00 00 
ffffffff801014b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014c0:	00 00 00 
ffffffff801014c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014ca:	00 00 00 
ffffffff801014cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014d4:	00 00 00 
ffffffff801014d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014de:	00 00 00 
ffffffff801014e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014e8:	00 00 00 
ffffffff801014eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014f2:	00 00 00 
ffffffff801014f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801014fc:	00 00 00 
ffffffff801014ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101506:	00 00 00 
ffffffff80101509:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101510:	00 00 00 
ffffffff80101513:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010151a:	00 00 00 
ffffffff8010151d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101524:	00 00 00 
ffffffff80101527:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010152e:	00 00 00 
ffffffff80101531:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101538:	00 00 00 
ffffffff8010153b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101542:	00 00 00 
ffffffff80101545:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010154c:	00 00 00 
ffffffff8010154f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101556:	00 00 00 
ffffffff80101559:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101560:	00 00 00 
ffffffff80101563:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010156a:	00 00 00 
ffffffff8010156d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101574:	00 00 00 
ffffffff80101577:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010157e:	00 00 00 
ffffffff80101581:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101588:	00 00 00 
ffffffff8010158b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101592:	00 00 00 
ffffffff80101595:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010159c:	00 00 00 
ffffffff8010159f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015a6:	00 00 00 
ffffffff801015a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015b0:	00 00 00 
ffffffff801015b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ba:	00 00 00 
ffffffff801015bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015c4:	00 00 00 
ffffffff801015c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ce:	00 00 00 
ffffffff801015d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015d8:	00 00 00 
ffffffff801015db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015e2:	00 00 00 
ffffffff801015e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015ec:	00 00 00 
ffffffff801015ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801015f6:	00 00 00 
ffffffff801015f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101600:	00 00 00 
ffffffff80101603:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010160a:	00 00 00 
ffffffff8010160d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101614:	00 00 00 
ffffffff80101617:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010161e:	00 00 00 
ffffffff80101621:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101628:	00 00 00 
ffffffff8010162b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101632:	00 00 00 
ffffffff80101635:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010163c:	00 00 00 
ffffffff8010163f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101646:	00 00 00 
ffffffff80101649:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101650:	00 00 00 
ffffffff80101653:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010165a:	00 00 00 
ffffffff8010165d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101664:	00 00 00 
ffffffff80101667:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010166e:	00 00 00 
ffffffff80101671:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101678:	00 00 00 
ffffffff8010167b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101682:	00 00 00 
ffffffff80101685:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010168c:	00 00 00 
ffffffff8010168f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101696:	00 00 00 
ffffffff80101699:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016a0:	00 00 00 
ffffffff801016a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016aa:	00 00 00 
ffffffff801016ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016b4:	00 00 00 
ffffffff801016b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016be:	00 00 00 
ffffffff801016c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016c8:	00 00 00 
ffffffff801016cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016d2:	00 00 00 
ffffffff801016d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016dc:	00 00 00 
ffffffff801016df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016e6:	00 00 00 
ffffffff801016e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016f0:	00 00 00 
ffffffff801016f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801016fa:	00 00 00 
ffffffff801016fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101704:	00 00 00 
ffffffff80101707:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010170e:	00 00 00 
ffffffff80101711:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101718:	00 00 00 
ffffffff8010171b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101722:	00 00 00 
ffffffff80101725:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010172c:	00 00 00 
ffffffff8010172f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101736:	00 00 00 
ffffffff80101739:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101740:	00 00 00 
ffffffff80101743:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010174a:	00 00 00 
ffffffff8010174d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101754:	00 00 00 
ffffffff80101757:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010175e:	00 00 00 
ffffffff80101761:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101768:	00 00 00 
ffffffff8010176b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101772:	00 00 00 
ffffffff80101775:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010177c:	00 00 00 
ffffffff8010177f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101786:	00 00 00 
ffffffff80101789:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101790:	00 00 00 
ffffffff80101793:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010179a:	00 00 00 
ffffffff8010179d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017a4:	00 00 00 
ffffffff801017a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017ae:	00 00 00 
ffffffff801017b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017b8:	00 00 00 
ffffffff801017bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017c2:	00 00 00 
ffffffff801017c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017cc:	00 00 00 
ffffffff801017cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017d6:	00 00 00 
ffffffff801017d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017e0:	00 00 00 
ffffffff801017e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017ea:	00 00 00 
ffffffff801017ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017f4:	00 00 00 
ffffffff801017f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801017fe:	00 00 00 
ffffffff80101801:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101808:	00 00 00 
ffffffff8010180b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101812:	00 00 00 
ffffffff80101815:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010181c:	00 00 00 
ffffffff8010181f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101826:	00 00 00 
ffffffff80101829:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101830:	00 00 00 
ffffffff80101833:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010183a:	00 00 00 
ffffffff8010183d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101844:	00 00 00 
ffffffff80101847:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010184e:	00 00 00 
ffffffff80101851:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101858:	00 00 00 
ffffffff8010185b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101862:	00 00 00 
ffffffff80101865:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010186c:	00 00 00 
ffffffff8010186f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101876:	00 00 00 
ffffffff80101879:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101880:	00 00 00 
ffffffff80101883:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010188a:	00 00 00 
ffffffff8010188d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101894:	00 00 00 
ffffffff80101897:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010189e:	00 00 00 
ffffffff801018a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018a8:	00 00 00 
ffffffff801018ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018b2:	00 00 00 
ffffffff801018b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018bc:	00 00 00 
ffffffff801018bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018c6:	00 00 00 
ffffffff801018c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018d0:	00 00 00 
ffffffff801018d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018da:	00 00 00 
ffffffff801018dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018e4:	00 00 00 
ffffffff801018e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018ee:	00 00 00 
ffffffff801018f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801018f8:	00 00 00 
ffffffff801018fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101902:	00 00 00 
ffffffff80101905:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010190c:	00 00 00 
ffffffff8010190f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101916:	00 00 00 
ffffffff80101919:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101920:	00 00 00 
ffffffff80101923:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010192a:	00 00 00 
ffffffff8010192d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101934:	00 00 00 
ffffffff80101937:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010193e:	00 00 00 
ffffffff80101941:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101948:	00 00 00 
ffffffff8010194b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101952:	00 00 00 
ffffffff80101955:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010195c:	00 00 00 
ffffffff8010195f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101966:	00 00 00 
ffffffff80101969:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101970:	00 00 00 
ffffffff80101973:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010197a:	00 00 00 
ffffffff8010197d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101984:	00 00 00 
ffffffff80101987:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8010198e:	00 00 00 
ffffffff80101991:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101998:	00 00 00 
ffffffff8010199b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019a2:	00 00 00 
ffffffff801019a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019ac:	00 00 00 
ffffffff801019af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019b6:	00 00 00 
ffffffff801019b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019c0:	00 00 00 
ffffffff801019c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019ca:	00 00 00 
ffffffff801019cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019d4:	00 00 00 
ffffffff801019d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019de:	00 00 00 
ffffffff801019e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019e8:	00 00 00 
ffffffff801019eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019f2:	00 00 00 
ffffffff801019f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801019fc:	00 00 00 
ffffffff801019ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a06:	00 00 00 
ffffffff80101a09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a10:	00 00 00 
ffffffff80101a13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a1a:	00 00 00 
ffffffff80101a1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a24:	00 00 00 
ffffffff80101a27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a2e:	00 00 00 
ffffffff80101a31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a38:	00 00 00 
ffffffff80101a3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a42:	00 00 00 
ffffffff80101a45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a4c:	00 00 00 
ffffffff80101a4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a56:	00 00 00 
ffffffff80101a59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a60:	00 00 00 
ffffffff80101a63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a6a:	00 00 00 
ffffffff80101a6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a74:	00 00 00 
ffffffff80101a77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a7e:	00 00 00 
ffffffff80101a81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a88:	00 00 00 
ffffffff80101a8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a92:	00 00 00 
ffffffff80101a95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101a9c:	00 00 00 
ffffffff80101a9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aa6:	00 00 00 
ffffffff80101aa9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ab0:	00 00 00 
ffffffff80101ab3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aba:	00 00 00 
ffffffff80101abd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ac4:	00 00 00 
ffffffff80101ac7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ace:	00 00 00 
ffffffff80101ad1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ad8:	00 00 00 
ffffffff80101adb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ae2:	00 00 00 
ffffffff80101ae5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101aec:	00 00 00 
ffffffff80101aef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101af6:	00 00 00 
ffffffff80101af9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b00:	00 00 00 
ffffffff80101b03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b0a:	00 00 00 
ffffffff80101b0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b14:	00 00 00 
ffffffff80101b17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b1e:	00 00 00 
ffffffff80101b21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b28:	00 00 00 
ffffffff80101b2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b32:	00 00 00 
ffffffff80101b35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b3c:	00 00 00 
ffffffff80101b3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b46:	00 00 00 
ffffffff80101b49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b50:	00 00 00 
ffffffff80101b53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b5a:	00 00 00 
ffffffff80101b5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b64:	00 00 00 
ffffffff80101b67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b6e:	00 00 00 
ffffffff80101b71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b78:	00 00 00 
ffffffff80101b7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b82:	00 00 00 
ffffffff80101b85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b8c:	00 00 00 
ffffffff80101b8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101b96:	00 00 00 
ffffffff80101b99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ba0:	00 00 00 
ffffffff80101ba3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101baa:	00 00 00 
ffffffff80101bad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bb4:	00 00 00 
ffffffff80101bb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bbe:	00 00 00 
ffffffff80101bc1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bc8:	00 00 00 
ffffffff80101bcb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bd2:	00 00 00 
ffffffff80101bd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bdc:	00 00 00 
ffffffff80101bdf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101be6:	00 00 00 
ffffffff80101be9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bf0:	00 00 00 
ffffffff80101bf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101bfa:	00 00 00 
ffffffff80101bfd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c04:	00 00 00 
ffffffff80101c07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c0e:	00 00 00 
ffffffff80101c11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c18:	00 00 00 
ffffffff80101c1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c22:	00 00 00 
ffffffff80101c25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c2c:	00 00 00 
ffffffff80101c2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c36:	00 00 00 
ffffffff80101c39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c40:	00 00 00 
ffffffff80101c43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c4a:	00 00 00 
ffffffff80101c4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c54:	00 00 00 
ffffffff80101c57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c5e:	00 00 00 
ffffffff80101c61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c68:	00 00 00 
ffffffff80101c6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c72:	00 00 00 
ffffffff80101c75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c7c:	00 00 00 
ffffffff80101c7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c86:	00 00 00 
ffffffff80101c89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c90:	00 00 00 
ffffffff80101c93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101c9a:	00 00 00 
ffffffff80101c9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ca4:	00 00 00 
ffffffff80101ca7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cae:	00 00 00 
ffffffff80101cb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cb8:	00 00 00 
ffffffff80101cbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cc2:	00 00 00 
ffffffff80101cc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ccc:	00 00 00 
ffffffff80101ccf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cd6:	00 00 00 
ffffffff80101cd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ce0:	00 00 00 
ffffffff80101ce3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cea:	00 00 00 
ffffffff80101ced:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cf4:	00 00 00 
ffffffff80101cf7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101cfe:	00 00 00 
ffffffff80101d01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d08:	00 00 00 
ffffffff80101d0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d12:	00 00 00 
ffffffff80101d15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d1c:	00 00 00 
ffffffff80101d1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d26:	00 00 00 
ffffffff80101d29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d30:	00 00 00 
ffffffff80101d33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d3a:	00 00 00 
ffffffff80101d3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d44:	00 00 00 
ffffffff80101d47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d4e:	00 00 00 
ffffffff80101d51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d58:	00 00 00 
ffffffff80101d5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d62:	00 00 00 
ffffffff80101d65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d6c:	00 00 00 
ffffffff80101d6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d76:	00 00 00 
ffffffff80101d79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d80:	00 00 00 
ffffffff80101d83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d8a:	00 00 00 
ffffffff80101d8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d94:	00 00 00 
ffffffff80101d97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101d9e:	00 00 00 
ffffffff80101da1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101da8:	00 00 00 
ffffffff80101dab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101db2:	00 00 00 
ffffffff80101db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dbc:	00 00 00 
ffffffff80101dbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dc6:	00 00 00 
ffffffff80101dc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dd0:	00 00 00 
ffffffff80101dd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dda:	00 00 00 
ffffffff80101ddd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101de4:	00 00 00 
ffffffff80101de7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101dee:	00 00 00 
ffffffff80101df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101df8:	00 00 00 
ffffffff80101dfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e02:	00 00 00 
ffffffff80101e05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e0c:	00 00 00 
ffffffff80101e0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e16:	00 00 00 
ffffffff80101e19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e20:	00 00 00 
ffffffff80101e23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e2a:	00 00 00 
ffffffff80101e2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e34:	00 00 00 
ffffffff80101e37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e3e:	00 00 00 
ffffffff80101e41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e48:	00 00 00 
ffffffff80101e4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e52:	00 00 00 
ffffffff80101e55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e5c:	00 00 00 
ffffffff80101e5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e66:	00 00 00 
ffffffff80101e69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e70:	00 00 00 
ffffffff80101e73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e7a:	00 00 00 
ffffffff80101e7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e84:	00 00 00 
ffffffff80101e87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e8e:	00 00 00 
ffffffff80101e91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101e98:	00 00 00 
ffffffff80101e9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ea2:	00 00 00 
ffffffff80101ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eac:	00 00 00 
ffffffff80101eaf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eb6:	00 00 00 
ffffffff80101eb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ec0:	00 00 00 
ffffffff80101ec3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101eca:	00 00 00 
ffffffff80101ecd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ed4:	00 00 00 
ffffffff80101ed7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ede:	00 00 00 
ffffffff80101ee1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ee8:	00 00 00 
ffffffff80101eeb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ef2:	00 00 00 
ffffffff80101ef5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101efc:	00 00 00 
ffffffff80101eff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f06:	00 00 00 
ffffffff80101f09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f10:	00 00 00 
ffffffff80101f13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f1a:	00 00 00 
ffffffff80101f1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f24:	00 00 00 
ffffffff80101f27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f2e:	00 00 00 
ffffffff80101f31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f38:	00 00 00 
ffffffff80101f3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f42:	00 00 00 
ffffffff80101f45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f4c:	00 00 00 
ffffffff80101f4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f56:	00 00 00 
ffffffff80101f59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f60:	00 00 00 
ffffffff80101f63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f6a:	00 00 00 
ffffffff80101f6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f74:	00 00 00 
ffffffff80101f77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f7e:	00 00 00 
ffffffff80101f81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f88:	00 00 00 
ffffffff80101f8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f92:	00 00 00 
ffffffff80101f95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101f9c:	00 00 00 
ffffffff80101f9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fa6:	00 00 00 
ffffffff80101fa9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fb0:	00 00 00 
ffffffff80101fb3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fba:	00 00 00 
ffffffff80101fbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fc4:	00 00 00 
ffffffff80101fc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fce:	00 00 00 
ffffffff80101fd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fd8:	00 00 00 
ffffffff80101fdb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fe2:	00 00 00 
ffffffff80101fe5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101fec:	00 00 00 
ffffffff80101fef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80101ff6:	00 00 00 
ffffffff80101ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>:


 gdt_descriptor_t gdt_descriptors[64];
  tss_t tss ; __attribute__((aligned(4096)))
static void gdt_set_descriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran)
{
ffffffff80102000:	f3 0f 1e fa          	endbr64 
ffffffff80102004:	55                   	push   %rbp
ffffffff80102005:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102008:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8010200c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80102010:	89 f0                	mov    %esi,%eax
ffffffff80102012:	89 d6                	mov    %edx,%esi
ffffffff80102014:	89 ca                	mov    %ecx,%edx
ffffffff80102016:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff8010201a:	89 f0                	mov    %esi,%eax
ffffffff8010201c:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff8010201f:	89 d0                	mov    %edx,%eax
ffffffff80102021:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_descriptor_t *descriptor = &gdt_descriptors[sel / sizeof(*gdt_descriptors)];
ffffffff80102024:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80102028:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff8010202c:	48 89 c2             	mov    %rax,%rdx
ffffffff8010202f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102033:	48 01 d0             	add    %rdx,%rax
ffffffff80102036:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->flags = flags;
ffffffff8010203a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010203e:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff80102042:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->granularity = (gran << 4) | 0x0F;
ffffffff80102045:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff80102049:	c1 e0 04             	shl    $0x4,%eax
ffffffff8010204c:	83 c8 0f             	or     $0xf,%eax
ffffffff8010204f:	89 c2                	mov    %eax,%edx
ffffffff80102051:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102055:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->limit_low = 0xFFFF;
ffffffff80102058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010205c:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
}
ffffffff80102061:	90                   	nop
ffffffff80102062:	c9                   	leaveq 
ffffffff80102063:	c3                   	retq   

ffffffff80102064 <_ZL19gdt_set_xdescriptorP16gdt_descriptor_tthhmm>:

static void gdt_set_xdescriptor(gdt_descriptor_t *gdt_descriptors, uint16_t sel, uint8_t flags, uint8_t gran, uint64_t base, uint64_t limit)
{
ffffffff80102064:	f3 0f 1e fa          	endbr64 
ffffffff80102068:	55                   	push   %rbp
ffffffff80102069:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010206c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80102070:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80102074:	89 f0                	mov    %esi,%eax
ffffffff80102076:	89 d6                	mov    %edx,%esi
ffffffff80102078:	89 ca                	mov    %ecx,%edx
ffffffff8010207a:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
ffffffff8010207e:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
ffffffff80102082:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff80102086:	89 f0                	mov    %esi,%eax
ffffffff80102088:	88 45 e0             	mov    %al,-0x20(%rbp)
ffffffff8010208b:	89 d0                	mov    %edx,%eax
ffffffff8010208d:	88 45 dc             	mov    %al,-0x24(%rbp)
  gdt_xdescriptor_t *descriptor = (gdt_xdescriptor_t *) (&gdt_descriptors[sel / sizeof(*gdt_descriptors)]);
ffffffff80102090:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80102094:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80102098:	48 89 c2             	mov    %rax,%rdx
ffffffff8010209b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010209f:	48 01 d0             	add    %rdx,%rax
ffffffff801020a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  descriptor->low.flags = flags;
ffffffff801020a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020aa:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
ffffffff801020ae:	88 50 05             	mov    %dl,0x5(%rax)
  descriptor->low.granularity = (gran << 4) | ((limit >> 16) & 0x0F);
ffffffff801020b1:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
ffffffff801020b5:	c1 e0 04             	shl    $0x4,%eax
ffffffff801020b8:	89 c2                	mov    %eax,%edx
ffffffff801020ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801020be:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801020c2:	83 e0 0f             	and    $0xf,%eax
ffffffff801020c5:	09 c2                	or     %eax,%edx
ffffffff801020c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020cb:	88 50 06             	mov    %dl,0x6(%rax)
  descriptor->low.limit_low = limit & 0xFFFF;
ffffffff801020ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801020d2:	89 c2                	mov    %eax,%edx
ffffffff801020d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020d8:	66 89 10             	mov    %dx,(%rax)
  descriptor->low.base_low = base & 0xFFFF;
ffffffff801020db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020df:	89 c2                	mov    %eax,%edx
ffffffff801020e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020e5:	66 89 50 02          	mov    %dx,0x2(%rax)
  descriptor->low.base_mid = ((base >> 16) & 0xFF);
ffffffff801020e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff801020f1:	89 c2                	mov    %eax,%edx
ffffffff801020f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801020f7:	88 50 04             	mov    %dl,0x4(%rax)
  descriptor->low.base_high = ((base >> 24) & 0xFF);
ffffffff801020fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801020fe:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff80102102:	89 c2                	mov    %eax,%edx
ffffffff80102104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102108:	88 50 07             	mov    %dl,0x7(%rax)
  descriptor->high.base_xhigh = ((base >> 32) & 0xFFFFFFFF);
ffffffff8010210b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010210f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80102113:	89 c2                	mov    %eax,%edx
ffffffff80102115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102119:	89 50 08             	mov    %edx,0x8(%rax)
  descriptor->high.reserved = 0;
ffffffff8010211c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102120:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
}
ffffffff80102127:	90                   	nop
ffffffff80102128:	c9                   	leaveq 
ffffffff80102129:	c3                   	retq   

ffffffff8010212a <_Z9rgdt_initv>:

extern "C" void gdtr_install(gdtr_t*, unsigned short, unsigned short);
void rgdt_init(void)
{
ffffffff8010212a:	f3 0f 1e fa          	endbr64 
ffffffff8010212e:	55                   	push   %rbp
ffffffff8010212f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102132:	48 83 ec 10          	sub    $0x10,%rsp
  /* get this CPU's local data */

  /* get pointers to the GDT and GDTR */

  /* get pointer to the TSS and calculate the limit */
  uint64_t tss_base = (uint64_t) &tss;
ffffffff80102136:	48 c7 45 f8 20 82 10 	movq   $0xffffffff80108220,-0x8(%rbp)
ffffffff8010213d:	80 
  uint64_t tss_limit =tss_base+ sizeof(tss)-1;
ffffffff8010213e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80102142:	48 83 c0 6f          	add    $0x6f,%rax
ffffffff80102146:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

  /* reset the GDT */
  memzero(&gdt_descriptors,sizeof(gdt_descriptors) * 64);
ffffffff8010214a:	be 00 80 00 00       	mov    $0x8000,%esi
ffffffff8010214f:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff80102156:	e8 4a 2f 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>

  /* fill in the entries we need */
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_CODE, GDT_PRESENT | GDT_CS,                           GDT_LM);
ffffffff8010215b:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80102160:	ba 98 00 00 00       	mov    $0x98,%edx
ffffffff80102165:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8010216a:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff80102171:	e8 8a fe ff ff       	callq  ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_KERNEL_DATA, GDT_PRESENT | GDT_DS | GDT_WRITABLE,            0);
ffffffff80102176:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8010217b:	ba 92 00 00 00       	mov    $0x92,%edx
ffffffff80102180:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff80102185:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff8010218c:	e8 6f fe ff ff       	callq  ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_DATA,   GDT_PRESENT | GDT_DS | GDT_USER | GDT_WRITABLE, 0);
ffffffff80102191:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80102196:	ba f2 00 00 00       	mov    $0xf2,%edx
ffffffff8010219b:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff801021a0:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff801021a7:	e8 54 fe ff ff       	callq  ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_descriptor( gdt_descriptors, SLTR_USER_CODE,   GDT_PRESENT | GDT_CS | GDT_USER,                GDT_LM);
ffffffff801021ac:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff801021b1:	ba f8 00 00 00       	mov    $0xf8,%edx
ffffffff801021b6:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff801021bb:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff801021c2:	e8 39 fe ff ff       	callq  ffffffff80102000 <_ZL18gdt_set_descriptorP16gdt_descriptor_tthh>
  gdt_set_xdescriptor(gdt_descriptors, SLTR_TSS,         GDT_PRESENT | GDT_TSS,                          0, tss_base, tss_limit);
ffffffff801021c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801021cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801021cf:	49 89 d1             	mov    %rdx,%r9
ffffffff801021d2:	49 89 c0             	mov    %rax,%r8
ffffffff801021d5:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff801021da:	ba 89 00 00 00       	mov    $0x89,%edx
ffffffff801021df:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff801021e4:	48 c7 c7 20 80 10 80 	mov    $0xffffffff80108020,%rdi
ffffffff801021eb:	e8 74 fe ff ff       	callq  ffffffff80102064 <_ZL19gdt_set_xdescriptorP16gdt_descriptor_tthhmm>
   * read the GS_BASE MSRs so we can restore it after updating the segment
   * registers
   */

  /* update the GDTR structure and install it */
  gdtr.addr = (uint64_t) &gdt_descriptors;
ffffffff801021f0:	48 c7 c0 20 80 10 80 	mov    $0xffffffff80108020,%rax
ffffffff801021f7:	48 89 05 04 5e 00 00 	mov    %rax,0x5e04(%rip)        # ffffffff80108002 <gdtr+0x2>
  gdtr.len = sizeof(gdt_descriptors) * GDT_DESCRIPTORS - 1;
ffffffff801021fe:	66 c7 05 f9 5d 00 00 	movw   $0xdff,0x5df9(%rip)        # ffffffff80108000 <gdtr>
ffffffff80102205:	ff 0d 
  gdtr_install(&gdtr, SLTR_KERNEL_CODE, SLTR_KERNEL_DATA);
ffffffff80102207:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff8010220c:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80102211:	48 c7 c7 00 80 10 80 	mov    $0xffffffff80108000,%rdi
ffffffff80102218:	e8 63 2e 00 00       	callq  ffffffff80105080 <gdtr_install>

  /* restore the GS_BASE and GS_KERNEL_BASE MSR */
 
}void rgdt_init(void);
ffffffff8010221d:	90                   	nop
ffffffff8010221e:	c9                   	leaveq 
ffffffff8010221f:	c3                   	retq   

ffffffff80102220 <_Z8tss_initm>:

uint8_t idt_stack[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack2[4096*4]__attribute__((aligned(4096)));
uint8_t idt_stack3[4096*4]__attribute__((aligned(4096)));
void tss_init(uint64_t i)
{
ffffffff80102220:	f3 0f 1e fa          	endbr64 
ffffffff80102224:	55                   	push   %rbp
ffffffff80102225:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102228:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010222c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* reset all the fields */
  memzero(&tss, sizeof(tss));
ffffffff80102230:	be 70 00 00 00       	mov    $0x70,%esi
ffffffff80102235:	48 c7 c7 20 82 10 80 	mov    $0xffffffff80108220,%rdi
ffffffff8010223c:	e8 64 2e 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
  tss.iomap_base = sizeof(tss)-1;
ffffffff80102241:	66 c7 05 3c 60 00 00 	movw   $0x6f,0x603c(%rip)        # ffffffff80108286 <tss+0x66>
ffffffff80102248:	6f 00 
    tss.rsp0 =  (uint64_t)idt_stack+4096*4 - 32;
ffffffff8010224a:	48 c7 c0 00 90 10 80 	mov    $0xffffffff80109000,%rax
ffffffff80102251:	48 05 e0 3f 00 00    	add    $0x3fe0,%rax
ffffffff80102257:	48 89 05 c6 5f 00 00 	mov    %rax,0x5fc6(%rip)        # ffffffff80108224 <tss+0x4>
    tss.rsp1 = (uint64_t)idt_stack2+4096*4 - 32;
ffffffff8010225e:	48 c7 c0 00 d0 10 80 	mov    $0xffffffff8010d000,%rax
ffffffff80102265:	48 05 e0 3f 00 00    	add    $0x3fe0,%rax
ffffffff8010226b:	48 89 05 ba 5f 00 00 	mov    %rax,0x5fba(%rip)        # ffffffff8010822c <tss+0xc>
    tss.rsp2 = (uint64_t)idt_stack3+4096*4 - 32;
ffffffff80102272:	48 c7 c0 00 10 11 80 	mov    $0xffffffff80111000,%rax
ffffffff80102279:	48 05 e0 3f 00 00    	add    $0x3fe0,%rax
ffffffff8010227f:	48 89 05 ae 5f 00 00 	mov    %rax,0x5fae(%rip)        # ffffffff80108234 <tss+0x14>
    
  /* install it using the LTR instruction */

    asm volatile("mov ax, %0 \n ltr ax" : : "i" (SLTR_TSS) : "rax");
ffffffff80102286:	66 b8 28 00          	mov    $0x28,%ax
ffffffff8010228a:	0f 00 d8             	ltr    %ax
}
ffffffff8010228d:	90                   	nop
ffffffff8010228e:	c9                   	leaveq 
ffffffff8010228f:	c3                   	retq   

ffffffff80102290 <_Z12tss_set_rsp0m>:

void tss_set_rsp0(uint64_t rsp0)
{
ffffffff80102290:	f3 0f 1e fa          	endbr64 
ffffffff80102294:	55                   	push   %rbp
ffffffff80102295:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102298:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8010229c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  /* find this CPU's TSS */

  /* set the stack pointer for this CPU */
  tss.rsp0 = rsp0;
ffffffff801022a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801022a4:	48 89 05 79 5f 00 00 	mov    %rax,0x5f79(%rip)        # ffffffff80108224 <tss+0x4>
}void setup_gdt(unsigned long i){
ffffffff801022ab:	90                   	nop
ffffffff801022ac:	c9                   	leaveq 
ffffffff801022ad:	c3                   	retq   

ffffffff801022ae <_Z9setup_gdtm>:
ffffffff801022ae:	f3 0f 1e fa          	endbr64 
ffffffff801022b2:	55                   	push   %rbp
ffffffff801022b3:	48 89 e5             	mov    %rsp,%rbp
ffffffff801022b6:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801022ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    rgdt_init();
ffffffff801022be:	e8 67 fe ff ff       	callq  ffffffff8010212a <_Z9rgdt_initv>
ffffffff801022c3:	90                   	nop
ffffffff801022c4:	c9                   	leaveq 
ffffffff801022c5:	c3                   	retq   

ffffffff801022c6 <kernel_start>:
    .framebuffer_height = 0,
    .framebuffer_bpp = 0,
    .entry_point = 0
};

extern "C" void kernel_start(stivale_struct *bootloader_data){
ffffffff801022c6:	f3 0f 1e fa          	endbr64 
ffffffff801022ca:	55                   	push   %rbp
ffffffff801022cb:	48 89 e5             	mov    %rsp,%rbp
ffffffff801022ce:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801022d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    asm volatile("and rsp, -16");
ffffffff801022d6:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    com_initialize(COM_PORT::COM1);
ffffffff801022da:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff801022df:	e8 bf 29 00 00       	callq  ffffffff80104ca3 <_Z14com_initialize8COM_PORT>
   
    com_write_str("hello world");
ffffffff801022e4:	48 c7 c7 00 60 10 80 	mov    $0xffffffff80106000,%rdi
ffffffff801022eb:	e8 fe 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("init gdt");
ffffffff801022f0:	48 c7 c7 0c 60 10 80 	mov    $0xffffffff8010600c,%rdi
ffffffff801022f7:	e8 f2 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    setup_gdt((uintptr_t)stack + (sizeof(char)*4096));
ffffffff801022fc:	48 c7 c0 20 50 11 80 	mov    $0xffffffff80115020,%rax
ffffffff80102303:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80102309:	48 89 c7             	mov    %rax,%rdi
ffffffff8010230c:	e8 9d ff ff ff       	callq  ffffffff801022ae <_Z9setup_gdtm>
    com_write_str("init gdt : ✅");
ffffffff80102311:	48 c7 c7 15 60 10 80 	mov    $0xffffffff80106015,%rdi
ffffffff80102318:	e8 d1 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("init idt");
ffffffff8010231d:	48 c7 c7 24 60 10 80 	mov    $0xffffffff80106024,%rdi
ffffffff80102324:	e8 c5 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    
    init_idt();
ffffffff80102329:	e8 90 21 00 00       	callq  ffffffff801044be <_Z8init_idtv>
    com_write_str("init idt : ✅");
ffffffff8010232e:	48 c7 c7 2d 60 10 80 	mov    $0xffffffff8010602d,%rdi
ffffffff80102335:	e8 b4 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>

    com_write_str("init tss");
ffffffff8010233a:	48 c7 c7 3c 60 10 80 	mov    $0xffffffff8010603c,%rdi
ffffffff80102341:	e8 a8 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    tss_init((uintptr_t)stack + sizeof(char)*4096);
ffffffff80102346:	48 c7 c0 20 50 11 80 	mov    $0xffffffff80115020,%rax
ffffffff8010234d:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80102353:	48 89 c7             	mov    %rax,%rdi
ffffffff80102356:	e8 c5 fe ff ff       	callq  ffffffff80102220 <_Z8tss_initm>
    com_write_str("init tss : OK");
ffffffff8010235b:	48 c7 c7 45 60 10 80 	mov    $0xffffffff80106045,%rdi
ffffffff80102362:	e8 87 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("init paging");
ffffffff80102367:	48 c7 c7 53 60 10 80 	mov    $0xffffffff80106053,%rdi
ffffffff8010236e:	e8 7b 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    init_virtual_memory(bootloader_data);
ffffffff80102373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102377:	48 89 c7             	mov    %rax,%rdi
ffffffff8010237a:	e8 44 1b 00 00       	callq  ffffffff80103ec3 <_Z19init_virtual_memoryP14stivale_struct>
    com_write_str("init paging : OK");
ffffffff8010237f:	48 c7 c7 5f 60 10 80 	mov    $0xffffffff8010605f,%rdi
ffffffff80102386:	e8 63 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("mapping");
ffffffff8010238b:	48 c7 c7 70 60 10 80 	mov    $0xffffffff80106070,%rdi
ffffffff80102392:	e8 57 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    int* i =(int*) 0xfffffffff;
ffffffff80102397:	48 b8 ff ff ff ff 0f 	movabs $0xfffffffff,%rax
ffffffff8010239e:	00 00 00 
ffffffff801023a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *i = 0;
ffffffff801023a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801023a9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    set_paging_dir((uint64_t)pl4_table);
ffffffff801023af:	48 8b 05 4a 2c 01 00 	mov    0x12c4a(%rip),%rax        # ffffffff80115000 <_ZL9pl4_table>
ffffffff801023b6:	48 89 c7             	mov    %rax,%rdi
ffffffff801023b9:	e8 28 2d 00 00       	callq  ffffffff801050e6 <_Z14set_paging_dirm>
    com_write_str("mapping ok");
ffffffff801023be:	48 c7 c7 78 60 10 80 	mov    $0xffffffff80106078,%rdi
ffffffff801023c5:	e8 24 28 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    _start(bootloader_data);
ffffffff801023ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801023ce:	48 89 c7             	mov    %rax,%rdi
ffffffff801023d1:	e8 2a ec ff ff       	callq  ffffffff80101000 <_Z6_startP14stivale_struct>
}
ffffffff801023d6:	90                   	nop
ffffffff801023d7:	c9                   	leaveq 
ffffffff801023d8:	c3                   	retq   

ffffffff801023d9 <_ZL15liballoc_memsetPvil>:


// ***********   HELPER FUNCTIONS  *******************************

static void *liballoc_memset(void* s, int c, size_t n)
{
ffffffff801023d9:	f3 0f 1e fa          	endbr64 
ffffffff801023dd:	55                   	push   %rbp
ffffffff801023de:	48 89 e5             	mov    %rsp,%rbp
ffffffff801023e1:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff801023e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff801023e9:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff801023ec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	unsigned int i;
	for ( i = 0; i < n ; i++)
ffffffff801023f0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff801023f7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801023fa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff801023fe:	7e 15                	jle    ffffffff80102415 <_ZL15liballoc_memsetPvil+0x3c>
		((char*)s)[i] = c;
ffffffff80102400:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80102403:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102407:	48 01 d0             	add    %rdx,%rax
ffffffff8010240a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff8010240d:	88 10                	mov    %dl,(%rax)
	for ( i = 0; i < n ; i++)
ffffffff8010240f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80102413:	eb e2                	jmp    ffffffff801023f7 <_ZL15liballoc_memsetPvil+0x1e>
	
	return s;
ffffffff80102415:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff80102419:	c9                   	leaveq 
ffffffff8010241a:	c3                   	retq   

ffffffff8010241b <_ZL15liballoc_memcpyPvPKvl>:
static void* liballoc_memcpy(void* s1, const void* s2, size_t n)
{
ffffffff8010241b:	f3 0f 1e fa          	endbr64 
ffffffff8010241f:	55                   	push   %rbp
ffffffff80102420:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102423:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80102427:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8010242b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8010242f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  char *cdest;
  char *csrc;
  unsigned int *ldest = (unsigned int*)s1;
ffffffff80102433:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102437:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  unsigned int *lsrc  = (unsigned int*)s2;
ffffffff8010243b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010243f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

  while ( n >= sizeof(unsigned int) )
ffffffff80102443:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80102447:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8010244b:	76 2a                	jbe    ffffffff80102477 <_ZL15liballoc_memcpyPvPKvl+0x5c>
  {
      *ldest++ = *lsrc++;
ffffffff8010244d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102451:	48 8d 50 04          	lea    0x4(%rax),%rdx
ffffffff80102455:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80102459:	8b 10                	mov    (%rax),%edx
ffffffff8010245b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010245f:	48 8d 48 04          	lea    0x4(%rax),%rcx
ffffffff80102463:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80102467:	89 10                	mov    %edx,(%rax)
	  n -= sizeof(unsigned int);
ffffffff80102469:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8010246d:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80102471:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  while ( n >= sizeof(unsigned int) )
ffffffff80102475:	eb cc                	jmp    ffffffff80102443 <_ZL15liballoc_memcpyPvPKvl+0x28>
  }

  cdest = (char*)ldest;
ffffffff80102477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010247b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  csrc  = (char*)lsrc;
ffffffff8010247f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102483:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  
  while ( n > 0 )
ffffffff80102487:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8010248c:	7e 24                	jle    ffffffff801024b2 <_ZL15liballoc_memcpyPvPKvl+0x97>
  {
      *cdest++ = *csrc++;
ffffffff8010248e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102492:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80102496:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8010249a:	0f b6 10             	movzbl (%rax),%edx
ffffffff8010249d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801024a1:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff801024a5:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff801024a9:	88 10                	mov    %dl,(%rax)
	  n -= 1;
ffffffff801024ab:	48 83 6d c8 01       	subq   $0x1,-0x38(%rbp)
  while ( n > 0 )
ffffffff801024b0:	eb d5                	jmp    ffffffff80102487 <_ZL15liballoc_memcpyPvPKvl+0x6c>
  }
  
  return s1;
ffffffff801024b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
ffffffff801024b6:	c9                   	leaveq 
ffffffff801024b7:	c3                   	retq   

ffffffff801024b8 <_ZL17allocate_new_pagej>:


// ***************************************************************

static struct liballoc_major *allocate_new_page( unsigned int size )
{
ffffffff801024b8:	f3 0f 1e fa          	endbr64 
ffffffff801024bc:	55                   	push   %rbp
ffffffff801024bd:	48 89 e5             	mov    %rsp,%rbp
ffffffff801024c0:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801024c4:	89 7d ec             	mov    %edi,-0x14(%rbp)
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
ffffffff801024c7:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff801024ca:	83 c0 28             	add    $0x28,%eax
ffffffff801024cd:	89 45 fc             	mov    %eax,-0x4(%rbp)
		st += sizeof(struct liballoc_minor);
ffffffff801024d0:	83 45 fc 28          	addl   $0x28,-0x4(%rbp)

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff801024d4:	8b 0d 26 4b 00 00    	mov    0x4b26(%rip),%ecx        # ffffffff80107000 <_ZL10l_pageSize>
ffffffff801024da:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801024dd:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801024e2:	f7 f1                	div    %ecx
ffffffff801024e4:	89 d0                	mov    %edx,%eax
ffffffff801024e6:	85 c0                	test   %eax,%eax
ffffffff801024e8:	75 15                	jne    ffffffff801024ff <_ZL17allocate_new_pagej+0x47>
			st  = st / (l_pageSize);
ffffffff801024ea:	8b 35 10 4b 00 00    	mov    0x4b10(%rip),%esi        # ffffffff80107000 <_ZL10l_pageSize>
ffffffff801024f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801024f3:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801024f8:	f7 f6                	div    %esi
ffffffff801024fa:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff801024fd:	eb 16                	jmp    ffffffff80102515 <_ZL17allocate_new_pagej+0x5d>
		else
			st  = st / (l_pageSize) + 1;
ffffffff801024ff:	8b 0d fb 4a 00 00    	mov    0x4afb(%rip),%ecx        # ffffffff80107000 <_ZL10l_pageSize>
ffffffff80102505:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80102508:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8010250d:	f7 f1                	div    %ecx
ffffffff8010250f:	83 c0 01             	add    $0x1,%eax
ffffffff80102512:	89 45 fc             	mov    %eax,-0x4(%rbp)
							// No, add the buffer. 

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
ffffffff80102515:	8b 05 e9 4a 00 00    	mov    0x4ae9(%rip),%eax        # ffffffff80107004 <_ZL11l_pageCount>
ffffffff8010251b:	39 45 fc             	cmp    %eax,-0x4(%rbp)
ffffffff8010251e:	73 09                	jae    ffffffff80102529 <_ZL17allocate_new_pagej+0x71>
ffffffff80102520:	8b 05 de 4a 00 00    	mov    0x4ade(%rip),%eax        # ffffffff80107004 <_ZL11l_pageCount>
ffffffff80102526:	89 45 fc             	mov    %eax,-0x4(%rbp)
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80102529:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010252c:	89 c7                	mov    %eax,%edi
ffffffff8010252e:	e8 e5 2b 00 00       	callq  ffffffff80105118 <liballoc_alloc>
ffffffff80102533:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( maj == NULL ) 
ffffffff80102537:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8010253c:	75 19                	jne    ffffffff80102557 <_ZL17allocate_new_pagej+0x9f>
		{
			l_warningCount += 1;
ffffffff8010253e:	48 8b 05 fb 3a 01 00 	mov    0x13afb(%rip),%rax        # ffffffff80116040 <_ZL14l_warningCount>
ffffffff80102545:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102549:	48 89 05 f0 3a 01 00 	mov    %rax,0x13af0(%rip)        # ffffffff80116040 <_ZL14l_warningCount>
			#if defined DEBUG || defined INFO
			printf( "liballoc: WARNING: liballoc_alloc( %i ) return NULL\n", st );
			FLUSH();
			#endif
			return NULL;	// uh oh, we ran out of memory.
ffffffff80102550:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80102555:	eb 69                	jmp    ffffffff801025c0 <_ZL17allocate_new_pagej+0x108>
		}
		
		maj->prev 	= NULL;
ffffffff80102557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010255b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80102562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102566:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8010256d:	00 
		maj->pages 	= st;
ffffffff8010256e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102572:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80102575:	89 50 10             	mov    %edx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80102578:	8b 05 82 4a 00 00    	mov    0x4a82(%rip),%eax        # ffffffff80107000 <_ZL10l_pageSize>
ffffffff8010257e:	0f af 45 fc          	imul   -0x4(%rbp),%eax
ffffffff80102582:	89 c2                	mov    %eax,%edx
ffffffff80102584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102588:	89 50 14             	mov    %edx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff8010258b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010258f:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80102596:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010259a:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff801025a1:	00 

		l_allocated += maj->size;
ffffffff801025a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801025a6:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff801025a9:	89 c2                	mov    %eax,%edx
ffffffff801025ab:	48 8b 05 7e 3a 01 00 	mov    0x13a7e(%rip),%rax        # ffffffff80116030 <_ZL11l_allocated>
ffffffff801025b2:	48 01 d0             	add    %rdx,%rax
ffffffff801025b5:	48 89 05 74 3a 01 00 	mov    %rax,0x13a74(%rip)        # ffffffff80116030 <_ZL11l_allocated>
		printf( "liballoc: Total memory usage = %i KB\n",  (int)((l_allocated / (1024))) );
		FLUSH();
		#endif
	
		
      return maj;
ffffffff801025bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff801025c0:	c9                   	leaveq 
ffffffff801025c1:	c3                   	retq   

ffffffff801025c2 <malloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff801025c2:	f3 0f 1e fa          	endbr64 
ffffffff801025c6:	55                   	push   %rbp
ffffffff801025c7:	48 89 e5             	mov    %rsp,%rbp
ffffffff801025ca:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff801025ce:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
	int startedBet = 0;
ffffffff801025d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	unsigned long long bestSize = 0;
ffffffff801025d9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801025e0:	00 
	void *p = NULL;
ffffffff801025e1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff801025e8:	00 
	uintptr_t diff;
	struct liballoc_major *maj;
	struct liballoc_minor *min;
	struct liballoc_minor *new_min;
	unsigned long size = req_size;
ffffffff801025e9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801025ed:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

	// For alignment, we adjust size so there's enough space to align.
	if ( ALIGNMENT > 1 )
	{
		size += ALIGNMENT + ALIGN_INFO;
ffffffff801025f1:	48 83 45 b0 20       	addq   $0x20,-0x50(%rbp)
	}
				// So, ideally, we really want an alignment of 0 or 1 in order
				// to save space.
	
	liballoc_lock();
ffffffff801025f6:	e8 05 2b 00 00       	callq  ffffffff80105100 <liballoc_lock>

	if ( size == 0 )
ffffffff801025fb:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80102600:	75 26                	jne    ffffffff80102628 <malloc+0x66>
	{
		l_warningCount += 1;
ffffffff80102602:	48 8b 05 37 3a 01 00 	mov    0x13a37(%rip),%rax        # ffffffff80116040 <_ZL14l_warningCount>
ffffffff80102609:	48 83 c0 01          	add    $0x1,%rax
ffffffff8010260d:	48 89 05 2c 3a 01 00 	mov    %rax,0x13a2c(%rip)        # ffffffff80116040 <_ZL14l_warningCount>
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80102614:	e8 f3 2a 00 00       	callq  ffffffff8010510c <liballoc_unlock>
		return PREFIX(malloc)(1);
ffffffff80102619:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8010261e:	e8 9f ff ff ff       	callq  ffffffff801025c2 <malloc>
ffffffff80102623:	e9 0a 07 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>
	}
	

	if ( l_memRoot == NULL )
ffffffff80102628:	48 8b 05 f1 39 01 00 	mov    0x139f1(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff8010262f:	48 85 c0             	test   %rax,%rax
ffffffff80102632:	75 2d                	jne    ffffffff80102661 <malloc+0x9f>
		atexit( liballoc_dump );
		FLUSH();
		#endif
			
		// This is the first time we are being used.
		l_memRoot = allocate_new_page( size );
ffffffff80102634:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102638:	89 c7                	mov    %eax,%edi
ffffffff8010263a:	e8 79 fe ff ff       	callq  ffffffff801024b8 <_ZL17allocate_new_pagej>
ffffffff8010263f:	48 89 05 da 39 01 00 	mov    %rax,0x139da(%rip)        # ffffffff80116020 <_ZL9l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80102646:	48 8b 05 d3 39 01 00 	mov    0x139d3(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff8010264d:	48 85 c0             	test   %rax,%rax
ffffffff80102650:	75 0f                	jne    ffffffff80102661 <malloc+0x9f>
		{
		  liballoc_unlock();
ffffffff80102652:	e8 b5 2a 00 00       	callq  ffffffff8010510c <liballoc_unlock>
		  #ifdef DEBUG
		  printf( "liballoc: initial l_memRoot initialization failed\n", p); 
		  FLUSH();
		  #endif
		  return NULL;
ffffffff80102657:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8010265c:	e9 d1 06 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>
	FLUSH();
	#endif

	// Now we need to bounce through every major and find enough space....

	maj = l_memRoot;
ffffffff80102661:	48 8b 05 b8 39 01 00 	mov    0x139b8(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff80102668:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	startedBet = 0;
ffffffff8010266c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80102673:	48 8b 05 ae 39 01 00 	mov    0x139ae(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff8010267a:	48 85 c0             	test   %rax,%rax
ffffffff8010267d:	74 3e                	je     ffffffff801026bd <malloc+0xfb>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff8010267f:	48 8b 05 a2 39 01 00 	mov    0x139a2(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102686:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80102689:	48 8b 05 98 39 01 00 	mov    0x13998(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102690:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102693:	29 c2                	sub    %eax,%edx
ffffffff80102695:	89 d0                	mov    %edx,%eax
ffffffff80102697:	89 c0                	mov    %eax,%eax
ffffffff80102699:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff8010269d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801026a1:	48 83 c0 28          	add    $0x28,%rax
ffffffff801026a5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff801026a9:	76 12                	jbe    ffffffff801026bd <malloc+0xfb>
		{
			maj = l_bestBet;
ffffffff801026ab:	48 8b 05 76 39 01 00 	mov    0x13976(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff801026b2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			startedBet = 1;
ffffffff801026b6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
		}
	}
	
	while ( maj != NULL )
ffffffff801026bd:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff801026c2:	0f 84 60 06 00 00    	je     ffffffff80102d28 <malloc+0x766>
	{
		diff  = maj->size - maj->usage;	
ffffffff801026c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801026cc:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff801026cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801026d3:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801026d6:	29 c2                	sub    %eax,%edx
ffffffff801026d8:	89 d0                	mov    %edx,%eax
ffffffff801026da:	89 c0                	mov    %eax,%eax
ffffffff801026dc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
										// free memory in the block

		if ( bestSize < diff )
ffffffff801026e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801026e4:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff801026e8:	73 13                	jae    ffffffff801026fd <malloc+0x13b>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff801026ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801026ee:	48 89 05 33 39 01 00 	mov    %rax,0x13933(%rip)        # ffffffff80116028 <_ZL9l_bestBet>
			bestSize = diff;
ffffffff801026f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff801026f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff801026fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102701:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102705:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102709:	73 7a                	jae    ffffffff80102785 <malloc+0x1c3>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff8010270b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010270f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102713:	48 85 c0             	test   %rax,%rax
ffffffff80102716:	74 11                	je     ffffffff80102729 <malloc+0x167>
			{
				maj = maj->next;		// Hop to that one.
ffffffff80102718:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010271c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102720:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				continue;
ffffffff80102724:	e9 f6 05 00 00       	jmpq   ffffffff80102d1f <malloc+0x75d>
			}

			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80102729:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff8010272d:	75 17                	jne    ffffffff80102746 <malloc+0x184>
			{							// let's start all over again.
				maj = l_memRoot;
ffffffff8010272f:	48 8b 05 ea 38 01 00 	mov    0x138ea(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff80102736:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff8010273a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff80102741:	e9 d9 05 00 00       	jmpq   ffffffff80102d1f <malloc+0x75d>
			}

			// Create a new major block next to this one and...
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80102746:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8010274a:	89 c7                	mov    %eax,%edi
ffffffff8010274c:	e8 67 fd ff ff       	callq  ffffffff801024b8 <_ZL17allocate_new_pagej>
ffffffff80102751:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102755:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80102759:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010275d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102761:	48 85 c0             	test   %rax,%rax
ffffffff80102764:	0f 84 ba 05 00 00    	je     ffffffff80102d24 <malloc+0x762>
			maj->next->prev = maj;
ffffffff8010276a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010276e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102772:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102776:	48 89 10             	mov    %rdx,(%rax)
			maj = maj->next;
ffffffff80102779:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010277d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102781:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80102785:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102789:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010278d:	48 85 c0             	test   %rax,%rax
ffffffff80102790:	0f 85 04 01 00 00    	jne    ffffffff8010289a <malloc+0x2d8>
		{
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80102796:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010279a:	48 83 c0 28          	add    $0x28,%rax
ffffffff8010279e:	48 89 c2             	mov    %rax,%rdx
ffffffff801027a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027a5:	48 89 50 20          	mov    %rdx,0x20(%rax)

			
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff801027a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027ad:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027b1:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 		= NULL;
ffffffff801027b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027bc:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027c0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->next 		= NULL;
ffffffff801027c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027cb:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027cf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff801027d6:	00 
			maj->first->block 		= maj;
ffffffff801027d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027db:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027df:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff801027e3:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 		= size;
ffffffff801027e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027eb:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027ef:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff801027f3:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff801027f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801027fa:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801027fe:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80102802:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 	+= size + sizeof( struct liballoc_minor );
ffffffff80102805:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102809:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8010280c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102810:	01 d0                	add    %edx,%eax
ffffffff80102812:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102815:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102819:	89 50 18             	mov    %edx,0x18(%rax)


			l_inuse += size;
ffffffff8010281c:	48 8b 15 15 38 01 00 	mov    0x13815(%rip),%rdx        # ffffffff80116038 <_ZL7l_inuse>
ffffffff80102823:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102827:	48 01 d0             	add    %rdx,%rax
ffffffff8010282a:	48 89 05 07 38 01 00 	mov    %rax,0x13807(%rip)        # ffffffff80116038 <_ZL7l_inuse>
			
			
			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff80102831:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102835:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102839:	48 83 c0 28          	add    $0x28,%rax
ffffffff8010283d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

			ALIGN( p );
ffffffff80102841:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102845:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102849:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8010284d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102851:	83 e0 0f             	and    $0xf,%eax
ffffffff80102854:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80102858:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8010285d:	74 1c                	je     ffffffff8010287b <malloc+0x2b9>
ffffffff8010285f:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102864:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
ffffffff80102868:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8010286c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102870:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80102874:	48 01 d0             	add    %rdx,%rax
ffffffff80102877:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8010287b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010287f:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102886:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8010288a:	88 10                	mov    %dl,(%rax)
			
			#ifdef DEBUG
			printf( "CASE 2: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff8010288c:	e8 7b 28 00 00       	callq  ffffffff8010510c <liballoc_unlock>
			return p;
ffffffff80102891:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102895:	e9 98 04 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>
#endif
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
ffffffff8010289a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010289e:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801028a2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		diff -= (uintptr_t)maj;
ffffffff801028a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028aa:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
		diff -= sizeof(struct liballoc_major);
ffffffff801028ae:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff801028b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801028b7:	48 83 c0 28          	add    $0x28,%rax
ffffffff801028bb:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff801028bf:	0f 82 1e 01 00 00    	jb     ffffffff801029e3 <malloc+0x421>
		{
			// Yes, space in front. Squeeze in.
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff801028c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028c9:	48 8d 50 28          	lea    0x28(%rax),%rdx
ffffffff801028cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028d1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801028d5:	48 89 10             	mov    %rdx,(%rax)
			maj->first->prev->next = maj->first;
ffffffff801028d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028dc:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801028e0:	48 8b 00             	mov    (%rax),%rax
ffffffff801028e3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff801028e7:	48 8b 52 20          	mov    0x20(%rdx),%rdx
ffffffff801028eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
			maj->first = maj->first->prev;
ffffffff801028ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028f3:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801028f7:	48 8b 10             	mov    (%rax),%rdx
ffffffff801028fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801028fe:	48 89 50 20          	mov    %rdx,0x20(%rax)
				
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80102902:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102906:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8010290a:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
			maj->first->prev 	= NULL;
ffffffff80102911:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102915:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102919:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			maj->first->block 	= maj;
ffffffff80102920:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102924:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102928:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8010292c:	48 89 50 10          	mov    %rdx,0x10(%rax)
			maj->first->size 	= size;
ffffffff80102930:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102934:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102938:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8010293c:	89 50 1c             	mov    %edx,0x1c(%rax)
			maj->first->req_size 	= req_size;
ffffffff8010293f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102943:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102947:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8010294b:	89 50 20             	mov    %edx,0x20(%rax)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff8010294e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102952:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102955:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102959:	01 d0                	add    %edx,%eax
ffffffff8010295b:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff8010295e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102962:	89 50 18             	mov    %edx,0x18(%rax)

			l_inuse += size;
ffffffff80102965:	48 8b 15 cc 36 01 00 	mov    0x136cc(%rip),%rdx        # ffffffff80116038 <_ZL7l_inuse>
ffffffff8010296c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102970:	48 01 d0             	add    %rdx,%rax
ffffffff80102973:	48 89 05 be 36 01 00 	mov    %rax,0x136be(%rip)        # ffffffff80116038 <_ZL7l_inuse>

			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
ffffffff8010297a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010297e:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102982:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102986:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			ALIGN( p );
ffffffff8010298a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010298e:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102992:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102996:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010299a:	83 e0 0f             	and    $0xf,%eax
ffffffff8010299d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff801029a1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff801029a6:	74 1c                	je     ffffffff801029c4 <malloc+0x402>
ffffffff801029a8:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff801029ad:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
ffffffff801029b1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff801029b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801029b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801029bd:	48 01 d0             	add    %rdx,%rax
ffffffff801029c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801029c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801029c8:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff801029cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801029cf:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801029d3:	88 10                	mov    %dl,(%rax)

			#ifdef DEBUG
			printf( "CASE 3: returning %x\n", p); 
			FLUSH();
			#endif
			liballoc_unlock();		// release the lock
ffffffff801029d5:	e8 32 27 00 00       	callq  ffffffff8010510c <liballoc_unlock>
			return p;
ffffffff801029da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801029de:	e9 4f 03 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>


#ifdef USE_CASE4

		// CASE 4: There is enough space in this block. But is it contiguous?
		min = maj->first;
ffffffff801029e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801029e7:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff801029eb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		
			// Looping within the block now...
		while ( min != NULL )
ffffffff801029ef:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff801029f4:	0f 84 c3 02 00 00    	je     ffffffff80102cbd <malloc+0x6fb>
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff801029fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801029fe:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102a02:	48 85 c0             	test   %rax,%rax
ffffffff80102a05:	0f 85 48 01 00 00    	jne    ffffffff80102b53 <malloc+0x591>
				{
					// the rest of this block is free...  is it big enough?
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80102a0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a0f:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80102a12:	89 c2                	mov    %eax,%edx
ffffffff80102a14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102a18:	48 01 d0             	add    %rdx,%rax
ffffffff80102a1b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102a1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a23:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff80102a27:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size; 
ffffffff80102a2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a30:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102a33:	89 c0                	mov    %eax,%eax
ffffffff80102a35:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
						// minus already existing usage..

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80102a39:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102a3d:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102a41:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102a45:	0f 82 08 01 00 00    	jb     ffffffff80102b53 <malloc+0x591>
					{
						// yay....
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80102a4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a4f:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102a52:	89 c2                	mov    %eax,%edx
ffffffff80102a54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a58:	48 01 d0             	add    %rdx,%rax
ffffffff80102a5b:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102a5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80102a62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a66:	48 89 50 08          	mov    %rdx,0x8(%rax)
						min->next->prev = min;
ffffffff80102a6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a6e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102a72:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80102a76:	48 89 10             	mov    %rdx,(%rax)
						min = min->next;
ffffffff80102a79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a7d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102a81:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
						min->next = NULL;
ffffffff80102a85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a89:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80102a90:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80102a91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102a95:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						min->block = maj;
ffffffff80102a9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102aa0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102aa4:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->size = size;
ffffffff80102aa8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102aac:	89 c2                	mov    %eax,%edx
ffffffff80102aae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102ab2:	89 50 1c             	mov    %edx,0x1c(%rax)
						min->req_size = req_size;
ffffffff80102ab5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102ab9:	89 c2                	mov    %eax,%edx
ffffffff80102abb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102abf:	89 50 20             	mov    %edx,0x20(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80102ac2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ac6:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102ac9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102acd:	01 d0                	add    %edx,%eax
ffffffff80102acf:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102ad2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102ad6:	89 50 18             	mov    %edx,0x18(%rax)

						l_inuse += size;
ffffffff80102ad9:	48 8b 15 58 35 01 00 	mov    0x13558(%rip),%rdx        # ffffffff80116038 <_ZL7l_inuse>
ffffffff80102ae0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102ae4:	48 01 d0             	add    %rdx,%rax
ffffffff80102ae7:	48 89 05 4a 35 01 00 	mov    %rax,0x1354a(%rip)        # ffffffff80116038 <_ZL7l_inuse>
						
						p = (void*)((uintptr_t)min + sizeof( struct liballoc_minor ));
ffffffff80102aee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102af2:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102af6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102afa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102afe:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102b02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102b06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b0a:	83 e0 0f             	and    $0xf,%eax
ffffffff80102b0d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80102b11:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80102b16:	74 1c                	je     ffffffff80102b34 <malloc+0x572>
ffffffff80102b18:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102b1d:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
ffffffff80102b21:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80102b25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102b29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102b2d:	48 01 d0             	add    %rdx,%rax
ffffffff80102b30:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102b34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80102b38:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102b3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b3f:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102b43:	88 10                	mov    %dl,(%rax)

						#ifdef DEBUG
						printf( "CASE 4.1: returning %x\n", p); 
						FLUSH();
						#endif
						liballoc_unlock();		// release the lock
ffffffff80102b45:	e8 c2 25 00 00       	callq  ffffffff8010510c <liballoc_unlock>
						return p;
ffffffff80102b4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102b4e:	e9 df 01 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>
				}



				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
ffffffff80102b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102b57:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102b5b:	48 85 c0             	test   %rax,%rax
ffffffff80102b5e:	0f 84 48 01 00 00    	je     ffffffff80102cac <malloc+0x6ea>
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
ffffffff80102b64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102b68:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102b6c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
					diff -= (uintptr_t)min;
ffffffff80102b70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102b74:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
					diff -= sizeof( struct liballoc_minor );
ffffffff80102b78:	48 83 6d a8 28       	subq   $0x28,-0x58(%rbp)
					diff -= min->size;
ffffffff80102b7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102b81:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102b84:	89 c0                	mov    %eax,%eax
ffffffff80102b86:	48 29 45 a8          	sub    %rax,-0x58(%rbp)
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80102b8a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102b8e:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102b92:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80102b96:	0f 82 10 01 00 00    	jb     ffffffff80102cac <malloc+0x6ea>
					{
						// yay......
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80102b9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102ba0:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102ba3:	89 c2                	mov    %eax,%edx
ffffffff80102ba5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102ba9:	48 01 d0             	add    %rdx,%rax
ffffffff80102bac:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102bb0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

						new_min->magic = LIBALLOC_MAGIC;
ffffffff80102bb4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102bb8:	c7 40 18 de c0 01 c0 	movl   $0xc001c0de,0x18(%rax)
						new_min->next = min->next;
ffffffff80102bbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102bc3:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80102bc7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102bcb:	48 89 50 08          	mov    %rdx,0x8(%rax)
						new_min->prev = min;
ffffffff80102bcf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102bd3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80102bd7:	48 89 10             	mov    %rdx,(%rax)
						new_min->size = size;
ffffffff80102bda:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102bde:	89 c2                	mov    %eax,%edx
ffffffff80102be0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102be4:	89 50 1c             	mov    %edx,0x1c(%rax)
						new_min->req_size = req_size;
ffffffff80102be7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80102beb:	89 c2                	mov    %eax,%edx
ffffffff80102bed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102bf1:	89 50 20             	mov    %edx,0x20(%rax)
						new_min->block = maj;
ffffffff80102bf4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102bf8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102bfc:	48 89 50 10          	mov    %rdx,0x10(%rax)
						min->next->prev = new_min;
ffffffff80102c00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c04:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102c08:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102c0c:	48 89 10             	mov    %rdx,(%rax)
						min->next = new_min;
ffffffff80102c0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102c13:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80102c17:	48 89 50 08          	mov    %rdx,0x8(%rax)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80102c1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102c1f:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102c22:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80102c26:	01 d0                	add    %edx,%eax
ffffffff80102c28:	8d 50 28             	lea    0x28(%rax),%edx
ffffffff80102c2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102c2f:	89 50 18             	mov    %edx,0x18(%rax)
						
						l_inuse += size;
ffffffff80102c32:	48 8b 15 ff 33 01 00 	mov    0x133ff(%rip),%rdx        # ffffffff80116038 <_ZL7l_inuse>
ffffffff80102c39:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102c3d:	48 01 d0             	add    %rdx,%rax
ffffffff80102c40:	48 89 05 f1 33 01 00 	mov    %rax,0x133f1(%rip)        # ffffffff80116038 <_ZL7l_inuse>
						
						p = (void*)((uintptr_t)new_min + sizeof( struct liballoc_minor ));
ffffffff80102c47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80102c4b:	48 83 c0 28          	add    $0x28,%rax
ffffffff80102c4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
						ALIGN( p );
ffffffff80102c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102c57:	48 83 c0 10          	add    $0x10,%rax
ffffffff80102c5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102c5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102c63:	83 e0 0f             	and    $0xf,%eax
ffffffff80102c66:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102c6a:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80102c6f:	74 1c                	je     ffffffff80102c8d <malloc+0x6cb>
ffffffff80102c71:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80102c76:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
ffffffff80102c7a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80102c7e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102c82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102c86:	48 01 d0             	add    %rdx,%rax
ffffffff80102c89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80102c8d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80102c91:	8d 50 10             	lea    0x10(%rax),%edx
ffffffff80102c94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102c98:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102c9c:	88 10                	mov    %dl,(%rax)
						#ifdef DEBUG
						printf( "CASE 4.2: returning %x\n", p); 
						FLUSH();
						#endif
						
						liballoc_unlock();		// release the lock
ffffffff80102c9e:	e8 69 24 00 00       	callq  ffffffff8010510c <liballoc_unlock>
						return p;
ffffffff80102ca3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102ca7:	e9 86 00 00 00       	jmpq   ffffffff80102d32 <malloc+0x770>
					}
				}	// min->next != NULL

				min = min->next;
ffffffff80102cac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102cb0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102cb4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		while ( min != NULL )
ffffffff80102cb8:	e9 32 fd ff ff       	jmpq   ffffffff801029ef <malloc+0x42d>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80102cbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102cc1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102cc5:	48 85 c0             	test   %rax,%rax
ffffffff80102cc8:	75 49                	jne    ffffffff80102d13 <malloc+0x751>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80102cca:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff80102cce:	75 14                	jne    ffffffff80102ce4 <malloc+0x722>
			{
				maj = l_memRoot;
ffffffff80102cd0:	48 8b 05 49 33 01 00 	mov    0x13349(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff80102cd7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				startedBet = 0;
ffffffff80102cdb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
				continue;
ffffffff80102ce2:	eb 3b                	jmp    ffffffff80102d1f <malloc+0x75d>
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80102ce4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80102ce8:	89 c7                	mov    %eax,%edi
ffffffff80102cea:	e8 c9 f7 ff ff       	callq  ffffffff801024b8 <_ZL17allocate_new_pagej>
ffffffff80102cef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102cf3:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80102cf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102cfb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102cff:	48 85 c0             	test   %rax,%rax
ffffffff80102d02:	74 23                	je     ffffffff80102d27 <malloc+0x765>
			maj->next->prev = maj;
ffffffff80102d04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102d08:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102d0c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80102d10:	48 89 10             	mov    %rdx,(%rax)

		}

#endif

		maj = maj->next;
ffffffff80102d13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80102d17:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102d1b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while ( maj != NULL )
ffffffff80102d1f:	e9 99 f9 ff ff       	jmpq   ffffffff801026bd <malloc+0xfb>
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80102d24:	90                   	nop
ffffffff80102d25:	eb 01                	jmp    ffffffff80102d28 <malloc+0x766>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80102d27:	90                   	nop
	} // while (maj != NULL)


	
	liballoc_unlock();		// release the lock
ffffffff80102d28:	e8 df 23 00 00       	callq  ffffffff8010510c <liballoc_unlock>
	#if defined DEBUG || defined INFO
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
ffffffff80102d2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80102d32:	c9                   	leaveq 
ffffffff80102d33:	c3                   	retq   

ffffffff80102d34 <free>:




void PREFIX(free)(void *ptr)
{
ffffffff80102d34:	f3 0f 1e fa          	endbr64 
ffffffff80102d38:	55                   	push   %rbp
ffffffff80102d39:	48 89 e5             	mov    %rsp,%rbp
ffffffff80102d3c:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80102d40:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80102d44:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80102d49:	75 17                	jne    ffffffff80102d62 <free+0x2e>
	{
		l_warningCount += 1;
ffffffff80102d4b:	48 8b 05 ee 32 01 00 	mov    0x132ee(%rip),%rax        # ffffffff80116040 <_ZL14l_warningCount>
ffffffff80102d52:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102d56:	48 89 05 e3 32 01 00 	mov    %rax,0x132e3(%rip)        # ffffffff80116040 <_ZL14l_warningCount>
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		return;
ffffffff80102d5d:	e9 97 02 00 00       	jmpq   ffffffff80102ff9 <free+0x2c5>
	}

	UNALIGN( ptr );
ffffffff80102d62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d66:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80102d6a:	0f b6 00             	movzbl (%rax),%eax
ffffffff80102d6d:	48 0f be c0          	movsbq %al,%rax
ffffffff80102d71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80102d75:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
ffffffff80102d7a:	77 0c                	ja     ffffffff80102d88 <free+0x54>
ffffffff80102d7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d80:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff80102d84:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	liballoc_lock();		// lockit
ffffffff80102d88:	e8 73 23 00 00       	callq  ffffffff80105100 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80102d8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80102d91:	48 83 e8 28          	sub    $0x28,%rax
ffffffff80102d95:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80102d99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102d9d:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102da0:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80102da5:	0f 84 97 00 00 00    	je     ffffffff80102e42 <free+0x10e>
	{
		l_errorCount += 1;
ffffffff80102dab:	48 8b 05 96 32 01 00 	mov    0x13296(%rip),%rax        # ffffffff80116048 <_ZL12l_errorCount>
ffffffff80102db2:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102db6:	48 89 05 8b 32 01 00 	mov    %rax,0x1328b(%rip)        # ffffffff80116048 <_ZL12l_errorCount>

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80102dbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102dc1:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102dc4:	25 ff ff ff 00       	and    $0xffffff,%eax
		if ( 
ffffffff80102dc9:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80102dce:	74 22                	je     ffffffff80102df2 <free+0xbe>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80102dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102dd4:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102dd7:	0f b7 c0             	movzwl %ax,%eax
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80102dda:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff80102ddf:	74 11                	je     ffffffff80102df2 <free+0xbe>
			((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff80102de1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102de5:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102de8:	0f b6 c0             	movzbl %al,%eax
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80102deb:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff80102df0:	75 1e                	jne    ffffffff80102e10 <free+0xdc>
		   )
		{
			l_possibleOverruns += 1;
ffffffff80102df2:	48 8b 05 57 32 01 00 	mov    0x13257(%rip),%rax        # ffffffff80116050 <_ZL18l_possibleOverruns>
ffffffff80102df9:	48 83 c0 01          	add    $0x1,%rax
ffffffff80102dfd:	48 89 05 4c 32 01 00 	mov    %rax,0x1324c(%rip)        # ffffffff80116050 <_ZL18l_possibleOverruns>
            com_write_str( "liballoc: ERROR: Possible 1-3 byte overrun for magic ");
ffffffff80102e04:	48 c7 c7 88 60 10 80 	mov    $0xffffffff80106088,%rdi
ffffffff80102e0b:	e8 de 1d 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
			FLUSH();
			#endif
		}
						
						
		if ( min->magic == LIBALLOC_DEAD )
ffffffff80102e10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e14:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102e17:	3d ad de ad de       	cmp    $0xdeaddead,%eax
ffffffff80102e1c:	75 0e                	jne    ffffffff80102e2c <free+0xf8>
		{
            com_write_str( "liballoc: ERROR: multiple (free)() attempt ");
ffffffff80102e1e:	48 c7 c7 c0 60 10 80 	mov    $0xffffffff801060c0,%rdi
ffffffff80102e25:	e8 c4 1d 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
ffffffff80102e2a:	eb 0c                	jmp    ffffffff80102e38 <free+0x104>
			FLUSH();
			#endif
		}
		else
		{
            com_write_str( "liballoc: ERROR:bad free ");
ffffffff80102e2c:	48 c7 c7 ec 60 10 80 	mov    $0xffffffff801060ec,%rdi
ffffffff80102e33:	e8 b6 1d 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
			FLUSH();
			#endif
		}
			
		// being lied to...
		liballoc_unlock();		// release the lock
ffffffff80102e38:	e8 cf 22 00 00       	callq  ffffffff8010510c <liballoc_unlock>
		return;
ffffffff80102e3d:	e9 b7 01 00 00       	jmpq   ffffffff80102ff9 <free+0x2c5>
				ptr );
	FLUSH();
	#endif
	

		maj = min->block;
ffffffff80102e42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e46:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80102e4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		l_inuse -= min->size;
ffffffff80102e4e:	48 8b 15 e3 31 01 00 	mov    0x131e3(%rip),%rdx        # ffffffff80116038 <_ZL7l_inuse>
ffffffff80102e55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e59:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102e5c:	89 c0                	mov    %eax,%eax
ffffffff80102e5e:	48 29 c2             	sub    %rax,%rdx
ffffffff80102e61:	48 89 d0             	mov    %rdx,%rax
ffffffff80102e64:	48 89 05 cd 31 01 00 	mov    %rax,0x131cd(%rip)        # ffffffff80116038 <_ZL7l_inuse>

		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80102e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e6f:	8b 50 18             	mov    0x18(%rax),%edx
ffffffff80102e72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e76:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80102e79:	29 c2                	sub    %eax,%edx
ffffffff80102e7b:	89 d0                	mov    %edx,%eax
ffffffff80102e7d:	8d 50 d8             	lea    -0x28(%rax),%edx
ffffffff80102e80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102e84:	89 50 18             	mov    %edx,0x18(%rax)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80102e87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e8b:	c7 40 18 ad de ad de 	movl   $0xdeaddead,0x18(%rax)

		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80102e92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102e96:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102e9a:	48 85 c0             	test   %rax,%rax
ffffffff80102e9d:	74 12                	je     ffffffff80102eb1 <free+0x17d>
ffffffff80102e9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102ea3:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102ea7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80102eab:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80102eae:	48 89 10             	mov    %rdx,(%rax)
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80102eb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102eb5:	48 8b 00             	mov    (%rax),%rax
ffffffff80102eb8:	48 85 c0             	test   %rax,%rax
ffffffff80102ebb:	74 13                	je     ffffffff80102ed0 <free+0x19c>
ffffffff80102ebd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102ec1:	48 8b 00             	mov    (%rax),%rax
ffffffff80102ec4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80102ec8:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff80102ecc:	48 89 50 08          	mov    %rdx,0x8(%rax)

		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80102ed0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102ed4:	48 8b 00             	mov    (%rax),%rax
ffffffff80102ed7:	48 85 c0             	test   %rax,%rax
ffffffff80102eda:	75 10                	jne    ffffffff80102eec <free+0x1b8>
ffffffff80102edc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80102ee0:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80102ee4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102ee8:	48 89 50 20          	mov    %rdx,0x20(%rax)
							// minor.


	// We need to clean up after the majors now....

	if ( maj->first == NULL )	// Block completely unused.
ffffffff80102eec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102ef0:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80102ef4:	48 85 c0             	test   %rax,%rax
ffffffff80102ef7:	0f 85 a8 00 00 00    	jne    ffffffff80102fa5 <free+0x271>
	{
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80102efd:	48 8b 05 1c 31 01 00 	mov    0x1311c(%rip),%rax        # ffffffff80116020 <_ZL9l_memRoot>
ffffffff80102f04:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80102f08:	75 0f                	jne    ffffffff80102f19 <free+0x1e5>
ffffffff80102f0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f0e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102f12:	48 89 05 07 31 01 00 	mov    %rax,0x13107(%rip)        # ffffffff80116020 <_ZL9l_memRoot>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80102f19:	48 8b 05 08 31 01 00 	mov    0x13108(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102f20:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80102f24:	75 0b                	jne    ffffffff80102f31 <free+0x1fd>
ffffffff80102f26:	48 c7 05 f7 30 01 00 	movq   $0x0,0x130f7(%rip)        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102f2d:	00 00 00 00 
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80102f31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f35:	48 8b 00             	mov    (%rax),%rax
ffffffff80102f38:	48 85 c0             	test   %rax,%rax
ffffffff80102f3b:	74 13                	je     ffffffff80102f50 <free+0x21c>
ffffffff80102f3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f41:	48 8b 00             	mov    (%rax),%rax
ffffffff80102f44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102f48:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff80102f4c:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80102f50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f54:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102f58:	48 85 c0             	test   %rax,%rax
ffffffff80102f5b:	74 12                	je     ffffffff80102f6f <free+0x23b>
ffffffff80102f5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f61:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80102f65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80102f69:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80102f6c:	48 89 10             	mov    %rdx,(%rax)
		l_allocated -= maj->size;
ffffffff80102f6f:	48 8b 15 ba 30 01 00 	mov    0x130ba(%rip),%rdx        # ffffffff80116030 <_ZL11l_allocated>
ffffffff80102f76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f7a:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80102f7d:	89 c0                	mov    %eax,%eax
ffffffff80102f7f:	48 29 c2             	sub    %rax,%rdx
ffffffff80102f82:	48 89 d0             	mov    %rdx,%rax
ffffffff80102f85:	48 89 05 a4 30 01 00 	mov    %rax,0x130a4(%rip)        # ffffffff80116030 <_ZL11l_allocated>

		liballoc_free( maj, maj->pages );
ffffffff80102f8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f90:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80102f93:	89 c2                	mov    %eax,%edx
ffffffff80102f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102f99:	89 d6                	mov    %edx,%esi
ffffffff80102f9b:	48 89 c7             	mov    %rax,%rdi
ffffffff80102f9e:	e8 8b 21 00 00       	callq  ffffffff8010512e <liballoc_free>
ffffffff80102fa3:	eb 4f                	jmp    ffffffff80102ff4 <free+0x2c0>
	}
	else
	{
		if ( l_bestBet != NULL )
ffffffff80102fa5:	48 8b 05 7c 30 01 00 	mov    0x1307c(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102fac:	48 85 c0             	test   %rax,%rax
ffffffff80102faf:	74 43                	je     ffffffff80102ff4 <free+0x2c0>
		{
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80102fb1:	48 8b 05 70 30 01 00 	mov    0x13070(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102fb8:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80102fbb:	48 8b 05 66 30 01 00 	mov    0x13066(%rip),%rax        # ffffffff80116028 <_ZL9l_bestBet>
ffffffff80102fc2:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102fc5:	29 c2                	sub    %eax,%edx
ffffffff80102fc7:	89 d0                	mov    %edx,%eax
ffffffff80102fc9:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			int majSize = maj->size - maj->usage;
ffffffff80102fcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102fd0:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80102fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102fd7:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80102fda:	29 c2                	sub    %eax,%edx
ffffffff80102fdc:	89 d0                	mov    %edx,%eax
ffffffff80102fde:	89 45 e0             	mov    %eax,-0x20(%rbp)

			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff80102fe1:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80102fe4:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80102fe7:	7e 0b                	jle    ffffffff80102ff4 <free+0x2c0>
ffffffff80102fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80102fed:	48 89 05 34 30 01 00 	mov    %rax,0x13034(%rip)        # ffffffff80116028 <_ZL9l_bestBet>
	#ifdef DEBUG
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
ffffffff80102ff4:	e8 13 21 00 00       	callq  ffffffff8010510c <liballoc_unlock>
}
ffffffff80102ff9:	c9                   	leaveq 
ffffffff80102ffa:	c3                   	retq   

ffffffff80102ffb <calloc>:




void* PREFIX(calloc)(size_t nobj, size_t size)
{
ffffffff80102ffb:	f3 0f 1e fa          	endbr64 
ffffffff80102fff:	55                   	push   %rbp
ffffffff80103000:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103003:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80103007:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8010300b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff8010300f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103013:	89 c2                	mov    %eax,%edx
ffffffff80103015:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80103019:	0f af c2             	imul   %edx,%eax
ffffffff8010301c:	89 45 fc             	mov    %eax,-0x4(%rbp)
       
       p = PREFIX(malloc)( real_size );
ffffffff8010301f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103022:	48 98                	cltq   
ffffffff80103024:	48 89 c7             	mov    %rax,%rdi
ffffffff80103027:	e8 96 f5 ff ff       	callq  ffffffff801025c2 <malloc>
ffffffff8010302c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

       liballoc_memset( p, 0, real_size );
ffffffff80103030:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103033:	48 63 d0             	movslq %eax,%rdx
ffffffff80103036:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010303a:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8010303f:	48 89 c7             	mov    %rax,%rdi
ffffffff80103042:	e8 92 f3 ff ff       	callq  ffffffff801023d9 <_ZL15liballoc_memsetPvil>

       return p;
ffffffff80103047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff8010304b:	c9                   	leaveq 
ffffffff8010304c:	c3                   	retq   

ffffffff8010304d <realloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff8010304d:	f3 0f 1e fa          	endbr64 
ffffffff80103051:	55                   	push   %rbp
ffffffff80103052:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103055:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80103059:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8010305d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff80103061:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80103066:	75 16                	jne    ffffffff8010307e <realloc+0x31>
	{
		PREFIX(free)( p );
ffffffff80103068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010306c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010306f:	e8 c0 fc ff ff       	callq  ffffffff80102d34 <free>
		return NULL;
ffffffff80103074:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80103079:	e9 30 01 00 00       	jmpq   ffffffff801031ae <realloc+0x161>
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8010307e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80103083:	75 11                	jne    ffffffff80103096 <realloc+0x49>
ffffffff80103085:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103089:	48 89 c7             	mov    %rax,%rdi
ffffffff8010308c:	e8 31 f5 ff ff       	callq  ffffffff801025c2 <malloc>
ffffffff80103091:	e9 18 01 00 00       	jmpq   ffffffff801031ae <realloc+0x161>

	// Unalign the pointer if required.
	ptr = p;
ffffffff80103096:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010309a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	UNALIGN(ptr);
ffffffff8010309e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801030a2:	48 83 e8 10          	sub    $0x10,%rax
ffffffff801030a6:	0f b6 00             	movzbl (%rax),%eax
ffffffff801030a9:	48 0f be c0          	movsbq %al,%rax
ffffffff801030ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff801030b1:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
ffffffff801030b6:	77 0c                	ja     ffffffff801030c4 <realloc+0x77>
ffffffff801030b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801030bc:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff801030c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	liballoc_lock();		// lockit
ffffffff801030c4:	e8 37 20 00 00       	callq  ffffffff80105100 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff801030c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801030cd:	48 83 e8 28          	sub    $0x28,%rax
ffffffff801030d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff801030d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801030d9:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801030dc:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff801030e1:	74 65                	je     ffffffff80103148 <realloc+0xfb>
		{
			l_errorCount += 1;
ffffffff801030e3:	48 8b 05 5e 2f 01 00 	mov    0x12f5e(%rip),%rax        # ffffffff80116048 <_ZL12l_errorCount>
ffffffff801030ea:	48 83 c0 01          	add    $0x1,%rax
ffffffff801030ee:	48 89 05 53 2f 01 00 	mov    %rax,0x12f53(%rip)        # ffffffff80116048 <_ZL12l_errorCount>
	
			// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
			if ( 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff801030f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801030f9:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff801030fc:	25 ff ff ff 00       	and    $0xffffff,%eax
			if ( 
ffffffff80103101:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80103106:	74 22                	je     ffffffff8010312a <realloc+0xdd>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80103108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010310c:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8010310f:	0f b7 c0             	movzwl %ax,%eax
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80103112:	3d de c0 00 00       	cmp    $0xc0de,%eax
ffffffff80103117:	74 11                	je     ffffffff8010312a <realloc+0xdd>
				((min->magic & 0xFF) == (LIBALLOC_MAGIC & 0xFF)) 
ffffffff80103119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010311d:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80103120:	0f b6 c0             	movzbl %al,%eax
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80103123:	3d de 00 00 00       	cmp    $0xde,%eax
ffffffff80103128:	75 12                	jne    ffffffff8010313c <realloc+0xef>
			   )
			{
				l_possibleOverruns += 1;
ffffffff8010312a:	48 8b 05 1f 2f 01 00 	mov    0x12f1f(%rip),%rax        # ffffffff80116050 <_ZL18l_possibleOverruns>
ffffffff80103131:	48 83 c0 01          	add    $0x1,%rax
ffffffff80103135:	48 89 05 14 2f 01 00 	mov    %rax,0x12f14(%rip)        # ffffffff80116050 <_ZL18l_possibleOverruns>
				FLUSH();
				#endif
			}
			
			// being lied to...
			liballoc_unlock();		// release the lock
ffffffff8010313c:	e8 cb 1f 00 00       	callq  ffffffff8010510c <liballoc_unlock>
			return NULL;
ffffffff80103141:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80103146:	eb 66                	jmp    ffffffff801031ae <realloc+0x161>
		}	
		
		// Definitely a memory block.
		
		real_size = min->req_size;
ffffffff80103148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010314c:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8010314f:	89 45 e4             	mov    %eax,-0x1c(%rbp)

		if ( real_size >= size ) 
ffffffff80103152:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80103155:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80103159:	7f 18                	jg     ffffffff80103173 <realloc+0x126>
		{
			min->req_size = size;
ffffffff8010315b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010315f:	89 c2                	mov    %eax,%edx
ffffffff80103161:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103165:	89 50 20             	mov    %edx,0x20(%rax)
			liballoc_unlock();
ffffffff80103168:	e8 9f 1f 00 00       	callq  ffffffff8010510c <liballoc_unlock>
			return p;
ffffffff8010316d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103171:	eb 3b                	jmp    ffffffff801031ae <realloc+0x161>
		}

	liballoc_unlock();
ffffffff80103173:	e8 94 1f 00 00       	callq  ffffffff8010510c <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80103178:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8010317c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010317f:	e8 3e f4 ff ff       	callq  ffffffff801025c2 <malloc>
ffffffff80103184:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	liballoc_memcpy( ptr, p, real_size );
ffffffff80103188:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff8010318b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8010318f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103193:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103196:	48 89 c7             	mov    %rax,%rdi
ffffffff80103199:	e8 7d f2 ff ff       	callq  ffffffff8010241b <_ZL15liballoc_memcpyPvPKvl>
	PREFIX(free)( p );
ffffffff8010319e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801031a2:	48 89 c7             	mov    %rax,%rdi
ffffffff801031a5:	e8 8a fb ff ff       	callq  ffffffff80102d34 <free>

	return ptr;
ffffffff801031aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff801031ae:	c9                   	leaveq 
ffffffff801031af:	c3                   	retq   

ffffffff801031b0 <_Z8align_upmm>:
uint8_t temp_alloc_ptr[0x2000000]; // 33 megs of data so
uint32_t temp_alloc_current_cursor = 0;
bool paging_is_initialized;


 uint64_t align_up(uint64_t num, uint64_t multiple) {
ffffffff801031b0:	f3 0f 1e fa          	endbr64 
ffffffff801031b4:	55                   	push   %rbp
ffffffff801031b5:	48 89 e5             	mov    %rsp,%rbp
ffffffff801031b8:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff801031bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff801031c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return ((num + multiple - 1) / multiple) * multiple;
ffffffff801031c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff801031c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801031cc:	48 01 d0             	add    %rdx,%rax
ffffffff801031cf:	48 83 e8 01          	sub    $0x1,%rax
ffffffff801031d3:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801031d8:	48 f7 75 f0          	divq   -0x10(%rbp)
ffffffff801031dc:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
}
ffffffff801031e1:	c9                   	leaveq 
ffffffff801031e2:	c3                   	retq   

ffffffff801031e3 <_Z9frame_setm>:


void frame_set(uint64_t address){
ffffffff801031e3:	f3 0f 1e fa          	endbr64 
ffffffff801031e7:	55                   	push   %rbp
ffffffff801031e8:	48 89 e5             	mov    %rsp,%rbp
ffffffff801031eb:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff801031ef:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

    address     -= BITMAP_BASE;
ffffffff801031f3:	48 81 6d d8 00 10 00 	subq   $0x1000,-0x28(%rbp)
ffffffff801031fa:	00 
     uint64_t frame = address / PAGE_SIZE;
ffffffff801031fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801031ff:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103203:	48 89 45 f8          	mov    %rax,-0x8(%rbp)


     uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80103207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010320b:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff8010320f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     uint64_t offset = OFFSET_FROM_BIT(frame);
ffffffff80103213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103217:	83 e0 1f             	and    $0x1f,%eax
ffffffff8010321a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     frames[idx] |= (0x1 << offset) ;
ffffffff8010321e:	48 8b 05 eb 3d 01 00 	mov    0x13deb(%rip),%rax        # ffffffff80117010 <frames>
ffffffff80103225:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80103229:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff8010322d:	48 01 d0             	add    %rdx,%rax
ffffffff80103230:	8b 10                	mov    (%rax),%edx
ffffffff80103232:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103236:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010323b:	89 c1                	mov    %eax,%ecx
ffffffff8010323d:	d3 e6                	shl    %cl,%esi
ffffffff8010323f:	89 f0                	mov    %esi,%eax
ffffffff80103241:	89 c6                	mov    %eax,%esi
ffffffff80103243:	48 8b 05 c6 3d 01 00 	mov    0x13dc6(%rip),%rax        # ffffffff80117010 <frames>
ffffffff8010324a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8010324e:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80103252:	48 01 c8             	add    %rcx,%rax
ffffffff80103255:	09 f2                	or     %esi,%edx
ffffffff80103257:	89 10                	mov    %edx,(%rax)
}
ffffffff80103259:	90                   	nop
ffffffff8010325a:	c9                   	leaveq 
ffffffff8010325b:	c3                   	retq   

ffffffff8010325c <_Z14test_frame_bitm>:

int test_frame_bit(uint64_t offset){
ffffffff8010325c:	f3 0f 1e fa          	endbr64 
ffffffff80103260:	55                   	push   %rbp
ffffffff80103261:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103264:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80103268:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int ret = -1;
ffffffff8010326c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    asm volatile (
        "bt [%1], %2;"
        : "=@ccc" (ret)
        : "r" (frames), "r" (offset)
        : "memory"
    );
ffffffff80103273:	48 8b 05 96 3d 01 00 	mov    0x13d96(%rip),%rax        # ffffffff80117010 <frames>
ffffffff8010327a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8010327e:	48 0f a3 10          	bt     %rdx,(%rax)
ffffffff80103282:	0f 92 c0             	setb   %al
ffffffff80103285:	0f b6 c0             	movzbl %al,%eax
ffffffff80103288:	89 45 fc             	mov    %eax,-0x4(%rbp)
   return ret;
ffffffff8010328b:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
ffffffff8010328e:	c9                   	leaveq 
ffffffff8010328f:	c3                   	retq   

ffffffff80103290 <_Z13set_frame_bitm>:
int set_frame_bit(uint64_t offset){
ffffffff80103290:	f3 0f 1e fa          	endbr64 
ffffffff80103294:	55                   	push   %rbp
ffffffff80103295:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103298:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8010329c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    int ret = -1;
ffffffff801032a0:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    asm volatile (
        "bts [%1], %2;"
        : "=@ccc" (ret)
        : "r" (frames), "r" (offset)
        : "memory"
    );
ffffffff801032a7:	48 8b 05 62 3d 01 00 	mov    0x13d62(%rip),%rax        # ffffffff80117010 <frames>
ffffffff801032ae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801032b2:	48 0f ab 10          	bts    %rdx,(%rax)
ffffffff801032b6:	0f 92 c0             	setb   %al
ffffffff801032b9:	0f b6 c0             	movzbl %al,%eax
ffffffff801032bc:	89 45 fc             	mov    %eax,-0x4(%rbp)
   return ret;
ffffffff801032bf:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
ffffffff801032c2:	c9                   	leaveq 
ffffffff801032c3:	c3                   	retq   

ffffffff801032c4 <_Z15reset_frame_bitm>:
int reset_frame_bit(uint64_t offset){
ffffffff801032c4:	f3 0f 1e fa          	endbr64 
ffffffff801032c8:	55                   	push   %rbp
ffffffff801032c9:	48 89 e5             	mov    %rsp,%rbp
ffffffff801032cc:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff801032d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int d = 0;
ffffffff801032d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    asm volatile (
        "btr [%1], %2;"
        :"=@ccc"(d)
        : "r" (frames), "r" (offset)
        : "memory"
    );
ffffffff801032db:	48 8b 05 2e 3d 01 00 	mov    0x13d2e(%rip),%rax        # ffffffff80117010 <frames>
ffffffff801032e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801032e6:	48 0f b3 10          	btr    %rdx,(%rax)
ffffffff801032ea:	0f 92 c0             	setb   %al
ffffffff801032ed:	0f b6 c0             	movzbl %al,%eax
ffffffff801032f0:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return 0;
ffffffff801032f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff801032f8:	c9                   	leaveq 
ffffffff801032f9:	c3                   	retq   

ffffffff801032fa <_Z8pmm_freePvm>:
    size_t f = i + count;
    for (size_t j = i; j < f; j++)
        reset_frame_bit( j);
}

void pmm_free(void *ptr, uint64_t pg_count) {
ffffffff801032fa:	f3 0f 1e fa          	endbr64 
ffffffff801032fe:	55                   	push   %rbp
ffffffff801032ff:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103302:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80103306:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8010330a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)

    uint64_t start = (uint64_t)ptr / PAGE_SIZE;
ffffffff8010330e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80103312:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103316:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8010331a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010331e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80103322:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103326:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    i -= BITMAP_BASE;
ffffffff8010332a:	48 81 6d f0 00 10 00 	subq   $0x1000,-0x10(%rbp)
ffffffff80103331:	00 
    size_t f = i + count;
ffffffff80103332:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80103336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010333a:	48 01 d0             	add    %rdx,%rax
ffffffff8010333d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80103341:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103345:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80103349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8010334d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80103351:	7e 13                	jle    ffffffff80103366 <_Z8pmm_freePvm+0x6c>
        reset_frame_bit( j);
ffffffff80103353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103357:	48 89 c7             	mov    %rax,%rdi
ffffffff8010335a:	e8 65 ff ff ff       	callq  ffffffff801032c4 <_Z15reset_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff8010335f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80103364:	eb e3                	jmp    ffffffff80103349 <_Z8pmm_freePvm+0x4f>
}
ffffffff80103366:	90                   	nop

    unset_frame_region(start, pg_count);

}
ffffffff80103367:	90                   	nop
ffffffff80103368:	c9                   	leaveq 
ffffffff80103369:	c3                   	retq   

ffffffff8010336a <_Z12get_mem_addrm>:
uint64_t get_mem_addr(uint64_t addr){
ffffffff8010336a:	f3 0f 1e fa          	endbr64 
ffffffff8010336e:	55                   	push   %rbp
ffffffff8010336f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103372:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80103376:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr + 0xffff800000000000;
ffffffff8010337a:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80103381:	80 ff ff 
ffffffff80103384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103388:	48 01 d0             	add    %rdx,%rax
}uint64_t get_rmem_addr(uint64_t addr){
ffffffff8010338b:	c9                   	leaveq 
ffffffff8010338c:	c3                   	retq   

ffffffff8010338d <_Z13get_rmem_addrm>:
ffffffff8010338d:	f3 0f 1e fa          	endbr64 
ffffffff80103391:	55                   	push   %rbp
ffffffff80103392:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103395:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80103399:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr - 0xffff800000000000;
ffffffff8010339d:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff801033a4:	80 00 00 
ffffffff801033a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801033ab:	48 01 d0             	add    %rdx,%rax
}
ffffffff801033ae:	c9                   	leaveq 
ffffffff801033af:	c3                   	retq   

ffffffff801033b0 <_Z13get_kern_addrm>:
uint64_t get_kern_addr(uint64_t addr){
ffffffff801033b0:	f3 0f 1e fa          	endbr64 
ffffffff801033b4:	55                   	push   %rbp
ffffffff801033b5:	48 89 e5             	mov    %rsp,%rbp
ffffffff801033b8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801033bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr + 0xffffffff80000000;
ffffffff801033c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801033c4:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
}uint64_t get_rkern_addr(uint64_t addr){
ffffffff801033ca:	c9                   	leaveq 
ffffffff801033cb:	c3                   	retq   

ffffffff801033cc <_Z14get_rkern_addrm>:
ffffffff801033cc:	f3 0f 1e fa          	endbr64 
ffffffff801033d0:	55                   	push   %rbp
ffffffff801033d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff801033d4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801033d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return addr - 0xffffffff80000000;
ffffffff801033dc:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff801033e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801033e5:	48 01 d0             	add    %rdx,%rax
}
ffffffff801033e8:	c9                   	leaveq 
ffffffff801033e9:	c3                   	retq   

ffffffff801033ea <_Z11frame_clearm>:
#define PAGE_FRAME 0xFFFFFFFFFF000

void frame_clear(uint64_t address){
ffffffff801033ea:	f3 0f 1e fa          	endbr64 
ffffffff801033ee:	55                   	push   %rbp
ffffffff801033ef:	48 89 e5             	mov    %rsp,%rbp
ffffffff801033f2:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff801033f6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

     uint64_t frame = address / PAGE_SIZE;
ffffffff801033fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801033fe:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103402:	48 89 45 f8          	mov    %rax,-0x8(%rbp)


     uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80103406:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010340a:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff8010340e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     uint64_t offset = OFFSET_FROM_BIT(frame);
ffffffff80103412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103416:	83 e0 1f             	and    $0x1f,%eax
ffffffff80103419:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     frames[idx] &= ~(0x1 << offset) ;
ffffffff8010341d:	48 8b 05 ec 3b 01 00 	mov    0x13bec(%rip),%rax        # ffffffff80117010 <frames>
ffffffff80103424:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80103428:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff8010342c:	48 01 d0             	add    %rdx,%rax
ffffffff8010342f:	8b 10                	mov    (%rax),%edx
ffffffff80103431:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103435:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010343a:	89 c1                	mov    %eax,%ecx
ffffffff8010343c:	d3 e6                	shl    %cl,%esi
ffffffff8010343e:	89 f0                	mov    %esi,%eax
ffffffff80103440:	f7 d0                	not    %eax
ffffffff80103442:	89 c6                	mov    %eax,%esi
ffffffff80103444:	48 8b 05 c5 3b 01 00 	mov    0x13bc5(%rip),%rax        # ffffffff80117010 <frames>
ffffffff8010344b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8010344f:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80103453:	48 01 c8             	add    %rcx,%rax
ffffffff80103456:	21 f2                	and    %esi,%edx
ffffffff80103458:	89 10                	mov    %edx,(%rax)
}
ffffffff8010345a:	90                   	nop
ffffffff8010345b:	c9                   	leaveq 
ffffffff8010345c:	c3                   	retq   

ffffffff8010345d <_Z14mmu_frame_testm>:


uint64_t mmu_frame_test(uint64_t frame_addr) {
ffffffff8010345d:	f3 0f 1e fa          	endbr64 
ffffffff80103461:	55                   	push   %rbp
ffffffff80103462:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103465:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80103469:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint64_t frame = frame_addr / PAGE_SIZE;
ffffffff8010346d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103471:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103475:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  uint64_t idx = INDEX_FROM_BIT(frame);
ffffffff80103479:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010347d:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80103481:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  uint64_t off = OFFSET_FROM_BIT(frame);
ffffffff80103485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103489:	83 e0 1f             	and    $0x1f,%eax
ffffffff8010348c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  return (frames[idx] & (0x1 << off));
ffffffff80103490:	48 8b 05 79 3b 01 00 	mov    0x13b79(%rip),%rax        # ffffffff80117010 <frames>
ffffffff80103497:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8010349b:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff8010349f:	48 01 d0             	add    %rdx,%rax
ffffffff801034a2:	8b 00                	mov    (%rax),%eax
ffffffff801034a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801034a8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff801034ad:	89 d1                	mov    %edx,%ecx
ffffffff801034af:	d3 e6                	shl    %cl,%esi
ffffffff801034b1:	89 f2                	mov    %esi,%edx
ffffffff801034b3:	21 d0                	and    %edx,%eax
ffffffff801034b5:	89 c0                	mov    %eax,%eax
}
ffffffff801034b7:	c9                   	leaveq 
ffffffff801034b8:	c3                   	retq   

ffffffff801034b9 <_Z10init_framemP14stivale_struct>:
uint32_t very_initial_frame_table[] = {0xffffff7f};
uint32_t* temp_frame_table;
void init_frame(uint64_t lenght, stivale_struct* sti_struct){
ffffffff801034b9:	f3 0f 1e fa          	endbr64 
ffffffff801034bd:	55                   	push   %rbp
ffffffff801034be:	48 89 e5             	mov    %rsp,%rbp
ffffffff801034c1:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
ffffffff801034c8:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff801034cf:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
    com_write_str("loading initial frame table");
ffffffff801034d6:	48 c7 c7 08 61 10 80 	mov    $0xffffffff80106108,%rdi
ffffffff801034dd:	e8 0c 17 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    frames_counter = 32;
ffffffff801034e2:	48 c7 05 1b 3b 00 00 	movq   $0x20,0x3b1b(%rip)        # ffffffff80107008 <frames_counter>
ffffffff801034e9:	20 00 00 00 
    frames = very_initial_frame_table;
ffffffff801034ed:	48 c7 05 18 3b 01 00 	movq   $0xffffffff80107010,0x13b18(%rip)        # ffffffff80117010 <frames>
ffffffff801034f4:	10 70 10 80 
    temp_frame_table = (uint32_t*)alloc_multiple_frame_zero(1);
ffffffff801034f8:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801034fd:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80103502:	e8 b0 06 00 00       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff80103507:	48 89 05 3a 3b 01 02 	mov    %rax,0x2013b3a(%rip)        # ffffffff82117048 <temp_frame_table>
    temp_frame_table = (uint32_t *)(get_mem_addr((uint64_t)temp_frame_table));
ffffffff8010350e:	48 8b 05 33 3b 01 02 	mov    0x2013b33(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff80103515:	48 89 c7             	mov    %rax,%rdi
ffffffff80103518:	e8 4d fe ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff8010351d:	48 89 05 24 3b 01 02 	mov    %rax,0x2013b24(%rip)        # ffffffff82117048 <temp_frame_table>
    for (uint64_t i = 0; i < ( PAGE_SIZE) / sizeof(uint32_t); i++){
ffffffff80103524:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8010352b:	00 
ffffffff8010352c:	48 81 7d f8 ff 03 00 	cmpq   $0x3ff,-0x8(%rbp)
ffffffff80103533:	00 
ffffffff80103534:	77 1f                	ja     ffffffff80103555 <_Z10init_framemP14stivale_struct+0x9c>
           temp_frame_table[i] = 0xffffffff;
ffffffff80103536:	48 8b 05 0b 3b 01 02 	mov    0x2013b0b(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff8010353d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80103541:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff80103545:	48 01 d0             	add    %rdx,%rax
ffffffff80103548:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
    for (uint64_t i = 0; i < ( PAGE_SIZE) / sizeof(uint32_t); i++){
ffffffff8010354e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80103553:	eb d7                	jmp    ffffffff8010352c <_Z10init_framemP14stivale_struct+0x73>
     }
           frames = temp_frame_table;
ffffffff80103555:	48 8b 05 ec 3a 01 02 	mov    0x2013aec(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff8010355c:	48 89 05 ad 3a 01 00 	mov    %rax,0x13aad(%rip)        # ffffffff80117010 <frames>

     frames_counter = ((PAGE_SIZE / sizeof(uint32_t)) * 32);
ffffffff80103563:	48 c7 05 9a 3a 00 00 	movq   $0x8000,0x3a9a(%rip)        # ffffffff80107008 <frames_counter>
ffffffff8010356a:	00 80 00 00 

     e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff8010356e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80103575:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103579:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
     for(size_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff8010357d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80103584:	00 
ffffffff80103585:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff8010358c:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80103590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103594:	48 39 c2             	cmp    %rax,%rdx
ffffffff80103597:	0f 86 d8 02 00 00    	jbe    ffffffff80103875 <_Z10init_framemP14stivale_struct+0x3bc>

         e820_entry_t *entry = &mementry[i];
ffffffff8010359d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801035a1:	48 89 d0             	mov    %rdx,%rax
ffffffff801035a4:	48 01 c0             	add    %rax,%rax
ffffffff801035a7:	48 01 d0             	add    %rdx,%rax
ffffffff801035aa:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801035ae:	48 89 c2             	mov    %rax,%rdx
ffffffff801035b1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff801035b5:	48 01 d0             	add    %rdx,%rax
ffffffff801035b8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

         uint64_t aligned_base;
         if (entry->base % PAGE_SIZE){
ffffffff801035bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801035c0:	48 8b 00             	mov    (%rax),%rax
ffffffff801035c3:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff801035c8:	48 85 c0             	test   %rax,%rax
ffffffff801035cb:	74 19                	je     ffffffff801035e6 <_Z10init_framemP14stivale_struct+0x12d>
                aligned_base = entry->base + (PAGE_SIZE - (entry->base % PAGE_SIZE));
ffffffff801035cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801035d1:	48 8b 00             	mov    (%rax),%rax
ffffffff801035d4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff801035da:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff801035e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff801035e4:	eb 0b                	jmp    ffffffff801035f1 <_Z10init_framemP14stivale_struct+0x138>
         }else{
                aligned_base = entry->base;
ffffffff801035e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801035ea:	48 8b 00             	mov    (%rax),%rax
ffffffff801035ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
         }

         size_t aligned_length = (entry->length / PAGE_SIZE) * PAGE_SIZE;
ffffffff801035f1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801035f5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff801035f9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff801035ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
         if ((entry->base % PAGE_SIZE) && aligned_length){
ffffffff80103603:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80103607:	48 8b 00             	mov    (%rax),%rax
ffffffff8010360a:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff8010360f:	48 85 c0             	test   %rax,%rax
ffffffff80103612:	74 0f                	je     ffffffff80103623 <_Z10init_framemP14stivale_struct+0x16a>
ffffffff80103614:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80103619:	74 08                	je     ffffffff80103623 <_Z10init_framemP14stivale_struct+0x16a>
                     aligned_length -= PAGE_SIZE;
ffffffff8010361b:	48 81 6d e0 00 10 00 	subq   $0x1000,-0x20(%rbp)
ffffffff80103622:	00 
         }


         for (size_t j = 0; j * PAGE_SIZE < aligned_length; j++) {
ffffffff80103623:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8010362a:	00 
ffffffff8010362b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8010362f:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103633:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80103637:	0f 8e 2e 02 00 00    	jle    ffffffff8010386b <_Z10init_framemP14stivale_struct+0x3b2>
             uint64_t addr = aligned_base + j * PAGE_SIZE;
ffffffff8010363d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103641:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103645:	48 89 c2             	mov    %rax,%rdx
ffffffff80103648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010364c:	48 01 d0             	add    %rdx,%rax
ffffffff8010364f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
             size_t page = addr / PAGE_SIZE;
ffffffff80103653:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103657:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff8010365b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
             if (addr < (MEMORY_BASE + PAGE_SIZE /* bitmap */))
ffffffff8010365f:	48 81 7d b0 ff 0f 00 	cmpq   $0x1000fff,-0x50(%rbp)
ffffffff80103666:	01 
ffffffff80103667:	0f 86 f0 01 00 00    	jbe    ffffffff8010385d <_Z10init_framemP14stivale_struct+0x3a4>
                             continue;
             if (addr >= (MEMORY_BASE + frames_counter * PAGE_SIZE)) {
ffffffff8010366d:	48 8b 05 94 39 00 00 	mov    0x3994(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff80103674:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8010367a:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010367e:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
ffffffff80103682:	0f 82 6b 01 00 00    	jb     ffffffff801037f3 <_Z10init_framemP14stivale_struct+0x33a>

                 com_write_str("realocatte bitmap");
ffffffff80103688:	48 c7 c7 24 61 10 80 	mov    $0xffffffff80106124,%rdi
ffffffff8010368f:	e8 5a 15 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
                             /* Reallocate bitmap */
                             size_t cur_bitmap_size_in_pages = ((frames_counter / 32) * sizeof(uint32_t)) / PAGE_SIZE;
ffffffff80103694:	48 8b 05 6d 39 00 00 	mov    0x396d(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff8010369b:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff8010369f:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff801036a3:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff801036a7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
                             size_t new_bitmap_size_in_pages = cur_bitmap_size_in_pages + 1;
ffffffff801036ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff801036af:	48 83 c0 01          	add    $0x1,%rax
ffffffff801036b3:	48 89 45 98          	mov    %rax,-0x68(%rbp)

                             com_write_str("realocatte bitmap 1");
ffffffff801036b7:	48 c7 c7 36 61 10 80 	mov    $0xffffffff80106136,%rdi
ffffffff801036be:	e8 2b 15 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
                             temp_frame_table = (uint32_t*)alloc_multiple_frame_zero(new_bitmap_size_in_pages);
ffffffff801036c3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801036c7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801036cc:	48 89 c7             	mov    %rax,%rdi
ffffffff801036cf:	e8 e3 04 00 00       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff801036d4:	48 89 05 6d 39 01 02 	mov    %rax,0x201396d(%rip)        # ffffffff82117048 <temp_frame_table>

                             temp_frame_table = (uint32_t *)(get_mem_addr((uint64_t)temp_frame_table));
ffffffff801036db:	48 8b 05 66 39 01 02 	mov    0x2013966(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff801036e2:	48 89 c7             	mov    %rax,%rdi
ffffffff801036e5:	e8 80 fc ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff801036ea:	48 89 05 57 39 01 02 	mov    %rax,0x2013957(%rip)        # ffffffff82117048 <temp_frame_table>
                             /* Copy over previous bitmap */

                             com_write_str("realocatte bitmap 2");
ffffffff801036f1:	48 c7 c7 4a 61 10 80 	mov    $0xffffffff8010614a,%rdi
ffffffff801036f8:	e8 f1 14 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
                             for (uint64_t i = 0;
ffffffff801036fd:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80103704:	00 
                                  i < (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80103705:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80103709:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010370d:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80103711:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80103715:	73 2f                	jae    ffffffff80103746 <_Z10init_framemP14stivale_struct+0x28d>
                                  i++){
                                 temp_frame_table[i] = frames[i];
ffffffff80103717:	48 8b 05 f2 38 01 00 	mov    0x138f2(%rip),%rax        # ffffffff80117010 <frames>
ffffffff8010371e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80103722:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff80103726:	48 01 d0             	add    %rdx,%rax
ffffffff80103729:	48 8b 15 18 39 01 02 	mov    0x2013918(%rip),%rdx        # ffffffff82117048 <temp_frame_table>
ffffffff80103730:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80103734:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80103738:	48 01 ca             	add    %rcx,%rdx
ffffffff8010373b:	8b 00                	mov    (%rax),%eax
ffffffff8010373d:	89 02                	mov    %eax,(%rdx)
                             for (uint64_t i = 0;
ffffffff8010373f:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
ffffffff80103744:	eb bf                	jmp    ffffffff80103705 <_Z10init_framemP14stivale_struct+0x24c>
                             }
                                 /* Fill in the rest */
                             for (uint64_t i = (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80103746:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8010374a:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010374e:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80103752:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
                                  i < (new_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80103756:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8010375a:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010375e:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80103762:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80103766:	73 1f                	jae    ffffffff80103787 <_Z10init_framemP14stivale_struct+0x2ce>
                                  i++){
                                 temp_frame_table[i] = 0xffffffff;
ffffffff80103768:	48 8b 05 d9 38 01 02 	mov    0x20138d9(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff8010376f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80103773:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff80103777:	48 01 d0             	add    %rdx,%rax
ffffffff8010377a:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
                             for (uint64_t i = (cur_bitmap_size_in_pages * PAGE_SIZE) / sizeof(uint32_t);
ffffffff80103780:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
ffffffff80103785:	eb cf                	jmp    ffffffff80103756 <_Z10init_framemP14stivale_struct+0x29d>
                             }
                             com_write_str("realocatte bitmap 3");
ffffffff80103787:	48 c7 c7 5e 61 10 80 	mov    $0xffffffff8010615e,%rdi
ffffffff8010378e:	e8 5b 14 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
                             frames_counter += ((PAGE_SIZE / sizeof(uint32_t)) * 32) * 1;
ffffffff80103793:	48 8b 05 6e 38 00 00 	mov    0x386e(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff8010379a:	48 05 00 80 00 00    	add    $0x8000,%rax
ffffffff801037a0:	48 89 05 61 38 00 00 	mov    %rax,0x3861(%rip)        # ffffffff80107008 <frames_counter>
                             uint32_t *old_bitmap = (uint32_t *)(get_rmem_addr((uint64_t)frames));
ffffffff801037a7:	48 8b 05 62 38 01 00 	mov    0x13862(%rip),%rax        # ffffffff80117010 <frames>
ffffffff801037ae:	48 89 c7             	mov    %rax,%rdi
ffffffff801037b1:	e8 d7 fb ff ff       	callq  ffffffff8010338d <_Z13get_rmem_addrm>
ffffffff801037b6:	48 89 45 90          	mov    %rax,-0x70(%rbp)
                             frames = temp_frame_table;
ffffffff801037ba:	48 8b 05 87 38 01 02 	mov    0x2013887(%rip),%rax        # ffffffff82117048 <temp_frame_table>
ffffffff801037c1:	48 89 05 48 38 01 00 	mov    %rax,0x13848(%rip)        # ffffffff80117010 <frames>
                             com_write_str("realocatte bitmap 3.5");
ffffffff801037c8:	48 c7 c7 72 61 10 80 	mov    $0xffffffff80106172,%rdi
ffffffff801037cf:	e8 1a 14 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
                             pmm_free((old_bitmap), cur_bitmap_size_in_pages);
ffffffff801037d4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff801037d8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff801037dc:	48 89 d6             	mov    %rdx,%rsi
ffffffff801037df:	48 89 c7             	mov    %rax,%rdi
ffffffff801037e2:	e8 13 fb ff ff       	callq  ffffffff801032fa <_Z8pmm_freePvm>
                             com_write_str("realocatte bitmap 4");
ffffffff801037e7:	48 c7 c7 88 61 10 80 	mov    $0xffffffff80106188,%rdi
ffffffff801037ee:	e8 fb 13 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
              }

                if (entry->type == MEMMAP_USABLE) {
ffffffff801037f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801037f7:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff801037fa:	83 f8 01             	cmp    $0x1,%eax
ffffffff801037fd:	75 62                	jne    ffffffff80103861 <_Z10init_framemP14stivale_struct+0x3a8>

                             unset_frame_region(page , 1);
ffffffff801037ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103803:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80103807:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
ffffffff8010380e:	00 
    i -= BITMAP_BASE;
ffffffff8010380f:	48 81 6d 88 00 10 00 	subq   $0x1000,-0x78(%rbp)
ffffffff80103816:	00 
    size_t f = i + count;
ffffffff80103817:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8010381b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8010381f:	48 01 d0             	add    %rdx,%rax
ffffffff80103822:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80103829:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8010382d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80103834:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff8010383b:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
ffffffff80103842:	7e 1c                	jle    ffffffff80103860 <_Z10init_framemP14stivale_struct+0x3a7>
        reset_frame_bit( j);
ffffffff80103844:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff8010384b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010384e:	e8 71 fa ff ff       	callq  ffffffff801032c4 <_Z15reset_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff80103853:	48 83 85 70 ff ff ff 	addq   $0x1,-0x90(%rbp)
ffffffff8010385a:	01 
ffffffff8010385b:	eb d7                	jmp    ffffffff80103834 <_Z10init_framemP14stivale_struct+0x37b>
                             continue;
ffffffff8010385d:	90                   	nop
ffffffff8010385e:	eb 01                	jmp    ffffffff80103861 <_Z10init_framemP14stivale_struct+0x3a8>
}
ffffffff80103860:	90                   	nop
         for (size_t j = 0; j * PAGE_SIZE < aligned_length; j++) {
ffffffff80103861:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80103866:	e9 c0 fd ff ff       	jmpq   ffffffff8010362b <_Z10init_framemP14stivale_struct+0x172>
     for(size_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff8010386b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80103870:	e9 10 fd ff ff       	jmpq   ffffffff80103585 <_Z10init_framemP14stivale_struct+0xcc>



            }
     }
    com_write_str("loading frame : OK");
ffffffff80103875:	48 c7 c7 9c 61 10 80 	mov    $0xffffffff8010619c,%rdi
ffffffff8010387c:	e8 6d 13 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
}
ffffffff80103881:	90                   	nop
ffffffff80103882:	c9                   	leaveq 
ffffffff80103883:	c3                   	retq   

ffffffff80103884 <_Z16frame_find_firstv>:


uint64_t frame_find_first() {
ffffffff80103884:	f3 0f 1e fa          	endbr64 
ffffffff80103888:	55                   	push   %rbp
ffffffff80103889:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010388c:	48 83 ec 20          	sub    $0x20,%rsp
  uint64_t i, j;
  for (i = 0; i < frames_counter; i++)
ffffffff80103890:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80103897:	00 
ffffffff80103898:	48 8b 05 69 37 00 00 	mov    0x3769(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff8010389f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff801038a3:	73 7a                	jae    ffffffff8010391f <_Z16frame_find_firstv+0x9b>
  {
    if (frames[i] != 0xFFFFFFFF) // nothing free, exit early.
ffffffff801038a5:	48 8b 05 64 37 01 00 	mov    0x13764(%rip),%rax        # ffffffff80117010 <frames>
ffffffff801038ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff801038b0:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff801038b4:	48 01 d0             	add    %rdx,%rax
ffffffff801038b7:	8b 00                	mov    (%rax),%eax
ffffffff801038b9:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff801038bc:	74 57                	je     ffffffff80103915 <_Z16frame_find_firstv+0x91>
    {
      // at least one bit is free here.
      for (j = 0; j < 32; j++) {
ffffffff801038be:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801038c5:	00 
ffffffff801038c6:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
ffffffff801038cb:	77 48                	ja     ffffffff80103915 <_Z16frame_find_firstv+0x91>
        uint32_t toTest = 0x1 << j;
ffffffff801038cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801038d1:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff801038d6:	89 c1                	mov    %eax,%ecx
ffffffff801038d8:	d3 e2                	shl    %cl,%edx
ffffffff801038da:	89 d0                	mov    %edx,%eax
ffffffff801038dc:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (!(frames[i] & toTest)) {
ffffffff801038df:	48 8b 05 2a 37 01 00 	mov    0x1372a(%rip),%rax        # ffffffff80117010 <frames>
ffffffff801038e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff801038ea:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff801038ee:	48 01 d0             	add    %rdx,%rax
ffffffff801038f1:	8b 00                	mov    (%rax),%eax
ffffffff801038f3:	23 45 ec             	and    -0x14(%rbp),%eax
ffffffff801038f6:	85 c0                	test   %eax,%eax
ffffffff801038f8:	75 14                	jne    ffffffff8010390e <_Z16frame_find_firstv+0x8a>
          return i*4*8+j;
ffffffff801038fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801038fe:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff80103902:	48 89 c2             	mov    %rax,%rdx
ffffffff80103905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103909:	48 01 d0             	add    %rdx,%rax
ffffffff8010390c:	eb 16                	jmp    ffffffff80103924 <_Z16frame_find_firstv+0xa0>
      for (j = 0; j < 32; j++) {
ffffffff8010390e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80103913:	eb b1                	jmp    ffffffff801038c6 <_Z16frame_find_firstv+0x42>
  for (i = 0; i < frames_counter; i++)
ffffffff80103915:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8010391a:	e9 79 ff ff ff       	jmpq   ffffffff80103898 <_Z16frame_find_firstv+0x14>
        }
      }
    }
  }
  return 0;
ffffffff8010391f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80103924:	c9                   	leaveq 
ffffffff80103925:	c3                   	retq   

ffffffff80103926 <_Z10free_framem>:


void free_frame(uint64_t ptr) {
ffffffff80103926:	f3 0f 1e fa          	endbr64 
ffffffff8010392a:	55                   	push   %rbp
ffffffff8010392b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010392e:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80103932:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  frame_clear(ptr);
ffffffff80103936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8010393a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010393d:	e8 a8 fa ff ff       	callq  ffffffff801033ea <_Z11frame_clearm>
}
ffffffff80103942:	90                   	nop
ffffffff80103943:	c9                   	leaveq 
ffffffff80103944:	c3                   	retq   

ffffffff80103945 <_Z11alloc_framev>:

void* alloc_frame() {
ffffffff80103945:	f3 0f 1e fa          	endbr64 
ffffffff80103949:	55                   	push   %rbp
ffffffff8010394a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010394d:	48 83 ec 10          	sub    $0x10,%rsp
  uint64_t frame = frame_find_first();
ffffffff80103951:	e8 2e ff ff ff       	callq  ffffffff80103884 <_Z16frame_find_firstv>
ffffffff80103956:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  if (frame == 0) {
ffffffff8010395a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8010395f:	75 13                	jne    ffffffff80103974 <_Z11alloc_framev+0x2f>
    com_write_str("error not enought frame :^(");
ffffffff80103961:	48 c7 c7 af 61 10 80 	mov    $0xffffffff801061af,%rdi
ffffffff80103968:	e8 81 12 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    return 0x0; // never reached
ffffffff8010396d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80103972:	eb 18                	jmp    ffffffff8010398c <_Z11alloc_framev+0x47>
  }
  frame_set(frame * PAGE_SIZE);
ffffffff80103974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103978:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8010397c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010397f:	e8 5f f8 ff ff       	callq  ffffffff801031e3 <_Z9frame_setm>
  return (void*)(frame * PAGE_SIZE);
ffffffff80103984:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103988:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff8010398c:	c9                   	leaveq 
ffffffff8010398d:	c3                   	retq   

ffffffff8010398e <_Z20alloc_multiple_framemb>:
void* alloc_multiple_frame(uint64_t count,  bool use_fast ){
ffffffff8010398e:	f3 0f 1e fa          	endbr64 
ffffffff80103992:	55                   	push   %rbp
ffffffff80103993:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103996:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8010399a:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
ffffffff8010399e:	89 f0                	mov    %esi,%eax
ffffffff801039a0:	88 45 94             	mov    %al,-0x6c(%rbp)
    if (use_fast){
ffffffff801039a3:	80 7d 94 00          	cmpb   $0x0,-0x6c(%rbp)
ffffffff801039a7:	0f 84 28 01 00 00    	je     ffffffff80103ad5 <_Z20alloc_multiple_framemb+0x147>
        if(frame_cursor_pos == 0){
ffffffff801039ad:	48 8b 05 74 36 01 00 	mov    0x13674(%rip),%rax        # ffffffff80117028 <frame_cursor_pos>
ffffffff801039b4:	48 85 c0             	test   %rax,%rax
ffffffff801039b7:	75 0b                	jne    ffffffff801039c4 <_Z20alloc_multiple_framemb+0x36>
            frame_cursor_pos = BITMAP_BASE;
ffffffff801039b9:	48 c7 05 64 36 01 00 	movq   $0x1000,0x13664(%rip)        # ffffffff80117028 <frame_cursor_pos>
ffffffff801039c0:	00 10 00 00 
        }
        size_t pg_cnt = count;
ffffffff801039c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff801039c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        uint64_t i = 0;
ffffffff801039cc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff801039d3:	00 
         for( i = 0; i < frames_counter;){
ffffffff801039d4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff801039db:	00 
ffffffff801039dc:	48 8b 05 25 36 00 00 	mov    0x3625(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff801039e3:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff801039e7:	0f 83 dc 00 00 00    	jae    ffffffff80103ac9 <_Z20alloc_multiple_framemb+0x13b>
             if (frame_cursor_pos == BITMAP_BASE + frames_counter) {
ffffffff801039ed:	48 8b 05 14 36 00 00 	mov    0x3614(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff801039f4:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
ffffffff801039fb:	48 8b 05 26 36 01 00 	mov    0x13626(%rip),%rax        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103a02:	48 39 c2             	cmp    %rax,%rdx
ffffffff80103a05:	75 13                	jne    ffffffff80103a1a <_Z20alloc_multiple_framemb+0x8c>
                       frame_cursor_pos = BITMAP_BASE;
ffffffff80103a07:	48 c7 05 16 36 01 00 	movq   $0x1000,0x13616(%rip)        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103a0e:	00 10 00 00 
                       pg_cnt = count;
ffffffff80103a12:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103a16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                   }


            if (!test_frame_bit(( frame_cursor_pos++) - BITMAP_BASE)){
ffffffff80103a1a:	48 8b 05 07 36 01 00 	mov    0x13607(%rip),%rax        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103a21:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80103a25:	48 89 15 fc 35 01 00 	mov    %rdx,0x135fc(%rip)        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103a2c:	48 2d 00 10 00 00    	sub    $0x1000,%rax
ffffffff80103a32:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a35:	e8 22 f8 ff ff       	callq  ffffffff8010325c <_Z14test_frame_bitm>
ffffffff80103a3a:	85 c0                	test   %eax,%eax
ffffffff80103a3c:	0f 94 c0             	sete   %al
ffffffff80103a3f:	84 c0                	test   %al,%al
ffffffff80103a41:	74 79                	je     ffffffff80103abc <_Z20alloc_multiple_framemb+0x12e>
                if (!--pg_cnt){
ffffffff80103a43:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80103a48:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80103a4d:	0f 94 c0             	sete   %al
ffffffff80103a50:	84 c0                	test   %al,%al
ffffffff80103a52:	74 88                	je     ffffffff801039dc <_Z20alloc_multiple_framemb+0x4e>
                    set_frame_region(frame_cursor_pos - count, count);
ffffffff80103a54:	48 8b 05 cd 35 01 00 	mov    0x135cd(%rip),%rax        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103a5b:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff80103a5f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80103a63:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103a67:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      i -= BITMAP_BASE;
ffffffff80103a6b:	48 81 6d d8 00 10 00 	subq   $0x1000,-0x28(%rbp)
ffffffff80103a72:	00 
    size_t f = i + count;
ffffffff80103a73:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80103a77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103a7b:	48 01 d0             	add    %rdx,%rax
ffffffff80103a7e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80103a82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103a86:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80103a8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80103a8e:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80103a92:	7e 13                	jle    ffffffff80103aa7 <_Z20alloc_multiple_framemb+0x119>
        set_frame_bit( j);
ffffffff80103a94:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103a98:	48 89 c7             	mov    %rax,%rdi
ffffffff80103a9b:	e8 f0 f7 ff ff       	callq  ffffffff80103290 <_Z13set_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff80103aa0:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff80103aa5:	eb e3                	jmp    ffffffff80103a8a <_Z20alloc_multiple_framemb+0xfc>
}
ffffffff80103aa7:	90                   	nop
                    return (void*)((frame_cursor_pos - count)*PAGE_SIZE);
ffffffff80103aa8:	48 8b 05 79 35 01 00 	mov    0x13579(%rip),%rax        # ffffffff80117028 <frame_cursor_pos>
ffffffff80103aaf:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff80103ab3:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103ab7:	e9 f9 00 00 00       	jmpq   ffffffff80103bb5 <_Z20alloc_multiple_framemb+0x227>
                }
            }else{
                pg_cnt = count;
ffffffff80103abc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103ac0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
         for( i = 0; i < frames_counter;){
ffffffff80103ac4:	e9 13 ff ff ff       	jmpq   ffffffff801039dc <_Z20alloc_multiple_framemb+0x4e>
            }
         }

         com_write_str("error kernel doesn't have that much memory (fast)");
ffffffff80103ac9:	48 c7 c7 d0 61 10 80 	mov    $0xffffffff801061d0,%rdi
ffffffff80103ad0:	e8 19 11 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    }
    size_t pg_cnt = count;
ffffffff80103ad5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103ad9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    uint64_t i = BITMAP_BASE;
ffffffff80103add:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
ffffffff80103ae4:	00 
     for( i = BITMAP_BASE; i < BITMAP_BASE+frames_counter;){
ffffffff80103ae5:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
ffffffff80103aec:	00 
ffffffff80103aed:	48 8b 05 14 35 00 00 	mov    0x3514(%rip),%rax        # ffffffff80107008 <frames_counter>
ffffffff80103af4:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80103afa:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80103afe:	0f 83 a0 00 00 00    	jae    ffffffff80103ba4 <_Z20alloc_multiple_framemb+0x216>
        if (!test_frame_bit((  i++) - BITMAP_BASE)){
ffffffff80103b04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103b08:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80103b0c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80103b10:	48 2d 00 10 00 00    	sub    $0x1000,%rax
ffffffff80103b16:	48 89 c7             	mov    %rax,%rdi
ffffffff80103b19:	e8 3e f7 ff ff       	callq  ffffffff8010325c <_Z14test_frame_bitm>
ffffffff80103b1e:	85 c0                	test   %eax,%eax
ffffffff80103b20:	0f 94 c0             	sete   %al
ffffffff80103b23:	84 c0                	test   %al,%al
ffffffff80103b25:	74 70                	je     ffffffff80103b97 <_Z20alloc_multiple_framemb+0x209>
            if (!--pg_cnt){
ffffffff80103b27:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
ffffffff80103b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80103b31:	0f 94 c0             	sete   %al
ffffffff80103b34:	84 c0                	test   %al,%al
ffffffff80103b36:	74 b5                	je     ffffffff80103aed <_Z20alloc_multiple_framemb+0x15f>
                set_frame_region(i - count, count);
ffffffff80103b38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103b3c:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff80103b40:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80103b44:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103b48:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      i -= BITMAP_BASE;
ffffffff80103b4c:	48 81 6d b8 00 10 00 	subq   $0x1000,-0x48(%rbp)
ffffffff80103b53:	00 
    size_t f = i + count;
ffffffff80103b54:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80103b58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80103b5c:	48 01 d0             	add    %rdx,%rax
ffffffff80103b5f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    for (size_t j = i; j < f; j++)
ffffffff80103b63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80103b67:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80103b6b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103b6f:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff80103b73:	7e 13                	jle    ffffffff80103b88 <_Z20alloc_multiple_framemb+0x1fa>
        set_frame_bit( j);
ffffffff80103b75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80103b79:	48 89 c7             	mov    %rax,%rdi
ffffffff80103b7c:	e8 0f f7 ff ff       	callq  ffffffff80103290 <_Z13set_frame_bitm>
    for (size_t j = i; j < f; j++)
ffffffff80103b81:	48 83 45 a0 01       	addq   $0x1,-0x60(%rbp)
ffffffff80103b86:	eb e3                	jmp    ffffffff80103b6b <_Z20alloc_multiple_framemb+0x1dd>
}
ffffffff80103b88:	90                   	nop
                return (void*)((i - count)*PAGE_SIZE);
ffffffff80103b89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103b8d:	48 2b 45 98          	sub    -0x68(%rbp),%rax
ffffffff80103b91:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103b95:	eb 1e                	jmp    ffffffff80103bb5 <_Z20alloc_multiple_framemb+0x227>
            }
        }else{
            pg_cnt = count;
ffffffff80103b97:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103b9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
     for( i = BITMAP_BASE; i < BITMAP_BASE+frames_counter;){
ffffffff80103b9f:	e9 49 ff ff ff       	jmpq   ffffffff80103aed <_Z20alloc_multiple_framemb+0x15f>
        }
     }

    com_write_str("error kernel doesn't have that much memory (no frame)");
ffffffff80103ba4:	48 c7 c7 08 62 10 80 	mov    $0xffffffff80106208,%rdi
ffffffff80103bab:	e8 3e 10 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    return 0x0;
ffffffff80103bb0:	b8 00 00 00 00       	mov    $0x0,%eax

}
ffffffff80103bb5:	c9                   	leaveq 
ffffffff80103bb6:	c3                   	retq   

ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>:
void* alloc_multiple_frame_zero(uint64_t count, bool use_fast ){
ffffffff80103bb7:	f3 0f 1e fa          	endbr64 
ffffffff80103bbb:	55                   	push   %rbp
ffffffff80103bbc:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103bbf:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80103bc3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80103bc7:	89 f0                	mov    %esi,%eax
ffffffff80103bc9:	88 45 d4             	mov    %al,-0x2c(%rbp)
    void* d = alloc_multiple_frame(count,use_fast);
ffffffff80103bcc:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
ffffffff80103bd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103bd4:	89 d6                	mov    %edx,%esi
ffffffff80103bd6:	48 89 c7             	mov    %rax,%rdi
ffffffff80103bd9:	e8 b0 fd ff ff       	callq  ffffffff8010398e <_Z20alloc_multiple_framemb>
ffffffff80103bde:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    uint64_t* pages = ((uint64_t*)(get_mem_addr((uint64_t)d)));
ffffffff80103be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103be6:	48 89 c7             	mov    %rax,%rdi
ffffffff80103be9:	e8 7c f7 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80103bee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(uint64_t i = 0; i < (count * PAGE_SIZE) / sizeof (uint64_t); i++){
ffffffff80103bf2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80103bf9:	00 
ffffffff80103bfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103bfe:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103c02:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80103c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80103c0a:	73 21                	jae    ffffffff80103c2d <_Z25alloc_multiple_frame_zeromb+0x76>

        pages[i] = 0;
ffffffff80103c0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103c10:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80103c17:	00 
ffffffff80103c18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80103c1c:	48 01 d0             	add    %rdx,%rax
ffffffff80103c1f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(uint64_t i = 0; i < (count * PAGE_SIZE) / sizeof (uint64_t); i++){
ffffffff80103c26:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80103c2b:	eb cd                	jmp    ffffffff80103bfa <_Z25alloc_multiple_frame_zeromb+0x43>
    }
    return d;
ffffffff80103c2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff80103c31:	c9                   	leaveq 
ffffffff80103c32:	c3                   	retq   

ffffffff80103c33 <_Z11init_pagingP14stivale_struct>:
   *page |= flags;

}


void init_paging( stivale_struct* sti_struct){
ffffffff80103c33:	f3 0f 1e fa          	endbr64 
ffffffff80103c37:	55                   	push   %rbp
ffffffff80103c38:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103c3b:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80103c3f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)

    com_write_str("loading paging 1");
ffffffff80103c43:	48 c7 c7 3e 62 10 80 	mov    $0xffffffff8010623e,%rdi
ffffffff80103c4a:	e8 9f 0f 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    pl4_table = (uint64_t*) (get_mem_addr((uint64_t)alloc_multiple_frame_zero(1)));
ffffffff80103c4f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80103c54:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80103c59:	e8 59 ff ff ff       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff80103c5e:	48 89 c7             	mov    %rax,%rdi
ffffffff80103c61:	e8 04 f7 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80103c66:	48 89 05 93 43 01 02 	mov    %rax,0x2014393(%rip)        # ffffffff82118000 <_ZL9pl4_table>
    for (uint64_t i = 0; i < (0x2000000 / PAGE_SIZE); i++) {
ffffffff80103c6d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80103c74:	00 
ffffffff80103c75:	48 81 7d f8 ff 1f 00 	cmpq   $0x1fff,-0x8(%rbp)
ffffffff80103c7c:	00 
ffffffff80103c7d:	77 71                	ja     ffffffff80103cf0 <_Z11init_pagingP14stivale_struct+0xbd>
         uint64_t addr = i * PAGE_SIZE;
ffffffff80103c7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80103c83:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103c87:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
         virt_map( addr, addr, 0x03);
ffffffff80103c8b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80103c8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103c93:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103c98:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103c9b:	48 89 c7             	mov    %rax,%rdi
ffffffff80103c9e:	e8 2d 05 00 00       	callq  ffffffff801041d0 <_Z8virt_mapmmm>
         virt_map( addr,get_mem_addr(   addr), 0x03);
ffffffff80103ca3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103ca7:	48 89 c7             	mov    %rax,%rdi
ffffffff80103caa:	e8 bb f6 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80103caf:	48 89 c1             	mov    %rax,%rcx
ffffffff80103cb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103cb6:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103cbb:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103cbe:	48 89 c7             	mov    %rax,%rdi
ffffffff80103cc1:	e8 0a 05 00 00       	callq  ffffffff801041d0 <_Z8virt_mapmmm>
         virt_map( addr,get_kern_addr( addr), 0x03 | (1 << 8));
ffffffff80103cc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103cca:	48 89 c7             	mov    %rax,%rdi
ffffffff80103ccd:	e8 de f6 ff ff       	callq  ffffffff801033b0 <_Z13get_kern_addrm>
ffffffff80103cd2:	48 89 c1             	mov    %rax,%rcx
ffffffff80103cd5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80103cd9:	ba 03 01 00 00       	mov    $0x103,%edx
ffffffff80103cde:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103ce1:	48 89 c7             	mov    %rax,%rdi
ffffffff80103ce4:	e8 e7 04 00 00       	callq  ffffffff801041d0 <_Z8virt_mapmmm>
    for (uint64_t i = 0; i < (0x2000000 / PAGE_SIZE); i++) {
ffffffff80103ce9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80103cee:	eb 85                	jmp    ffffffff80103c75 <_Z11init_pagingP14stivale_struct+0x42>
     }

    com_write_str("loading paging 2");
ffffffff80103cf0:	48 c7 c7 4f 62 10 80 	mov    $0xffffffff8010624f,%rdi
ffffffff80103cf7:	e8 f2 0e 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    set_paging_dir(get_rmem_addr((uint64_t)pl4_table));
ffffffff80103cfc:	48 8b 05 fd 42 01 02 	mov    0x20142fd(%rip),%rax        # ffffffff82118000 <_ZL9pl4_table>
ffffffff80103d03:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d06:	e8 82 f6 ff ff       	callq  ffffffff8010338d <_Z13get_rmem_addrm>
ffffffff80103d0b:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d0e:	e8 d3 13 00 00       	callq  ffffffff801050e6 <_Z14set_paging_dirm>

    uint64_t framebuffer_lenght =sti_struct->framebuffer_width * sti_struct->framebuffer_height * sti_struct->framebuffer_bpp;
ffffffff80103d13:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103d17:	0f b7 40 22          	movzwl 0x22(%rax),%eax
ffffffff80103d1b:	0f b7 d0             	movzwl %ax,%edx
ffffffff80103d1e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103d22:	0f b7 40 24          	movzwl 0x24(%rax),%eax
ffffffff80103d26:	0f b7 c0             	movzwl %ax,%eax
ffffffff80103d29:	0f af d0             	imul   %eax,%edx
ffffffff80103d2c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103d30:	0f b7 40 26          	movzwl 0x26(%rax),%eax
ffffffff80103d34:	0f b7 c0             	movzwl %ax,%eax
ffffffff80103d37:	0f af c2             	imul   %edx,%eax
ffffffff80103d3a:	48 98                	cltq   
ffffffff80103d3c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (uint64_t i = (sti_struct->framebuffer_addr)  / PAGE_SIZE; i < ((framebuffer_lenght + sti_struct->framebuffer_addr) / PAGE_SIZE) + 1; i++) {
ffffffff80103d40:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103d44:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80103d48:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103d4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80103d50:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103d54:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80103d58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80103d5c:	48 01 d0             	add    %rdx,%rax
ffffffff80103d5f:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80103d63:	48 83 c0 01          	add    $0x1,%rax
ffffffff80103d67:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80103d6b:	73 36                	jae    ffffffff80103da3 <_Z11init_pagingP14stivale_struct+0x170>
        uint64_t addr = i * PAGE_SIZE;
ffffffff80103d6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103d71:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103d75:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

        virt_map( addr,get_mem_addr(   addr), 0x03);
ffffffff80103d79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103d7d:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d80:	e8 e5 f5 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80103d85:	48 89 c1             	mov    %rax,%rcx
ffffffff80103d88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80103d8c:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103d91:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103d94:	48 89 c7             	mov    %rax,%rdi
ffffffff80103d97:	e8 34 04 00 00       	callq  ffffffff801041d0 <_Z8virt_mapmmm>
    for (uint64_t i = (sti_struct->framebuffer_addr)  / PAGE_SIZE; i < ((framebuffer_lenght + sti_struct->framebuffer_addr) / PAGE_SIZE) + 1; i++) {
ffffffff80103d9c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80103da1:	eb ad                	jmp    ffffffff80103d50 <_Z11init_pagingP14stivale_struct+0x11d>

    }
    com_write_str("loading paging 3");
ffffffff80103da3:	48 c7 c7 60 62 10 80 	mov    $0xffffffff80106260,%rdi
ffffffff80103daa:	e8 3f 0e 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80103daf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103db3:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103db7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    for(uint64_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80103dbb:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80103dc2:	00 
ffffffff80103dc3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80103dc7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103dcb:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80103dcf:	0f 83 d0 00 00 00    	jae    ffffffff80103ea5 <_Z11init_pagingP14stivale_struct+0x272>

        e820_entry_t *entry = &mementry[i];
ffffffff80103dd5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80103dd9:	48 89 d0             	mov    %rdx,%rax
ffffffff80103ddc:	48 01 c0             	add    %rax,%rax
ffffffff80103ddf:	48 01 d0             	add    %rdx,%rax
ffffffff80103de2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103de6:	48 89 c2             	mov    %rax,%rdx
ffffffff80103de9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80103ded:	48 01 d0             	add    %rdx,%rax
ffffffff80103df0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        uint64_t base_aligned = entry->base - (entry->base % 4096);
ffffffff80103df4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103df8:	48 8b 00             	mov    (%rax),%rax
ffffffff80103dfb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80103e01:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        uint64_t lenght_aligned = align_up(entry->length, 4096);
ffffffff80103e05:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103e09:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103e0d:	be 00 10 00 00       	mov    $0x1000,%esi
ffffffff80103e12:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e15:	e8 96 f3 ff ff       	callq  ffffffff801031b0 <_Z8align_upmm>
ffffffff80103e1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

        if (entry->base % PAGE_SIZE)
ffffffff80103e1e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80103e22:	48 8b 00             	mov    (%rax),%rax
ffffffff80103e25:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80103e2a:	48 85 c0             	test   %rax,%rax
ffffffff80103e2d:	74 08                	je     ffffffff80103e37 <_Z11init_pagingP14stivale_struct+0x204>
            lenght_aligned += PAGE_SIZE;
ffffffff80103e2f:	48 81 45 e0 00 10 00 	addq   $0x1000,-0x20(%rbp)
ffffffff80103e36:	00 

        for (size_t j = 0; j * PAGE_SIZE < lenght_aligned; j++) {
ffffffff80103e37:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80103e3e:	00 
ffffffff80103e3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103e43:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103e47:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80103e4b:	76 4e                	jbe    ffffffff80103e9b <_Z11init_pagingP14stivale_struct+0x268>
                size_t addr = base_aligned + j * PAGE_SIZE;
ffffffff80103e4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80103e51:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80103e55:	48 89 c2             	mov    %rax,%rdx
ffffffff80103e58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103e5c:	48 01 d0             	add    %rdx,%rax
ffffffff80103e5f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

                   /* Skip over first 4 GiB */
                if (addr < 0xffffffff)
ffffffff80103e63:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
ffffffff80103e68:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
ffffffff80103e6c:	7e 25                	jle    ffffffff80103e93 <_Z11init_pagingP14stivale_struct+0x260>
                       continue;

                virt_map( addr, get_mem_addr(  addr), 0x03);
ffffffff80103e6e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80103e72:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e75:	e8 f0 f4 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80103e7a:	48 89 c1             	mov    %rax,%rcx
ffffffff80103e7d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80103e81:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80103e86:	48 89 ce             	mov    %rcx,%rsi
ffffffff80103e89:	48 89 c7             	mov    %rax,%rdi
ffffffff80103e8c:	e8 3f 03 00 00       	callq  ffffffff801041d0 <_Z8virt_mapmmm>
ffffffff80103e91:	eb 01                	jmp    ffffffff80103e94 <_Z11init_pagingP14stivale_struct+0x261>
                       continue;
ffffffff80103e93:	90                   	nop
        for (size_t j = 0; j * PAGE_SIZE < lenght_aligned; j++) {
ffffffff80103e94:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80103e99:	eb a4                	jmp    ffffffff80103e3f <_Z11init_pagingP14stivale_struct+0x20c>
    for(uint64_t i = 0; i < sti_struct->memory_map_entries; i ++){
ffffffff80103e9b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80103ea0:	e9 1e ff ff ff       	jmpq   ffffffff80103dc3 <_Z11init_pagingP14stivale_struct+0x190>
        }

    }
    set_paging_dir((uint64_t)pl4_table);
ffffffff80103ea5:	48 8b 05 54 41 01 02 	mov    0x2014154(%rip),%rax        # ffffffff82118000 <_ZL9pl4_table>
ffffffff80103eac:	48 89 c7             	mov    %rax,%rdi
ffffffff80103eaf:	e8 32 12 00 00       	callq  ffffffff801050e6 <_Z14set_paging_dirm>
    com_write_str("loading paging done");
ffffffff80103eb4:	48 c7 c7 71 62 10 80 	mov    $0xffffffff80106271,%rdi
ffffffff80103ebb:	e8 2e 0d 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>

}
ffffffff80103ec0:	90                   	nop
ffffffff80103ec1:	c9                   	leaveq 
ffffffff80103ec2:	c3                   	retq   

ffffffff80103ec3 <_Z19init_virtual_memoryP14stivale_struct>:
void init_virtual_memory(stivale_struct* sti_struct){
ffffffff80103ec3:	f3 0f 1e fa          	endbr64 
ffffffff80103ec7:	55                   	push   %rbp
ffffffff80103ec8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80103ecb:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80103ecf:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    e820_entry_t* mementry =(e820_entry_t*) sti_struct->memory_map_addr;
ffffffff80103ed3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103ed7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80103edb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    char buffer[64];
    memzero(buffer, sizeof(buffer));
ffffffff80103edf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103ee3:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103ee8:	48 89 c7             	mov    %rax,%rdi
ffffffff80103eeb:	e8 b5 11 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff80103ef0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80103ef7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103efa:	48 63 d0             	movslq %eax,%rdx
ffffffff80103efd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80103f01:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80103f05:	48 39 c2             	cmp    %rax,%rdx
ffffffff80103f08:	0f 83 21 02 00 00    	jae    ffffffff8010412f <_Z19init_virtual_memoryP14stivale_struct+0x26c>
    {
        com_write_str(" ============== ");
ffffffff80103f0e:	48 c7 c7 85 62 10 80 	mov    $0xffffffff80106285,%rdi
ffffffff80103f15:	e8 d4 0c 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>

        switch (mementry[i].type)
ffffffff80103f1a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103f1d:	48 63 d0             	movslq %eax,%rdx
ffffffff80103f20:	48 89 d0             	mov    %rdx,%rax
ffffffff80103f23:	48 01 c0             	add    %rax,%rax
ffffffff80103f26:	48 01 d0             	add    %rdx,%rax
ffffffff80103f29:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103f2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80103f30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103f34:	48 01 d0             	add    %rdx,%rax
ffffffff80103f37:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80103f3a:	83 f8 01             	cmp    $0x1,%eax
ffffffff80103f3d:	74 0c                	je     ffffffff80103f4b <_Z19init_virtual_memoryP14stivale_struct+0x88>
ffffffff80103f3f:	3d 01 10 00 00       	cmp    $0x1001,%eax
ffffffff80103f44:	74 13                	je     ffffffff80103f59 <_Z19init_virtual_memoryP14stivale_struct+0x96>
            break;
        case MEMMAP_KERNEL_AND_MODULES:
            com_write_str("kernel");
            break;
        default:
            continue;
ffffffff80103f46:	e9 db 01 00 00       	jmpq   ffffffff80104126 <_Z19init_virtual_memoryP14stivale_struct+0x263>
            com_write_str("memory usable");
ffffffff80103f4b:	48 c7 c7 96 62 10 80 	mov    $0xffffffff80106296,%rdi
ffffffff80103f52:	e8 97 0c 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
            break;
ffffffff80103f57:	eb 0d                	jmp    ffffffff80103f66 <_Z19init_virtual_memoryP14stivale_struct+0xa3>
            com_write_str("kernel");
ffffffff80103f59:	48 c7 c7 a4 62 10 80 	mov    $0xffffffff801062a4,%rdi
ffffffff80103f60:	e8 89 0c 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
            break;
ffffffff80103f65:	90                   	nop
            break;
        }
        max_mem += mementry[i].length;
ffffffff80103f66:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103f69:	48 63 d0             	movslq %eax,%rdx
ffffffff80103f6c:	48 89 d0             	mov    %rdx,%rax
ffffffff80103f6f:	48 01 c0             	add    %rax,%rax
ffffffff80103f72:	48 01 d0             	add    %rdx,%rax
ffffffff80103f75:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103f79:	48 89 c2             	mov    %rax,%rdx
ffffffff80103f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103f80:	48 01 d0             	add    %rdx,%rax
ffffffff80103f83:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80103f87:	48 8b 05 72 30 01 00 	mov    0x13072(%rip),%rax        # ffffffff80117000 <max_mem>
ffffffff80103f8e:	48 01 d0             	add    %rdx,%rax
ffffffff80103f91:	48 89 05 68 30 01 00 	mov    %rax,0x13068(%rip)        # ffffffff80117000 <max_mem>
        kitoaT<uint64_t>(buffer, 'x', mementry[i].base);
ffffffff80103f98:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103f9b:	48 63 d0             	movslq %eax,%rdx
ffffffff80103f9e:	48 89 d0             	mov    %rdx,%rax
ffffffff80103fa1:	48 01 c0             	add    %rax,%rax
ffffffff80103fa4:	48 01 d0             	add    %rdx,%rax
ffffffff80103fa7:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80103fab:	48 89 c2             	mov    %rax,%rdx
ffffffff80103fae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80103fb2:	48 01 d0             	add    %rdx,%rax
ffffffff80103fb5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80103fb8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103fbc:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80103fc1:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fc4:	e8 7f 11 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
        com_write_str(" memory start : ");
ffffffff80103fc9:	48 c7 c7 ab 62 10 80 	mov    $0xffffffff801062ab,%rdi
ffffffff80103fd0:	e8 19 0c 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff80103fd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103fd9:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fdc:	e8 0d 0c 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff80103fe1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80103fe5:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80103fea:	48 89 c7             	mov    %rax,%rdi
ffffffff80103fed:	e8 b3 10 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
         kitoaT<uint64_t>(buffer, 'x', mementry[i].length + mementry[i].base);
ffffffff80103ff2:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80103ff5:	48 63 d0             	movslq %eax,%rdx
ffffffff80103ff8:	48 89 d0             	mov    %rdx,%rax
ffffffff80103ffb:	48 01 c0             	add    %rax,%rax
ffffffff80103ffe:	48 01 d0             	add    %rdx,%rax
ffffffff80104001:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80104005:	48 89 c2             	mov    %rax,%rdx
ffffffff80104008:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010400c:	48 01 d0             	add    %rdx,%rax
ffffffff8010400f:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80104013:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104016:	48 63 d0             	movslq %eax,%rdx
ffffffff80104019:	48 89 d0             	mov    %rdx,%rax
ffffffff8010401c:	48 01 c0             	add    %rax,%rax
ffffffff8010401f:	48 01 d0             	add    %rdx,%rax
ffffffff80104022:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80104026:	48 89 c2             	mov    %rax,%rdx
ffffffff80104029:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010402d:	48 01 d0             	add    %rdx,%rax
ffffffff80104030:	48 8b 00             	mov    (%rax),%rax
ffffffff80104033:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80104037:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010403b:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80104040:	48 89 c7             	mov    %rax,%rdi
ffffffff80104043:	e8 00 11 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
        com_write_str(" memory end : ");
ffffffff80104048:	48 c7 c7 bc 62 10 80 	mov    $0xffffffff801062bc,%rdi
ffffffff8010404f:	e8 9a 0b 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff80104054:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80104058:	48 89 c7             	mov    %rax,%rdi
ffffffff8010405b:	e8 8e 0b 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff80104060:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80104064:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104069:	48 89 c7             	mov    %rax,%rdi
ffffffff8010406c:	e8 34 10 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buffer, 'x', mementry[i].length );
ffffffff80104071:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104074:	48 63 d0             	movslq %eax,%rdx
ffffffff80104077:	48 89 d0             	mov    %rdx,%rax
ffffffff8010407a:	48 01 c0             	add    %rax,%rax
ffffffff8010407d:	48 01 d0             	add    %rdx,%rax
ffffffff80104080:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80104084:	48 89 c2             	mov    %rax,%rdx
ffffffff80104087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010408b:	48 01 d0             	add    %rdx,%rax
ffffffff8010408e:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80104092:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80104096:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010409b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010409e:	e8 a5 10 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
        com_write_str(" memory lenght : ");
ffffffff801040a3:	48 c7 c7 cb 62 10 80 	mov    $0xffffffff801062cb,%rdi
ffffffff801040aa:	e8 3f 0b 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff801040af:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801040b3:	48 89 c7             	mov    %rax,%rdi
ffffffff801040b6:	e8 33 0b 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff801040bb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801040bf:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff801040c4:	48 89 c7             	mov    %rax,%rdi
ffffffff801040c7:	e8 d9 0f 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
        kitoaT<uint32_t>(buffer, 'x', mementry[i].type);
ffffffff801040cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801040cf:	48 63 d0             	movslq %eax,%rdx
ffffffff801040d2:	48 89 d0             	mov    %rdx,%rax
ffffffff801040d5:	48 01 c0             	add    %rax,%rax
ffffffff801040d8:	48 01 d0             	add    %rdx,%rax
ffffffff801040db:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff801040df:	48 89 c2             	mov    %rax,%rdx
ffffffff801040e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801040e6:	48 01 d0             	add    %rdx,%rax
ffffffff801040e9:	8b 50 10             	mov    0x10(%rax),%edx
ffffffff801040ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff801040f0:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff801040f5:	48 89 c7             	mov    %rax,%rdi
ffffffff801040f8:	e8 36 11 00 00       	callq  ffffffff80105233 <_Z6kitoaTIjEvPciT_>
        com_write_str(" memory type : ");
ffffffff801040fd:	48 c7 c7 dd 62 10 80 	mov    $0xffffffff801062dd,%rdi
ffffffff80104104:	e8 e5 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(buffer);
ffffffff80104109:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010410d:	48 89 c7             	mov    %rax,%rdi
ffffffff80104110:	e8 d9 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        memzero(buffer, sizeof(buffer));
ffffffff80104115:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80104119:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff8010411e:	48 89 c7             	mov    %rax,%rdi
ffffffff80104121:	e8 7f 0f 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
    for (int i = 0; i < sti_struct->memory_map_entries; i++)
ffffffff80104126:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff8010412a:	e9 c8 fd ff ff       	jmpq   ffffffff80103ef7 <_Z19init_virtual_memoryP14stivale_struct+0x34>
        
    }
    memzero(buffer, sizeof(buffer));
ffffffff8010412f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80104133:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104138:	48 89 c7             	mov    %rax,%rdi
ffffffff8010413b:	e8 65 0f 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
    kitoaT<uint64_t>(buffer, 'd', max_mem / 0xFFFFF);
ffffffff80104140:	48 8b 0d b9 2e 01 00 	mov    0x12eb9(%rip),%rcx        # ffffffff80117000 <max_mem>
ffffffff80104147:	48 ba 11 00 00 01 00 	movabs $0x100001000011,%rdx
ffffffff8010414e:	10 00 00 
ffffffff80104151:	48 89 c8             	mov    %rcx,%rax
ffffffff80104154:	48 f7 e2             	mul    %rdx
ffffffff80104157:	48 89 c8             	mov    %rcx,%rax
ffffffff8010415a:	48 29 d0             	sub    %rdx,%rax
ffffffff8010415d:	48 d1 e8             	shr    %rax
ffffffff80104160:	48 01 d0             	add    %rdx,%rax
ffffffff80104163:	48 c1 e8 13          	shr    $0x13,%rax
ffffffff80104167:	48 89 c2             	mov    %rax,%rdx
ffffffff8010416a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010416e:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff80104173:	48 89 c7             	mov    %rax,%rdi
ffffffff80104176:	e8 cd 0f 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
    com_write_str(" kernel memory (in Mb): ");
ffffffff8010417b:	48 c7 c7 ed 62 10 80 	mov    $0xffffffff801062ed,%rdi
ffffffff80104182:	e8 67 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(buffer);
ffffffff80104187:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff8010418b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010418e:	e8 5b 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>


    com_write_str("loading frame");
ffffffff80104193:	48 c7 c7 06 63 10 80 	mov    $0xffffffff80106306,%rdi
ffffffff8010419a:	e8 4f 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    init_frame(max_mem, sti_struct);
ffffffff8010419f:	48 8b 05 5a 2e 01 00 	mov    0x12e5a(%rip),%rax        # ffffffff80117000 <max_mem>
ffffffff801041a6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff801041aa:	48 89 d6             	mov    %rdx,%rsi
ffffffff801041ad:	48 89 c7             	mov    %rax,%rdi
ffffffff801041b0:	e8 04 f3 ff ff       	callq  ffffffff801034b9 <_Z10init_framemP14stivale_struct>



    com_write_str("loading paging");
ffffffff801041b5:	48 c7 c7 14 63 10 80 	mov    $0xffffffff80106314,%rdi
ffffffff801041bc:	e8 2d 0a 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    init_paging(sti_struct);
ffffffff801041c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff801041c5:	48 89 c7             	mov    %rax,%rdi
ffffffff801041c8:	e8 66 fa ff ff       	callq  ffffffff80103c33 <_Z11init_pagingP14stivale_struct>


}
ffffffff801041cd:	90                   	nop
ffffffff801041ce:	c9                   	leaveq 
ffffffff801041cf:	c3                   	retq   

ffffffff801041d0 <_Z8virt_mapmmm>:


void virt_map(uint64_t vaddress, uint64_t paddress, uint64_t flags ){
ffffffff801041d0:	f3 0f 1e fa          	endbr64 
ffffffff801041d4:	55                   	push   %rbp
ffffffff801041d5:	48 89 e5             	mov    %rsp,%rbp
ffffffff801041d8:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff801041dc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff801041e0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff801041e4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    
	uint64_t _pml4e_offset = PML4_GET_INDEX(vaddress);
ffffffff801041e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801041ec:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff801041f0:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff801041f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	uint64_t _pdpt_offset  = PDPT_GET_INDEX(vaddress);
ffffffff801041f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801041fd:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff80104201:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80104206:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	uint64_t _pd_offset   = PAGE_DIR_GET_INDEX(vaddress);
ffffffff8010420a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010420e:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80104212:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80104217:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    uint64_t _pt_offset = PAGE_TABLE_GET_INDEX(vaddress);
ffffffff8010421b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8010421f:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80104223:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80104228:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

    uint64_t* pdpt = 0x0;
ffffffff8010422c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80104233:	00 
    if(pl4_table[_pml4e_offset] & 0x1){
ffffffff80104234:	48 8b 05 c5 3d 01 02 	mov    0x2013dc5(%rip),%rax        # ffffffff82118000 <_ZL9pl4_table>
ffffffff8010423b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8010423f:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff80104243:	48 01 d0             	add    %rdx,%rax
ffffffff80104246:	48 8b 00             	mov    (%rax),%rax
ffffffff80104249:	83 e0 01             	and    $0x1,%eax
ffffffff8010424c:	48 85 c0             	test   %rax,%rax
ffffffff8010424f:	74 29                	je     ffffffff8010427a <_Z8virt_mapmmm+0xaa>

        pdpt =  (uint64_t *)get_mem_addr((pl4_table[_pml4e_offset] & 0xfffffffffffff000));
ffffffff80104251:	48 8b 05 a8 3d 01 02 	mov    0x2013da8(%rip),%rax        # ffffffff82118000 <_ZL9pl4_table>
ffffffff80104258:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8010425c:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff80104260:	48 01 d0             	add    %rdx,%rax
ffffffff80104263:	48 8b 00             	mov    (%rax),%rax
ffffffff80104266:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8010426c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010426f:	e8 f6 f0 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80104274:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80104278:	eb 40                	jmp    ffffffff801042ba <_Z8virt_mapmmm+0xea>
    }else{
        pdpt = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff8010427a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010427f:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80104284:	e8 2e f9 ff ff       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff80104289:	48 89 c7             	mov    %rax,%rdi
ffffffff8010428c:	e8 d9 f0 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80104291:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        pl4_table[_pml4e_offset] = (uint64_t)(get_rmem_addr((uint64_t)pdpt ) | 0b111);
ffffffff80104295:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104299:	48 89 c7             	mov    %rax,%rdi
ffffffff8010429c:	e8 ec f0 ff ff       	callq  ffffffff8010338d <_Z13get_rmem_addrm>
ffffffff801042a1:	48 8b 15 58 3d 01 02 	mov    0x2013d58(%rip),%rdx        # ffffffff82118000 <_ZL9pl4_table>
ffffffff801042a8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff801042ac:	48 c1 e1 03          	shl    $0x3,%rcx
ffffffff801042b0:	48 01 ca             	add    %rcx,%rdx
ffffffff801042b3:	48 83 c8 07          	or     $0x7,%rax
ffffffff801042b7:	48 89 02             	mov    %rax,(%rdx)
    }


    uint64_t* pd = 0x0;
ffffffff801042ba:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff801042c1:	00 
    if(pdpt[_pdpt_offset] & 0x1){
ffffffff801042c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801042c6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff801042cd:	00 
ffffffff801042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801042d2:	48 01 d0             	add    %rdx,%rax
ffffffff801042d5:	48 8b 00             	mov    (%rax),%rax
ffffffff801042d8:	83 e0 01             	and    $0x1,%eax
ffffffff801042db:	48 85 c0             	test   %rax,%rax
ffffffff801042de:	74 2a                	je     ffffffff8010430a <_Z8virt_mapmmm+0x13a>
        pd =  (uint64_t *)get_mem_addr((pdpt[_pdpt_offset] & 0xfffffffffffff000));
ffffffff801042e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff801042e4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff801042eb:	00 
ffffffff801042ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801042f0:	48 01 d0             	add    %rdx,%rax
ffffffff801042f3:	48 8b 00             	mov    (%rax),%rax
ffffffff801042f6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff801042fc:	48 89 c7             	mov    %rax,%rdi
ffffffff801042ff:	e8 66 f0 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80104304:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80104308:	eb 41                	jmp    ffffffff8010434b <_Z8virt_mapmmm+0x17b>
    }else{

        pd = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff8010430a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010430f:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80104314:	e8 9e f8 ff ff       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff80104319:	48 89 c7             	mov    %rax,%rdi
ffffffff8010431c:	e8 49 f0 ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80104321:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        pdpt[_pdpt_offset] = (uint64_t)(get_rmem_addr((uint64_t)pd ) | 0b111);
ffffffff80104325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104329:	48 89 c7             	mov    %rax,%rdi
ffffffff8010432c:	e8 5c f0 ff ff       	callq  ffffffff8010338d <_Z13get_rmem_addrm>
ffffffff80104331:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80104335:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff8010433c:	00 
ffffffff8010433d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80104341:	48 01 ca             	add    %rcx,%rdx
ffffffff80104344:	48 83 c8 07          	or     $0x7,%rax
ffffffff80104348:	48 89 02             	mov    %rax,(%rdx)
    }

    uint64_t* pt = 0x0;
ffffffff8010434b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80104352:	00 
    if(pdpt[_pd_offset] & 0x1){
ffffffff80104353:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104357:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8010435e:	00 
ffffffff8010435f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104363:	48 01 d0             	add    %rdx,%rax
ffffffff80104366:	48 8b 00             	mov    (%rax),%rax
ffffffff80104369:	83 e0 01             	and    $0x1,%eax
ffffffff8010436c:	48 85 c0             	test   %rax,%rax
ffffffff8010436f:	74 2a                	je     ffffffff8010439b <_Z8virt_mapmmm+0x1cb>
        pt =  (uint64_t *)get_mem_addr((pd[_pd_offset] & 0xfffffffffffff000));
ffffffff80104371:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80104375:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8010437c:	00 
ffffffff8010437d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104381:	48 01 d0             	add    %rdx,%rax
ffffffff80104384:	48 8b 00             	mov    (%rax),%rax
ffffffff80104387:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8010438d:	48 89 c7             	mov    %rax,%rdi
ffffffff80104390:	e8 d5 ef ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff80104395:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80104399:	eb 41                	jmp    ffffffff801043dc <_Z8virt_mapmmm+0x20c>
    }else{

        pt = (uint64_t*)get_mem_addr((uint64_t)alloc_multiple_frame_zero(1, true));
ffffffff8010439b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff801043a0:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff801043a5:	e8 0d f8 ff ff       	callq  ffffffff80103bb7 <_Z25alloc_multiple_frame_zeromb>
ffffffff801043aa:	48 89 c7             	mov    %rax,%rdi
ffffffff801043ad:	e8 b8 ef ff ff       	callq  ffffffff8010336a <_Z12get_mem_addrm>
ffffffff801043b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        pd[_pd_offset] = (uint64_t)(get_rmem_addr((uint64_t)pt ) | 0b111);
ffffffff801043b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801043ba:	48 89 c7             	mov    %rax,%rdi
ffffffff801043bd:	e8 cb ef ff ff       	callq  ffffffff8010338d <_Z13get_rmem_addrm>
ffffffff801043c2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff801043c6:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff801043cd:	00 
ffffffff801043ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff801043d2:	48 01 ca             	add    %rcx,%rdx
ffffffff801043d5:	48 83 c8 07          	or     $0x7,%rax
ffffffff801043d9:	48 89 02             	mov    %rax,(%rdx)
    }
    pt[_pt_offset] = (uint64_t)(paddress | flags);
ffffffff801043dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801043e0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff801043e7:	00 
ffffffff801043e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801043ec:	48 01 c2             	add    %rax,%rdx
ffffffff801043ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff801043f3:	48 0b 45 a8          	or     -0x58(%rbp),%rax
ffffffff801043f7:	48 89 02             	mov    %rax,(%rdx)

}
ffffffff801043fa:	90                   	nop
ffffffff801043fb:	c9                   	leaveq 
ffffffff801043fc:	c3                   	retq   

ffffffff801043fd <_Z8pic_initv>:
                  "1:\n\t" \
                  "    jmp 2f\n\t" \
                  "2:"); \
    } while (0)

void pic_init(){
ffffffff801043fd:	f3 0f 1e fa          	endbr64 
ffffffff80104401:	55                   	push   %rbp
ffffffff80104402:	48 89 e5             	mov    %rsp,%rbp
    outb(PIC1_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff80104405:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8010440a:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8010440f:	e8 fb 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104414:	eb 00                	jmp    ffffffff80104416 <_Z8pic_initv+0x19>
ffffffff80104416:	eb 00                	jmp    ffffffff80104418 <_Z8pic_initv+0x1b>
	outb(PIC2_COMMAND, ICW1_INIT|ICW1_ICW4); pic_wait();
ffffffff80104418:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8010441d:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80104422:	e8 e8 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104427:	eb 00                	jmp    ffffffff80104429 <_Z8pic_initv+0x2c>
ffffffff80104429:	eb 00                	jmp    ffffffff8010442b <_Z8pic_initv+0x2e>

	outb(PIC1_DATA, PIC1_OFFSET); pic_wait();
ffffffff8010442b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80104430:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80104435:	e8 d5 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff8010443a:	eb 00                	jmp    ffffffff8010443c <_Z8pic_initv+0x3f>
ffffffff8010443c:	eb 00                	jmp    ffffffff8010443e <_Z8pic_initv+0x41>
	outb(PIC2_DATA, PIC2_OFFSET); pic_wait();
ffffffff8010443e:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80104443:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80104448:	e8 c2 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff8010444d:	eb 00                	jmp    ffffffff8010444f <_Z8pic_initv+0x52>
ffffffff8010444f:	eb 00                	jmp    ffffffff80104451 <_Z8pic_initv+0x54>

	outb(PIC1_DATA, 0x04); pic_wait();
ffffffff80104451:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80104456:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8010445b:	e8 af 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104460:	eb 00                	jmp    ffffffff80104462 <_Z8pic_initv+0x65>
ffffffff80104462:	eb 00                	jmp    ffffffff80104464 <_Z8pic_initv+0x67>
	outb(PIC2_DATA, 0x02); pic_wait();
ffffffff80104464:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80104469:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8010446e:	e8 9c 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104473:	eb 00                	jmp    ffffffff80104475 <_Z8pic_initv+0x78>
ffffffff80104475:	eb 00                	jmp    ffffffff80104477 <_Z8pic_initv+0x7a>

	outb(PIC1_DATA, 0x01); pic_wait();
ffffffff80104477:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010447c:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80104481:	e8 89 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104486:	eb 00                	jmp    ffffffff80104488 <_Z8pic_initv+0x8b>
ffffffff80104488:	eb 00                	jmp    ffffffff8010448a <_Z8pic_initv+0x8d>
	outb(PIC2_DATA, 0x01); pic_wait();
ffffffff8010448a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8010448f:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80104494:	e8 76 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104499:	eb 00                	jmp    ffffffff8010449b <_Z8pic_initv+0x9e>
ffffffff8010449b:	eb 00                	jmp    ffffffff8010449d <_Z8pic_initv+0xa0>
    
	outb(PIC1_DATA, 0x00);
ffffffff8010449d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801044a2:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff801044a7:	e8 63 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
	outb(PIC2_DATA, 0x00);
ffffffff801044ac:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff801044b1:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff801044b6:	e8 54 0e 00 00       	callq  ffffffff8010530f <_Z4outbth>
}
ffffffff801044bb:	90                   	nop
ffffffff801044bc:	5d                   	pop    %rbp
ffffffff801044bd:	c3                   	retq   

ffffffff801044be <_Z8init_idtv>:
void init_idt(){
ffffffff801044be:	f3 0f 1e fa          	endbr64 
ffffffff801044c2:	55                   	push   %rbp
ffffffff801044c3:	48 89 e5             	mov    %rsp,%rbp
ffffffff801044c6:	48 83 ec 10          	sub    $0x10,%rsp
    com_write_str("loading idt");
ffffffff801044ca:	48 c7 c7 23 63 10 80 	mov    $0xffffffff80106323,%rdi
ffffffff801044d1:	e8 18 07 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("loading idt table");
ffffffff801044d6:	48 c7 c7 2f 63 10 80 	mov    $0xffffffff8010632f,%rdi
ffffffff801044dd:	e8 0c 07 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    for (int i = 0; i < 32+48; i++)
ffffffff801044e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff801044e9:	83 7d fc 4f          	cmpl   $0x4f,-0x4(%rbp)
ffffffff801044ed:	0f 8f c0 00 00 00    	jg     ffffffff801045b3 <_Z8init_idtv+0xf5>
    {
        idt[i] = IDT_ENTRY(__interrupt_vector[i], 0x08, INTGATE);
ffffffff801044f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff801044f6:	48 98                	cltq   
ffffffff801044f8:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff801044ff:	80 
ffffffff80104500:	89 c6                	mov    %eax,%esi
ffffffff80104502:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104505:	48 98                	cltq   
ffffffff80104507:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff8010450e:	80 
ffffffff8010450f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80104513:	89 c1                	mov    %eax,%ecx
ffffffff80104515:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104518:	48 98                	cltq   
ffffffff8010451a:	48 8b 04 c5 40 71 10 	mov    -0x7fef8ec0(,%rax,8),%rax
ffffffff80104521:	80 
ffffffff80104522:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80104526:	89 c2                	mov    %eax,%edx
ffffffff80104528:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010452b:	48 98                	cltq   
ffffffff8010452d:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80104531:	48 05 a0 80 11 82    	add    $0xffffffff821180a0,%rax
ffffffff80104537:	66 89 30             	mov    %si,(%rax)
ffffffff8010453a:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8010453d:	48 98                	cltq   
ffffffff8010453f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80104543:	48 05 a2 80 11 82    	add    $0xffffffff821180a2,%rax
ffffffff80104549:	66 c7 00 08 00       	movw   $0x8,(%rax)
ffffffff8010454e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104551:	48 98                	cltq   
ffffffff80104553:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80104557:	48 05 a4 80 11 82    	add    $0xffffffff821180a4,%rax
ffffffff8010455d:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80104560:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104563:	48 98                	cltq   
ffffffff80104565:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80104569:	48 05 a5 80 11 82    	add    $0xffffffff821180a5,%rax
ffffffff8010456f:	c6 00 8e             	movb   $0x8e,(%rax)
ffffffff80104572:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104575:	48 98                	cltq   
ffffffff80104577:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8010457b:	48 05 a6 80 11 82    	add    $0xffffffff821180a6,%rax
ffffffff80104581:	66 89 08             	mov    %cx,(%rax)
ffffffff80104584:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104587:	48 98                	cltq   
ffffffff80104589:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8010458d:	48 05 a8 80 11 82    	add    $0xffffffff821180a8,%rax
ffffffff80104593:	89 10                	mov    %edx,(%rax)
ffffffff80104595:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104598:	48 98                	cltq   
ffffffff8010459a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8010459e:	48 05 ac 80 11 82    	add    $0xffffffff821180ac,%rax
ffffffff801045a4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    for (int i = 0; i < 32+48; i++)
ffffffff801045aa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff801045ae:	e9 36 ff ff ff       	jmpq   ffffffff801044e9 <_Z8init_idtv+0x2b>
    }
    
    com_write_str("loading idt idt_flush");
ffffffff801045b3:	48 c7 c7 41 63 10 80 	mov    $0xffffffff80106341,%rdi
ffffffff801045ba:	e8 2f 06 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
     asm volatile("lidt [%0]" : : "m" (idt_descriptor));
ffffffff801045bf:	0f 01 1d 5a 2a 00 00 	lidt   0x2a5a(%rip)        # ffffffff80107020 <_ZL14idt_descriptor>
    com_write_str("loading pic");
ffffffff801045c6:	48 c7 c7 57 63 10 80 	mov    $0xffffffff80106357,%rdi
ffffffff801045cd:	e8 1c 06 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    pic_init();
ffffffff801045d2:	e8 26 fe ff ff       	callq  ffffffff801043fd <_Z8pic_initv>
    com_write_str("loading pic : OK");
ffffffff801045d7:	48 c7 c7 63 63 10 80 	mov    $0xffffffff80106363,%rdi
ffffffff801045de:	e8 0b 06 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str("loading idt : OK");
ffffffff801045e3:	48 c7 c7 74 63 10 80 	mov    $0xffffffff80106374,%rdi
ffffffff801045ea:	e8 ff 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    
    com_write_str("turning on interrupt : OK ");
ffffffff801045ef:	48 c7 c7 85 63 10 80 	mov    $0xffffffff80106385,%rdi
ffffffff801045f6:	e8 f3 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
};
ffffffff801045fb:	90                   	nop
ffffffff801045fc:	c9                   	leaveq 
ffffffff801045fd:	c3                   	retq   

ffffffff801045fe <_Z5dump1mPKc>:
    "Reserved",
    "Reserved"
};

char buff2[64];
void dump1(uint64_t reg, const char* name){
ffffffff801045fe:	f3 0f 1e fa          	endbr64 
ffffffff80104602:	55                   	push   %rbp
ffffffff80104603:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104606:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010460a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8010460e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
     memzero(buff2, 64);
ffffffff80104612:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104617:	48 c7 c7 20 80 11 82 	mov    $0xffffffff82118020,%rdi
ffffffff8010461e:	e8 82 0a 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buff2, 'x',reg);
ffffffff80104623:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104627:	48 89 c2             	mov    %rax,%rdx
ffffffff8010462a:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff8010462f:	48 c7 c7 20 80 11 82 	mov    $0xffffffff82118020,%rdi
ffffffff80104636:	e8 0d 0b 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
        com_write_strl(" | ");
ffffffff8010463b:	48 c7 c7 dc 64 10 80 	mov    $0xffffffff801064dc,%rdi
ffffffff80104642:	e8 09 06 00 00       	callq  ffffffff80104c50 <_Z14com_write_strlPKc>
        com_write_strl(name);
ffffffff80104647:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010464b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010464e:	e8 fd 05 00 00       	callq  ffffffff80104c50 <_Z14com_write_strlPKc>
        com_write_strl(" = ");
ffffffff80104653:	48 c7 c7 e0 64 10 80 	mov    $0xffffffff801064e0,%rdi
ffffffff8010465a:	e8 f1 05 00 00       	callq  ffffffff80104c50 <_Z14com_write_strlPKc>
        com_write_strl("0x");
ffffffff8010465f:	48 c7 c7 e4 64 10 80 	mov    $0xffffffff801064e4,%rdi
ffffffff80104666:	e8 e5 05 00 00       	callq  ffffffff80104c50 <_Z14com_write_strlPKc>
        com_write_strl(buff2);
ffffffff8010466b:	48 c7 c7 20 80 11 82 	mov    $0xffffffff82118020,%rdi
ffffffff80104672:	e8 d9 05 00 00       	callq  ffffffff80104c50 <_Z14com_write_strlPKc>
}
ffffffff80104677:	90                   	nop
ffffffff80104678:	c9                   	leaveq 
ffffffff80104679:	c3                   	retq   

ffffffff8010467a <_Z12dumpregisterP19InterruptStackFrame>:
void dumpregister(InterruptStackFrame* stck){
ffffffff8010467a:	f3 0f 1e fa          	endbr64 
ffffffff8010467e:	55                   	push   %rbp
ffffffff8010467f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104682:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104686:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    // this is the least readable code EVER
    com_write_str(" ===== cpu dump =====");
ffffffff8010468a:	48 c7 c7 e7 64 10 80 	mov    $0xffffffff801064e7,%rdi
ffffffff80104691:	e8 58 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(" ===== cs and ss =====");
ffffffff80104696:	48 c7 c7 fd 64 10 80 	mov    $0xffffffff801064fd,%rdi
ffffffff8010469d:	e8 4c 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->cs, "cs");
ffffffff801046a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801046a6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff801046ad:	48 c7 c6 14 65 10 80 	mov    $0xffffffff80106514,%rsi
ffffffff801046b4:	48 89 c7             	mov    %rax,%rdi
ffffffff801046b7:	e8 42 ff ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->ss, "ss");
ffffffff801046bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801046c0:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff801046c7:	48 c7 c6 17 65 10 80 	mov    $0xffffffff80106517,%rsi
ffffffff801046ce:	48 89 c7             	mov    %rax,%rdi
ffffffff801046d1:	e8 28 ff ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff801046d6:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff801046dd:	e8 0c 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(" ===== rx =====");
ffffffff801046e2:	48 c7 c7 1c 65 10 80 	mov    $0xffffffff8010651c,%rdi
ffffffff801046e9:	e8 00 05 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->r8, "r8");
ffffffff801046ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801046f2:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff801046f6:	48 c7 c6 2c 65 10 80 	mov    $0xffffffff8010652c,%rsi
ffffffff801046fd:	48 89 c7             	mov    %rax,%rdi
ffffffff80104700:	e8 f9 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->r9, "r9");
ffffffff80104705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104709:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8010470d:	48 c7 c6 2f 65 10 80 	mov    $0xffffffff8010652f,%rsi
ffffffff80104714:	48 89 c7             	mov    %rax,%rdi
ffffffff80104717:	e8 e2 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->r10, "r10");
ffffffff8010471c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104720:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80104724:	48 c7 c6 32 65 10 80 	mov    $0xffffffff80106532,%rsi
ffffffff8010472b:	48 89 c7             	mov    %rax,%rdi
ffffffff8010472e:	e8 cb fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80104733:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff8010473a:	e8 af 04 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->r11, "r11");
ffffffff8010473f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104743:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80104747:	48 c7 c6 36 65 10 80 	mov    $0xffffffff80106536,%rsi
ffffffff8010474e:	48 89 c7             	mov    %rax,%rdi
ffffffff80104751:	e8 a8 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->r12, "r12");
ffffffff80104756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010475a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8010475e:	48 c7 c6 3a 65 10 80 	mov    $0xffffffff8010653a,%rsi
ffffffff80104765:	48 89 c7             	mov    %rax,%rdi
ffffffff80104768:	e8 91 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->r13, "r13");
ffffffff8010476d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104771:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80104775:	48 c7 c6 3e 65 10 80 	mov    $0xffffffff8010653e,%rsi
ffffffff8010477c:	48 89 c7             	mov    %rax,%rdi
ffffffff8010477f:	e8 7a fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80104784:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff8010478b:	e8 5e 04 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->r14, "r14");
ffffffff80104790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104794:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80104798:	48 c7 c6 42 65 10 80 	mov    $0xffffffff80106542,%rsi
ffffffff8010479f:	48 89 c7             	mov    %rax,%rdi
ffffffff801047a2:	e8 57 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->r15, "r15");
ffffffff801047a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801047ab:	48 8b 00             	mov    (%rax),%rax
ffffffff801047ae:	48 c7 c6 46 65 10 80 	mov    $0xffffffff80106546,%rsi
ffffffff801047b5:	48 89 c7             	mov    %rax,%rdi
ffffffff801047b8:	e8 41 fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff801047bd:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff801047c4:	e8 25 04 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(" ===== utility =====");
ffffffff801047c9:	48 c7 c7 4a 65 10 80 	mov    $0xffffffff8010654a,%rdi
ffffffff801047d0:	e8 19 04 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->rsp, "rsp");
ffffffff801047d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801047d9:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff801047e0:	48 c7 c6 5f 65 10 80 	mov    $0xffffffff8010655f,%rsi
ffffffff801047e7:	48 89 c7             	mov    %rax,%rdi
ffffffff801047ea:	e8 0f fe ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rbp, "rbp");
ffffffff801047ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801047f3:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff801047f7:	48 c7 c6 63 65 10 80 	mov    $0xffffffff80106563,%rsi
ffffffff801047fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80104801:	e8 f8 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rdi, "rdi");
ffffffff80104806:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010480a:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff8010480e:	48 c7 c6 67 65 10 80 	mov    $0xffffffff80106567,%rsi
ffffffff80104815:	48 89 c7             	mov    %rax,%rdi
ffffffff80104818:	e8 e1 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff8010481d:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff80104824:	e8 c5 03 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->rsi, "rsi");
ffffffff80104829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010482d:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80104831:	48 c7 c6 6b 65 10 80 	mov    $0xffffffff8010656b,%rsi
ffffffff80104838:	48 89 c7             	mov    %rax,%rdi
ffffffff8010483b:	e8 be fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rdx, "rdx");
ffffffff80104840:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104844:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80104848:	48 c7 c6 6f 65 10 80 	mov    $0xffffffff8010656f,%rsi
ffffffff8010484f:	48 89 c7             	mov    %rax,%rdi
ffffffff80104852:	e8 a7 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rcx, "rcx");
ffffffff80104857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010485b:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff8010485f:	48 c7 c6 73 65 10 80 	mov    $0xffffffff80106573,%rsi
ffffffff80104866:	48 89 c7             	mov    %rax,%rdi
ffffffff80104869:	e8 90 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff8010486e:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff80104875:	e8 74 03 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->rbx, "rbx");
ffffffff8010487a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010487e:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80104882:	48 c7 c6 77 65 10 80 	mov    $0xffffffff80106577,%rsi
ffffffff80104889:	48 89 c7             	mov    %rax,%rdi
ffffffff8010488c:	e8 6d fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rax, "rax");
ffffffff80104891:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104895:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80104899:	48 c7 c6 7b 65 10 80 	mov    $0xffffffff8010657b,%rsi
ffffffff801048a0:	48 89 c7             	mov    %rax,%rdi
ffffffff801048a3:	e8 56 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff801048a8:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff801048af:	e8 3a 03 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(" ===== other =====");
ffffffff801048b4:	48 c7 c7 7f 65 10 80 	mov    $0xffffffff8010657f,%rdi
ffffffff801048bb:	e8 2e 03 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->error_code, "error_code");
ffffffff801048c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801048c4:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff801048c7:	89 c0                	mov    %eax,%eax
ffffffff801048c9:	48 c7 c6 92 65 10 80 	mov    $0xffffffff80106592,%rsi
ffffffff801048d0:	48 89 c7             	mov    %rax,%rdi
ffffffff801048d3:	e8 26 fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->int_no, "int_no");
ffffffff801048d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801048dc:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff801048df:	89 c0                	mov    %eax,%eax
ffffffff801048e1:	48 c7 c6 9d 65 10 80 	mov    $0xffffffff8010659d,%rsi
ffffffff801048e8:	48 89 c7             	mov    %rax,%rdi
ffffffff801048eb:	e8 0e fd ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff801048f0:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff801048f7:	e8 f2 02 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    dump1(stck->rip, "rip");
ffffffff801048fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104900:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104907:	48 c7 c6 a4 65 10 80 	mov    $0xffffffff801065a4,%rsi
ffffffff8010490e:	48 89 c7             	mov    %rax,%rdi
ffffffff80104911:	e8 e8 fc ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    dump1(stck->rflags, "rflags");
ffffffff80104916:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010491a:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80104921:	48 c7 c6 a8 65 10 80 	mov    $0xffffffff801065a8,%rsi
ffffffff80104928:	48 89 c7             	mov    %rax,%rdi
ffffffff8010492b:	e8 ce fc ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
    com_write_str(" ");
ffffffff80104930:	48 c7 c7 1a 65 10 80 	mov    $0xffffffff8010651a,%rdi
ffffffff80104937:	e8 b2 02 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(" ===== CRX =====");
ffffffff8010493c:	48 c7 c7 af 65 10 80 	mov    $0xffffffff801065af,%rdi
ffffffff80104943:	e8 a6 02 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>

    uint64_t CRX;
    asm volatile("mov %%cr2, %0" : "=r" (CRX));
ffffffff80104948:	0f 22 d0             	mov    %rax,%cr2
ffffffff8010494b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dump1(CRX, "CR2");
ffffffff8010494f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80104953:	48 c7 c6 c0 65 10 80 	mov    $0xffffffff801065c0,%rsi
ffffffff8010495a:	48 89 c7             	mov    %rax,%rdi
ffffffff8010495d:	e8 9c fc ff ff       	callq  ffffffff801045fe <_Z5dump1mPKc>
}
ffffffff80104962:	90                   	nop
ffffffff80104963:	c9                   	leaveq 
ffffffff80104964:	c3                   	retq   

ffffffff80104965 <_Z7pic_acki>:
void pic_ack(int intno)
{
ffffffff80104965:	f3 0f 1e fa          	endbr64 
ffffffff80104969:	55                   	push   %rbp
ffffffff8010496a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010496d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104971:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if (intno >= 40)
ffffffff80104974:	83 7d fc 27          	cmpl   $0x27,-0x4(%rbp)
ffffffff80104978:	7e 0f                	jle    ffffffff80104989 <_Z7pic_acki+0x24>
	{
		outb(0xA0, 0x20);
ffffffff8010497a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8010497f:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80104984:	e8 86 09 00 00       	callq  ffffffff8010530f <_Z4outbth>
	}

	outb(0x20, 0x20);
ffffffff80104989:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8010498e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80104993:	e8 77 09 00 00       	callq  ffffffff8010530f <_Z4outbth>
}
ffffffff80104998:	90                   	nop
ffffffff80104999:	c9                   	leaveq 
ffffffff8010499a:	c3                   	retq   

ffffffff8010499b <_Z8is_errori>:
    char buff[64];
bool is_error(int intno){
ffffffff8010499b:	f3 0f 1e fa          	endbr64 
ffffffff8010499f:	55                   	push   %rbp
ffffffff801049a0:	48 89 e5             	mov    %rsp,%rbp
ffffffff801049a3:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801049a7:	89 7d fc             	mov    %edi,-0x4(%rbp)
    if (intno > 31)
ffffffff801049aa:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff801049ae:	7e 07                	jle    ffffffff801049b7 <_Z8is_errori+0x1c>
    {
        return false;
ffffffff801049b0:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff801049b5:	eb 2a                	jmp    ffffffff801049e1 <_Z8is_errori+0x46>
    }
    // yeah i should do an array 
    if (intno == 1 || intno == 15 || (intno >= 21 && intno <= 29) || intno == 31)
ffffffff801049b7:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
ffffffff801049bb:	74 18                	je     ffffffff801049d5 <_Z8is_errori+0x3a>
ffffffff801049bd:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
ffffffff801049c1:	74 12                	je     ffffffff801049d5 <_Z8is_errori+0x3a>
ffffffff801049c3:	83 7d fc 14          	cmpl   $0x14,-0x4(%rbp)
ffffffff801049c7:	7e 06                	jle    ffffffff801049cf <_Z8is_errori+0x34>
ffffffff801049c9:	83 7d fc 1d          	cmpl   $0x1d,-0x4(%rbp)
ffffffff801049cd:	7e 06                	jle    ffffffff801049d5 <_Z8is_errori+0x3a>
ffffffff801049cf:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff801049d3:	75 07                	jne    ffffffff801049dc <_Z8is_errori+0x41>
    {
        return false;
ffffffff801049d5:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff801049da:	eb 05                	jmp    ffffffff801049e1 <_Z8is_errori+0x46>
    }
    return true;
ffffffff801049dc:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff801049e1:	c9                   	leaveq 
ffffffff801049e2:	c3                   	retq   

ffffffff801049e3 <interrupts_handler>:
extern "C" void interrupts_handler( InterruptStackFrame* stackframe){
ffffffff801049e3:	f3 0f 1e fa          	endbr64 
ffffffff801049e7:	55                   	push   %rbp
ffffffff801049e8:	48 89 e5             	mov    %rsp,%rbp
ffffffff801049eb:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801049ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    com_write_str("receive an interrupt");
ffffffff801049f3:	48 c7 c7 c4 65 10 80 	mov    $0xffffffff801065c4,%rdi
ffffffff801049fa:	e8 ef 01 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    if (is_error(stackframe->int_no))
ffffffff801049ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a03:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104a06:	89 c7                	mov    %eax,%edi
ffffffff80104a08:	e8 8e ff ff ff       	callq  ffffffff8010499b <_Z8is_errori>
ffffffff80104a0d:	84 c0                	test   %al,%al
ffffffff80104a0f:	0f 84 af 00 00 00    	je     ffffffff80104ac4 <interrupts_handler+0xe1>
    {
        for(int i = 0; i < stackframe->int_no * 320; i++){
ffffffff80104a15:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80104a1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a20:	8b 50 7c             	mov    0x7c(%rax),%edx
ffffffff80104a23:	89 d0                	mov    %edx,%eax
ffffffff80104a25:	c1 e0 02             	shl    $0x2,%eax
ffffffff80104a28:	01 d0                	add    %edx,%eax
ffffffff80104a2a:	c1 e0 06             	shl    $0x6,%eax
ffffffff80104a2d:	89 c2                	mov    %eax,%edx
ffffffff80104a2f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104a32:	39 c2                	cmp    %eax,%edx
ffffffff80104a34:	76 14                	jbe    ffffffff80104a4a <interrupts_handler+0x67>
            is_error(stackframe->int_no);
ffffffff80104a36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a3a:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104a3d:	89 c7                	mov    %eax,%edi
ffffffff80104a3f:	e8 57 ff ff ff       	callq  ffffffff8010499b <_Z8is_errori>
        for(int i = 0; i < stackframe->int_no * 320; i++){
ffffffff80104a44:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80104a48:	eb d2                	jmp    ffffffff80104a1c <interrupts_handler+0x39>
        }
        com_write_str("error fatal");
ffffffff80104a4a:	48 c7 c7 d9 65 10 80 	mov    $0xffffffff801065d9,%rdi
ffffffff80104a51:	e8 98 01 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(exception_messages[stackframe->int_no]);
ffffffff80104a56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a5a:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104a5d:	89 c0                	mov    %eax,%eax
ffffffff80104a5f:	48 8b 04 c5 40 70 10 	mov    -0x7fef8fc0(,%rax,8),%rax
ffffffff80104a66:	80 
ffffffff80104a67:	48 89 c7             	mov    %rax,%rdi
ffffffff80104a6a:	e8 7f 01 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        dumpregister(stackframe);
ffffffff80104a6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a73:	48 89 c7             	mov    %rax,%rdi
ffffffff80104a76:	e8 ff fb ff ff       	callq  ffffffff8010467a <_Z12dumpregisterP19InterruptStackFrame>
        memzero(buff, 64);
ffffffff80104a7b:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104a80:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104a87:	e8 19 06 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
        kitoaT<uint64_t>(buff, 'x', stackframe->rip);
ffffffff80104a8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104a90:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104a97:	48 89 c2             	mov    %rax,%rdx
ffffffff80104a9a:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80104a9f:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104aa6:	e8 9d 06 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>
        com_write_str("rip :");
ffffffff80104aab:	48 c7 c7 e5 65 10 80 	mov    $0xffffffff801065e5,%rdi
ffffffff80104ab2:	e8 37 01 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        com_write_str(buff);
ffffffff80104ab7:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104abe:	e8 2b 01 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
        asm volatile("hlt");
ffffffff80104ac3:	f4                   	hlt    
    }
    
    pic_ack(stackframe->int_no);
ffffffff80104ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104ac8:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104acb:	89 c7                	mov    %eax,%edi
ffffffff80104acd:	e8 93 fe ff ff       	callq  ffffffff80104965 <_Z7pic_acki>
    memzero(buff, 64);
ffffffff80104ad2:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104ad7:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104ade:	e8 c2 05 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
    kitoa(buff, 'd', stackframe->int_no);
ffffffff80104ae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104ae7:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80104aea:	89 c2                	mov    %eax,%edx
ffffffff80104aec:	be 64 00 00 00       	mov    $0x64,%esi
ffffffff80104af1:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104af8:	e8 37 08 00 00       	callq  ffffffff80105334 <_Z5kitoaPcii>
    
    com_write_str("id :");
ffffffff80104afd:	48 c7 c7 eb 65 10 80 	mov    $0xffffffff801065eb,%rdi
ffffffff80104b04:	e8 e5 00 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(buff);
ffffffff80104b09:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104b10:	e8 d9 00 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>


    memzero(buff, 64);
ffffffff80104b15:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80104b1a:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104b21:	e8 7f 05 00 00       	callq  ffffffff801050a5 <_Z7memzeroPvm>
    kitoaT<uint64_t>(buff, 'x', stackframe->rip);
ffffffff80104b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104b2a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80104b31:	48 89 c2             	mov    %rax,%rdx
ffffffff80104b34:	be 78 00 00 00       	mov    $0x78,%esi
ffffffff80104b39:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104b40:	e8 03 06 00 00       	callq  ffffffff80105148 <_Z6kitoaTImEvPciT_>

    com_write_str("rip :");
ffffffff80104b45:	48 c7 c7 e5 65 10 80 	mov    $0xffffffff801065e5,%rdi
ffffffff80104b4c:	e8 9d 00 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
    com_write_str(buff);
ffffffff80104b51:	48 c7 c7 60 80 11 82 	mov    $0xffffffff82118060,%rdi
ffffffff80104b58:	e8 91 00 00 00       	callq  ffffffff80104bee <_Z13com_write_strPKc>
}
ffffffff80104b5d:	90                   	nop
ffffffff80104b5e:	c9                   	leaveq 
ffffffff80104b5f:	c3                   	retq   

ffffffff80104b60 <_Z8com_putc8COM_PORTc>:
    while ((inb(port + 5) & 0x20) == 0)
    { 
    }
}
void com_putc(COM_PORT port, char c)
{
ffffffff80104b60:	f3 0f 1e fa          	endbr64 
ffffffff80104b64:	55                   	push   %rbp
ffffffff80104b65:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104b68:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104b6c:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff80104b6f:	89 f0                	mov    %esi,%eax
ffffffff80104b71:	88 45 f8             	mov    %al,-0x8(%rbp)
    com_wait_write(port);
ffffffff80104b74:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104b77:	89 c7                	mov    %eax,%edi
ffffffff80104b79:	e8 f7 08 00 00       	callq  ffffffff80105475 <_Z14com_wait_write8COM_PORT>
    outb(port, c); 
ffffffff80104b7e:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80104b82:	0f b6 d0             	movzbl %al,%edx
ffffffff80104b85:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104b88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104b8b:	89 d6                	mov    %edx,%esi
ffffffff80104b8d:	89 c7                	mov    %eax,%edi
ffffffff80104b8f:	e8 7b 07 00 00       	callq  ffffffff8010530f <_Z4outbth>
}
ffffffff80104b94:	90                   	nop
ffffffff80104b95:	c9                   	leaveq 
ffffffff80104b96:	c3                   	retq   

ffffffff80104b97 <_Z9com_write8COM_PORTPKvi>:

int com_write(COM_PORT port, const void *buffer, int size)
{   
ffffffff80104b97:	f3 0f 1e fa          	endbr64 
ffffffff80104b9b:	55                   	push   %rbp
ffffffff80104b9c:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104b9f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104ba3:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80104ba6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80104baa:	89 55 e8             	mov    %edx,-0x18(%rbp)
    const char * bufaddr = (const char*)buffer;
ffffffff80104bad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80104bb1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for (int i = 0; i < size; i++)
ffffffff80104bb5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80104bbc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104bbf:	3b 45 e8             	cmp    -0x18(%rbp),%eax
ffffffff80104bc2:	7d 25                	jge    ffffffff80104be9 <_Z9com_write8COM_PORTPKvi+0x52>
    {
        com_putc(port, (bufaddr)[i]);
ffffffff80104bc4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104bc7:	48 63 d0             	movslq %eax,%rdx
ffffffff80104bca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80104bce:	48 01 d0             	add    %rdx,%rax
ffffffff80104bd1:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104bd4:	0f be d0             	movsbl %al,%edx
ffffffff80104bd7:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80104bda:	89 d6                	mov    %edx,%esi
ffffffff80104bdc:	89 c7                	mov    %eax,%edi
ffffffff80104bde:	e8 7d ff ff ff       	callq  ffffffff80104b60 <_Z8com_putc8COM_PORTc>
    for (int i = 0; i < size; i++)
ffffffff80104be3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80104be7:	eb d3                	jmp    ffffffff80104bbc <_Z9com_write8COM_PORTPKvi+0x25>
    }


    return size;
ffffffff80104be9:	8b 45 e8             	mov    -0x18(%rbp),%eax
}
ffffffff80104bec:	c9                   	leaveq 
ffffffff80104bed:	c3                   	retq   

ffffffff80104bee <_Z13com_write_strPKc>:
void com_write_str( const char *buffer)
{
ffffffff80104bee:	f3 0f 1e fa          	endbr64 
ffffffff80104bf2:	55                   	push   %rbp
ffffffff80104bf3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104bf6:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104bfa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff80104bfe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104c05:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104c08:	48 63 d0             	movslq %eax,%rdx
ffffffff80104c0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104c0f:	48 01 d0             	add    %rdx,%rax
ffffffff80104c12:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104c15:	84 c0                	test   %al,%al
ffffffff80104c17:	74 25                	je     ffffffff80104c3e <_Z13com_write_strPKc+0x50>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff80104c19:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104c1c:	48 63 d0             	movslq %eax,%rdx
ffffffff80104c1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104c23:	48 01 d0             	add    %rdx,%rax
ffffffff80104c26:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104c29:	0f be c0             	movsbl %al,%eax
ffffffff80104c2c:	89 c6                	mov    %eax,%esi
ffffffff80104c2e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80104c33:	e8 28 ff ff ff       	callq  ffffffff80104b60 <_Z8com_putc8COM_PORTc>
        i++;
ffffffff80104c38:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104c3c:	eb c7                	jmp    ffffffff80104c05 <_Z13com_write_strPKc+0x17>
    }
    
    com_putc(COM_PORT::COM1,'\n');
ffffffff80104c3e:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80104c43:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80104c48:	e8 13 ff ff ff       	callq  ffffffff80104b60 <_Z8com_putc8COM_PORTc>
}
ffffffff80104c4d:	90                   	nop
ffffffff80104c4e:	c9                   	leaveq 
ffffffff80104c4f:	c3                   	retq   

ffffffff80104c50 <_Z14com_write_strlPKc>:
void com_write_strl( const char *buffer)
{
ffffffff80104c50:	f3 0f 1e fa          	endbr64 
ffffffff80104c54:	55                   	push   %rbp
ffffffff80104c55:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104c58:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80104c5c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int i = 0;
ffffffff80104c60:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104c67:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104c6a:	48 63 d0             	movslq %eax,%rdx
ffffffff80104c6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104c71:	48 01 d0             	add    %rdx,%rax
ffffffff80104c74:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104c77:	84 c0                	test   %al,%al
ffffffff80104c79:	74 25                	je     ffffffff80104ca0 <_Z14com_write_strlPKc+0x50>
    {
        com_putc(COM_PORT::COM1,buffer[i]);
ffffffff80104c7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104c7e:	48 63 d0             	movslq %eax,%rdx
ffffffff80104c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80104c85:	48 01 d0             	add    %rdx,%rax
ffffffff80104c88:	0f b6 00             	movzbl (%rax),%eax
ffffffff80104c8b:	0f be c0             	movsbl %al,%eax
ffffffff80104c8e:	89 c6                	mov    %eax,%esi
ffffffff80104c90:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80104c95:	e8 c6 fe ff ff       	callq  ffffffff80104b60 <_Z8com_putc8COM_PORTc>
        i++;
ffffffff80104c9a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while (buffer[i] != 0)
ffffffff80104c9e:	eb c7                	jmp    ffffffff80104c67 <_Z14com_write_strlPKc+0x17>
    }
    
}
ffffffff80104ca0:	90                   	nop
ffffffff80104ca1:	c9                   	leaveq 
ffffffff80104ca2:	c3                   	retq   

ffffffff80104ca3 <_Z14com_initialize8COM_PORT>:
void com_initialize(COM_PORT port)
{
ffffffff80104ca3:	f3 0f 1e fa          	endbr64 
ffffffff80104ca7:	55                   	push   %rbp
ffffffff80104ca8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80104cab:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80104caf:	89 7d fc             	mov    %edi,-0x4(%rbp)
    outb(port + 2, 0);
ffffffff80104cb2:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104cb5:	83 c0 02             	add    $0x2,%eax
ffffffff80104cb8:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104cbb:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80104cc0:	89 c7                	mov    %eax,%edi
ffffffff80104cc2:	e8 48 06 00 00       	callq  ffffffff8010530f <_Z4outbth>
    outb(port + 3, 1<<7);
ffffffff80104cc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104cca:	83 c0 03             	add    $0x3,%eax
ffffffff80104ccd:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104cd0:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80104cd5:	89 c7                	mov    %eax,%edi
ffffffff80104cd7:	e8 33 06 00 00       	callq  ffffffff8010530f <_Z4outbth>
    outb(port + 0,3);
ffffffff80104cdc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104cdf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104ce2:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80104ce7:	89 c7                	mov    %eax,%edi
ffffffff80104ce9:	e8 21 06 00 00       	callq  ffffffff8010530f <_Z4outbth>
    outb(port + 1, 0);
ffffffff80104cee:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104cf1:	83 c0 01             	add    $0x1,%eax
ffffffff80104cf4:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104cf7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80104cfc:	89 c7                	mov    %eax,%edi
ffffffff80104cfe:	e8 0c 06 00 00       	callq  ffffffff8010530f <_Z4outbth>
    outb(port + 3, 0x03);
ffffffff80104d03:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104d06:	83 c0 03             	add    $0x3,%eax
ffffffff80104d09:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104d0c:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80104d11:	89 c7                	mov    %eax,%edi
ffffffff80104d13:	e8 f7 05 00 00       	callq  ffffffff8010530f <_Z4outbth>
outb(port + 2, 0xC7); // No idea what this does :/
ffffffff80104d18:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104d1b:	83 c0 02             	add    $0x2,%eax
ffffffff80104d1e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104d21:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff80104d26:	89 c7                	mov    %eax,%edi
ffffffff80104d28:	e8 e2 05 00 00       	callq  ffffffff8010530f <_Z4outbth>
outb(port + 4, 0x0B); // No idea what this does either
ffffffff80104d2d:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80104d30:	83 c0 04             	add    $0x4,%eax
ffffffff80104d33:	0f b7 c0             	movzwl %ax,%eax
ffffffff80104d36:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80104d3b:	89 c7                	mov    %eax,%edi
ffffffff80104d3d:	e8 cd 05 00 00       	callq  ffffffff8010530f <_Z4outbth>
ffffffff80104d42:	90                   	nop
ffffffff80104d43:	c9                   	leaveq 
ffffffff80104d44:	c3                   	retq   
ffffffff80104d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80104d4c:	00 00 00 
ffffffff80104d4f:	90                   	nop

ffffffff80104d50 <idt_flush>:

[BITS 64]
section .text
global idt_flush
idt_flush:
    mov  rax, [rsp + 4]
ffffffff80104d50:	48 8b 44 24 04       	mov    0x4(%rsp),%rax
    lidt  [rax]
ffffffff80104d55:	0f 01 18             	lidt   (%rax)
    ret
ffffffff80104d58:	c3                   	retq   

ffffffff80104d59 <__interrupt_common>:
%endmacro

extern interrupts_handler

__interrupt_common:
    cli
ffffffff80104d59:	fa                   	cli    
    cld
ffffffff80104d5a:	fc                   	cld    
    push_all
ffffffff80104d5b:	50                   	push   %rax
ffffffff80104d5c:	53                   	push   %rbx
ffffffff80104d5d:	51                   	push   %rcx
ffffffff80104d5e:	52                   	push   %rdx
ffffffff80104d5f:	56                   	push   %rsi
ffffffff80104d60:	57                   	push   %rdi
ffffffff80104d61:	55                   	push   %rbp
ffffffff80104d62:	41 50                	push   %r8
ffffffff80104d64:	41 51                	push   %r9
ffffffff80104d66:	41 52                	push   %r10
ffffffff80104d68:	41 53                	push   %r11
ffffffff80104d6a:	41 54                	push   %r12
ffffffff80104d6c:	41 55                	push   %r13
ffffffff80104d6e:	41 56                	push   %r14
ffffffff80104d70:	41 57                	push   %r15
    

    mov rdi, rsp
ffffffff80104d72:	48 89 e7             	mov    %rsp,%rdi

    call interrupts_handler
ffffffff80104d75:	e8 69 fc ff ff       	callq  ffffffff801049e3 <interrupts_handler>

    pop_all
ffffffff80104d7a:	41 5f                	pop    %r15
ffffffff80104d7c:	41 5e                	pop    %r14
ffffffff80104d7e:	41 5d                	pop    %r13
ffffffff80104d80:	41 5c                	pop    %r12
ffffffff80104d82:	41 5b                	pop    %r11
ffffffff80104d84:	41 5a                	pop    %r10
ffffffff80104d86:	41 59                	pop    %r9
ffffffff80104d88:	41 58                	pop    %r8
ffffffff80104d8a:	5d                   	pop    %rbp
ffffffff80104d8b:	5f                   	pop    %rdi
ffffffff80104d8c:	5e                   	pop    %rsi
ffffffff80104d8d:	5a                   	pop    %rdx
ffffffff80104d8e:	59                   	pop    %rcx
ffffffff80104d8f:	5b                   	pop    %rbx
ffffffff80104d90:	58                   	pop    %rax

    add rsp, 8 ; pop errcode and int number
ffffffff80104d91:	48 83 c4 08          	add    $0x8,%rsp
    sti
ffffffff80104d95:	fb                   	sti    
    iretq
ffffffff80104d96:	48 cf                	iretq  

ffffffff80104d98 <__interrupt0>:
    

INTERRUPT_NOERR 0
ffffffff80104d98:	6a 00                	pushq  $0x0
ffffffff80104d9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
ffffffff80104da1:	00 
ffffffff80104da2:	eb b5                	jmp    ffffffff80104d59 <__interrupt_common>

ffffffff80104da4 <__interrupt1>:
INTERRUPT_NOERR 1
ffffffff80104da4:	6a 00                	pushq  $0x0
ffffffff80104da6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
ffffffff80104dad:	00 
ffffffff80104dae:	eb a9                	jmp    ffffffff80104d59 <__interrupt_common>

ffffffff80104db0 <__interrupt2>:
INTERRUPT_NOERR 2
ffffffff80104db0:	6a 00                	pushq  $0x0
ffffffff80104db2:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp)
ffffffff80104db9:	00 
ffffffff80104dba:	eb 9d                	jmp    ffffffff80104d59 <__interrupt_common>

ffffffff80104dbc <__interrupt3>:
INTERRUPT_NOERR 3
ffffffff80104dbc:	6a 00                	pushq  $0x0
ffffffff80104dbe:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%rsp)
ffffffff80104dc5:	00 
ffffffff80104dc6:	eb 91                	jmp    ffffffff80104d59 <__interrupt_common>

ffffffff80104dc8 <__interrupt4>:
INTERRUPT_NOERR 4
ffffffff80104dc8:	6a 00                	pushq  $0x0
ffffffff80104dca:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%rsp)
ffffffff80104dd1:	00 
ffffffff80104dd2:	eb 85                	jmp    ffffffff80104d59 <__interrupt_common>

ffffffff80104dd4 <__interrupt5>:
INTERRUPT_NOERR 5
ffffffff80104dd4:	6a 00                	pushq  $0x0
ffffffff80104dd6:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%rsp)
ffffffff80104ddd:	00 
ffffffff80104dde:	e9 76 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104de3 <__interrupt6>:
INTERRUPT_NOERR 6
ffffffff80104de3:	6a 00                	pushq  $0x0
ffffffff80104de5:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%rsp)
ffffffff80104dec:	00 
ffffffff80104ded:	e9 67 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104df2 <__interrupt7>:
INTERRUPT_NOERR 7
ffffffff80104df2:	6a 00                	pushq  $0x0
ffffffff80104df4:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%rsp)
ffffffff80104dfb:	00 
ffffffff80104dfc:	e9 58 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e01 <__interrupt8>:
INTERRUPT_ERR   8
ffffffff80104e01:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%rsp)
ffffffff80104e08:	00 
ffffffff80104e09:	e9 4b ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e0e <__interrupt9>:
INTERRUPT_NOERR 9
ffffffff80104e0e:	6a 00                	pushq  $0x0
ffffffff80104e10:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%rsp)
ffffffff80104e17:	00 
ffffffff80104e18:	e9 3c ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e1d <__interrupt10>:
INTERRUPT_ERR   10
ffffffff80104e1d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%rsp)
ffffffff80104e24:	00 
ffffffff80104e25:	e9 2f ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e2a <__interrupt11>:
INTERRUPT_ERR   11
ffffffff80104e2a:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%rsp)
ffffffff80104e31:	00 
ffffffff80104e32:	e9 22 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e37 <__interrupt12>:
INTERRUPT_ERR   12
ffffffff80104e37:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%rsp)
ffffffff80104e3e:	00 
ffffffff80104e3f:	e9 15 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e44 <__interrupt13>:
INTERRUPT_ERR   13
ffffffff80104e44:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%rsp)
ffffffff80104e4b:	00 
ffffffff80104e4c:	e9 08 ff ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e51 <__interrupt14>:
INTERRUPT_ERR   14
ffffffff80104e51:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%rsp)
ffffffff80104e58:	00 
ffffffff80104e59:	e9 fb fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e5e <__interrupt15>:
INTERRUPT_NOERR 15
ffffffff80104e5e:	6a 00                	pushq  $0x0
ffffffff80104e60:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%rsp)
ffffffff80104e67:	00 
ffffffff80104e68:	e9 ec fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e6d <__interrupt16>:
INTERRUPT_NOERR 16
ffffffff80104e6d:	6a 00                	pushq  $0x0
ffffffff80104e6f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%rsp)
ffffffff80104e76:	00 
ffffffff80104e77:	e9 dd fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e7c <__interrupt17>:
INTERRUPT_NOERR 17
ffffffff80104e7c:	6a 00                	pushq  $0x0
ffffffff80104e7e:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%rsp)
ffffffff80104e85:	00 
ffffffff80104e86:	e9 ce fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e8b <__interrupt18>:
INTERRUPT_NOERR 18
ffffffff80104e8b:	6a 00                	pushq  $0x0
ffffffff80104e8d:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%rsp)
ffffffff80104e94:	00 
ffffffff80104e95:	e9 bf fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104e9a <__interrupt19>:
INTERRUPT_NOERR 19
ffffffff80104e9a:	6a 00                	pushq  $0x0
ffffffff80104e9c:	c7 44 24 04 13 00 00 	movl   $0x13,0x4(%rsp)
ffffffff80104ea3:	00 
ffffffff80104ea4:	e9 b0 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ea9 <__interrupt20>:
INTERRUPT_NOERR 20
ffffffff80104ea9:	6a 00                	pushq  $0x0
ffffffff80104eab:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%rsp)
ffffffff80104eb2:	00 
ffffffff80104eb3:	e9 a1 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104eb8 <__interrupt21>:
INTERRUPT_NOERR 21
ffffffff80104eb8:	6a 00                	pushq  $0x0
ffffffff80104eba:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%rsp)
ffffffff80104ec1:	00 
ffffffff80104ec2:	e9 92 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ec7 <__interrupt22>:
INTERRUPT_NOERR 22
ffffffff80104ec7:	6a 00                	pushq  $0x0
ffffffff80104ec9:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%rsp)
ffffffff80104ed0:	00 
ffffffff80104ed1:	e9 83 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ed6 <__interrupt23>:
INTERRUPT_NOERR 23
ffffffff80104ed6:	6a 00                	pushq  $0x0
ffffffff80104ed8:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%rsp)
ffffffff80104edf:	00 
ffffffff80104ee0:	e9 74 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ee5 <__interrupt24>:
INTERRUPT_NOERR 24
ffffffff80104ee5:	6a 00                	pushq  $0x0
ffffffff80104ee7:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%rsp)
ffffffff80104eee:	00 
ffffffff80104eef:	e9 65 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ef4 <__interrupt25>:
INTERRUPT_NOERR 25
ffffffff80104ef4:	6a 00                	pushq  $0x0
ffffffff80104ef6:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
ffffffff80104efd:	00 
ffffffff80104efe:	e9 56 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f03 <__interrupt26>:
INTERRUPT_NOERR 26
ffffffff80104f03:	6a 00                	pushq  $0x0
ffffffff80104f05:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%rsp)
ffffffff80104f0c:	00 
ffffffff80104f0d:	e9 47 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f12 <__interrupt27>:
INTERRUPT_NOERR 27
ffffffff80104f12:	6a 00                	pushq  $0x0
ffffffff80104f14:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%rsp)
ffffffff80104f1b:	00 
ffffffff80104f1c:	e9 38 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f21 <__interrupt28>:
INTERRUPT_NOERR 28
ffffffff80104f21:	6a 00                	pushq  $0x0
ffffffff80104f23:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%rsp)
ffffffff80104f2a:	00 
ffffffff80104f2b:	e9 29 fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f30 <__interrupt29>:
INTERRUPT_NOERR 29
ffffffff80104f30:	6a 00                	pushq  $0x0
ffffffff80104f32:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%rsp)
ffffffff80104f39:	00 
ffffffff80104f3a:	e9 1a fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f3f <__interrupt30>:
INTERRUPT_ERR   30
ffffffff80104f3f:	c7 44 24 04 1e 00 00 	movl   $0x1e,0x4(%rsp)
ffffffff80104f46:	00 
ffffffff80104f47:	e9 0d fe ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f4c <__interrupt31>:
INTERRUPT_NOERR 31
ffffffff80104f4c:	6a 00                	pushq  $0x0
ffffffff80104f4e:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%rsp)
ffffffff80104f55:	00 
ffffffff80104f56:	e9 fe fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f5b <__interrupt32>:

INTERRUPT_NOERR 32
ffffffff80104f5b:	6a 00                	pushq  $0x0
ffffffff80104f5d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
ffffffff80104f64:	00 
ffffffff80104f65:	e9 ef fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f6a <__interrupt33>:
INTERRUPT_NOERR 33
ffffffff80104f6a:	6a 00                	pushq  $0x0
ffffffff80104f6c:	c7 44 24 04 21 00 00 	movl   $0x21,0x4(%rsp)
ffffffff80104f73:	00 
ffffffff80104f74:	e9 e0 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f79 <__interrupt34>:
INTERRUPT_NOERR 34
ffffffff80104f79:	6a 00                	pushq  $0x0
ffffffff80104f7b:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%rsp)
ffffffff80104f82:	00 
ffffffff80104f83:	e9 d1 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f88 <__interrupt35>:
INTERRUPT_NOERR 35
ffffffff80104f88:	6a 00                	pushq  $0x0
ffffffff80104f8a:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%rsp)
ffffffff80104f91:	00 
ffffffff80104f92:	e9 c2 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104f97 <__interrupt36>:
INTERRUPT_NOERR 36
ffffffff80104f97:	6a 00                	pushq  $0x0
ffffffff80104f99:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%rsp)
ffffffff80104fa0:	00 
ffffffff80104fa1:	e9 b3 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104fa6 <__interrupt37>:
INTERRUPT_NOERR 37
ffffffff80104fa6:	6a 00                	pushq  $0x0
ffffffff80104fa8:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%rsp)
ffffffff80104faf:	00 
ffffffff80104fb0:	e9 a4 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104fb5 <__interrupt38>:
INTERRUPT_NOERR 38
ffffffff80104fb5:	6a 00                	pushq  $0x0
ffffffff80104fb7:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%rsp)
ffffffff80104fbe:	00 
ffffffff80104fbf:	e9 95 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104fc4 <__interrupt39>:
INTERRUPT_NOERR 39
ffffffff80104fc4:	6a 00                	pushq  $0x0
ffffffff80104fc6:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%rsp)
ffffffff80104fcd:	00 
ffffffff80104fce:	e9 86 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104fd3 <__interrupt40>:
INTERRUPT_NOERR 40
ffffffff80104fd3:	6a 00                	pushq  $0x0
ffffffff80104fd5:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%rsp)
ffffffff80104fdc:	00 
ffffffff80104fdd:	e9 77 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104fe2 <__interrupt41>:
INTERRUPT_NOERR 41
ffffffff80104fe2:	6a 00                	pushq  $0x0
ffffffff80104fe4:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%rsp)
ffffffff80104feb:	00 
ffffffff80104fec:	e9 68 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80104ff1 <__interrupt42>:
INTERRUPT_NOERR 42
ffffffff80104ff1:	6a 00                	pushq  $0x0
ffffffff80104ff3:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%rsp)
ffffffff80104ffa:	00 
ffffffff80104ffb:	e9 59 fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff80105000 <__interrupt43>:
INTERRUPT_NOERR 43
ffffffff80105000:	6a 00                	pushq  $0x0
ffffffff80105002:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%rsp)
ffffffff80105009:	00 
ffffffff8010500a:	e9 4a fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010500f <__interrupt44>:
INTERRUPT_NOERR 44
ffffffff8010500f:	6a 00                	pushq  $0x0
ffffffff80105011:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%rsp)
ffffffff80105018:	00 
ffffffff80105019:	e9 3b fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010501e <__interrupt45>:
INTERRUPT_NOERR 45
ffffffff8010501e:	6a 00                	pushq  $0x0
ffffffff80105020:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%rsp)
ffffffff80105027:	00 
ffffffff80105028:	e9 2c fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010502d <__interrupt46>:
INTERRUPT_NOERR 46
ffffffff8010502d:	6a 00                	pushq  $0x0
ffffffff8010502f:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%rsp)
ffffffff80105036:	00 
ffffffff80105037:	e9 1d fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010503c <__interrupt47>:
INTERRUPT_NOERR 47
ffffffff8010503c:	6a 00                	pushq  $0x0
ffffffff8010503e:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%rsp)
ffffffff80105045:	00 
ffffffff80105046:	e9 0e fd ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010504b <__interrupt50>:

INTERRUPT_NOERR 50
ffffffff8010504b:	6a 00                	pushq  $0x0
ffffffff8010504d:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%rsp)
ffffffff80105054:	00 
ffffffff80105055:	e9 ff fc ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>

ffffffff8010505a <__interrupt127>:
INTERRUPT_NOERR 127
ffffffff8010505a:	6a 00                	pushq  $0x0
ffffffff8010505c:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%rsp)
ffffffff80105063:	00 
ffffffff80105064:	e9 f0 fc ff ff       	jmpq   ffffffff80104d59 <__interrupt_common>
ffffffff80105069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80105070 <tss_install>:
global tss_install
tss_install:
  push rbp
ffffffff80105070:	55                   	push   %rbp
  mov rbp, rsp
ffffffff80105071:	48 89 e5             	mov    %rsp,%rbp
  mov rax, rdi
ffffffff80105074:	48 89 f8             	mov    %rdi,%rax
  ltr ax
ffffffff80105077:	0f 00 d8             	ltr    %ax
  pop rbp
ffffffff8010507a:	5d                   	pop    %rbp
  ret
ffffffff8010507b:	c3                   	retq   
ffffffff8010507c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80105080 <gdtr_install>:

bits 64
global gdtr_install
gdtr_install:
  push rbp
ffffffff80105080:	55                   	push   %rbp
  mov rbp, rsp
ffffffff80105081:	48 89 e5             	mov    %rsp,%rbp
  lgdt [rdi]
ffffffff80105084:	0f 01 17             	lgdt   (%rdi)
  mov ax, 16
ffffffff80105087:	66 b8 10 00          	mov    $0x10,%ax
  mov ss, ax
ffffffff8010508b:	8e d0                	mov    %eax,%ss
  mov ds, ax
ffffffff8010508d:	8e d8                	mov    %eax,%ds
  mov es, ax
ffffffff8010508f:	8e c0                	mov    %eax,%es
  mov fs, ax
ffffffff80105091:	8e e0                	mov    %eax,%fs
  mov gs, ax
ffffffff80105093:	8e e8                	mov    %eax,%gs
  mov rax, qword .trampoline
ffffffff80105095:	48 b8 a3 50 10 80 ff 	movabs $0xffffffff801050a3,%rax
ffffffff8010509c:	ff ff ff 
  push rsi
ffffffff8010509f:	56                   	push   %rsi
  push rax
ffffffff801050a0:	50                   	push   %rax
  o64 retf
ffffffff801050a1:	48 cb                	lretq  

ffffffff801050a3 <gdtr_install.trampoline>:
.trampoline:
  pop rbp
ffffffff801050a3:	5d                   	pop    %rbp
ffffffff801050a4:	c3                   	retq   

ffffffff801050a5 <_Z7memzeroPvm>:
#pragma once
#include <int_value.h>
#include <stivale.h>
void _start(struct stivale_struct *bootloader_data) ;

inline void * memzero(void * s, uint64_t n) {
ffffffff801050a5:	f3 0f 1e fa          	endbr64 
ffffffff801050a9:	55                   	push   %rbp
ffffffff801050aa:	48 89 e5             	mov    %rsp,%rbp
ffffffff801050ad:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff801050b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff801050b5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    for (uint64_t i = 0; i < n; i++) ((uint8_t*)s)[i] = 0;
ffffffff801050b9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff801050c0:	00 
ffffffff801050c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801050c5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff801050c9:	73 15                	jae    ffffffff801050e0 <_Z7memzeroPvm+0x3b>
ffffffff801050cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff801050cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801050d3:	48 01 d0             	add    %rdx,%rax
ffffffff801050d6:	c6 00 00             	movb   $0x0,(%rax)
ffffffff801050d9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff801050de:	eb e1                	jmp    ffffffff801050c1 <_Z7memzeroPvm+0x1c>
    return s;
ffffffff801050e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff801050e4:	c9                   	leaveq 
ffffffff801050e5:	c3                   	retq   

ffffffff801050e6 <_Z14set_paging_dirm>:

void* alloc_multiple_frame(uint64_t count, bool fast = false );
void* alloc_multiple_frame_zero(uint64_t count, bool fast = false );
void virt_map(uint64_t vaddress, uint64_t paddress, uint64_t flags );

inline void set_paging_dir(uint64_t pd){
ffffffff801050e6:	f3 0f 1e fa          	endbr64 
ffffffff801050ea:	55                   	push   %rbp
ffffffff801050eb:	48 89 e5             	mov    %rsp,%rbp
ffffffff801050ee:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff801050f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    asm volatile ("mov %0, %%cr3":: "a"(pd): "memory");
ffffffff801050f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801050fa:	0f 20 d8             	mov    %cr3,%rax

}
ffffffff801050fd:	90                   	nop
ffffffff801050fe:	c9                   	leaveq 
ffffffff801050ff:	c3                   	retq   

ffffffff80105100 <liballoc_lock>:
 * It's up to you to decide. 
 *
 * \return 0 if the lock was acquired successfully. Anything else is
 * failure.
 */
inline int liballoc_lock(){
ffffffff80105100:	f3 0f 1e fa          	endbr64 
ffffffff80105104:	55                   	push   %rbp
ffffffff80105105:	48 89 e5             	mov    %rsp,%rbp
    asm volatile("cli");
ffffffff80105108:	fa                   	cli    
};
ffffffff80105109:	90                   	nop
ffffffff8010510a:	5d                   	pop    %rbp
ffffffff8010510b:	c3                   	retq   

ffffffff8010510c <liballoc_unlock>:
 * function.  If it disabled interrupts, it enables interrupts. If it
 * had acquiried a spinlock, it releases the spinlock. etc.
 *
 * \return 0 if the lock was successfully released.
 */
inline int liballoc_unlock(){
ffffffff8010510c:	f3 0f 1e fa          	endbr64 
ffffffff80105110:	55                   	push   %rbp
ffffffff80105111:	48 89 e5             	mov    %rsp,%rbp

    asm volatile("sti");
ffffffff80105114:	fb                   	sti    
}
ffffffff80105115:	90                   	nop
ffffffff80105116:	5d                   	pop    %rbp
ffffffff80105117:	c3                   	retq   

ffffffff80105118 <liballoc_alloc>:
 * required.  The page size was set up in the liballoc_init function.
 *
 * \return NULL if the pages were not allocated.
 * \return A pointer to the allocated memory.
 */
inline void* liballoc_alloc(int d){ // alloc x page
ffffffff80105118:	f3 0f 1e fa          	endbr64 
ffffffff8010511c:	55                   	push   %rbp
ffffffff8010511d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80105120:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80105124:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return nullptr;
ffffffff80105127:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8010512c:	c9                   	leaveq 
ffffffff8010512d:	c3                   	retq   

ffffffff8010512e <liballoc_free>:
 *
 * The integer value is the number of pages to free.
 *
 * \return 0 if the memory was successfully freed.
 */
inline int liballoc_free(void* addr,int d){
ffffffff8010512e:	f3 0f 1e fa          	endbr64 
ffffffff80105132:	55                   	push   %rbp
ffffffff80105133:	48 89 e5             	mov    %rsp,%rbp
ffffffff80105136:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8010513a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8010513e:	89 75 f4             	mov    %esi,-0xc(%rbp)
    return 0;
ffffffff80105141:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80105146:	c9                   	leaveq 
ffffffff80105147:	c3                   	retq   

ffffffff80105148 <_Z6kitoaTImEvPciT_>:
		p2--;
	}
}

template<class T>
inline void kitoaT(char* buf, int base, T d)
ffffffff80105148:	f3 0f 1e fa          	endbr64 
ffffffff8010514c:	55                   	push   %rbp
ffffffff8010514d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80105150:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff80105154:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80105158:	89 75 b4             	mov    %esi,-0x4c(%rbp)
ffffffff8010515b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	char* p = buf;
ffffffff8010515f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80105163:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	char* p1, * p2;
	T ud = d;
ffffffff80105167:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8010516b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	T divisor = 10;
ffffffff8010516f:	48 c7 45 d8 0a 00 00 	movq   $0xa,-0x28(%rbp)
ffffffff80105176:	00 
	{
		*p++ = '-';
		buf++;
		ud = -d;
	}
	else if (base == 'x')
ffffffff80105177:	83 7d b4 78          	cmpl   $0x78,-0x4c(%rbp)
ffffffff8010517b:	75 08                	jne    ffffffff80105185 <_Z6kitoaTImEvPciT_+0x3d>
		divisor = 16;
ffffffff8010517d:	48 c7 45 d8 10 00 00 	movq   $0x10,-0x28(%rbp)
ffffffff80105184:	00 

	/* Divide UD by DIVISOR until UD == 0. */
	do
	{
		T remainder = ud % divisor;
ffffffff80105185:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80105189:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8010518e:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff80105192:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)

		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80105196:	48 83 7d d0 09       	cmpq   $0x9,-0x30(%rbp)
ffffffff8010519b:	77 0b                	ja     ffffffff801051a8 <_Z6kitoaTImEvPciT_+0x60>
ffffffff8010519d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801051a1:	83 c0 30             	add    $0x30,%eax
ffffffff801051a4:	89 c1                	mov    %eax,%ecx
ffffffff801051a6:	eb 09                	jmp    ffffffff801051b1 <_Z6kitoaTImEvPciT_+0x69>
ffffffff801051a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff801051ac:	83 c0 57             	add    $0x57,%eax
ffffffff801051af:	89 c1                	mov    %eax,%ecx
ffffffff801051b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801051b5:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff801051b9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff801051bd:	88 08                	mov    %cl,(%rax)
	do
ffffffff801051bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801051c3:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801051c8:	48 f7 75 d8          	divq   -0x28(%rbp)
ffffffff801051cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff801051d0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff801051d5:	0f 95 c0             	setne  %al
ffffffff801051d8:	84 c0                	test   %al,%al
ffffffff801051da:	74 02                	je     ffffffff801051de <_Z6kitoaTImEvPciT_+0x96>
ffffffff801051dc:	eb a7                	jmp    ffffffff80105185 <_Z6kitoaTImEvPciT_+0x3d>
	} while (ud /= divisor);

	/* Terminate BUF. */
	*p = 0;
ffffffff801051de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801051e2:	c6 00 00             	movb   $0x0,(%rax)

	/* Reverse BUF. */
	p1 = buf;
ffffffff801051e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff801051e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff801051ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801051f1:	48 83 e8 01          	sub    $0x1,%rax
ffffffff801051f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff801051f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801051fd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80105201:	73 2d                	jae    ffffffff80105230 <_Z6kitoaTImEvPciT_+0xe8>
	{
		char tmp = *p1;
ffffffff80105203:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80105207:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010520a:	88 45 cf             	mov    %al,-0x31(%rbp)
		*p1 = *p2;
ffffffff8010520d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80105211:	0f b6 10             	movzbl (%rax),%edx
ffffffff80105214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80105218:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff8010521a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010521e:	0f b6 55 cf          	movzbl -0x31(%rbp),%edx
ffffffff80105222:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80105224:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80105229:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff8010522e:	eb c9                	jmp    ffffffff801051f9 <_Z6kitoaTImEvPciT_+0xb1>
	}
}
ffffffff80105230:	90                   	nop
ffffffff80105231:	c9                   	leaveq 
ffffffff80105232:	c3                   	retq   

ffffffff80105233 <_Z6kitoaTIjEvPciT_>:
inline void kitoaT(char* buf, int base, T d)
ffffffff80105233:	f3 0f 1e fa          	endbr64 
ffffffff80105237:	55                   	push   %rbp
ffffffff80105238:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010523b:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8010523f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80105243:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff80105246:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff80105249:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8010524d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	T ud = d;
ffffffff80105251:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80105254:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	T divisor = 10;
ffffffff80105257:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%rbp)
	else if (base == 'x')
ffffffff8010525e:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff80105262:	75 07                	jne    ffffffff8010526b <_Z6kitoaTIjEvPciT_+0x38>
		divisor = 16;
ffffffff80105264:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%rbp)
		T remainder = ud % divisor;
ffffffff8010526b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8010526e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80105273:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff80105276:	89 55 dc             	mov    %edx,-0x24(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff80105279:	83 7d dc 09          	cmpl   $0x9,-0x24(%rbp)
ffffffff8010527d:	77 0a                	ja     ffffffff80105289 <_Z6kitoaTIjEvPciT_+0x56>
ffffffff8010527f:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80105282:	83 c0 30             	add    $0x30,%eax
ffffffff80105285:	89 c1                	mov    %eax,%ecx
ffffffff80105287:	eb 08                	jmp    ffffffff80105291 <_Z6kitoaTIjEvPciT_+0x5e>
ffffffff80105289:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff8010528c:	83 c0 57             	add    $0x57,%eax
ffffffff8010528f:	89 c1                	mov    %eax,%ecx
ffffffff80105291:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80105295:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80105299:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8010529d:	88 08                	mov    %cl,(%rax)
	do
ffffffff8010529f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff801052a2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801052a7:	f7 75 e0             	divl   -0x20(%rbp)
ffffffff801052aa:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff801052ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff801052b1:	0f 95 c0             	setne  %al
ffffffff801052b4:	84 c0                	test   %al,%al
ffffffff801052b6:	74 02                	je     ffffffff801052ba <_Z6kitoaTIjEvPciT_+0x87>
ffffffff801052b8:	eb b1                	jmp    ffffffff8010526b <_Z6kitoaTIjEvPciT_+0x38>
	*p = 0;
ffffffff801052ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801052be:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff801052c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff801052c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff801052c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801052cd:	48 83 e8 01          	sub    $0x1,%rax
ffffffff801052d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff801052d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801052d9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff801052dd:	73 2d                	jae    ffffffff8010530c <_Z6kitoaTIjEvPciT_+0xd9>
		char tmp = *p1;
ffffffff801052df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801052e3:	0f b6 00             	movzbl (%rax),%eax
ffffffff801052e6:	88 45 db             	mov    %al,-0x25(%rbp)
		*p1 = *p2;
ffffffff801052e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801052ed:	0f b6 10             	movzbl (%rax),%edx
ffffffff801052f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff801052f4:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff801052f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff801052fa:	0f b6 55 db          	movzbl -0x25(%rbp),%edx
ffffffff801052fe:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80105300:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80105305:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff8010530a:	eb c9                	jmp    ffffffff801052d5 <_Z6kitoaTIjEvPciT_+0xa2>
}
ffffffff8010530c:	90                   	nop
ffffffff8010530d:	c9                   	leaveq 
ffffffff8010530e:	c3                   	retq   

ffffffff8010530f <_Z4outbth>:

#ifdef X64


inline void outb(uint16_t port, uint8_t value)
{
ffffffff8010530f:	f3 0f 1e fa          	endbr64 
ffffffff80105313:	55                   	push   %rbp
ffffffff80105314:	48 89 e5             	mov    %rsp,%rbp
ffffffff80105317:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8010531b:	89 f8                	mov    %edi,%eax
ffffffff8010531d:	89 f2                	mov    %esi,%edx
ffffffff8010531f:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
ffffffff80105323:	89 d0                	mov    %edx,%eax
ffffffff80105325:	88 45 f8             	mov    %al,-0x8(%rbp)
	asm volatile("out  dx, al"::"a"(value), "d"(port));
ffffffff80105328:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff8010532c:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx
ffffffff80105330:	ee                   	out    %al,(%dx)
}
ffffffff80105331:	90                   	nop
ffffffff80105332:	c9                   	leaveq 
ffffffff80105333:	c3                   	retq   

ffffffff80105334 <_Z5kitoaPcii>:
{
ffffffff80105334:	f3 0f 1e fa          	endbr64 
ffffffff80105338:	55                   	push   %rbp
ffffffff80105339:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010533c:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80105340:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80105344:	89 75 c4             	mov    %esi,-0x3c(%rbp)
ffffffff80105347:	89 55 c0             	mov    %edx,-0x40(%rbp)
	char* p = buf;
ffffffff8010534a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8010534e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	unsigned long ud = d;
ffffffff80105352:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80105355:	48 98                	cltq   
ffffffff80105357:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int divisor = 10;
ffffffff8010535b:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
	if (base == 'd' && d < 0)
ffffffff80105362:	83 7d c4 64          	cmpl   $0x64,-0x3c(%rbp)
ffffffff80105366:	75 27                	jne    ffffffff8010538f <_Z5kitoaPcii+0x5b>
ffffffff80105368:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
ffffffff8010536c:	79 21                	jns    ffffffff8010538f <_Z5kitoaPcii+0x5b>
		*p++ = '-';
ffffffff8010536e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80105372:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80105376:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8010537a:	c6 00 2d             	movb   $0x2d,(%rax)
		buf++;
ffffffff8010537d:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
		ud = -d;
ffffffff80105382:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80105385:	f7 d8                	neg    %eax
ffffffff80105387:	48 98                	cltq   
ffffffff80105389:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8010538d:	eb 0d                	jmp    ffffffff8010539c <_Z5kitoaPcii+0x68>
	else if (base == 'x')
ffffffff8010538f:	83 7d c4 78          	cmpl   $0x78,-0x3c(%rbp)
ffffffff80105393:	75 07                	jne    ffffffff8010539c <_Z5kitoaPcii+0x68>
		divisor = 16;
ffffffff80105395:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
		int remainder = ud % divisor;
ffffffff8010539c:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff8010539f:	48 63 c8             	movslq %eax,%rcx
ffffffff801053a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801053a6:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801053ab:	48 f7 f1             	div    %rcx
ffffffff801053ae:	48 89 d0             	mov    %rdx,%rax
ffffffff801053b1:	89 45 d8             	mov    %eax,-0x28(%rbp)
		*p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffffffff801053b4:	83 7d d8 09          	cmpl   $0x9,-0x28(%rbp)
ffffffff801053b8:	7f 0a                	jg     ffffffff801053c4 <_Z5kitoaPcii+0x90>
ffffffff801053ba:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff801053bd:	83 c0 30             	add    $0x30,%eax
ffffffff801053c0:	89 c1                	mov    %eax,%ecx
ffffffff801053c2:	eb 08                	jmp    ffffffff801053cc <_Z5kitoaPcii+0x98>
ffffffff801053c4:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff801053c7:	83 c0 57             	add    $0x57,%eax
ffffffff801053ca:	89 c1                	mov    %eax,%ecx
ffffffff801053cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff801053d0:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff801053d4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff801053d8:	88 08                	mov    %cl,(%rax)
	} while (ud /= divisor);
ffffffff801053da:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff801053dd:	48 63 f0             	movslq %eax,%rsi
ffffffff801053e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff801053e4:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff801053e9:	48 f7 f6             	div    %rsi
ffffffff801053ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff801053f0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff801053f5:	0f 95 c0             	setne  %al
ffffffff801053f8:	84 c0                	test   %al,%al
ffffffff801053fa:	74 02                	je     ffffffff801053fe <_Z5kitoaPcii+0xca>
	do
ffffffff801053fc:	eb 9e                	jmp    ffffffff8010539c <_Z5kitoaPcii+0x68>
	*p = 0;
ffffffff801053fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80105402:	c6 00 00             	movb   $0x0,(%rax)
	p1 = buf;
ffffffff80105405:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80105409:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	p2 = p - 1;
ffffffff8010540d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80105411:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80105415:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (p1 < p2)
ffffffff80105419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8010541d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80105421:	73 2d                	jae    ffffffff80105450 <_Z5kitoaPcii+0x11c>
		char tmp = *p1;
ffffffff80105423:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80105427:	0f b6 00             	movzbl (%rax),%eax
ffffffff8010542a:	88 45 d7             	mov    %al,-0x29(%rbp)
		*p1 = *p2;
ffffffff8010542d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80105431:	0f b6 10             	movzbl (%rax),%edx
ffffffff80105434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80105438:	88 10                	mov    %dl,(%rax)
		*p2 = tmp;
ffffffff8010543a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8010543e:	0f b6 55 d7          	movzbl -0x29(%rbp),%edx
ffffffff80105442:	88 10                	mov    %dl,(%rax)
		p1++;
ffffffff80105444:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
		p2--;
ffffffff80105449:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
	while (p1 < p2)
ffffffff8010544e:	eb c9                	jmp    ffffffff80105419 <_Z5kitoaPcii+0xe5>
}
ffffffff80105450:	90                   	nop
ffffffff80105451:	c9                   	leaveq 
ffffffff80105452:	c3                   	retq   

ffffffff80105453 <_Z3inbt>:
inline void outl(uint16_t port, uint32_t value)
{
	asm volatile("out  dx, eax"::"a"(value), "d"(port));
}
inline uint8_t inb(uint16_t port)
{
ffffffff80105453:	f3 0f 1e fa          	endbr64 
ffffffff80105457:	55                   	push   %rbp
ffffffff80105458:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010545b:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8010545f:	89 f8                	mov    %edi,%eax
ffffffff80105461:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
	uint8_t ret;
	asm volatile("in al, dx"
		: "=a"(ret)
		: "d"(port)
		);
ffffffff80105465:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80105469:	89 c2                	mov    %eax,%edx
ffffffff8010546b:	ec                   	in     (%dx),%al
ffffffff8010546c:	88 45 ff             	mov    %al,-0x1(%rbp)
	return ret;
ffffffff8010546f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff80105473:	c9                   	leaveq 
ffffffff80105474:	c3                   	retq   

ffffffff80105475 <_Z14com_wait_write8COM_PORT>:
{
ffffffff80105475:	f3 0f 1e fa          	endbr64 
ffffffff80105479:	55                   	push   %rbp
ffffffff8010547a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8010547d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80105481:	89 7d fc             	mov    %edi,-0x4(%rbp)
    while ((inb(port + 5) & 0x20) == 0)
ffffffff80105484:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80105487:	83 c0 05             	add    $0x5,%eax
ffffffff8010548a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8010548d:	89 c7                	mov    %eax,%edi
ffffffff8010548f:	e8 bf ff ff ff       	callq  ffffffff80105453 <_Z3inbt>
ffffffff80105494:	0f b6 c0             	movzbl %al,%eax
ffffffff80105497:	83 e0 20             	and    $0x20,%eax
ffffffff8010549a:	85 c0                	test   %eax,%eax
ffffffff8010549c:	0f 94 c0             	sete   %al
ffffffff8010549f:	84 c0                	test   %al,%al
ffffffff801054a1:	74 02                	je     ffffffff801054a5 <_Z14com_wait_write8COM_PORT+0x30>
ffffffff801054a3:	eb df                	jmp    ffffffff80105484 <_Z14com_wait_write8COM_PORT+0xf>
}
ffffffff801054a5:	90                   	nop
ffffffff801054a6:	c9                   	leaveq 
ffffffff801054a7:	c3                   	retq   
